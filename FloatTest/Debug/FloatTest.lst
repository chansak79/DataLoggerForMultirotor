
FloatTest.elf:     file format elf32-littlearm
FloatTest.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000189

Program Header:
0x70000001 off    0x0000da1c vaddr 0x08005a1c paddr 0x08005a1c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00008000 vaddr 0x08000000 paddr 0x08000000 align 2**15
         filesz 0x00005a24 memsz 0x00005a24 flags rwx
    LOAD off    0x00010000 vaddr 0x20000000 paddr 0x08005a24 align 2**15
         filesz 0x00000884 memsz 0x000009f4 flags rw-
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector   00000264  08000000  08000000  00008000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 ._inits       00000004  08000264  08000264  00008264  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .text         000057b4  08000268  08000268  00008268  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  08005a1c  08005a1c  0000da1c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000884  20000000  08005a24  00010000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000070  20000884  080062a8  00010884  2**2  ALLOC
  6 ._check_stack 00000100  200008f4  08006318  00010884  2**0  ALLOC
  7 .comment      00000070  00000000  00000000  00010884  2**0  CONTENTS, READONLY
  8 .ARM.attributes 00000031  00000000  00000000  000108f4  2**0  CONTENTS, READONLY
  9 .debug_aranges 00000788  00000000  00000000  00010925  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00004d16  00000000  00000000  000110ad  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000bc8  00000000  00000000  00015dc3  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000030d5  00000000  00000000  0001698b  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001f2c  00000000  00000000  00019a60  2**2  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00061d27  00000000  00000000  0001b98c  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006e8  00000000  00000000  0007d6b3  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010f0e  00000000  00000000  0007dd9b  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000264 l    d  ._inits	00000000 ._inits
08000268 l    d  .text	00000000 .text
08005a1c l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
20000884 l    d  .bss	00000000 .bss
200008f4 l    d  ._check_stack	00000000 ._check_stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 vectors_stm32f4xx.c
00000000 l    df *ABS*	00000000 startup_cm.c
00000000 l    df *ABS*	00000000 main.c
20000884 l     O .bss	00000032 str_buffer
00000000 l    df *ABS*	00000000 _sbrk.c
200008b8 l     O .bss	00000004 current_heap_end.4287
00000000 l    df *ABS*	00000000 startup_stm32f4xx.c
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
08000620 l     F .text	000000f4 SetSysClock
00000000 l    df *ABS*	00000000 stm32f4xx_gpio.c
00000000 l    df *ABS*	00000000 stm32f4xx_rcc.c
20000000 l     O .data	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 stm32f4xx_tim.c
00000000 l    df *ABS*	00000000 stm32f4xx_usart.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800589c l     O .text	00000010 zeroes.6763
080058f0 l     O .text	00000010 blanks.6762
00000000 l    df *ABS*	00000000 dtoa.c
08002b48 l     F .text	00000130 quorem
00000000 l    df *ABS*	00000000 locale.c
2000043c l     O .data	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
08005a10 l     O .text	0000000c p05.5269
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 impure.c
20000010 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 _Main_Stack_Size
08005a24 l       .ARM.exidx	00000000 __exidx_end
08005a24 l       .data	00000000 _etext
2001fc00 l       *ABS*	00000000 __Main_Stack_Limit
08000268 l       ._inits	00000000 __fini_array_end
08005a1c l       .text	00000000 __exidx_start
00000400 l       *ABS*	00000000 __Main_Stack_Size
00000100 l       *ABS*	00000000 _Minimum_Stack_Size
200008f4 l       ._check_stack	00000000 _end_noinit
08000268 l       ._inits	00000000 __fini_array_start
08000268 l       ._inits	00000000 __init_array_end
08000268 l       ._inits	00000000 __preinit_array_end
20020000 l       *ABS*	00000000 __stack
08000268 l       ._inits	00000000 __init_array_start
08000264 l       ._inits	00000000 __preinit_array_start
08000214  w    F .isr_vector	00000006 RTC_Alarm_IRQHandler
08000214  w    F .isr_vector	00000006 HASH_RNG_IRQHandler
08000214  w    F .isr_vector	00000006 EXTI2_IRQHandler
08000214  w    F .isr_vector	00000006 TIM8_CC_IRQHandler
08005230 g     F .text	00000012 .hidden __aeabi_dcmple
08005318 g     F .text	00000030 .hidden __gnu_uldivmod_helper
0800516c g     F .text	0000007a .hidden __cmpdf2
0800024c  w    F .isr_vector	00000006 DebugMon_Handler
08000868 g     F .text	0000008c GPIO_PinAFConfig
0800516c g     F .text	0000007a .hidden __eqdf2
08000264 g     O ._inits	00000004 p_system_init
0800534c g     F .text	00000296 .hidden __divdi3
20000000 g       .data	00000000 __data_start__
080010d8 g     F .text	0000005a .hidden __floatdidf
2001fc00 g       *ABS*	00000000 _Heap_Limit
08000214  w    F .isr_vector	00000006 TIM1_CC_IRQHandler
08000214  w    F .isr_vector	00000006 DMA2_Stream5_IRQHandler
08000224  w    F .isr_vector	00000006 HardFault_Handler
08000214  w    F .isr_vector	00000006 DMA1_Stream5_IRQHandler
080041b8 g     F .text	00000002 __malloc_unlock
0800025c  w    F .isr_vector	00000006 SysTick_Handler
08000214  w    F .isr_vector	00000006 PVD_IRQHandler
08000214  w    F .isr_vector	00000006 SDIO_IRQHandler
08004c3c g     F .text	000000c0 memmove
08000214  w    F .isr_vector	00000006 TAMP_STAMP_IRQHandler
08005a24 g       .data	00000000 _sidata
08000430 g     F .text	0000007c USART_init
08000254  w    F .isr_vector	00000006 PendSV_Handler
0800021c  w    F .isr_vector	00000006 NMI_Handler
080041bc g     F .text	0000004c _Balloc
080001cc g     F .isr_vector	00000048 system_init
08000214  w    F .isr_vector	00000006 CAN2_RX1_IRQHandler
08000214  w    F .isr_vector	00000006 EXTI3_IRQHandler
0800515c g     F .text	0000008a .hidden __gtdf2
080015f8 g     F .text	0000000c __errno
200008f4 g       ._check_stack	00000000 _Heap_Begin
08000214  w    F .isr_vector	00000006 TIM8_TRG_COM_TIM14_IRQHandler
08000214  w    F .isr_vector	00000006 TIM1_UP_TIM10_IRQHandler
200008f0 g     O .bss	00000004 errno
20000884 g       .bss	00000000 _sbss
080051f8 g     F .text	00000010 .hidden __aeabi_cdcmple
08000214  w    F .isr_vector	00000006 TIM8_UP_TIM13_IRQHandler
08000214  w    F .isr_vector	00000006 I2C3_ER_IRQHandler
08004080 g     F .text	00000134 memcpy
080051e8 g     F .text	00000020 .hidden __aeabi_cdrcmple
08001650 g     F .text	000014f8 _svfprintf_r
08001068 g     F .text	00000022 .hidden __floatsidf
08005164 g     F .text	00000082 .hidden __ltdf2
08000214  w    F .isr_vector	00000006 EXTI0_IRQHandler
08000214  w    F .isr_vector	00000006 I2C2_EV_IRQHandler
080052bc g     F .text	00000000 .hidden __aeabi_uldivmod
08000bd0 g     F .text	0000003e TIM_Cmd
200008f4 g       ._check_stack	00000000 _noinit
08000214  w    F .isr_vector	00000006 DMA1_Stream2_IRQHandler
08000214  w    F .isr_vector	00000006 CAN1_RX0_IRQHandler
08000214  w    F .isr_vector	00000006 FPU_IRQHandler
080047d0 g     F .text	00000050 __fpclassifyd
08000214  w    F .isr_vector	00000006 OTG_HS_WKUP_IRQHandler
08005920 g     O .text	000000c8 __mprec_tens
0800023c  w    F .isr_vector	00000006 UsageFault_Handler
08000ac0 g     F .text	0000003c RCC_APB2PeriphClockCmd
08000214  w    F .isr_vector	00000006 CAN2_SCE_IRQHandler
200008c4 g     O .bss	00000004 __malloc_top_pad
08000214  w    F .isr_vector	00000006 DMA2_Stream2_IRQHandler
08000714 g     F .text	0000011a GPIO_Init
20000884 g       .bss	00000000 __bss_start__
08001048 g     F .text	0000001e .hidden __aeabi_ui2d
08003ab0 g     F .text	00000008 _localeconv_r
08004350 g     F .text	00000012 __i2b
20000000 g       .data	00000000 _sdata
08000214  w    F .isr_vector	00000006 SPI1_IRQHandler
08000d84 g     F .text	0000003e USART_Cmd
08000dc4 g     F .text	00000000 .hidden __aeabi_drsub
08004820 g     F .text	00000024 _sbrk_r
08000214  w    F .isr_vector	00000006 TIM6_DAC_IRQHandler
08000214  w    F .isr_vector	00000006 TIM1_BRK_TIM9_IRQHandler
08000214  w    F .isr_vector	00000006 DCMI_IRQHandler
0800521c g     F .text	00000012 .hidden __aeabi_dcmplt
08000214  w    F .isr_vector	00000006 CAN2_RX0_IRQHandler
200008c0 g     O .bss	00000004 __malloc_max_sbrked_mem
0800108c g     F .text	0000003a .hidden __extendsfdf2
08001388 g     F .text	000001d0 .hidden __aeabi_ddiv
08000a84 g     F .text	0000003c RCC_APB1PeriphClockCmd
08000dd0 g     F .text	00000276 .hidden __adddf3
08000214  w    F .isr_vector	00000006 DMA2_Stream3_IRQHandler
08001134 g     F .text	00000254 .hidden __aeabi_dmul
08004d90 g     F .text	000003cc _realloc_r
08000514 g     F .text	0000006c __libc_init_array
080055e4 g     F .text	00000282 .hidden __udivdi3
080059e8 g     O .text	00000028 __mprec_bigtens
08001048 g     F .text	0000001e .hidden __floatunsidf
080004ac g     F .text	00000068 _sbrk
080045f8 g     F .text	00000046 __mcmp
08000214  w    F .isr_vector	00000006 USART6_IRQHandler
08001558 g     F .text	0000009e .hidden __aeabi_d2f
08000214  w    F .isr_vector	00000006 USART3_IRQHandler
08000214  w    F .isr_vector	00000006 CRYP_IRQHandler
08000580 g     F .text	0000003c __libc_fini_array
080003bc g     F .text	00000034 myDelay
200008f4 g       .bss	00000000 _ebss
08000188  w    F .isr_vector	00000044 Reset_Handler
080042b4 g     F .text	00000040 __hi0bits
08000214  w    F .isr_vector	00000006 CAN1_RX1_IRQHandler
0800526c g     F .text	0000004e .hidden __fixdfsi
08000214  w    F .isr_vector	00000006 UART5_IRQHandler
08000214  w    F .isr_vector	00000006 DMA2_Stream0_IRQHandler
08000830 g     F .text	0000001c GPIO_SetBits
08000214  w    F .isr_vector	00000006 TIM4_IRQHandler
08000dd0 g     F .text	00000276 .hidden __aeabi_dadd
08005164 g     F .text	00000082 .hidden __ledf2
080044a0 g     F .text	0000009c __pow5mult
080010c8 g     F .text	0000006a .hidden __aeabi_ul2d
08000214  w    F .isr_vector	00000006 I2C1_EV_IRQHandler
08000214  w    F .isr_vector	00000006 DMA1_Stream6_IRQHandler
20000884 g       .data	00000000 __data_end__
080008f4 g     F .text	00000154 RCC_GetClocksFreq
08005258 g     F .text	00000012 .hidden __aeabi_dcmpgt
08000214  w    F .isr_vector	00000006 DMA1_Stream1_IRQHandler
08000214  w    F .isr_vector	00000006 UART4_IRQHandler
08003ff0 g     F .text	00000090 memchr
08000c10 g     F .text	00000174 USART_Init
200008f4 g       .bss	00000000 __bss_end__
08004aa0 g     F .text	0000019c _free_r
08000214  w    F .isr_vector	00000006 TIM3_IRQHandler
08000214  w    F .isr_vector	00000006 RCC_IRQHandler
08005244 g     F .text	00000012 .hidden __aeabi_dcmpge
08000214  w    F .isr_vector	00000006 TIM8_BRK_TIM12_IRQHandler
08000dcc g     F .text	0000027a .hidden __aeabi_dsub
08000214  w    F .isr_vector	00000006 Default_Handler
20000880 g     O .data	00000004 __malloc_sbrk_base
080010c8 g     F .text	0000006a .hidden __floatundidf
0800453c g     F .text	000000bc __lshift
080048a4 g     F .text	00000100 __ssprint_r
08000214  w    F .isr_vector	00000006 EXTI15_10_IRQHandler
08000214  w    F .isr_vector	00000006 ADC_IRQHandler
08004364 g     F .text	0000013c __multiply
200008c8 g     O .bss	00000028 __malloc_current_mallinfo
08004714 g     F .text	000000ba __d2b
08000214  w    F .isr_vector	00000006 DMA1_Stream7_IRQHandler
0800084c g     F .text	0000001c GPIO_ResetBits
08000214  w    F .isr_vector	00000006 TIM7_IRQHandler
08000214  w    F .isr_vector	00000006 CAN2_TX_IRQHandler
08001068 g     F .text	00000022 .hidden __aeabi_i2d
08000214  w    F .isr_vector	00000006 TIM5_IRQHandler
08000214  w    F .isr_vector	00000006 DMA2_Stream7_IRQHandler
08000214  w    F .isr_vector	00000006 I2C3_EV_IRQHandler
08005348  w    F .text	00000002 .hidden __aeabi_ldiv0
08000214  w    F .isr_vector	00000006 EXTI9_5_IRQHandler
08001388 g     F .text	000001d0 .hidden __divdf3
08000214  w    F .isr_vector	00000006 RTC_WKUP_IRQHandler
20000474 g     O .data	00000408 __malloc_av_
08001134 g     F .text	00000254 .hidden __muldf3
08000214  w    F .isr_vector	00000006 ETH_WKUP_IRQHandler
080041b4 g     F .text	00000002 __malloc_lock
080003f0 g     F .text	00000040 Timer_init
080049a4 g     F .text	0000005e _calloc_r
08000214  w    F .isr_vector	00000006 SPI2_IRQHandler
08000214  w    F .isr_vector	00000006 OTG_HS_EP1_IN_IRQHandler
08004cfc g     F .text	00000094 memset
0800022c  w    F .isr_vector	00000006 MemManage_Handler
08000268 g     F .text	00000154 main
200008bc g     O .bss	00000004 __malloc_max_total_mem
08000214  w    F .isr_vector	00000006 DMA1_Stream0_IRQHandler
08000214  w    F .isr_vector	00000006 CAN1_TX_IRQHandler
08000244  w    F .isr_vector	00000006 SVC_Handler
08001558 g     F .text	0000009e .hidden __truncdfsf2
08002c78 g     F .text	00000e34 _dtoa_r
08003ab8 g     F .text	00000538 _malloc_r
080010d8 g     F .text	0000005a .hidden __aeabi_l2d
08000214  w    F .isr_vector	00000006 EXTI4_IRQHandler
08004a04 g     F .text	0000009c _malloc_trim_r
080005c8 g     F .text	00000058 SystemInit
0800516c g     F .text	0000007a .hidden __nedf2
08001604 g     F .text	0000004c sprintf
08000214  w    F .isr_vector	00000006 FSMC_IRQHandler
08000214  w    F .isr_vector	00000006 ETH_IRQHandler
20000438 g     O .data	00000004 _impure_ptr
08000214  w    F .isr_vector	00000006 OTG_HS_EP1_OUT_IRQHandler
08000214  w    F .isr_vector	00000006 WWDG_IRQHandler
08000214  w    F .isr_vector	00000006 TIM2_IRQHandler
08000214  w    F .isr_vector	00000006 OTG_FS_WKUP_IRQHandler
08000214  w    F .isr_vector	00000006 TIM1_TRG_COM_TIM11_IRQHandler
08000214  w    F .isr_vector	00000006 OTG_HS_IRQHandler
20020000 g       *ABS*	00000000 _estack
08000214  w    F .isr_vector	00000006 EXTI1_IRQHandler
08005208 g     F .text	00000012 .hidden __aeabi_dcmpeq
20000884 g       .data	00000000 _edata
08000afc g     F .text	000000d4 TIM_TimeBaseInit
08000214  w    F .isr_vector	00000006 USART2_IRQHandler
2000087c g     O .data	00000004 __malloc_trim_threshold
08000000 g     O .isr_vector	00000188 g_pfnVectors
08004640 g     F .text	000000d4 __mdiff
0800526c g     F .text	0000004e .hidden __aeabi_d2iz
08000214  w    F .isr_vector	00000006 I2C2_ER_IRQHandler
08000214  w    F .isr_vector	00000006 DMA2_Stream1_IRQHandler
08005348  w    F .text	00000002 .hidden __aeabi_idiv0
08000214  w    F .isr_vector	00000006 CAN1_SCE_IRQHandler
08000214  w    F .isr_vector	00000006 FLASH_IRQHandler
080005bc  w    F .text	0000000a _exit
08000214  w    F .isr_vector	00000006 DMA2_Stream4_IRQHandler
08000234  w    F .isr_vector	00000006 BusFault_Handler
08000a48 g     F .text	0000003c RCC_AHB1PeriphClockCmd
08000214  w    F .isr_vector	00000006 USART1_IRQHandler
08004844 g     F .text	0000005e strlen
08000214  w    F .isr_vector	00000006 OTG_FS_IRQHandler
08000214  w    F .isr_vector	00000006 SPI3_IRQHandler
080051f8 g     F .text	00000010 .hidden __aeabi_cdcmpeq
0800515c g     F .text	0000008a .hidden __gedf2
08000214  w    F .isr_vector	00000006 DMA1_Stream4_IRQHandler
080052e8 g     F .text	00000030 .hidden __gnu_ldivmod_helper
08000214  w    F .isr_vector	00000006 I2C1_ER_IRQHandler
0800108c g     F .text	0000003a .hidden __aeabi_f2d
08000dcc g     F .text	0000027a .hidden __subdf3
080042f4 g     F .text	0000005a __lo0bits
08000214  w    F .isr_vector	00000006 DMA2_Stream6_IRQHandler
08000214  w    F .isr_vector	00000006 DMA1_Stream3_IRQHandler
0800421c g     F .text	00000096 __multadd
08004208 g     F .text	00000012 _Bfree



Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
$d():
 8000000:	00 00 02 20 89 01 00 08 1d 02 00 08 25 02 00 08     ... ........%...
 8000010:	2d 02 00 08 35 02 00 08 3d 02 00 08 00 00 00 00     -...5...=.......
	...
 800002c:	45 02 00 08 4d 02 00 08 00 00 00 00 55 02 00 08     E...M.......U...
 800003c:	5d 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ]...............
 800004c:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 800005c:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 800006c:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 800007c:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 800008c:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 800009c:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 80000ac:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 80000bc:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 80000cc:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 80000dc:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 80000ec:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 80000fc:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 800010c:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 800011c:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 800012c:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 800013c:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 800014c:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 800015c:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 800016c:	15 02 00 08 15 02 00 08 15 02 00 08 15 02 00 08     ................
 800017c:	15 02 00 08 15 02 00 08 15 02 00 08                 ............

08000188 <Reset_Handler>:
Reset_Handler():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:217
}

// This is the place where Cortex-M core will go immediately after reset.
void __attribute__ ((section(".after_vectors")))
Reset_Handler(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
 800018e:	4b0d      	ldr	r3, [pc, #52]	; (80001c4 <Reset_Handler+0x3c>)
 8000190:	60bb      	str	r3, [r7, #8]
 8000192:	4b0d      	ldr	r3, [pc, #52]	; (80001c8 <Reset_Handler+0x40>)
 8000194:	607b      	str	r3, [r7, #4]
bss_init():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:118
__attribute__((always_inline))
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 8000196:	68bb      	ldr	r3, [r7, #8]
 8000198:	603b      	str	r3, [r7, #0]
 800019a:	e004      	b.n	80001a6 <Reset_Handler+0x1e>
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:120
  while (p < section_end)
    *p++ = 0;
 800019c:	683b      	ldr	r3, [r7, #0]
 800019e:	1d1a      	adds	r2, r3, #4
 80001a0:	603a      	str	r2, [r7, #0]
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:119
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 80001a6:	687a      	ldr	r2, [r7, #4]
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	429a      	cmp	r2, r3
 80001ac:	d8f6      	bhi.n	800019c <Reset_Handler+0x14>
Reset_Handler():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:227
  // Zero fill the bss segment
  bss_init(&__bss_start__, &__bss_end__);

  // Call the standard library initialisation (mandatory, SystemInit()
  // and C++ static constructors are called from here).
  __libc_init_array();
 80001ae:	f000 f9b1 	bl	8000514 <__libc_init_array>
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:230

  // Call the main entry point, and save the exit code.
  int r = main();
 80001b2:	f000 f859 	bl	8000268 <__fini_array_end>
 80001b6:	60f8      	str	r0, [r7, #12]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:233

  // Run the static destructors.
  __libc_fini_array();
 80001b8:	f000 f9e2 	bl	8000580 <__libc_fini_array>
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:238

  // On test platforms, like semihosting, this can be used to inform
  // the host on the test result.
  // On embedded platforms, usually reset the processor.
  _exit(r);
 80001bc:	68f8      	ldr	r0, [r7, #12]
 80001be:	f000 f9fd 	bl	80005bc <_exit>
 80001c2:	bf00      	nop
 80001c4:	20000884 	.word	0x20000884
 80001c8:	200008f4 	.word	0x200008f4

080001cc <system_init>:
system_init():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:248

// System initialisation, executed before constructors.
void
__attribute__((section(".after_vectors")))
system_init()
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4b0d      	ldr	r3, [pc, #52]	; (8000208 <system_init+0x3c>)
 80001d4:	60fb      	str	r3, [r7, #12]
 80001d6:	4b0d      	ldr	r3, [pc, #52]	; (800020c <system_init+0x40>)
 80001d8:	60bb      	str	r3, [r7, #8]
 80001da:	4b0d      	ldr	r3, [pc, #52]	; (8000210 <system_init+0x44>)
 80001dc:	607b      	str	r3, [r7, #4]
data_init():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:105
data_init(unsigned int* from, unsigned int* section_begin,
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 80001de:	68bb      	ldr	r3, [r7, #8]
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	e007      	b.n	80001f4 <system_init+0x28>
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:107
  while (p < section_end)
    *p++ = *from++;
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	1d1a      	adds	r2, r3, #4
 80001e8:	603a      	str	r2, [r7, #0]
 80001ea:	68fa      	ldr	r2, [r7, #12]
 80001ec:	1d11      	adds	r1, r2, #4
 80001ee:	60f9      	str	r1, [r7, #12]
 80001f0:	6812      	ldr	r2, [r2, #0]
 80001f2:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:106
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d8f3      	bhi.n	80001e4 <system_init+0x18>
system_init():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:256
  // so we must be sure it is executed somewhere.
  // (for example librdimon)
  data_init(&_sidata, &_sdata, &_edata);

  // Call the CSMSIS system initialisation routine
  SystemInit();
 80001fc:	f000 f9e4 	bl	80005c8 <SystemInit>
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:257
}
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	08005a24 	.word	0x08005a24
 800020c:	20000000 	.word	0x20000000
 8000210:	20000884 	.word	0x20000884

08000214 <ADC_IRQHandler>:
Default_Handler():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:432
//
//*****************************************************************************

void __attribute__ ((section(".after_vectors")))
Default_Handler(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:435 (discriminator 1)
  while (1)
    {
    }
 8000218:	e7fe      	b.n	8000218 <ADC_IRQHandler+0x4>
RTC_Alarm_IRQHandler():
 800021a:	bf00      	nop

0800021c <NMI_Handler>:
NMI_Handler():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:444
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
void __attribute__ ((section(".after_vectors")))
NMI_Handler(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:447 (discriminator 1)
  while (1)
    {
    }
 8000220:	e7fe      	b.n	8000220 <NMI_Handler+0x4>
 8000222:	bf00      	nop

08000224 <HardFault_Handler>:
HardFault_Handler():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:452
}

void __attribute__ ((section(".after_vectors")))
HardFault_Handler(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:455 (discriminator 1)
  while (1)
    {
    }
 8000228:	e7fe      	b.n	8000228 <HardFault_Handler+0x4>
 800022a:	bf00      	nop

0800022c <MemManage_Handler>:
MemManage_Handler():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:460
}

void __attribute__ ((section(".after_vectors")))
MemManage_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:463 (discriminator 1)
  while (1)
    {
    }
 8000230:	e7fe      	b.n	8000230 <MemManage_Handler+0x4>
 8000232:	bf00      	nop

08000234 <BusFault_Handler>:
BusFault_Handler():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:468
}

void __attribute__ ((section(".after_vectors")))
BusFault_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:471 (discriminator 1)
  while (1)
    {
    }
 8000238:	e7fe      	b.n	8000238 <BusFault_Handler+0x4>
 800023a:	bf00      	nop

0800023c <UsageFault_Handler>:
UsageFault_Handler():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:476
}

void __attribute__ ((section(".after_vectors")))
UsageFault_Handler(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:479 (discriminator 1)
  while (1)
    {
    }
 8000240:	e7fe      	b.n	8000240 <UsageFault_Handler+0x4>
 8000242:	bf00      	nop

08000244 <SVC_Handler>:
SVC_Handler():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:484
}

void __attribute__ ((section(".after_vectors")))
SVC_Handler(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:487 (discriminator 1)
  while (1)
    {
    }
 8000248:	e7fe      	b.n	8000248 <SVC_Handler+0x4>
 800024a:	bf00      	nop

0800024c <DebugMon_Handler>:
DebugMon_Handler():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:492
}

void __attribute__ ((section(".after_vectors")))
DebugMon_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:495 (discriminator 1)
  while (1)
    {
    }
 8000250:	e7fe      	b.n	8000250 <DebugMon_Handler+0x4>
 8000252:	bf00      	nop

08000254 <PendSV_Handler>:
PendSV_Handler():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:500
}

void __attribute__ ((section(".after_vectors")))
PendSV_Handler(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:503 (discriminator 1)
  while (1)
    {
    }
 8000258:	e7fe      	b.n	8000258 <PendSV_Handler+0x4>
 800025a:	bf00      	nop

0800025c <SysTick_Handler>:
SysTick_Handler():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:508
}

void __attribute__ ((section(".after_vectors")))
SysTick_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:511 (discriminator 1)
  while (1)
    {
    }
 8000260:	e7fe      	b.n	8000260 <SysTick_Handler+0x4>
 8000262:	bf00      	nop

Disassembly of section .text:

08000268 <main>:
main():
/home/chansak/workspace/FloatTest/Debug/../src/main.c:18
void myDelay				(uint32_t uS);

static char str_buffer[50];

int main(void)
{
 8000268:	b590      	push	{r4, r7, lr}
 800026a:	b087      	sub	sp, #28
 800026c:	af00      	add	r7, sp, #0
/home/chansak/workspace/FloatTest/Debug/../src/main.c:19
  Timer_init();
 800026e:	f000 f8bf 	bl	80003f0 <Timer_init>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:20
  USART_init();
 8000272:	f000 f8dd 	bl	8000430 <USART_init>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:22

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000276:	2008      	movs	r0, #8
 8000278:	2101      	movs	r1, #1
 800027a:	f000 fbe5 	bl	8000a48 <RCC_AHB1PeriphClockCmd>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:24
  GPIO_InitTypeDef  GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 |GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 800027e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000282:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:25
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000284:	2301      	movs	r3, #1
 8000286:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:26
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000288:	2300      	movs	r3, #0
 800028a:	71bb      	strb	r3, [r7, #6]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:27
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800028c:	2303      	movs	r3, #3
 800028e:	717b      	strb	r3, [r7, #5]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:28
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000290:	2300      	movs	r3, #0
 8000292:	71fb      	strb	r3, [r7, #7]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:29
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000294:	463b      	mov	r3, r7
 8000296:	4840      	ldr	r0, [pc, #256]	; (8000398 <__fini_array_end+0x130>)
 8000298:	4619      	mov	r1, r3
 800029a:	f000 fa3b 	bl	8000714 <GPIO_Init>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:32

  uint32_t timerValue;
  uint32_t sensorValue = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:38
  uint32_t result_1;
  float result_2;

  uint16_t i;
	while (1) {
		sensorValue = 0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:39
		i = 10000;
 80002a6:	f242 7310 	movw	r3, #10000	; 0x2710
 80002aa:	827b      	strh	r3, [r7, #18]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:41

		GPIO_ResetBits(GPIOD, GPIO_Pin_12);
 80002ac:	483a      	ldr	r0, [pc, #232]	; (8000398 <__fini_array_end+0x130>)
 80002ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002b2:	f000 facb 	bl	800084c <GPIO_ResetBits>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:44
		//timerValue = TIM2->CNT;

		while (i--) {
 80002b6:	e01e      	b.n	80002f6 <main+0x8e>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:45
			result_1 = ((sensorValue * 17) / 100);
 80002b8:	697a      	ldr	r2, [r7, #20]
 80002ba:	4613      	mov	r3, r2
 80002bc:	011b      	lsls	r3, r3, #4
 80002be:	441a      	add	r2, r3
 80002c0:	4b36      	ldr	r3, [pc, #216]	; (800039c <__fini_array_end+0x134>)
 80002c2:	fba3 1302 	umull	r1, r3, r3, r2
 80002c6:	095b      	lsrs	r3, r3, #5
 80002c8:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:46
			sensorValue++;
 80002ca:	697b      	ldr	r3, [r7, #20]
 80002cc:	3301      	adds	r3, #1
 80002ce:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:47
			sprintf(str_buffer, "int result = %d.%d \r\n", result_1/10,result_1%100);
 80002d0:	68fa      	ldr	r2, [r7, #12]
 80002d2:	4b33      	ldr	r3, [pc, #204]	; (80003a0 <__fini_array_end+0x138>)
 80002d4:	fba3 1302 	umull	r1, r3, r3, r2
 80002d8:	08dc      	lsrs	r4, r3, #3
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	4b2f      	ldr	r3, [pc, #188]	; (800039c <__fini_array_end+0x134>)
 80002de:	fba3 1302 	umull	r1, r3, r3, r2
 80002e2:	095b      	lsrs	r3, r3, #5
 80002e4:	2164      	movs	r1, #100	; 0x64
 80002e6:	fb01 f303 	mul.w	r3, r1, r3
 80002ea:	1ad3      	subs	r3, r2, r3
 80002ec:	482d      	ldr	r0, [pc, #180]	; (80003a4 <__fini_array_end+0x13c>)
 80002ee:	492e      	ldr	r1, [pc, #184]	; (80003a8 <__fini_array_end+0x140>)
 80002f0:	4622      	mov	r2, r4
 80002f2:	f001 f987 	bl	8001604 <sprintf>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:44 (discriminator 1)
		i = 10000;

		GPIO_ResetBits(GPIOD, GPIO_Pin_12);
		//timerValue = TIM2->CNT;

		while (i--) {
 80002f6:	8a7b      	ldrh	r3, [r7, #18]
 80002f8:	1e5a      	subs	r2, r3, #1
 80002fa:	827a      	strh	r2, [r7, #18]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d1db      	bne.n	80002b8 <main+0x50>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:50
			result_1 = ((sensorValue * 17) / 100);
			sensorValue++;
			sprintf(str_buffer, "int result = %d.%d \r\n", result_1/10,result_1%100);
		}

		GPIO_SetBits(GPIOD, GPIO_Pin_12);
 8000300:	4825      	ldr	r0, [pc, #148]	; (8000398 <__fini_array_end+0x130>)
 8000302:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000306:	f000 fa93 	bl	8000830 <GPIO_SetBits>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:57

		//USART_puts(USART1, str_buffer);
    	//sprintf(str_buffer, "Time int : %u uSec\r\n",(unsigned int)timerValue );
    	//USART_puts(USART1, str_buffer);

    	myDelay( 1000 );
 800030a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800030e:	f000 f855 	bl	80003bc <myDelay>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:59

    	sensorValue = 0;
 8000312:	2300      	movs	r3, #0
 8000314:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:60
		i = 10000;
 8000316:	f242 7310 	movw	r3, #10000	; 0x2710
 800031a:	827b      	strh	r3, [r7, #18]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:63

		//timerValue = TIM2->CNT;
		GPIO_ResetBits(GPIOD, GPIO_Pin_13);
 800031c:	481e      	ldr	r0, [pc, #120]	; (8000398 <__fini_array_end+0x130>)
 800031e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000322:	f000 fa93 	bl	800084c <GPIO_ResetBits>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:64
		while (i--) {
 8000326:	e028      	b.n	800037a <main+0x112>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:65
			result_2 = ((sensorValue * 17.0) / 1000);
 8000328:	6978      	ldr	r0, [r7, #20]
 800032a:	f000 fe8d 	bl	8001048 <__aeabi_ui2d>
 800032e:	4602      	mov	r2, r0
 8000330:	460b      	mov	r3, r1
 8000332:	4610      	mov	r0, r2
 8000334:	4619      	mov	r1, r3
 8000336:	f04f 0200 	mov.w	r2, #0
 800033a:	4b1c      	ldr	r3, [pc, #112]	; (80003ac <__fini_array_end+0x144>)
 800033c:	f000 fefa 	bl	8001134 <__aeabi_dmul>
 8000340:	4602      	mov	r2, r0
 8000342:	460b      	mov	r3, r1
 8000344:	4610      	mov	r0, r2
 8000346:	4619      	mov	r1, r3
 8000348:	f04f 0200 	mov.w	r2, #0
 800034c:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <__fini_array_end+0x148>)
 800034e:	f001 f81b 	bl	8001388 <__aeabi_ddiv>
 8000352:	4602      	mov	r2, r0
 8000354:	460b      	mov	r3, r1
 8000356:	4610      	mov	r0, r2
 8000358:	4619      	mov	r1, r3
 800035a:	f001 f8fd 	bl	8001558 <__aeabi_d2f>
 800035e:	4603      	mov	r3, r0
 8000360:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:66
			sensorValue++;
 8000362:	697b      	ldr	r3, [r7, #20]
 8000364:	3301      	adds	r3, #1
 8000366:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:67
			sprintf(str_buffer, "float result = %.2f \r\n", result_2);
 8000368:	68b8      	ldr	r0, [r7, #8]
 800036a:	f000 fe8f 	bl	800108c <__aeabi_f2d>
 800036e:	4602      	mov	r2, r0
 8000370:	460b      	mov	r3, r1
 8000372:	480c      	ldr	r0, [pc, #48]	; (80003a4 <__fini_array_end+0x13c>)
 8000374:	490f      	ldr	r1, [pc, #60]	; (80003b4 <__fini_array_end+0x14c>)
 8000376:	f001 f945 	bl	8001604 <sprintf>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:64 (discriminator 1)
    	sensorValue = 0;
		i = 10000;

		//timerValue = TIM2->CNT;
		GPIO_ResetBits(GPIOD, GPIO_Pin_13);
		while (i--) {
 800037a:	8a7b      	ldrh	r3, [r7, #18]
 800037c:	1e5a      	subs	r2, r3, #1
 800037e:	827a      	strh	r2, [r7, #18]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d1d1      	bne.n	8000328 <main+0xc0>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:69
			result_2 = ((sensorValue * 17.0) / 1000);
			sensorValue++;
			sprintf(str_buffer, "float result = %.2f \r\n", result_2);
		}
		GPIO_SetBits(GPIOD, GPIO_Pin_13);
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <__fini_array_end+0x130>)
 8000386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038a:	f000 fa51 	bl	8000830 <GPIO_SetBits>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:75
		//timerValue = TIM2->CNT - timerValue;

		//USART_puts(USART1, str_buffer);
    	//sprintf(str_buffer, "Time float : %u uSec\r\n\r\n",(unsigned int)timerValue );
    	//USART_puts(USART1, str_buffer);
    	myDelay( 5000000 );
 800038e:	480a      	ldr	r0, [pc, #40]	; (80003b8 <__fini_array_end+0x150>)
 8000390:	f000 f814 	bl	80003bc <myDelay>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:76
	}
 8000394:	e785      	b.n	80002a2 <main+0x3a>
 8000396:	bf00      	nop
 8000398:	40020c00 	.word	0x40020c00
 800039c:	51eb851f 	.word	0x51eb851f
 80003a0:	cccccccd 	.word	0xcccccccd
 80003a4:	20000884 	.word	0x20000884
 80003a8:	08005868 	.word	0x08005868
 80003ac:	40310000 	.word	0x40310000
 80003b0:	408f4000 	.word	0x408f4000
 80003b4:	08005880 	.word	0x08005880
 80003b8:	004c4b40 	.word	0x004c4b40

080003bc <myDelay>:
myDelay():
/home/chansak/workspace/FloatTest/Debug/../src/main.c:79
}
void myDelay(uint32_t uS)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:81
    uint32_t timerValue;
    uint32_t lastTime = TIM2->CNT;
 80003c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ca:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:84
    while(1)
    {
    	timerValue = TIM2->CNT;
 80003cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003d2:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:85
    	if( timerValue - lastTime > uS )
 80003d4:	68ba      	ldr	r2, [r7, #8]
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	1ad2      	subs	r2, r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d900      	bls.n	80003e2 <myDelay+0x26>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:87
    	{
    		break;
 80003e0:	e000      	b.n	80003e4 <myDelay+0x28>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:89
    	}
    }
 80003e2:	e7f3      	b.n	80003cc <myDelay+0x10>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:90
    return;
 80003e4:	bf00      	nop
/home/chansak/workspace/FloatTest/Debug/../src/main.c:91
}
 80003e6:	3714      	adds	r7, #20
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <Timer_init>:
Timer_init():
/home/chansak/workspace/FloatTest/Debug/../src/main.c:94
// Timer count 1uS
void Timer_init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
/home/chansak/workspace/FloatTest/Debug/../src/main.c:95
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80003f6:	2001      	movs	r0, #1
 80003f8:	2101      	movs	r1, #1
 80003fa:	f000 fb43 	bl	8000a84 <RCC_APB1PeriphClockCmd>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:98

  TIM_TimeBaseInitTypeDef timerInitStructure;
  timerInitStructure.TIM_Prescaler = 84 - 1;               // Timer Clock 84MHz
 80003fe:	2353      	movs	r3, #83	; 0x53
 8000400:	80bb      	strh	r3, [r7, #4]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:99
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	81bb      	strh	r3, [r7, #12]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:100
  timerInitStructure.TIM_Period = 0xFFFFFFFF - 1;
 8000406:	f06f 0301 	mvn.w	r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:101
  timerInitStructure.TIM_RepetitionCounter = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	73bb      	strb	r3, [r7, #14]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:102
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000410:	2300      	movs	r3, #0
 8000412:	80fb      	strh	r3, [r7, #6]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:103
  TIM_TimeBaseInit(TIM2, &timerInitStructure);
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800041a:	4619      	mov	r1, r3
 800041c:	f000 fb6e 	bl	8000afc <TIM_TimeBaseInit>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:104
  TIM_Cmd(TIM2, ENABLE);
 8000420:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000424:	2101      	movs	r1, #1
 8000426:	f000 fbd3 	bl	8000bd0 <TIM_Cmd>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:105
}
 800042a:	3710      	adds	r7, #16
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <USART_init>:
USART_init():
/home/chansak/workspace/FloatTest/Debug/../src/main.c:118
    *c++;
  }
}

void USART_init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
/home/chansak/workspace/FloatTest/Debug/../src/main.c:119
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000436:	2002      	movs	r0, #2
 8000438:	2101      	movs	r1, #1
 800043a:	f000 fb05 	bl	8000a48 <RCC_AHB1PeriphClockCmd>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:120
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 800043e:	2010      	movs	r0, #16
 8000440:	2101      	movs	r1, #1
 8000442:	f000 fb3d 	bl	8000ac0 <RCC_APB2PeriphClockCmd>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:123

  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8000446:	2340      	movs	r3, #64	; 0x40
 8000448:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:124
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800044a:	2302      	movs	r3, #2
 800044c:	753b      	strb	r3, [r7, #20]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:125
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800044e:	2301      	movs	r3, #1
 8000450:	75fb      	strb	r3, [r7, #23]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:126
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000452:	2300      	movs	r3, #0
 8000454:	75bb      	strb	r3, [r7, #22]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:127
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000456:	2302      	movs	r3, #2
 8000458:	757b      	strb	r3, [r7, #21]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:128
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	4811      	ldr	r0, [pc, #68]	; (80004a4 <USART_init+0x74>)
 8000460:	4619      	mov	r1, r3
 8000462:	f000 f957 	bl	8000714 <GPIO_Init>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:129
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
 8000466:	480f      	ldr	r0, [pc, #60]	; (80004a4 <USART_init+0x74>)
 8000468:	2106      	movs	r1, #6
 800046a:	2207      	movs	r2, #7
 800046c:	f000 f9fc 	bl	8000868 <GPIO_PinAFConfig>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:132

  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_BaudRate              = 115200;
 8000470:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000474:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:133
  USART_InitStructure.USART_WordLength            = USART_WordLength_8b;
 8000476:	2300      	movs	r3, #0
 8000478:	80bb      	strh	r3, [r7, #4]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:134
  USART_InitStructure.USART_StopBits              = USART_StopBits_1;
 800047a:	2300      	movs	r3, #0
 800047c:	80fb      	strh	r3, [r7, #6]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:135
  USART_InitStructure.USART_Parity                = USART_Parity_No;
 800047e:	2300      	movs	r3, #0
 8000480:	813b      	strh	r3, [r7, #8]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:136
  USART_InitStructure.USART_HardwareFlowControl   = USART_HardwareFlowControl_None;
 8000482:	2300      	movs	r3, #0
 8000484:	81bb      	strh	r3, [r7, #12]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:137
  USART_InitStructure.USART_Mode                  = USART_Mode_Tx;
 8000486:	2308      	movs	r3, #8
 8000488:	817b      	strh	r3, [r7, #10]
/home/chansak/workspace/FloatTest/Debug/../src/main.c:138
  USART_Init(USART1, &USART_InitStructure);
 800048a:	463b      	mov	r3, r7
 800048c:	4806      	ldr	r0, [pc, #24]	; (80004a8 <USART_init+0x78>)
 800048e:	4619      	mov	r1, r3
 8000490:	f000 fbbe 	bl	8000c10 <USART_Init>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:141

    /* Enable USART1 */
  USART_Cmd(USART1, ENABLE);
 8000494:	4804      	ldr	r0, [pc, #16]	; (80004a8 <USART_init+0x78>)
 8000496:	2101      	movs	r1, #1
 8000498:	f000 fc74 	bl	8000d84 <USART_Cmd>
/home/chansak/workspace/FloatTest/Debug/../src/main.c:142
}
 800049c:	3718      	adds	r7, #24
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40020400 	.word	0x40020400
 80004a8:	40011000 	.word	0x40011000

080004ac <_sbrk>:
_sbrk():
/home/chansak/workspace/FloatTest/Debug/../libs/misc/src/_sbrk.c:11
#include <sys/types.h>
#include <errno.h>

caddr_t
_sbrk(int incr)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/FloatTest/Debug/../libs/misc/src/_sbrk.c:17
  extern char _Heap_Begin; /* Defined by the linker. */
  extern char _Heap_Limit; /* Defined by the linker. */
  static char* current_heap_end;
  char* current_block_address;

  if (current_heap_end == 0)
 80004b4:	4b14      	ldr	r3, [pc, #80]	; (8000508 <_sbrk+0x5c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d102      	bne.n	80004c2 <_sbrk+0x16>
/home/chansak/workspace/FloatTest/Debug/../libs/misc/src/_sbrk.c:18
    current_heap_end = &_Heap_Begin;
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <_sbrk+0x5c>)
 80004be:	4a13      	ldr	r2, [pc, #76]	; (800050c <_sbrk+0x60>)
 80004c0:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/misc/src/_sbrk.c:20

  current_block_address = current_heap_end;
 80004c2:	4b11      	ldr	r3, [pc, #68]	; (8000508 <_sbrk+0x5c>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/FloatTest/Debug/../libs/misc/src/_sbrk.c:26

  // Need to align heap to word boundary, else will get
  // hard faults on Cortex-M0. So we assume that heap starts on
  // word boundary, hence make sure we always add a multiple of
  // 4 to it.
  incr = (incr + 3) & (~3); // align value to 4
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3303      	adds	r3, #3
 80004cc:	f023 0303 	bic.w	r3, r3, #3
 80004d0:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/FloatTest/Debug/../libs/misc/src/_sbrk.c:27
  if (current_heap_end + incr > &_Heap_Limit)
 80004d2:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <_sbrk+0x5c>)
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	441a      	add	r2, r3
 80004da:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <_sbrk+0x64>)
 80004dc:	429a      	cmp	r2, r3
 80004de:	d907      	bls.n	80004f0 <_sbrk+0x44>
/home/chansak/workspace/FloatTest/Debug/../libs/misc/src/_sbrk.c:39
      _write (1, "_sbrk: Heap and stack collision\n", 32);

      abort ();
#else
      // Heap has overflowed
      errno = ENOMEM;
 80004e0:	f001 f88a 	bl	80015f8 <__errno>
 80004e4:	4603      	mov	r3, r0
 80004e6:	220c      	movs	r2, #12
 80004e8:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/misc/src/_sbrk.c:40
      return (caddr_t) - 1;
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295
 80004ee:	e006      	b.n	80004fe <_sbrk+0x52>
/home/chansak/workspace/FloatTest/Debug/../libs/misc/src/_sbrk.c:44
#endif
    }

  current_heap_end += incr;
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <_sbrk+0x5c>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	441a      	add	r2, r3
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <_sbrk+0x5c>)
 80004fa:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/misc/src/_sbrk.c:46

  return (caddr_t) current_block_address;
 80004fc:	68fb      	ldr	r3, [r7, #12]
/home/chansak/workspace/FloatTest/Debug/../libs/misc/src/_sbrk.c:47
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200008b8 	.word	0x200008b8
 800050c:	200008f4 	.word	0x200008f4
 8000510:	2001fc00 	.word	0x2001fc00

08000514 <__libc_init_array>:
__libc_init_array():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:179
(*__fini_array_end[])(void) __attribute__((weak));

// Iterate over all the preinit/init routines.
inline void
__libc_init_array(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:183
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
 800051a:	4a15      	ldr	r2, [pc, #84]	; (8000570 <__libc_init_array+0x5c>)
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <__libc_init_array+0x60>)
 800051e:	1ad3      	subs	r3, r2, r3
 8000520:	109b      	asrs	r3, r3, #2
 8000522:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:184
  for (i = 0; i < count; i++)
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	e007      	b.n	800053a <__libc_init_array+0x26>
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:185 (discriminator 2)
    __preinit_array_start[i]();
 800052a:	4b12      	ldr	r3, [pc, #72]	; (8000574 <__libc_init_array+0x60>)
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000532:	4798      	blx	r3
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:184 (discriminator 2)
{
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3301      	adds	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:184 (discriminator 1)
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	429a      	cmp	r2, r3
 8000540:	d3f3      	bcc.n	800052a <__libc_init_array+0x16>
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:192
  // If you need to run the code in the .init section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
 8000542:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <__libc_init_array+0x64>)
 8000544:	4b0d      	ldr	r3, [pc, #52]	; (800057c <__libc_init_array+0x68>)
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	109b      	asrs	r3, r3, #2
 800054a:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:193
  for (i = 0; i < count; i++)
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	e007      	b.n	8000562 <__libc_init_array+0x4e>
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:194 (discriminator 2)
    __init_array_start[i]();
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <__libc_init_array+0x68>)
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800055a:	4798      	blx	r3
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:193 (discriminator 2)
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
  for (i = 0; i < count; i++)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3301      	adds	r3, #1
 8000560:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:193 (discriminator 1)
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	429a      	cmp	r2, r3
 8000568:	d3f3      	bcc.n	8000552 <__libc_init_array+0x3e>
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:195
    __init_array_start[i]();
}
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	08000268 	.word	0x08000268
 8000574:	08000264 	.word	0x08000264
 8000578:	08000268 	.word	0x08000268
 800057c:	08000268 	.word	0x08000268

08000580 <__libc_fini_array>:
__libc_fini_array():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:200

// Run all the cleanup routines.
inline void
__libc_fini_array(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:204
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
 8000586:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <__libc_fini_array+0x34>)
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <__libc_fini_array+0x38>)
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	109b      	asrs	r3, r3, #2
 800058e:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:205
  for (i = count; i > 0; i--)
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	e008      	b.n	80005a8 <__libc_fini_array+0x28>
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:206 (discriminator 2)
    __fini_array_start[i - 1]();
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	1e5a      	subs	r2, r3, #1
 800059a:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <__libc_fini_array+0x38>)
 800059c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005a0:	4798      	blx	r3
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:205 (discriminator 2)
{
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
  for (i = count; i > 0; i--)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	3b01      	subs	r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:205 (discriminator 1)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1f3      	bne.n	8000596 <__libc_fini_array+0x16>
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_cm.c:212

  // If you need to run the code in the .fini section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_fini();
}
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	08000268 	.word	0x08000268
 80005b8:	08000268 	.word	0x08000268

080005bc <_exit>:
_exit():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_stm32f4xx.c:44
// You can redefine it in the application, if more functionality
// is required
void
__attribute__((weak))
_exit(int r)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/startup_stm32f4xx.c:47 (discriminator 1)
#if defined(DEBUG)
  while(1)
  ;
 80005c4:	e7fe      	b.n	80005c4 <_exit+0x8>
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
SystemInit():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:344
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:351
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <SystemInit+0x4c>)
 80005ce:	4a11      	ldr	r2, [pc, #68]	; (8000614 <SystemInit+0x4c>)
 80005d0:	6812      	ldr	r2, [r2, #0]
 80005d2:	f042 0201 	orr.w	r2, r2, #1
 80005d6:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:354

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <SystemInit+0x4c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:357

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005de:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <SystemInit+0x4c>)
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <SystemInit+0x4c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ec:	6013      	str	r3, [r2, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:360

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <SystemInit+0x4c>)
 80005f0:	4a09      	ldr	r2, [pc, #36]	; (8000618 <SystemInit+0x50>)
 80005f2:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:363

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <SystemInit+0x4c>)
 80005f6:	4a07      	ldr	r2, [pc, #28]	; (8000614 <SystemInit+0x4c>)
 80005f8:	6812      	ldr	r2, [r2, #0]
 80005fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005fe:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:366

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <SystemInit+0x4c>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:374
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000606:	f000 f80b 	bl	8000620 <SetSysClock>
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:380

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800060a:	4b04      	ldr	r3, [pc, #16]	; (800061c <SystemInit+0x54>)
 800060c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000610:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:382
#endif
}
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	24003010 	.word	0x24003010
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <SetSysClock>:
SetSysClock():
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:477
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:481
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	2300      	movs	r3, #0
 800062c:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:484
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800062e:	4b35      	ldr	r3, [pc, #212]	; (8000704 <SetSysClock+0xe4>)
 8000630:	4a34      	ldr	r2, [pc, #208]	; (8000704 <SetSysClock+0xe4>)
 8000632:	6812      	ldr	r2, [r2, #0]
 8000634:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000638:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:489 (discriminator 1)
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800063a:	4b32      	ldr	r3, [pc, #200]	; (8000704 <SetSysClock+0xe4>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000642:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:490 (discriminator 1)
    StartUpCounter++;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3301      	adds	r3, #1
 8000648:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:491 (discriminator 1)
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d103      	bne.n	8000658 <SetSysClock+0x38>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000656:	d1f0      	bne.n	800063a <SetSysClock+0x1a>
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:493

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000658:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <SetSysClock+0xe4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <SetSysClock+0x4a>
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:495
  {
    HSEStatus = (uint32_t)0x01;
 8000664:	2301      	movs	r3, #1
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	e001      	b.n	800066e <SetSysClock+0x4e>
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:499
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800066a:	2300      	movs	r3, #0
 800066c:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:502
  }

  if (HSEStatus == (uint32_t)0x01)
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d142      	bne.n	80006fa <SetSysClock+0xda>
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:505
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <SetSysClock+0xe4>)
 8000676:	4a23      	ldr	r2, [pc, #140]	; (8000704 <SetSysClock+0xe4>)
 8000678:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800067a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800067e:	641a      	str	r2, [r3, #64]	; 0x40
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:506
    PWR->CR |= PWR_CR_VOS;
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <SetSysClock+0xe8>)
 8000682:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SetSysClock+0xe8>)
 8000684:	6812      	ldr	r2, [r2, #0]
 8000686:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800068a:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:509

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800068c:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <SetSysClock+0xe4>)
 800068e:	4a1d      	ldr	r2, [pc, #116]	; (8000704 <SetSysClock+0xe4>)
 8000690:	6892      	ldr	r2, [r2, #8]
 8000692:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:513

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000694:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <SetSysClock+0xe4>)
 8000696:	4a1b      	ldr	r2, [pc, #108]	; (8000704 <SetSysClock+0xe4>)
 8000698:	6892      	ldr	r2, [r2, #8]
 800069a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800069e:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:516
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <SetSysClock+0xe4>)
 80006a2:	4a18      	ldr	r2, [pc, #96]	; (8000704 <SetSysClock+0xe4>)
 80006a4:	6892      	ldr	r2, [r2, #8]
 80006a6:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80006aa:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:528
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <SetSysClock+0xe4>)
 80006ae:	4a17      	ldr	r2, [pc, #92]	; (800070c <SetSysClock+0xec>)
 80006b0:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:532
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <SetSysClock+0xe4>)
 80006b4:	4a13      	ldr	r2, [pc, #76]	; (8000704 <SetSysClock+0xe4>)
 80006b6:	6812      	ldr	r2, [r2, #0]
 80006b8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80006bc:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:535

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80006be:	bf00      	nop
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:535 (discriminator 1)
 80006c0:	4b10      	ldr	r3, [pc, #64]	; (8000704 <SetSysClock+0xe4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d0f9      	beq.n	80006c0 <SetSysClock+0xa0>
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:555
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <SetSysClock+0xf0>)
 80006ce:	f240 7205 	movw	r2, #1797	; 0x705
 80006d2:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:564
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80006d4:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <SetSysClock+0xe4>)
 80006d6:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <SetSysClock+0xe4>)
 80006d8:	6892      	ldr	r2, [r2, #8]
 80006da:	f022 0203 	bic.w	r2, r2, #3
 80006de:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:565
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <SetSysClock+0xe4>)
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <SetSysClock+0xe4>)
 80006e4:	6892      	ldr	r2, [r2, #8]
 80006e6:	f042 0202 	orr.w	r2, r2, #2
 80006ea:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:568

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80006ec:	bf00      	nop
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:568 (discriminator 1)
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <SetSysClock+0xe4>)
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	f003 030c 	and.w	r3, r3, #12
 80006f6:	2b08      	cmp	r3, #8
 80006f8:	d1f9      	bne.n	80006ee <SetSysClock+0xce>
/home/chansak/workspace/FloatTest/Debug/../libs/cmsis/src/system_stm32f4xx.c:577
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000
 800070c:	07405408 	.word	0x07405408
 8000710:	40023c00 	.word	0x40023c00

08000714 <GPIO_Init>:
GPIO_Init():
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:203
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000714:	b480      	push	{r7}
 8000716:	b087      	sub	sp, #28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:204
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:214
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	e076      	b.n	800081e <GPIO_Init+0x10a>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:216
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	2201      	movs	r2, #1
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:218
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	4013      	ands	r3, r2
 8000742:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:220

    if (currentpin == pos)
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	429a      	cmp	r2, r3
 800074a:	d165      	bne.n	8000818 <GPIO_Init+0x104>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:222
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	2103      	movs	r1, #3
 8000756:	fa01 f303 	lsl.w	r3, r1, r3
 800075a:	43db      	mvns	r3, r3
 800075c:	401a      	ands	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:223
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	791b      	ldrb	r3, [r3, #4]
 800076a:	4619      	mov	r1, r3
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	fa01 f303 	lsl.w	r3, r1, r3
 8000774:	431a      	orrs	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:225

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d003      	beq.n	800078a <GPIO_Init+0x76>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:225 (discriminator 1)
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	2b02      	cmp	r3, #2
 8000788:	d12e      	bne.n	80007e8 <GPIO_Init+0xd4>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:231
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	689a      	ldr	r2, [r3, #8]
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	2103      	movs	r1, #3
 8000794:	fa01 f303 	lsl.w	r3, r1, r3
 8000798:	43db      	mvns	r3, r3
 800079a:	401a      	ands	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:232
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689a      	ldr	r2, [r3, #8]
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	795b      	ldrb	r3, [r3, #5]
 80007a8:	4619      	mov	r1, r3
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	fa01 f303 	lsl.w	r3, r1, r3
 80007b2:	431a      	orrs	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:238

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685a      	ldr	r2, [r3, #4]
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	2101      	movs	r1, #1
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	401a      	ands	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:239
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	799b      	ldrb	r3, [r3, #6]
 80007d6:	4619      	mov	r1, r3
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	fa01 f303 	lsl.w	r3, r1, r3
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	431a      	orrs	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:243
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	68da      	ldr	r2, [r3, #12]
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	2103      	movs	r1, #3
 80007f4:	fa01 f303 	lsl.w	r3, r1, r3
 80007f8:	43db      	mvns	r3, r3
 80007fa:	401a      	ands	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:244
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	68da      	ldr	r2, [r3, #12]
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	79db      	ldrb	r3, [r3, #7]
 8000808:	4619      	mov	r1, r3
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	fa01 f303 	lsl.w	r3, r1, r3
 8000812:	431a      	orrs	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:214
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	3301      	adds	r3, #1
 800081c:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:214 (discriminator 1)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	2b0f      	cmp	r3, #15
 8000822:	d985      	bls.n	8000730 <GPIO_Init+0x1c>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:247
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000824:	371c      	adds	r7, #28
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <GPIO_SetBits>:
GPIO_SetBits():
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:413
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	807b      	strh	r3, [r7, #2]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:418
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	887a      	ldrh	r2, [r7, #2]
 8000840:	831a      	strh	r2, [r3, #24]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:419
}
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <GPIO_ResetBits>:
GPIO_ResetBits():
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:434
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	807b      	strh	r3, [r7, #2]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:439
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	887a      	ldrh	r2, [r7, #2]
 800085c:	835a      	strh	r2, [r3, #26]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:440
}
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <GPIO_PinAFConfig>:
GPIO_PinAFConfig():
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:580
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	4613      	mov	r3, r2
 8000872:	460a      	mov	r2, r1
 8000874:	807a      	strh	r2, [r7, #2]
 8000876:	707b      	strb	r3, [r7, #1]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:581
  uint32_t temp = 0x00;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:582
  uint32_t temp_2 = 0x00;
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:589
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000880:	787a      	ldrb	r2, [r7, #1]
 8000882:	887b      	ldrh	r3, [r7, #2]
 8000884:	f003 0307 	and.w	r3, r3, #7
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:590
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000890:	887b      	ldrh	r3, [r7, #2]
 8000892:	08db      	lsrs	r3, r3, #3
 8000894:	b29b      	uxth	r3, r3
 8000896:	461a      	mov	r2, r3
 8000898:	887b      	ldrh	r3, [r7, #2]
 800089a:	08db      	lsrs	r3, r3, #3
 800089c:	b29b      	uxth	r3, r3
 800089e:	4619      	mov	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3108      	adds	r1, #8
 80008a4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80008a8:	887b      	ldrh	r3, [r7, #2]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	200f      	movs	r0, #15
 80008b2:	fa00 f303 	lsl.w	r3, r0, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	4019      	ands	r1, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3208      	adds	r2, #8
 80008be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:591
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80008c2:	887b      	ldrh	r3, [r7, #2]
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	461a      	mov	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3208      	adds	r2, #8
 80008ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:592
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80008d8:	887b      	ldrh	r3, [r7, #2]
 80008da:	08db      	lsrs	r3, r3, #3
 80008dc:	b29b      	uxth	r3, r3
 80008de:	461a      	mov	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3208      	adds	r2, #8
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:593
}
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <RCC_GetClocksFreq>:
RCC_GetClocksFreq():
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1032
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b089      	sub	sp, #36	; 0x24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1033
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
 8000908:	2302      	movs	r3, #2
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	2302      	movs	r3, #2
 8000912:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1036

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000914:	4b48      	ldr	r3, [pc, #288]	; (8000a38 <RCC_GetClocksFreq+0x144>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	f003 030c 	and.w	r3, r3, #12
 800091c:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1038

  switch (tmp)
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	2b04      	cmp	r3, #4
 8000922:	d007      	beq.n	8000934 <RCC_GetClocksFreq+0x40>
 8000924:	2b08      	cmp	r3, #8
 8000926:	d009      	beq.n	800093c <RCC_GetClocksFreq+0x48>
 8000928:	2b00      	cmp	r3, #0
 800092a:	d13f      	bne.n	80009ac <RCC_GetClocksFreq+0xb8>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1041
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a43      	ldr	r2, [pc, #268]	; (8000a3c <RCC_GetClocksFreq+0x148>)
 8000930:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1042
      break;
 8000932:	e03f      	b.n	80009b4 <RCC_GetClocksFreq+0xc0>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1044
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a42      	ldr	r2, [pc, #264]	; (8000a40 <RCC_GetClocksFreq+0x14c>)
 8000938:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1045
      break;
 800093a:	e03b      	b.n	80009b4 <RCC_GetClocksFreq+0xc0>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1051
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800093c:	4b3e      	ldr	r3, [pc, #248]	; (8000a38 <RCC_GetClocksFreq+0x144>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000944:	0d9b      	lsrs	r3, r3, #22
 8000946:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1052
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000948:	4b3b      	ldr	r3, [pc, #236]	; (8000a38 <RCC_GetClocksFreq+0x144>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000950:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1054
      
      if (pllsource != 0)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d00d      	beq.n	8000974 <RCC_GetClocksFreq+0x80>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1057
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000958:	4a39      	ldr	r2, [pc, #228]	; (8000a40 <RCC_GetClocksFreq+0x14c>)
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000960:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <RCC_GetClocksFreq+0x144>)
 8000962:	6859      	ldr	r1, [r3, #4]
 8000964:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000968:	400b      	ands	r3, r1
 800096a:	099b      	lsrs	r3, r3, #6
 800096c:	fb03 f302 	mul.w	r3, r3, r2
 8000970:	61fb      	str	r3, [r7, #28]
 8000972:	e00c      	b.n	800098e <RCC_GetClocksFreq+0x9a>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1062
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000974:	4a31      	ldr	r2, [pc, #196]	; (8000a3c <RCC_GetClocksFreq+0x148>)
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	fbb2 f2f3 	udiv	r2, r2, r3
 800097c:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <RCC_GetClocksFreq+0x144>)
 800097e:	6859      	ldr	r1, [r3, #4]
 8000980:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000984:	400b      	ands	r3, r1
 8000986:	099b      	lsrs	r3, r3, #6
 8000988:	fb03 f302 	mul.w	r3, r3, r2
 800098c:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1065
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800098e:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <RCC_GetClocksFreq+0x144>)
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000996:	0c1b      	lsrs	r3, r3, #16
 8000998:	3301      	adds	r3, #1
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1066
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800099e:	69fa      	ldr	r2, [r7, #28]
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1067
      break;
 80009aa:	e003      	b.n	80009b4 <RCC_GetClocksFreq+0xc0>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1069
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a23      	ldr	r2, [pc, #140]	; (8000a3c <RCC_GetClocksFreq+0x148>)
 80009b0:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1070
      break;
 80009b2:	bf00      	nop
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1075
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80009b4:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <RCC_GetClocksFreq+0x144>)
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009bc:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1076
  tmp = tmp >> 4;
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	091b      	lsrs	r3, r3, #4
 80009c2:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1077
  presc = APBAHBPrescTable[tmp];
 80009c4:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <RCC_GetClocksFreq+0x150>)
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	4413      	add	r3, r2
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1079
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	40da      	lsrs	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1082

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <RCC_GetClocksFreq+0x144>)
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80009e4:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1083
  tmp = tmp >> 10;
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	0a9b      	lsrs	r3, r3, #10
 80009ea:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1084
  presc = APBAHBPrescTable[tmp];
 80009ec:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <RCC_GetClocksFreq+0x150>)
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	4413      	add	r3, r2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1086
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	40da      	lsrs	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1089

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <RCC_GetClocksFreq+0x144>)
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000a0c:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1090
  tmp = tmp >> 13;
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	0b5b      	lsrs	r3, r3, #13
 8000a12:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1091
  presc = APBAHBPrescTable[tmp];
 8000a14:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <RCC_GetClocksFreq+0x150>)
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	4413      	add	r3, r2
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1093
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	40da      	lsrs	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1094
}
 8000a2c:	3724      	adds	r7, #36	; 0x24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	00f42400 	.word	0x00f42400
 8000a40:	007a1200 	.word	0x007a1200
 8000a44:	20000000 	.word	0x20000000

08000a48 <RCC_AHB1PeriphClockCmd>:
RCC_AHB1PeriphClockCmd():
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1461
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1466
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a54:	78fb      	ldrb	r3, [r7, #3]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d006      	beq.n	8000a68 <RCC_AHB1PeriphClockCmd+0x20>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1468
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <RCC_AHB1PeriphClockCmd+0x38>)
 8000a5c:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <RCC_AHB1PeriphClockCmd+0x38>)
 8000a5e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	430a      	orrs	r2, r1
 8000a64:	631a      	str	r2, [r3, #48]	; 0x30
 8000a66:	e006      	b.n	8000a76 <RCC_AHB1PeriphClockCmd+0x2e>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1472
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <RCC_AHB1PeriphClockCmd+0x38>)
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <RCC_AHB1PeriphClockCmd+0x38>)
 8000a6c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	43d2      	mvns	r2, r2
 8000a72:	400a      	ands	r2, r1
 8000a74:	631a      	str	r2, [r3, #48]	; 0x30
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1474
  }
}
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	40023800 	.word	0x40023800

08000a84 <RCC_APB1PeriphClockCmd>:
RCC_APB1PeriphClockCmd():
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1573
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1578
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a90:	78fb      	ldrb	r3, [r7, #3]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d006      	beq.n	8000aa4 <RCC_APB1PeriphClockCmd+0x20>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1580
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <RCC_APB1PeriphClockCmd+0x38>)
 8000a98:	4a08      	ldr	r2, [pc, #32]	; (8000abc <RCC_APB1PeriphClockCmd+0x38>)
 8000a9a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	641a      	str	r2, [r3, #64]	; 0x40
 8000aa2:	e006      	b.n	8000ab2 <RCC_APB1PeriphClockCmd+0x2e>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1584
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <RCC_APB1PeriphClockCmd+0x38>)
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <RCC_APB1PeriphClockCmd+0x38>)
 8000aa8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	43d2      	mvns	r2, r2
 8000aae:	400a      	ands	r2, r1
 8000ab0:	641a      	str	r2, [r3, #64]	; 0x40
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1586
  }
}
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	40023800 	.word	0x40023800

08000ac0 <RCC_APB2PeriphClockCmd>:
RCC_APB2PeriphClockCmd():
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1618
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1623
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d006      	beq.n	8000ae0 <RCC_APB2PeriphClockCmd+0x20>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1625
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <RCC_APB2PeriphClockCmd+0x38>)
 8000ad4:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <RCC_APB2PeriphClockCmd+0x38>)
 8000ad6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	430a      	orrs	r2, r1
 8000adc:	645a      	str	r2, [r3, #68]	; 0x44
 8000ade:	e006      	b.n	8000aee <RCC_APB2PeriphClockCmd+0x2e>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1629
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <RCC_APB2PeriphClockCmd+0x38>)
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <RCC_APB2PeriphClockCmd+0x38>)
 8000ae4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	43d2      	mvns	r2, r2
 8000aea:	400a      	ands	r2, r1
 8000aec:	645a      	str	r2, [r3, #68]	; 0x44
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1631
  }
}
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	40023800 	.word	0x40023800

08000afc <TIM_TimeBaseInit>:
TIM_TimeBaseInit():
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:289
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:290
  uint16_t tmpcr1 = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	81fb      	strh	r3, [r7, #14]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:297
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	81fb      	strh	r3, [r7, #14]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:299

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <TIM_TimeBaseInit+0xb8>)
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d013      	beq.n	8000b40 <TIM_TimeBaseInit+0x44>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:299 (discriminator 1)
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <TIM_TimeBaseInit+0xbc>)
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d00f      	beq.n	8000b40 <TIM_TimeBaseInit+0x44>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b26:	d00b      	beq.n	8000b40 <TIM_TimeBaseInit+0x44>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:300
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <TIM_TimeBaseInit+0xc0>)
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d007      	beq.n	8000b40 <TIM_TimeBaseInit+0x44>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:300 (discriminator 1)
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <TIM_TimeBaseInit+0xc4>)
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d003      	beq.n	8000b40 <TIM_TimeBaseInit+0x44>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:301
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <TIM_TimeBaseInit+0xc8>)
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d108      	bne.n	8000b52 <TIM_TimeBaseInit+0x56>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:304
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000b40:	89fb      	ldrh	r3, [r7, #14]
 8000b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b46:	81fb      	strh	r3, [r7, #14]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:305
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	885a      	ldrh	r2, [r3, #2]
 8000b4c:	89fb      	ldrh	r3, [r7, #14]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	81fb      	strh	r3, [r7, #14]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:308
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <TIM_TimeBaseInit+0xcc>)
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d00c      	beq.n	8000b74 <TIM_TimeBaseInit+0x78>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:308 (discriminator 1)
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <TIM_TimeBaseInit+0xd0>)
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d008      	beq.n	8000b74 <TIM_TimeBaseInit+0x78>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:311
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000b62:	89fb      	ldrh	r3, [r7, #14]
 8000b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b68:	81fb      	strh	r3, [r7, #14]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:312
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	891a      	ldrh	r2, [r3, #8]
 8000b6e:	89fb      	ldrh	r3, [r7, #14]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	81fb      	strh	r3, [r7, #14]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:315
  }

  TIMx->CR1 = tmpcr1;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	89fa      	ldrh	r2, [r7, #14]
 8000b78:	801a      	strh	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:318

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	62da      	str	r2, [r3, #44]	; 0x2c
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:321
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	881a      	ldrh	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	851a      	strh	r2, [r3, #40]	; 0x28
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:323
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <TIM_TimeBaseInit+0xb8>)
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d003      	beq.n	8000b9a <TIM_TimeBaseInit+0x9e>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:323 (discriminator 1)
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <TIM_TimeBaseInit+0xbc>)
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d104      	bne.n	8000ba4 <TIM_TimeBaseInit+0xa8>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:326
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	7a9b      	ldrb	r3, [r3, #10]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	861a      	strh	r2, [r3, #48]	; 0x30
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:331
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	829a      	strh	r2, [r3, #20]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:332
}
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	40010000 	.word	0x40010000
 8000bb8:	40010400 	.word	0x40010400
 8000bbc:	40000400 	.word	0x40000400
 8000bc0:	40000800 	.word	0x40000800
 8000bc4:	40000c00 	.word	0x40000c00
 8000bc8:	40001000 	.word	0x40001000
 8000bcc:	40001400 	.word	0x40001400

08000bd0 <TIM_Cmd>:
TIM_Cmd():
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:593
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:598
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000bdc:	78fb      	ldrb	r3, [r7, #3]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d008      	beq.n	8000bf4 <TIM_Cmd+0x24>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:601
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	801a      	strh	r2, [r3, #0]
 8000bf2:	e007      	b.n	8000c04 <TIM_Cmd+0x34>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:606
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	f023 0301 	bic.w	r3, r3, #1
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	801a      	strh	r2, [r3, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:608
  }
}
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <USART_Init>:
USART_Init():
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:247
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:248
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:249
  uint32_t integerdivider = 0x00;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:250
  uint32_t fractionaldivider = 0x00;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:269
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	8a1b      	ldrh	r3, [r3, #16]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:272

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:276

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	88db      	ldrh	r3, [r3, #6]
 8000c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c40:	4313      	orrs	r3, r2
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:279
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	821a      	strh	r2, [r3, #16]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:282

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	899b      	ldrh	r3, [r3, #12]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:285

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000c5a:	f023 030c 	bic.w	r3, r3, #12
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:291

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	889a      	ldrh	r2, [r3, #4]
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	891b      	ldrh	r3, [r3, #8]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	b29a      	uxth	r2, r3
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:292
            USART_InitStruct->USART_Mode;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	895b      	ldrh	r3, [r3, #10]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:291

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000c70:	4313      	orrs	r3, r2
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c76:	4313      	orrs	r3, r2
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:295
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	819a      	strh	r2, [r3, #12]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:298

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	8a9b      	ldrh	r3, [r3, #20]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:301

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:305

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	899b      	ldrh	r3, [r3, #12]
 8000c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:308

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	829a      	strh	r2, [r3, #20]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:312

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fe23 	bl	80008f4 <RCC_GetClocksFreq>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:314

  if ((USARTx == USART1) || (USARTx == USART6))
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <USART_Init+0x168>)
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d003      	beq.n	8000cbe <USART_Init+0xae>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:314 (discriminator 1)
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <USART_Init+0x16c>)
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d102      	bne.n	8000cc4 <USART_Init+0xb4>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:316
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	623b      	str	r3, [r7, #32]
 8000cc2:	e001      	b.n	8000cc8 <USART_Init+0xb8>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:320
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	623b      	str	r3, [r7, #32]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:324
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	899b      	ldrh	r3, [r3, #12]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	da0c      	bge.n	8000cf0 <USART_Init+0xe0>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:327
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000cd6:	6a3a      	ldr	r2, [r7, #32]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	009a      	lsls	r2, r3, #2
 8000ce0:	441a      	add	r2, r3
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cec:	61fb      	str	r3, [r7, #28]
 8000cee:	e00b      	b.n	8000d08 <USART_Init+0xf8>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:332
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000cf0:	6a3a      	ldr	r2, [r7, #32]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4413      	add	r3, r2
 8000cf8:	009a      	lsls	r2, r3, #2
 8000cfa:	441a      	add	r2, r3
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:334
  }
  tmpreg = (integerdivider / 100) << 4;
 8000d08:	69fa      	ldr	r2, [r7, #28]
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <USART_Init+0x170>)
 8000d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8000d10:	095b      	lsrs	r3, r3, #5
 8000d12:	011b      	lsls	r3, r3, #4
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:337

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	091b      	lsrs	r3, r3, #4
 8000d1a:	2264      	movs	r2, #100	; 0x64
 8000d1c:	fb02 f303 	mul.w	r3, r2, r3
 8000d20:	69fa      	ldr	r2, [r7, #28]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:340

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	899b      	ldrh	r3, [r3, #12]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	b21b      	sxth	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	da0d      	bge.n	8000d50 <USART_Init+0x140>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:342
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000d3c:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <USART_Init+0x170>)
 8000d3e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	f003 0307 	and.w	r3, r3, #7
 8000d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d4e:	e00c      	b.n	8000d6a <USART_Init+0x15a>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:346
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	011b      	lsls	r3, r3, #4
 8000d54:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <USART_Init+0x170>)
 8000d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d5e:	095b      	lsrs	r3, r3, #5
 8000d60:	f003 030f 	and.w	r3, r3, #15
 8000d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d66:	4313      	orrs	r3, r2
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:350
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	811a      	strh	r2, [r3, #8]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:351
}
 8000d72:	3728      	adds	r7, #40	; 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40011000 	.word	0x40011000
 8000d7c:	40011400 	.word	0x40011400
 8000d80:	51eb851f 	.word	0x51eb851f

08000d84 <USART_Cmd>:
USART_Cmd():
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:428
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:433
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d008      	beq.n	8000da8 <USART_Cmd+0x24>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:436
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	899b      	ldrh	r3, [r3, #12]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	819a      	strh	r2, [r3, #12]
 8000da6:	e007      	b.n	8000db8 <USART_Cmd+0x34>
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:441
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	899b      	ldrh	r3, [r3, #12]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	819a      	strh	r2, [r3, #12]
/home/chansak/workspace/FloatTest/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:443
  }
}
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <__aeabi_drsub>:
$t():
 8000dc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000dc8:	e002      	b.n	8000dd0 <__adddf3>
 8000dca:	bf00      	nop

08000dcc <__aeabi_dsub>:
__aeabi_dsub():
 8000dcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000dd0 <__adddf3>:
 8000dd0:	b530      	push	{r4, r5, lr}
 8000dd2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000dd6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000dda:	ea94 0f05 	teq	r4, r5
 8000dde:	bf08      	it	eq
 8000de0:	ea90 0f02 	teqeq	r0, r2
 8000de4:	bf1f      	itttt	ne
 8000de6:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000dea:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000dee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000df2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000df6:	f000 80e2 	beq.w	8000fbe <__adddf3+0x1ee>
 8000dfa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000dfe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000e02:	bfb8      	it	lt
 8000e04:	426d      	neglt	r5, r5
 8000e06:	dd0c      	ble.n	8000e22 <__adddf3+0x52>
 8000e08:	442c      	add	r4, r5
 8000e0a:	ea80 0202 	eor.w	r2, r0, r2
 8000e0e:	ea81 0303 	eor.w	r3, r1, r3
 8000e12:	ea82 0000 	eor.w	r0, r2, r0
 8000e16:	ea83 0101 	eor.w	r1, r3, r1
 8000e1a:	ea80 0202 	eor.w	r2, r0, r2
 8000e1e:	ea81 0303 	eor.w	r3, r1, r3
 8000e22:	2d36      	cmp	r5, #54	; 0x36
 8000e24:	bf88      	it	hi
 8000e26:	bd30      	pophi	{r4, r5, pc}
 8000e28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000e30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000e34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000e38:	d002      	beq.n	8000e40 <__adddf3+0x70>
 8000e3a:	4240      	negs	r0, r0
 8000e3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000e44:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000e48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000e4c:	d002      	beq.n	8000e54 <__adddf3+0x84>
 8000e4e:	4252      	negs	r2, r2
 8000e50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e54:	ea94 0f05 	teq	r4, r5
 8000e58:	f000 80a7 	beq.w	8000faa <__adddf3+0x1da>
 8000e5c:	f1a4 0401 	sub.w	r4, r4, #1
 8000e60:	f1d5 0e20 	rsbs	lr, r5, #32
 8000e64:	db0d      	blt.n	8000e82 <__adddf3+0xb2>
 8000e66:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000e6a:	fa22 f205 	lsr.w	r2, r2, r5
 8000e6e:	1880      	adds	r0, r0, r2
 8000e70:	f141 0100 	adc.w	r1, r1, #0
 8000e74:	fa03 f20e 	lsl.w	r2, r3, lr
 8000e78:	1880      	adds	r0, r0, r2
 8000e7a:	fa43 f305 	asr.w	r3, r3, r5
 8000e7e:	4159      	adcs	r1, r3
 8000e80:	e00e      	b.n	8000ea0 <__adddf3+0xd0>
 8000e82:	f1a5 0520 	sub.w	r5, r5, #32
 8000e86:	f10e 0e20 	add.w	lr, lr, #32
 8000e8a:	2a01      	cmp	r2, #1
 8000e8c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000e90:	bf28      	it	cs
 8000e92:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000e96:	fa43 f305 	asr.w	r3, r3, r5
 8000e9a:	18c0      	adds	r0, r0, r3
 8000e9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000ea0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000ea4:	d507      	bpl.n	8000eb6 <__adddf3+0xe6>
 8000ea6:	f04f 0e00 	mov.w	lr, #0
 8000eaa:	f1dc 0c00 	rsbs	ip, ip, #0
 8000eae:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000eb2:	eb6e 0101 	sbc.w	r1, lr, r1
 8000eb6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000eba:	d31b      	bcc.n	8000ef4 <__adddf3+0x124>
 8000ebc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000ec0:	d30c      	bcc.n	8000edc <__adddf3+0x10c>
 8000ec2:	0849      	lsrs	r1, r1, #1
 8000ec4:	ea5f 0030 	movs.w	r0, r0, rrx
 8000ec8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000ecc:	f104 0401 	add.w	r4, r4, #1
 8000ed0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000ed4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000ed8:	f080 809a 	bcs.w	8001010 <__adddf3+0x240>
 8000edc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ee0:	bf08      	it	eq
 8000ee2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000ee6:	f150 0000 	adcs.w	r0, r0, #0
 8000eea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000eee:	ea41 0105 	orr.w	r1, r1, r5
 8000ef2:	bd30      	pop	{r4, r5, pc}
 8000ef4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000ef8:	4140      	adcs	r0, r0
 8000efa:	eb41 0101 	adc.w	r1, r1, r1
 8000efe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000f02:	f1a4 0401 	sub.w	r4, r4, #1
 8000f06:	d1e9      	bne.n	8000edc <__adddf3+0x10c>
 8000f08:	f091 0f00 	teq	r1, #0
 8000f0c:	bf04      	itt	eq
 8000f0e:	4601      	moveq	r1, r0
 8000f10:	2000      	moveq	r0, #0
 8000f12:	fab1 f381 	clz	r3, r1
 8000f16:	bf08      	it	eq
 8000f18:	3320      	addeq	r3, #32
 8000f1a:	f1a3 030b 	sub.w	r3, r3, #11
 8000f1e:	f1b3 0220 	subs.w	r2, r3, #32
 8000f22:	da0c      	bge.n	8000f3e <__adddf3+0x16e>
 8000f24:	320c      	adds	r2, #12
 8000f26:	dd08      	ble.n	8000f3a <__adddf3+0x16a>
 8000f28:	f102 0c14 	add.w	ip, r2, #20
 8000f2c:	f1c2 020c 	rsb	r2, r2, #12
 8000f30:	fa01 f00c 	lsl.w	r0, r1, ip
 8000f34:	fa21 f102 	lsr.w	r1, r1, r2
 8000f38:	e00c      	b.n	8000f54 <__adddf3+0x184>
 8000f3a:	f102 0214 	add.w	r2, r2, #20
 8000f3e:	bfd8      	it	le
 8000f40:	f1c2 0c20 	rsble	ip, r2, #32
 8000f44:	fa01 f102 	lsl.w	r1, r1, r2
 8000f48:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000f4c:	bfdc      	itt	le
 8000f4e:	ea41 010c 	orrle.w	r1, r1, ip
 8000f52:	4090      	lslle	r0, r2
 8000f54:	1ae4      	subs	r4, r4, r3
 8000f56:	bfa2      	ittt	ge
 8000f58:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000f5c:	4329      	orrge	r1, r5
 8000f5e:	bd30      	popge	{r4, r5, pc}
 8000f60:	ea6f 0404 	mvn.w	r4, r4
 8000f64:	3c1f      	subs	r4, #31
 8000f66:	da1c      	bge.n	8000fa2 <__adddf3+0x1d2>
 8000f68:	340c      	adds	r4, #12
 8000f6a:	dc0e      	bgt.n	8000f8a <__adddf3+0x1ba>
 8000f6c:	f104 0414 	add.w	r4, r4, #20
 8000f70:	f1c4 0220 	rsb	r2, r4, #32
 8000f74:	fa20 f004 	lsr.w	r0, r0, r4
 8000f78:	fa01 f302 	lsl.w	r3, r1, r2
 8000f7c:	ea40 0003 	orr.w	r0, r0, r3
 8000f80:	fa21 f304 	lsr.w	r3, r1, r4
 8000f84:	ea45 0103 	orr.w	r1, r5, r3
 8000f88:	bd30      	pop	{r4, r5, pc}
 8000f8a:	f1c4 040c 	rsb	r4, r4, #12
 8000f8e:	f1c4 0220 	rsb	r2, r4, #32
 8000f92:	fa20 f002 	lsr.w	r0, r0, r2
 8000f96:	fa01 f304 	lsl.w	r3, r1, r4
 8000f9a:	ea40 0003 	orr.w	r0, r0, r3
 8000f9e:	4629      	mov	r1, r5
 8000fa0:	bd30      	pop	{r4, r5, pc}
 8000fa2:	fa21 f004 	lsr.w	r0, r1, r4
 8000fa6:	4629      	mov	r1, r5
 8000fa8:	bd30      	pop	{r4, r5, pc}
 8000faa:	f094 0f00 	teq	r4, #0
 8000fae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000fb2:	bf06      	itte	eq
 8000fb4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000fb8:	3401      	addeq	r4, #1
 8000fba:	3d01      	subne	r5, #1
 8000fbc:	e74e      	b.n	8000e5c <__adddf3+0x8c>
 8000fbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000fc2:	bf18      	it	ne
 8000fc4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000fc8:	d029      	beq.n	800101e <__adddf3+0x24e>
 8000fca:	ea94 0f05 	teq	r4, r5
 8000fce:	bf08      	it	eq
 8000fd0:	ea90 0f02 	teqeq	r0, r2
 8000fd4:	d005      	beq.n	8000fe2 <__adddf3+0x212>
 8000fd6:	ea54 0c00 	orrs.w	ip, r4, r0
 8000fda:	bf04      	itt	eq
 8000fdc:	4619      	moveq	r1, r3
 8000fde:	4610      	moveq	r0, r2
 8000fe0:	bd30      	pop	{r4, r5, pc}
 8000fe2:	ea91 0f03 	teq	r1, r3
 8000fe6:	bf1e      	ittt	ne
 8000fe8:	2100      	movne	r1, #0
 8000fea:	2000      	movne	r0, #0
 8000fec:	bd30      	popne	{r4, r5, pc}
 8000fee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000ff2:	d105      	bne.n	8001000 <__adddf3+0x230>
 8000ff4:	0040      	lsls	r0, r0, #1
 8000ff6:	4149      	adcs	r1, r1
 8000ff8:	bf28      	it	cs
 8000ffa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000ffe:	bd30      	pop	{r4, r5, pc}
 8001000:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8001004:	bf3c      	itt	cc
 8001006:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800100a:	bd30      	popcc	{r4, r5, pc}
 800100c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001010:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8001014:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001018:	f04f 0000 	mov.w	r0, #0
 800101c:	bd30      	pop	{r4, r5, pc}
 800101e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8001022:	bf1a      	itte	ne
 8001024:	4619      	movne	r1, r3
 8001026:	4610      	movne	r0, r2
 8001028:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800102c:	bf1c      	itt	ne
 800102e:	460b      	movne	r3, r1
 8001030:	4602      	movne	r2, r0
 8001032:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001036:	bf06      	itte	eq
 8001038:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800103c:	ea91 0f03 	teqeq	r1, r3
 8001040:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8001044:	bd30      	pop	{r4, r5, pc}
__adddf3():
 8001046:	bf00      	nop

08001048 <__aeabi_ui2d>:
__aeabi_ui2d():
 8001048:	f090 0f00 	teq	r0, #0
 800104c:	bf04      	itt	eq
 800104e:	2100      	moveq	r1, #0
 8001050:	4770      	bxeq	lr
 8001052:	b530      	push	{r4, r5, lr}
 8001054:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001058:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800105c:	f04f 0500 	mov.w	r5, #0
 8001060:	f04f 0100 	mov.w	r1, #0
 8001064:	e750      	b.n	8000f08 <__adddf3+0x138>
 8001066:	bf00      	nop

08001068 <__aeabi_i2d>:
__floatsidf():
 8001068:	f090 0f00 	teq	r0, #0
 800106c:	bf04      	itt	eq
 800106e:	2100      	moveq	r1, #0
 8001070:	4770      	bxeq	lr
 8001072:	b530      	push	{r4, r5, lr}
 8001074:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001078:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800107c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8001080:	bf48      	it	mi
 8001082:	4240      	negmi	r0, r0
 8001084:	f04f 0100 	mov.w	r1, #0
 8001088:	e73e      	b.n	8000f08 <__adddf3+0x138>
 800108a:	bf00      	nop

0800108c <__aeabi_f2d>:
__extendsfdf2():
 800108c:	0042      	lsls	r2, r0, #1
 800108e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8001092:	ea4f 0131 	mov.w	r1, r1, rrx
 8001096:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800109a:	bf1f      	itttt	ne
 800109c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80010a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80010a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80010a8:	4770      	bxne	lr
 80010aa:	f092 0f00 	teq	r2, #0
 80010ae:	bf14      	ite	ne
 80010b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80010b4:	4770      	bxeq	lr
 80010b6:	b530      	push	{r4, r5, lr}
 80010b8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80010bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80010c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80010c4:	e720      	b.n	8000f08 <__adddf3+0x138>
 80010c6:	bf00      	nop

080010c8 <__aeabi_ul2d>:
__aeabi_ul2d():
 80010c8:	ea50 0201 	orrs.w	r2, r0, r1
 80010cc:	bf08      	it	eq
 80010ce:	4770      	bxeq	lr
 80010d0:	b530      	push	{r4, r5, lr}
 80010d2:	f04f 0500 	mov.w	r5, #0
 80010d6:	e00a      	b.n	80010ee <__aeabi_l2d+0x16>

080010d8 <__aeabi_l2d>:
 80010d8:	ea50 0201 	orrs.w	r2, r0, r1
 80010dc:	bf08      	it	eq
 80010de:	4770      	bxeq	lr
 80010e0:	b530      	push	{r4, r5, lr}
 80010e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80010e6:	d502      	bpl.n	80010ee <__aeabi_l2d+0x16>
 80010e8:	4240      	negs	r0, r0
 80010ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80010f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80010f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80010fa:	f43f aedc 	beq.w	8000eb6 <__adddf3+0xe6>
 80010fe:	f04f 0203 	mov.w	r2, #3
 8001102:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001106:	bf18      	it	ne
 8001108:	3203      	addne	r2, #3
 800110a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800110e:	bf18      	it	ne
 8001110:	3203      	addne	r2, #3
 8001112:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8001116:	f1c2 0320 	rsb	r3, r2, #32
 800111a:	fa00 fc03 	lsl.w	ip, r0, r3
 800111e:	fa20 f002 	lsr.w	r0, r0, r2
 8001122:	fa01 fe03 	lsl.w	lr, r1, r3
 8001126:	ea40 000e 	orr.w	r0, r0, lr
 800112a:	fa21 f102 	lsr.w	r1, r1, r2
 800112e:	4414      	add	r4, r2
 8001130:	e6c1      	b.n	8000eb6 <__adddf3+0xe6>
__floatdidf():
 8001132:	bf00      	nop

08001134 <__aeabi_dmul>:
__aeabi_dmul():
 8001134:	b570      	push	{r4, r5, r6, lr}
 8001136:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800113a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800113e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001142:	bf1d      	ittte	ne
 8001144:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001148:	ea94 0f0c 	teqne	r4, ip
 800114c:	ea95 0f0c 	teqne	r5, ip
 8001150:	f000 f8de 	bleq	8001310 <__aeabi_dmul+0x1dc>
 8001154:	442c      	add	r4, r5
 8001156:	ea81 0603 	eor.w	r6, r1, r3
 800115a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800115e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8001162:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8001166:	bf18      	it	ne
 8001168:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800116c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001170:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001174:	d038      	beq.n	80011e8 <__aeabi_dmul+0xb4>
 8001176:	fba0 ce02 	umull	ip, lr, r0, r2
 800117a:	f04f 0500 	mov.w	r5, #0
 800117e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8001182:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8001186:	fbe0 e503 	umlal	lr, r5, r0, r3
 800118a:	f04f 0600 	mov.w	r6, #0
 800118e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8001192:	f09c 0f00 	teq	ip, #0
 8001196:	bf18      	it	ne
 8001198:	f04e 0e01 	orrne.w	lr, lr, #1
 800119c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80011a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80011a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80011a8:	d204      	bcs.n	80011b4 <__aeabi_dmul+0x80>
 80011aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80011ae:	416d      	adcs	r5, r5
 80011b0:	eb46 0606 	adc.w	r6, r6, r6
 80011b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80011b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80011bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80011c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80011c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80011c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80011cc:	bf88      	it	hi
 80011ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80011d2:	d81e      	bhi.n	8001212 <__aeabi_dmul+0xde>
 80011d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80011d8:	bf08      	it	eq
 80011da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80011de:	f150 0000 	adcs.w	r0, r0, #0
 80011e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80011e6:	bd70      	pop	{r4, r5, r6, pc}
 80011e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80011ec:	ea46 0101 	orr.w	r1, r6, r1
 80011f0:	ea40 0002 	orr.w	r0, r0, r2
 80011f4:	ea81 0103 	eor.w	r1, r1, r3
 80011f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80011fc:	bfc2      	ittt	gt
 80011fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001202:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001206:	bd70      	popgt	{r4, r5, r6, pc}
 8001208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800120c:	f04f 0e00 	mov.w	lr, #0
 8001210:	3c01      	subs	r4, #1
 8001212:	f300 80ab 	bgt.w	800136c <__aeabi_dmul+0x238>
 8001216:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800121a:	bfde      	ittt	le
 800121c:	2000      	movle	r0, #0
 800121e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8001222:	bd70      	pople	{r4, r5, r6, pc}
 8001224:	f1c4 0400 	rsb	r4, r4, #0
 8001228:	3c20      	subs	r4, #32
 800122a:	da35      	bge.n	8001298 <__aeabi_dmul+0x164>
 800122c:	340c      	adds	r4, #12
 800122e:	dc1b      	bgt.n	8001268 <__aeabi_dmul+0x134>
 8001230:	f104 0414 	add.w	r4, r4, #20
 8001234:	f1c4 0520 	rsb	r5, r4, #32
 8001238:	fa00 f305 	lsl.w	r3, r0, r5
 800123c:	fa20 f004 	lsr.w	r0, r0, r4
 8001240:	fa01 f205 	lsl.w	r2, r1, r5
 8001244:	ea40 0002 	orr.w	r0, r0, r2
 8001248:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800124c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001250:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001254:	fa21 f604 	lsr.w	r6, r1, r4
 8001258:	eb42 0106 	adc.w	r1, r2, r6
 800125c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001260:	bf08      	it	eq
 8001262:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001266:	bd70      	pop	{r4, r5, r6, pc}
 8001268:	f1c4 040c 	rsb	r4, r4, #12
 800126c:	f1c4 0520 	rsb	r5, r4, #32
 8001270:	fa00 f304 	lsl.w	r3, r0, r4
 8001274:	fa20 f005 	lsr.w	r0, r0, r5
 8001278:	fa01 f204 	lsl.w	r2, r1, r4
 800127c:	ea40 0002 	orr.w	r0, r0, r2
 8001280:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001284:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001288:	f141 0100 	adc.w	r1, r1, #0
 800128c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001290:	bf08      	it	eq
 8001292:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001296:	bd70      	pop	{r4, r5, r6, pc}
 8001298:	f1c4 0520 	rsb	r5, r4, #32
 800129c:	fa00 f205 	lsl.w	r2, r0, r5
 80012a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80012a4:	fa20 f304 	lsr.w	r3, r0, r4
 80012a8:	fa01 f205 	lsl.w	r2, r1, r5
 80012ac:	ea43 0302 	orr.w	r3, r3, r2
 80012b0:	fa21 f004 	lsr.w	r0, r1, r4
 80012b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80012b8:	fa21 f204 	lsr.w	r2, r1, r4
 80012bc:	ea20 0002 	bic.w	r0, r0, r2
 80012c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80012c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80012c8:	bf08      	it	eq
 80012ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80012ce:	bd70      	pop	{r4, r5, r6, pc}
 80012d0:	f094 0f00 	teq	r4, #0
 80012d4:	d10f      	bne.n	80012f6 <__aeabi_dmul+0x1c2>
 80012d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80012da:	0040      	lsls	r0, r0, #1
 80012dc:	eb41 0101 	adc.w	r1, r1, r1
 80012e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80012e4:	bf08      	it	eq
 80012e6:	3c01      	subeq	r4, #1
 80012e8:	d0f7      	beq.n	80012da <__aeabi_dmul+0x1a6>
 80012ea:	ea41 0106 	orr.w	r1, r1, r6
 80012ee:	f095 0f00 	teq	r5, #0
 80012f2:	bf18      	it	ne
 80012f4:	4770      	bxne	lr
 80012f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80012fa:	0052      	lsls	r2, r2, #1
 80012fc:	eb43 0303 	adc.w	r3, r3, r3
 8001300:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001304:	bf08      	it	eq
 8001306:	3d01      	subeq	r5, #1
 8001308:	d0f7      	beq.n	80012fa <__aeabi_dmul+0x1c6>
 800130a:	ea43 0306 	orr.w	r3, r3, r6
 800130e:	4770      	bx	lr
 8001310:	ea94 0f0c 	teq	r4, ip
 8001314:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001318:	bf18      	it	ne
 800131a:	ea95 0f0c 	teqne	r5, ip
 800131e:	d00c      	beq.n	800133a <__aeabi_dmul+0x206>
 8001320:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001324:	bf18      	it	ne
 8001326:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800132a:	d1d1      	bne.n	80012d0 <__aeabi_dmul+0x19c>
 800132c:	ea81 0103 	eor.w	r1, r1, r3
 8001330:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001334:	f04f 0000 	mov.w	r0, #0
 8001338:	bd70      	pop	{r4, r5, r6, pc}
 800133a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800133e:	bf06      	itte	eq
 8001340:	4610      	moveq	r0, r2
 8001342:	4619      	moveq	r1, r3
 8001344:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001348:	d019      	beq.n	800137e <__aeabi_dmul+0x24a>
 800134a:	ea94 0f0c 	teq	r4, ip
 800134e:	d102      	bne.n	8001356 <__aeabi_dmul+0x222>
 8001350:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8001354:	d113      	bne.n	800137e <__aeabi_dmul+0x24a>
 8001356:	ea95 0f0c 	teq	r5, ip
 800135a:	d105      	bne.n	8001368 <__aeabi_dmul+0x234>
 800135c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8001360:	bf1c      	itt	ne
 8001362:	4610      	movne	r0, r2
 8001364:	4619      	movne	r1, r3
 8001366:	d10a      	bne.n	800137e <__aeabi_dmul+0x24a>
 8001368:	ea81 0103 	eor.w	r1, r1, r3
 800136c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001370:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001374:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001378:	f04f 0000 	mov.w	r0, #0
 800137c:	bd70      	pop	{r4, r5, r6, pc}
 800137e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001382:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8001386:	bd70      	pop	{r4, r5, r6, pc}

08001388 <__aeabi_ddiv>:
__aeabi_ddiv():
 8001388:	b570      	push	{r4, r5, r6, lr}
 800138a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800138e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001392:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001396:	bf1d      	ittte	ne
 8001398:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800139c:	ea94 0f0c 	teqne	r4, ip
 80013a0:	ea95 0f0c 	teqne	r5, ip
 80013a4:	f000 f8a7 	bleq	80014f6 <__aeabi_ddiv+0x16e>
 80013a8:	eba4 0405 	sub.w	r4, r4, r5
 80013ac:	ea81 0e03 	eor.w	lr, r1, r3
 80013b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80013b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80013b8:	f000 8088 	beq.w	80014cc <__aeabi_ddiv+0x144>
 80013bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80013c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80013c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80013c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80013cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80013d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80013d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80013d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80013dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80013e0:	429d      	cmp	r5, r3
 80013e2:	bf08      	it	eq
 80013e4:	4296      	cmpeq	r6, r2
 80013e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80013ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80013ee:	d202      	bcs.n	80013f6 <__aeabi_ddiv+0x6e>
 80013f0:	085b      	lsrs	r3, r3, #1
 80013f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80013f6:	1ab6      	subs	r6, r6, r2
 80013f8:	eb65 0503 	sbc.w	r5, r5, r3
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8001402:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001406:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800140a:	ebb6 0e02 	subs.w	lr, r6, r2
 800140e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001412:	bf22      	ittt	cs
 8001414:	1ab6      	subcs	r6, r6, r2
 8001416:	4675      	movcs	r5, lr
 8001418:	ea40 000c 	orrcs.w	r0, r0, ip
 800141c:	085b      	lsrs	r3, r3, #1
 800141e:	ea4f 0232 	mov.w	r2, r2, rrx
 8001422:	ebb6 0e02 	subs.w	lr, r6, r2
 8001426:	eb75 0e03 	sbcs.w	lr, r5, r3
 800142a:	bf22      	ittt	cs
 800142c:	1ab6      	subcs	r6, r6, r2
 800142e:	4675      	movcs	r5, lr
 8001430:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001434:	085b      	lsrs	r3, r3, #1
 8001436:	ea4f 0232 	mov.w	r2, r2, rrx
 800143a:	ebb6 0e02 	subs.w	lr, r6, r2
 800143e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001442:	bf22      	ittt	cs
 8001444:	1ab6      	subcs	r6, r6, r2
 8001446:	4675      	movcs	r5, lr
 8001448:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800144c:	085b      	lsrs	r3, r3, #1
 800144e:	ea4f 0232 	mov.w	r2, r2, rrx
 8001452:	ebb6 0e02 	subs.w	lr, r6, r2
 8001456:	eb75 0e03 	sbcs.w	lr, r5, r3
 800145a:	bf22      	ittt	cs
 800145c:	1ab6      	subcs	r6, r6, r2
 800145e:	4675      	movcs	r5, lr
 8001460:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001464:	ea55 0e06 	orrs.w	lr, r5, r6
 8001468:	d018      	beq.n	800149c <__aeabi_ddiv+0x114>
 800146a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800146e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8001472:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8001476:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800147a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800147e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8001482:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8001486:	d1c0      	bne.n	800140a <__aeabi_ddiv+0x82>
 8001488:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800148c:	d10b      	bne.n	80014a6 <__aeabi_ddiv+0x11e>
 800148e:	ea41 0100 	orr.w	r1, r1, r0
 8001492:	f04f 0000 	mov.w	r0, #0
 8001496:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800149a:	e7b6      	b.n	800140a <__aeabi_ddiv+0x82>
 800149c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80014a0:	bf04      	itt	eq
 80014a2:	4301      	orreq	r1, r0
 80014a4:	2000      	moveq	r0, #0
 80014a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80014aa:	bf88      	it	hi
 80014ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80014b0:	f63f aeaf 	bhi.w	8001212 <__aeabi_dmul+0xde>
 80014b4:	ebb5 0c03 	subs.w	ip, r5, r3
 80014b8:	bf04      	itt	eq
 80014ba:	ebb6 0c02 	subseq.w	ip, r6, r2
 80014be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80014c2:	f150 0000 	adcs.w	r0, r0, #0
 80014c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80014ca:	bd70      	pop	{r4, r5, r6, pc}
 80014cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80014d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80014d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80014d8:	bfc2      	ittt	gt
 80014da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80014de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80014e2:	bd70      	popgt	{r4, r5, r6, pc}
 80014e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80014e8:	f04f 0e00 	mov.w	lr, #0
 80014ec:	3c01      	subs	r4, #1
 80014ee:	e690      	b.n	8001212 <__aeabi_dmul+0xde>
 80014f0:	ea45 0e06 	orr.w	lr, r5, r6
 80014f4:	e68d      	b.n	8001212 <__aeabi_dmul+0xde>
 80014f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80014fa:	ea94 0f0c 	teq	r4, ip
 80014fe:	bf08      	it	eq
 8001500:	ea95 0f0c 	teqeq	r5, ip
 8001504:	f43f af3b 	beq.w	800137e <__aeabi_dmul+0x24a>
 8001508:	ea94 0f0c 	teq	r4, ip
 800150c:	d10a      	bne.n	8001524 <__aeabi_ddiv+0x19c>
 800150e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001512:	f47f af34 	bne.w	800137e <__aeabi_dmul+0x24a>
 8001516:	ea95 0f0c 	teq	r5, ip
 800151a:	f47f af25 	bne.w	8001368 <__aeabi_dmul+0x234>
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	e72c      	b.n	800137e <__aeabi_dmul+0x24a>
 8001524:	ea95 0f0c 	teq	r5, ip
 8001528:	d106      	bne.n	8001538 <__aeabi_ddiv+0x1b0>
 800152a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800152e:	f43f aefd 	beq.w	800132c <__aeabi_dmul+0x1f8>
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	e722      	b.n	800137e <__aeabi_dmul+0x24a>
 8001538:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800153c:	bf18      	it	ne
 800153e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001542:	f47f aec5 	bne.w	80012d0 <__aeabi_dmul+0x19c>
 8001546:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800154a:	f47f af0d 	bne.w	8001368 <__aeabi_dmul+0x234>
 800154e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8001552:	f47f aeeb 	bne.w	800132c <__aeabi_dmul+0x1f8>
 8001556:	e712      	b.n	800137e <__aeabi_dmul+0x24a>

08001558 <__aeabi_d2f>:
__aeabi_d2f():
 8001558:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800155c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8001560:	bf24      	itt	cs
 8001562:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8001566:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800156a:	d90d      	bls.n	8001588 <__aeabi_d2f+0x30>
 800156c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001570:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8001574:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8001578:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800157c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8001580:	bf08      	it	eq
 8001582:	f020 0001 	biceq.w	r0, r0, #1
 8001586:	4770      	bx	lr
 8001588:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800158c:	d121      	bne.n	80015d2 <__aeabi_d2f+0x7a>
 800158e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8001592:	bfbc      	itt	lt
 8001594:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8001598:	4770      	bxlt	lr
 800159a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800159e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80015a2:	f1c2 0218 	rsb	r2, r2, #24
 80015a6:	f1c2 0c20 	rsb	ip, r2, #32
 80015aa:	fa10 f30c 	lsls.w	r3, r0, ip
 80015ae:	fa20 f002 	lsr.w	r0, r0, r2
 80015b2:	bf18      	it	ne
 80015b4:	f040 0001 	orrne.w	r0, r0, #1
 80015b8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80015bc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80015c0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80015c4:	ea40 000c 	orr.w	r0, r0, ip
 80015c8:	fa23 f302 	lsr.w	r3, r3, r2
 80015cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80015d0:	e7cc      	b.n	800156c <__aeabi_d2f+0x14>
 80015d2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80015d6:	d107      	bne.n	80015e8 <__aeabi_d2f+0x90>
 80015d8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80015dc:	bf1e      	ittt	ne
 80015de:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80015e2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80015e6:	4770      	bxne	lr
 80015e8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80015ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80015f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop

080015f8 <__errno>:
__errno():
 80015f8:	4b01      	ldr	r3, [pc, #4]	; (8001600 <__errno+0x8>)
 80015fa:	6818      	ldr	r0, [r3, #0]
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000438 	.word	0x20000438

08001604 <sprintf>:
sprintf():
 8001604:	b40e      	push	{r1, r2, r3}
 8001606:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001608:	b09c      	sub	sp, #112	; 0x70
 800160a:	ab21      	add	r3, sp, #132	; 0x84
 800160c:	490f      	ldr	r1, [pc, #60]	; (800164c <sprintf+0x48>)
 800160e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	4605      	mov	r5, r0
 8001616:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800161a:	6808      	ldr	r0, [r1, #0]
 800161c:	9502      	str	r5, [sp, #8]
 800161e:	f44f 7702 	mov.w	r7, #520	; 0x208
 8001622:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8001626:	a902      	add	r1, sp, #8
 8001628:	9506      	str	r5, [sp, #24]
 800162a:	f8ad 7014 	strh.w	r7, [sp, #20]
 800162e:	9404      	str	r4, [sp, #16]
 8001630:	9407      	str	r4, [sp, #28]
 8001632:	f8ad 6016 	strh.w	r6, [sp, #22]
 8001636:	f000 f80b 	bl	8001650 <_svfprintf_r>
 800163a:	9b02      	ldr	r3, [sp, #8]
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
 8001640:	b01c      	add	sp, #112	; 0x70
 8001642:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001646:	b003      	add	sp, #12
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000438 	.word	0x20000438

08001650 <_svfprintf_r>:
_svfprintf_r():
 8001650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001654:	b0c9      	sub	sp, #292	; 0x124
 8001656:	4691      	mov	r9, r2
 8001658:	9310      	str	r3, [sp, #64]	; 0x40
 800165a:	910c      	str	r1, [sp, #48]	; 0x30
 800165c:	900d      	str	r0, [sp, #52]	; 0x34
 800165e:	f002 fa27 	bl	8003ab0 <_localeconv_r>
 8001662:	6800      	ldr	r0, [r0, #0]
 8001664:	9015      	str	r0, [sp, #84]	; 0x54
 8001666:	f003 f8ed 	bl	8004844 <strlen>
 800166a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800166c:	9018      	str	r0, [sp, #96]	; 0x60
 800166e:	89a3      	ldrh	r3, [r4, #12]
 8001670:	061a      	lsls	r2, r3, #24
 8001672:	d503      	bpl.n	800167c <_svfprintf_r+0x2c>
 8001674:	6923      	ldr	r3, [r4, #16]
 8001676:	2b00      	cmp	r3, #0
 8001678:	f001 808d 	beq.w	8002796 <_svfprintf_r+0x1146>
 800167c:	ac38      	add	r4, sp, #224	; 0xe0
 800167e:	46a4      	mov	ip, r4
 8001680:	9408      	str	r4, [sp, #32]
 8001682:	942b      	str	r4, [sp, #172]	; 0xac
 8001684:	2500      	movs	r5, #0
 8001686:	2400      	movs	r4, #0
 8001688:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
 800168c:	2300      	movs	r3, #0
 800168e:	9311      	str	r3, [sp, #68]	; 0x44
 8001690:	932d      	str	r3, [sp, #180]	; 0xb4
 8001692:	932c      	str	r3, [sp, #176]	; 0xb0
 8001694:	931a      	str	r3, [sp, #104]	; 0x68
 8001696:	9319      	str	r3, [sp, #100]	; 0x64
 8001698:	930e      	str	r3, [sp, #56]	; 0x38
 800169a:	4666      	mov	r6, ip
 800169c:	f899 3000 	ldrb.w	r3, [r9]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80f8 	beq.w	8001896 <_svfprintf_r+0x246>
 80016a6:	2b25      	cmp	r3, #37	; 0x25
 80016a8:	f000 80f5 	beq.w	8001896 <_svfprintf_r+0x246>
 80016ac:	f109 0201 	add.w	r2, r9, #1
 80016b0:	e001      	b.n	80016b6 <_svfprintf_r+0x66>
 80016b2:	2b25      	cmp	r3, #37	; 0x25
 80016b4:	d004      	beq.n	80016c0 <_svfprintf_r+0x70>
 80016b6:	4614      	mov	r4, r2
 80016b8:	3201      	adds	r2, #1
 80016ba:	7823      	ldrb	r3, [r4, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f8      	bne.n	80016b2 <_svfprintf_r+0x62>
 80016c0:	ebc9 0504 	rsb	r5, r9, r4
 80016c4:	b17d      	cbz	r5, 80016e6 <_svfprintf_r+0x96>
 80016c6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80016c8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80016ca:	f8c6 9000 	str.w	r9, [r6]
 80016ce:	3301      	adds	r3, #1
 80016d0:	442a      	add	r2, r5
 80016d2:	2b07      	cmp	r3, #7
 80016d4:	6075      	str	r5, [r6, #4]
 80016d6:	922d      	str	r2, [sp, #180]	; 0xb4
 80016d8:	932c      	str	r3, [sp, #176]	; 0xb0
 80016da:	f300 80c2 	bgt.w	8001862 <_svfprintf_r+0x212>
 80016de:	3608      	adds	r6, #8
 80016e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80016e2:	4428      	add	r0, r5
 80016e4:	900e      	str	r0, [sp, #56]	; 0x38
 80016e6:	7823      	ldrb	r3, [r4, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80c2 	beq.w	8001872 <_svfprintf_r+0x222>
 80016ee:	2300      	movs	r3, #0
 80016f0:	f894 8001 	ldrb.w	r8, [r4, #1]
 80016f4:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 80016f8:	461a      	mov	r2, r3
 80016fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80016fc:	9309      	str	r3, [sp, #36]	; 0x24
 80016fe:	f104 0901 	add.w	r9, r4, #1
 8001702:	f04f 34ff 	mov.w	r4, #4294967295
 8001706:	940a      	str	r4, [sp, #40]	; 0x28
 8001708:	f109 0901 	add.w	r9, r9, #1
 800170c:	f1a8 0320 	sub.w	r3, r8, #32
 8001710:	2b58      	cmp	r3, #88	; 0x58
 8001712:	f200 83c7 	bhi.w	8001ea4 <_svfprintf_r+0x854>
 8001716:	e8df f013 	tbh	[pc, r3, lsl #1]
 800171a:	026a      	.short	0x026a
 800171c:	03c503c5 	.word	0x03c503c5
 8001720:	03c50271 	.word	0x03c50271
 8001724:	03c503c5 	.word	0x03c503c5
 8001728:	03c503c5 	.word	0x03c503c5
 800172c:	031403c5 	.word	0x031403c5
 8001730:	03c50364 	.word	0x03c50364
 8001734:	00c0009d 	.word	0x00c0009d
 8001738:	027803c5 	.word	0x027803c5
 800173c:	027f027f 	.word	0x027f027f
 8001740:	027f027f 	.word	0x027f027f
 8001744:	027f027f 	.word	0x027f027f
 8001748:	027f027f 	.word	0x027f027f
 800174c:	03c5027f 	.word	0x03c5027f
 8001750:	03c503c5 	.word	0x03c503c5
 8001754:	03c503c5 	.word	0x03c503c5
 8001758:	03c503c5 	.word	0x03c503c5
 800175c:	03c503c5 	.word	0x03c503c5
 8001760:	029003c5 	.word	0x029003c5
 8001764:	03c5036f 	.word	0x03c5036f
 8001768:	03c5036f 	.word	0x03c5036f
 800176c:	03c503c5 	.word	0x03c503c5
 8001770:	036803c5 	.word	0x036803c5
 8001774:	03c503c5 	.word	0x03c503c5
 8001778:	03c50078 	.word	0x03c50078
 800177c:	03c503c5 	.word	0x03c503c5
 8001780:	03c503c5 	.word	0x03c503c5
 8001784:	03c50059 	.word	0x03c50059
 8001788:	02af03c5 	.word	0x02af03c5
 800178c:	03c503c5 	.word	0x03c503c5
 8001790:	03c503c5 	.word	0x03c503c5
 8001794:	03c503c5 	.word	0x03c503c5
 8001798:	03c503c5 	.word	0x03c503c5
 800179c:	03c503c5 	.word	0x03c503c5
 80017a0:	03480337 	.word	0x03480337
 80017a4:	036f036f 	.word	0x036f036f
 80017a8:	02ff036f 	.word	0x02ff036f
 80017ac:	03c50348 	.word	0x03c50348
 80017b0:	030803c5 	.word	0x030803c5
 80017b4:	02c503c5 	.word	0x02c503c5
 80017b8:	0321007c 	.word	0x0321007c
 80017bc:	03c503a5 	.word	0x03c503a5
 80017c0:	03c502d9 	.word	0x03c502d9
 80017c4:	03c5005f 	.word	0x03c5005f
 80017c8:	00de03c5 	.word	0x00de03c5
 80017cc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80017d0:	f04c 0c10 	orr.w	ip, ip, #16
 80017d4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80017d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80017da:	06a2      	lsls	r2, r4, #26
 80017dc:	f100 8356 	bmi.w	8001e8c <_svfprintf_r+0x83c>
 80017e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80017e2:	06e3      	lsls	r3, r4, #27
 80017e4:	f100 85e0 	bmi.w	80023a8 <_svfprintf_r+0xd58>
 80017e8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80017ec:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80017f0:	f000 85da 	beq.w	80023a8 <_svfprintf_r+0xd58>
 80017f4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 80017f8:	f8bc 4000 	ldrh.w	r4, [ip]
 80017fc:	f10c 0c04 	add.w	ip, ip, #4
 8001800:	2500      	movs	r5, #0
 8001802:	2301      	movs	r3, #1
 8001804:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8001808:	e08c      	b.n	8001924 <_svfprintf_r+0x2d4>
 800180a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800180c:	f045 0510 	orr.w	r5, r5, #16
 8001810:	9509      	str	r5, [sp, #36]	; 0x24
 8001812:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8001816:	f01c 0320 	ands.w	r3, ip, #32
 800181a:	f040 832c 	bne.w	8001e76 <_svfprintf_r+0x826>
 800181e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8001822:	f01c 0210 	ands.w	r2, ip, #16
 8001826:	f040 85b8 	bne.w	800239a <_svfprintf_r+0xd4a>
 800182a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800182e:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
 8001832:	f000 85b2 	beq.w	800239a <_svfprintf_r+0xd4a>
 8001836:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 800183a:	f8bc 4000 	ldrh.w	r4, [ip]
 800183e:	f10c 0c04 	add.w	ip, ip, #4
 8001842:	4613      	mov	r3, r2
 8001844:	2500      	movs	r5, #0
 8001846:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 800184a:	e06b      	b.n	8001924 <_svfprintf_r+0x2d4>
 800184c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800184e:	9310      	str	r3, [sp, #64]	; 0x40
 8001850:	4264      	negs	r4, r4
 8001852:	940f      	str	r4, [sp, #60]	; 0x3c
 8001854:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001856:	f045 0504 	orr.w	r5, r5, #4
 800185a:	9509      	str	r5, [sp, #36]	; 0x24
 800185c:	f899 8000 	ldrb.w	r8, [r9]
 8001860:	e752      	b.n	8001708 <_svfprintf_r+0xb8>
 8001862:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001864:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001866:	aa2b      	add	r2, sp, #172	; 0xac
 8001868:	f003 f81c 	bl	80048a4 <__ssprint_r>
 800186c:	b940      	cbnz	r0, 8001880 <_svfprintf_r+0x230>
 800186e:	ae38      	add	r6, sp, #224	; 0xe0
 8001870:	e736      	b.n	80016e0 <_svfprintf_r+0x90>
 8001872:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8001874:	b123      	cbz	r3, 8001880 <_svfprintf_r+0x230>
 8001876:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001878:	990c      	ldr	r1, [sp, #48]	; 0x30
 800187a:	aa2b      	add	r2, sp, #172	; 0xac
 800187c:	f003 f812 	bl	80048a4 <__ssprint_r>
 8001880:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8001882:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001884:	89a3      	ldrh	r3, [r4, #12]
 8001886:	f013 0f40 	tst.w	r3, #64	; 0x40
 800188a:	bf18      	it	ne
 800188c:	f04f 30ff 	movne.w	r0, #4294967295
 8001890:	b049      	add	sp, #292	; 0x124
 8001892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001896:	464c      	mov	r4, r9
 8001898:	e725      	b.n	80016e6 <_svfprintf_r+0x96>
 800189a:	f899 8000 	ldrb.w	r8, [r9]
 800189e:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 80018a2:	f109 0001 	add.w	r0, r9, #1
 80018a6:	f001 8118 	beq.w	8002ada <_svfprintf_r+0x148a>
 80018aa:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 80018ae:	2b09      	cmp	r3, #9
 80018b0:	bf98      	it	ls
 80018b2:	2100      	movls	r1, #0
 80018b4:	f201 8077 	bhi.w	80029a6 <_svfprintf_r+0x1356>
 80018b8:	f810 8b01 	ldrb.w	r8, [r0], #1
 80018bc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80018c0:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80018c4:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 80018c8:	2b09      	cmp	r3, #9
 80018ca:	d9f5      	bls.n	80018b8 <_svfprintf_r+0x268>
 80018cc:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
 80018d0:	910a      	str	r1, [sp, #40]	; 0x28
 80018d2:	4681      	mov	r9, r0
 80018d4:	e71a      	b.n	800170c <_svfprintf_r+0xbc>
 80018d6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80018d8:	4ca1      	ldr	r4, [pc, #644]	; (8001b60 <_svfprintf_r+0x510>)
 80018da:	941a      	str	r4, [sp, #104]	; 0x68
 80018dc:	06af      	lsls	r7, r5, #26
 80018de:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 80018e2:	f140 81d1 	bpl.w	8001c88 <_svfprintf_r+0x638>
 80018e6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 80018ea:	f10c 0307 	add.w	r3, ip, #7
 80018ee:	f023 0307 	bic.w	r3, r3, #7
 80018f2:	f103 0408 	add.w	r4, r3, #8
 80018f6:	9410      	str	r4, [sp, #64]	; 0x40
 80018f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80018fc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8001900:	f01c 0f01 	tst.w	ip, #1
 8001904:	f000 8464 	beq.w	80021d0 <_svfprintf_r+0xb80>
 8001908:	ea54 0005 	orrs.w	r0, r4, r5
 800190c:	f000 8460 	beq.w	80021d0 <_svfprintf_r+0xb80>
 8001910:	2330      	movs	r3, #48	; 0x30
 8001912:	f04c 0c02 	orr.w	ip, ip, #2
 8001916:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 800191a:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
 800191e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8001922:	2302      	movs	r3, #2
 8001924:	f04f 0a00 	mov.w	sl, #0
 8001928:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 800192c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800192e:	2900      	cmp	r1, #0
 8001930:	db05      	blt.n	800193e <_svfprintf_r+0x2ee>
 8001932:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8001936:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
 800193a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800193e:	ea54 0005 	orrs.w	r0, r4, r5
 8001942:	f040 82c7 	bne.w	8001ed4 <_svfprintf_r+0x884>
 8001946:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001948:	2900      	cmp	r1, #0
 800194a:	f040 82c3 	bne.w	8001ed4 <_svfprintf_r+0x884>
 800194e:	2b00      	cmp	r3, #0
 8001950:	f040 843a 	bne.w	80021c8 <_svfprintf_r+0xb78>
 8001954:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8001958:	f01c 0f01 	tst.w	ip, #1
 800195c:	f000 8434 	beq.w	80021c8 <_svfprintf_r+0xb78>
 8001960:	af48      	add	r7, sp, #288	; 0x120
 8001962:	2330      	movs	r3, #48	; 0x30
 8001964:	f807 3d41 	strb.w	r3, [r7, #-65]!
 8001968:	9d08      	ldr	r5, [sp, #32]
 800196a:	1bec      	subs	r4, r5, r7
 800196c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8001970:	2500      	movs	r5, #0
 8001972:	4564      	cmp	r4, ip
 8001974:	bfa8      	it	ge
 8001976:	46a4      	movge	ip, r4
 8001978:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800197c:	9514      	str	r5, [sp, #80]	; 0x50
 800197e:	f1ba 0f00 	cmp.w	sl, #0
 8001982:	d002      	beq.n	800198a <_svfprintf_r+0x33a>
 8001984:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001986:	3501      	adds	r5, #1
 8001988:	950b      	str	r5, [sp, #44]	; 0x2c
 800198a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800198c:	f013 0302 	ands.w	r3, r3, #2
 8001990:	9312      	str	r3, [sp, #72]	; 0x48
 8001992:	d002      	beq.n	800199a <_svfprintf_r+0x34a>
 8001994:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001996:	3502      	adds	r5, #2
 8001998:	950b      	str	r5, [sp, #44]	; 0x2c
 800199a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800199e:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
 80019a2:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 80019a6:	f040 8292 	bne.w	8001ece <_svfprintf_r+0x87e>
 80019aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80019ac:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80019b0:	ebcc 0b05 	rsb	fp, ip, r5
 80019b4:	f1bb 0f00 	cmp.w	fp, #0
 80019b8:	f340 8289 	ble.w	8001ece <_svfprintf_r+0x87e>
 80019bc:	f1bb 0f10 	cmp.w	fp, #16
 80019c0:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80019c2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80019c4:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8001b68 <_svfprintf_r+0x518>
 80019c8:	dd2c      	ble.n	8001a24 <_svfprintf_r+0x3d4>
 80019ca:	971b      	str	r7, [sp, #108]	; 0x6c
 80019cc:	4630      	mov	r0, r6
 80019ce:	4657      	mov	r7, sl
 80019d0:	2510      	movs	r5, #16
 80019d2:	46ca      	mov	sl, r9
 80019d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80019d6:	46a1      	mov	r9, r4
 80019d8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80019da:	e006      	b.n	80019ea <_svfprintf_r+0x39a>
 80019dc:	f1ab 0b10 	sub.w	fp, fp, #16
 80019e0:	f1bb 0f10 	cmp.w	fp, #16
 80019e4:	f100 0008 	add.w	r0, r0, #8
 80019e8:	dd17      	ble.n	8001a1a <_svfprintf_r+0x3ca>
 80019ea:	3201      	adds	r2, #1
 80019ec:	3110      	adds	r1, #16
 80019ee:	2a07      	cmp	r2, #7
 80019f0:	912d      	str	r1, [sp, #180]	; 0xb4
 80019f2:	922c      	str	r2, [sp, #176]	; 0xb0
 80019f4:	6007      	str	r7, [r0, #0]
 80019f6:	6045      	str	r5, [r0, #4]
 80019f8:	ddf0      	ble.n	80019dc <_svfprintf_r+0x38c>
 80019fa:	4620      	mov	r0, r4
 80019fc:	4631      	mov	r1, r6
 80019fe:	aa2b      	add	r2, sp, #172	; 0xac
 8001a00:	f002 ff50 	bl	80048a4 <__ssprint_r>
 8001a04:	2800      	cmp	r0, #0
 8001a06:	f47f af3b 	bne.w	8001880 <_svfprintf_r+0x230>
 8001a0a:	f1ab 0b10 	sub.w	fp, fp, #16
 8001a0e:	f1bb 0f10 	cmp.w	fp, #16
 8001a12:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8001a14:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8001a16:	a838      	add	r0, sp, #224	; 0xe0
 8001a18:	dce7      	bgt.n	80019ea <_svfprintf_r+0x39a>
 8001a1a:	464c      	mov	r4, r9
 8001a1c:	46d1      	mov	r9, sl
 8001a1e:	46ba      	mov	sl, r7
 8001a20:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8001a22:	4606      	mov	r6, r0
 8001a24:	3201      	adds	r2, #1
 8001a26:	eb0b 0c01 	add.w	ip, fp, r1
 8001a2a:	2a07      	cmp	r2, #7
 8001a2c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8001a30:	922c      	str	r2, [sp, #176]	; 0xb0
 8001a32:	e886 0c00 	stmia.w	r6, {sl, fp}
 8001a36:	f300 841c 	bgt.w	8002272 <_svfprintf_r+0xc22>
 8001a3a:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8001a3e:	3608      	adds	r6, #8
 8001a40:	f1ba 0f00 	cmp.w	sl, #0
 8001a44:	d00f      	beq.n	8001a66 <_svfprintf_r+0x416>
 8001a46:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f10c 0c01 	add.w	ip, ip, #1
 8001a4e:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
 8001a52:	2201      	movs	r2, #1
 8001a54:	2b07      	cmp	r3, #7
 8001a56:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8001a5a:	932c      	str	r3, [sp, #176]	; 0xb0
 8001a5c:	e886 0006 	stmia.w	r6, {r1, r2}
 8001a60:	f300 839a 	bgt.w	8002198 <_svfprintf_r+0xb48>
 8001a64:	3608      	adds	r6, #8
 8001a66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001a68:	b173      	cbz	r3, 8001a88 <_svfprintf_r+0x438>
 8001a6a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f10c 0c02 	add.w	ip, ip, #2
 8001a72:	a924      	add	r1, sp, #144	; 0x90
 8001a74:	2202      	movs	r2, #2
 8001a76:	2b07      	cmp	r3, #7
 8001a78:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8001a7c:	932c      	str	r3, [sp, #176]	; 0xb0
 8001a7e:	e886 0006 	stmia.w	r6, {r1, r2}
 8001a82:	f300 8395 	bgt.w	80021b0 <_svfprintf_r+0xb60>
 8001a86:	3608      	adds	r6, #8
 8001a88:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001a8a:	2d80      	cmp	r5, #128	; 0x80
 8001a8c:	f000 82cc 	beq.w	8002028 <_svfprintf_r+0x9d8>
 8001a90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001a92:	ebc4 0a05 	rsb	sl, r4, r5
 8001a96:	f1ba 0f00 	cmp.w	sl, #0
 8001a9a:	dd3b      	ble.n	8001b14 <_svfprintf_r+0x4c4>
 8001a9c:	f1ba 0f10 	cmp.w	sl, #16
 8001aa0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001aa2:	4d30      	ldr	r5, [pc, #192]	; (8001b64 <_svfprintf_r+0x514>)
 8001aa4:	dd2b      	ble.n	8001afe <_svfprintf_r+0x4ae>
 8001aa6:	940a      	str	r4, [sp, #40]	; 0x28
 8001aa8:	4632      	mov	r2, r6
 8001aaa:	f04f 0b10 	mov.w	fp, #16
 8001aae:	462e      	mov	r6, r5
 8001ab0:	4661      	mov	r1, ip
 8001ab2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8001ab4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001ab6:	e006      	b.n	8001ac6 <_svfprintf_r+0x476>
 8001ab8:	f1aa 0a10 	sub.w	sl, sl, #16
 8001abc:	f1ba 0f10 	cmp.w	sl, #16
 8001ac0:	f102 0208 	add.w	r2, r2, #8
 8001ac4:	dd17      	ble.n	8001af6 <_svfprintf_r+0x4a6>
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	3110      	adds	r1, #16
 8001aca:	2b07      	cmp	r3, #7
 8001acc:	912d      	str	r1, [sp, #180]	; 0xb4
 8001ace:	932c      	str	r3, [sp, #176]	; 0xb0
 8001ad0:	e882 0840 	stmia.w	r2, {r6, fp}
 8001ad4:	ddf0      	ble.n	8001ab8 <_svfprintf_r+0x468>
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	4629      	mov	r1, r5
 8001ada:	aa2b      	add	r2, sp, #172	; 0xac
 8001adc:	f002 fee2 	bl	80048a4 <__ssprint_r>
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	f47f aecd 	bne.w	8001880 <_svfprintf_r+0x230>
 8001ae6:	f1aa 0a10 	sub.w	sl, sl, #16
 8001aea:	f1ba 0f10 	cmp.w	sl, #16
 8001aee:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8001af0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001af2:	aa38      	add	r2, sp, #224	; 0xe0
 8001af4:	dce7      	bgt.n	8001ac6 <_svfprintf_r+0x476>
 8001af6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001af8:	4635      	mov	r5, r6
 8001afa:	468c      	mov	ip, r1
 8001afc:	4616      	mov	r6, r2
 8001afe:	3301      	adds	r3, #1
 8001b00:	44d4      	add	ip, sl
 8001b02:	2b07      	cmp	r3, #7
 8001b04:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8001b08:	932c      	str	r3, [sp, #176]	; 0xb0
 8001b0a:	e886 0420 	stmia.w	r6, {r5, sl}
 8001b0e:	f300 8337 	bgt.w	8002180 <_svfprintf_r+0xb30>
 8001b12:	3608      	adds	r6, #8
 8001b14:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001b16:	05ed      	lsls	r5, r5, #23
 8001b18:	f100 8226 	bmi.w	8001f68 <_svfprintf_r+0x918>
 8001b1c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001b1e:	6037      	str	r7, [r6, #0]
 8001b20:	3301      	adds	r3, #1
 8001b22:	44a4      	add	ip, r4
 8001b24:	2b07      	cmp	r3, #7
 8001b26:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8001b2a:	6074      	str	r4, [r6, #4]
 8001b2c:	932c      	str	r3, [sp, #176]	; 0xb0
 8001b2e:	f300 8311 	bgt.w	8002154 <_svfprintf_r+0xb04>
 8001b32:	3608      	adds	r6, #8
 8001b34:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001b36:	0763      	lsls	r3, r4, #29
 8001b38:	d549      	bpl.n	8001bce <_svfprintf_r+0x57e>
 8001b3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8001b3c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001b3e:	1a2c      	subs	r4, r5, r0
 8001b40:	2c00      	cmp	r4, #0
 8001b42:	dd44      	ble.n	8001bce <_svfprintf_r+0x57e>
 8001b44:	2c10      	cmp	r4, #16
 8001b46:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001b48:	f8df a01c 	ldr.w	sl, [pc, #28]	; 8001b68 <_svfprintf_r+0x518>
 8001b4c:	dd2b      	ble.n	8001ba6 <_svfprintf_r+0x556>
 8001b4e:	4657      	mov	r7, sl
 8001b50:	2510      	movs	r5, #16
 8001b52:	4662      	mov	r2, ip
 8001b54:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8001b58:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8001b5c:	e00b      	b.n	8001b76 <_svfprintf_r+0x526>
 8001b5e:	bf00      	nop
 8001b60:	080058d0 	.word	0x080058d0
 8001b64:	0800589c 	.word	0x0800589c
 8001b68:	080058f0 	.word	0x080058f0
 8001b6c:	3c10      	subs	r4, #16
 8001b6e:	2c10      	cmp	r4, #16
 8001b70:	f106 0608 	add.w	r6, r6, #8
 8001b74:	dd15      	ble.n	8001ba2 <_svfprintf_r+0x552>
 8001b76:	3301      	adds	r3, #1
 8001b78:	3210      	adds	r2, #16
 8001b7a:	2b07      	cmp	r3, #7
 8001b7c:	922d      	str	r2, [sp, #180]	; 0xb4
 8001b7e:	932c      	str	r3, [sp, #176]	; 0xb0
 8001b80:	6037      	str	r7, [r6, #0]
 8001b82:	6075      	str	r5, [r6, #4]
 8001b84:	ddf2      	ble.n	8001b6c <_svfprintf_r+0x51c>
 8001b86:	4650      	mov	r0, sl
 8001b88:	4641      	mov	r1, r8
 8001b8a:	aa2b      	add	r2, sp, #172	; 0xac
 8001b8c:	f002 fe8a 	bl	80048a4 <__ssprint_r>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	f47f ae75 	bne.w	8001880 <_svfprintf_r+0x230>
 8001b96:	3c10      	subs	r4, #16
 8001b98:	2c10      	cmp	r4, #16
 8001b9a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8001b9c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001b9e:	ae38      	add	r6, sp, #224	; 0xe0
 8001ba0:	dce9      	bgt.n	8001b76 <_svfprintf_r+0x526>
 8001ba2:	4694      	mov	ip, r2
 8001ba4:	46ba      	mov	sl, r7
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	44a4      	add	ip, r4
 8001baa:	2b07      	cmp	r3, #7
 8001bac:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8001bb0:	932c      	str	r3, [sp, #176]	; 0xb0
 8001bb2:	f8c6 a000 	str.w	sl, [r6]
 8001bb6:	6074      	str	r4, [r6, #4]
 8001bb8:	dd09      	ble.n	8001bce <_svfprintf_r+0x57e>
 8001bba:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001bbc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001bbe:	aa2b      	add	r2, sp, #172	; 0xac
 8001bc0:	f002 fe70 	bl	80048a4 <__ssprint_r>
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	f47f ae5b 	bne.w	8001880 <_svfprintf_r+0x230>
 8001bca:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8001bce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8001bd0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001bd2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8001bd4:	42a8      	cmp	r0, r5
 8001bd6:	bfac      	ite	ge
 8001bd8:	1824      	addge	r4, r4, r0
 8001bda:	1964      	addlt	r4, r4, r5
 8001bdc:	940e      	str	r4, [sp, #56]	; 0x38
 8001bde:	f1bc 0f00 	cmp.w	ip, #0
 8001be2:	f040 82c3 	bne.w	800216c <_svfprintf_r+0xb1c>
 8001be6:	2300      	movs	r3, #0
 8001be8:	932c      	str	r3, [sp, #176]	; 0xb0
 8001bea:	ae38      	add	r6, sp, #224	; 0xe0
 8001bec:	e556      	b.n	800169c <_svfprintf_r+0x4c>
 8001bee:	f899 8000 	ldrb.w	r8, [r9]
 8001bf2:	2a00      	cmp	r2, #0
 8001bf4:	f47f ad88 	bne.w	8001708 <_svfprintf_r+0xb8>
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	e585      	b.n	8001708 <_svfprintf_r+0xb8>
 8001bfc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001bfe:	f045 0501 	orr.w	r5, r5, #1
 8001c02:	9509      	str	r5, [sp, #36]	; 0x24
 8001c04:	f899 8000 	ldrb.w	r8, [r9]
 8001c08:	e57e      	b.n	8001708 <_svfprintf_r+0xb8>
 8001c0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001c0c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8001c10:	9509      	str	r5, [sp, #36]	; 0x24
 8001c12:	f899 8000 	ldrb.w	r8, [r9]
 8001c16:	e577      	b.n	8001708 <_svfprintf_r+0xb8>
 8001c18:	2400      	movs	r4, #0
 8001c1a:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8001c1e:	940f      	str	r4, [sp, #60]	; 0x3c
 8001c20:	4621      	mov	r1, r4
 8001c22:	f819 8b01 	ldrb.w	r8, [r9], #1
 8001c26:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001c2a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8001c2e:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8001c32:	2b09      	cmp	r3, #9
 8001c34:	d9f5      	bls.n	8001c22 <_svfprintf_r+0x5d2>
 8001c36:	910f      	str	r1, [sp, #60]	; 0x3c
 8001c38:	e568      	b.n	800170c <_svfprintf_r+0xbc>
 8001c3a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8001c3e:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 8001c42:	f04c 0c10 	orr.w	ip, ip, #16
 8001c46:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8001c4a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001c4c:	06a3      	lsls	r3, r4, #26
 8001c4e:	f140 80b2 	bpl.w	8001db6 <_svfprintf_r+0x766>
 8001c52:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001c54:	1de9      	adds	r1, r5, #7
 8001c56:	f021 0107 	bic.w	r1, r1, #7
 8001c5a:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001c5e:	3108      	adds	r1, #8
 8001c60:	9110      	str	r1, [sp, #64]	; 0x40
 8001c62:	4614      	mov	r4, r2
 8001c64:	461d      	mov	r5, r3
 8001c66:	2a00      	cmp	r2, #0
 8001c68:	f173 0000 	sbcs.w	r0, r3, #0
 8001c6c:	f2c0 838b 	blt.w	8002386 <_svfprintf_r+0xd36>
 8001c70:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8001c74:	2301      	movs	r3, #1
 8001c76:	e659      	b.n	800192c <_svfprintf_r+0x2dc>
 8001c78:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001c7a:	4cb7      	ldr	r4, [pc, #732]	; (8001f58 <_svfprintf_r+0x908>)
 8001c7c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 8001c80:	06af      	lsls	r7, r5, #26
 8001c82:	941a      	str	r4, [sp, #104]	; 0x68
 8001c84:	f53f ae2f 	bmi.w	80018e6 <_svfprintf_r+0x296>
 8001c88:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001c8a:	06ed      	lsls	r5, r5, #27
 8001c8c:	f140 845d 	bpl.w	800254a <_svfprintf_r+0xefa>
 8001c90:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8001c94:	f8dc 4000 	ldr.w	r4, [ip]
 8001c98:	f10c 0c04 	add.w	ip, ip, #4
 8001c9c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8001ca0:	2500      	movs	r5, #0
 8001ca2:	e62b      	b.n	80018fc <_svfprintf_r+0x2ac>
 8001ca4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8001ca8:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 8001cac:	f01c 0f20 	tst.w	ip, #32
 8001cb0:	f000 843d 	beq.w	800252e <_svfprintf_r+0xede>
 8001cb4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001cb6:	6821      	ldr	r1, [r4, #0]
 8001cb8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8001cba:	17e5      	asrs	r5, r4, #31
 8001cbc:	462b      	mov	r3, r5
 8001cbe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001cc0:	4622      	mov	r2, r4
 8001cc2:	3504      	adds	r5, #4
 8001cc4:	9510      	str	r5, [sp, #64]	; 0x40
 8001cc6:	e9c1 2300 	strd	r2, r3, [r1]
 8001cca:	e4e7      	b.n	800169c <_svfprintf_r+0x4c>
 8001ccc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001cce:	6827      	ldr	r7, [r4, #0]
 8001cd0:	f04f 0a00 	mov.w	sl, #0
 8001cd4:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 8001cd8:	1d25      	adds	r5, r4, #4
 8001cda:	2f00      	cmp	r7, #0
 8001cdc:	f000 85f5 	beq.w	80028ca <_svfprintf_r+0x127a>
 8001ce0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001ce2:	2c00      	cmp	r4, #0
 8001ce4:	4638      	mov	r0, r7
 8001ce6:	f2c0 85a7 	blt.w	8002838 <_svfprintf_r+0x11e8>
 8001cea:	4651      	mov	r1, sl
 8001cec:	4622      	mov	r2, r4
 8001cee:	f002 f97f 	bl	8003ff0 <memchr>
 8001cf2:	2800      	cmp	r0, #0
 8001cf4:	f000 861f 	beq.w	8002936 <_svfprintf_r+0x12e6>
 8001cf8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001cfa:	9510      	str	r5, [sp, #64]	; 0x40
 8001cfc:	1bc0      	subs	r0, r0, r7
 8001cfe:	42a0      	cmp	r0, r4
 8001d00:	bfb8      	it	lt
 8001d02:	4604      	movlt	r4, r0
 8001d04:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8001d08:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8001d0c:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 8001d10:	950b      	str	r5, [sp, #44]	; 0x2c
 8001d12:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8001d16:	e632      	b.n	800197e <_svfprintf_r+0x32e>
 8001d18:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8001d1c:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 8001d20:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8001d24:	f899 8000 	ldrb.w	r8, [r9]
 8001d28:	e4ee      	b.n	8001708 <_svfprintf_r+0xb8>
 8001d2a:	f899 8000 	ldrb.w	r8, [r9]
 8001d2e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8001d32:	464b      	mov	r3, r9
 8001d34:	f000 848b 	beq.w	800264e <_svfprintf_r+0xffe>
 8001d38:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001d3a:	f045 0510 	orr.w	r5, r5, #16
 8001d3e:	9509      	str	r5, [sp, #36]	; 0x24
 8001d40:	e4e2      	b.n	8001708 <_svfprintf_r+0xb8>
 8001d42:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001d44:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001d46:	6824      	ldr	r4, [r4, #0]
 8001d48:	940f      	str	r4, [sp, #60]	; 0x3c
 8001d4a:	2c00      	cmp	r4, #0
 8001d4c:	f105 0304 	add.w	r3, r5, #4
 8001d50:	f6ff ad7c 	blt.w	800184c <_svfprintf_r+0x1fc>
 8001d54:	9310      	str	r3, [sp, #64]	; 0x40
 8001d56:	f899 8000 	ldrb.w	r8, [r9]
 8001d5a:	e4d5      	b.n	8001708 <_svfprintf_r+0xb8>
 8001d5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001d5e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8001d62:	487e      	ldr	r0, [pc, #504]	; (8001f5c <_svfprintf_r+0x90c>)
 8001d64:	6814      	ldr	r4, [r2, #0]
 8001d66:	901a      	str	r0, [sp, #104]	; 0x68
 8001d68:	2330      	movs	r3, #48	; 0x30
 8001d6a:	1d15      	adds	r5, r2, #4
 8001d6c:	f04f 0878 	mov.w	r8, #120	; 0x78
 8001d70:	f04c 0c02 	orr.w	ip, ip, #2
 8001d74:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8001d78:	9510      	str	r5, [sp, #64]	; 0x40
 8001d7a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8001d7e:	2500      	movs	r5, #0
 8001d80:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
 8001d84:	2302      	movs	r3, #2
 8001d86:	e5cd      	b.n	8001924 <_svfprintf_r+0x2d4>
 8001d88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001d8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
 8001d92:	2300      	movs	r3, #0
 8001d94:	2401      	movs	r4, #1
 8001d96:	3504      	adds	r5, #4
 8001d98:	469a      	mov	sl, r3
 8001d9a:	940b      	str	r4, [sp, #44]	; 0x2c
 8001d9c:	9510      	str	r5, [sp, #64]	; 0x40
 8001d9e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8001da2:	930a      	str	r3, [sp, #40]	; 0x28
 8001da4:	9314      	str	r3, [sp, #80]	; 0x50
 8001da6:	af2e      	add	r7, sp, #184	; 0xb8
 8001da8:	e5ef      	b.n	800198a <_svfprintf_r+0x33a>
 8001daa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001dac:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 8001db0:	06a3      	lsls	r3, r4, #26
 8001db2:	f53f af4e 	bmi.w	8001c52 <_svfprintf_r+0x602>
 8001db6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8001dba:	f01c 0f10 	tst.w	ip, #16
 8001dbe:	f040 82d2 	bne.w	8002366 <_svfprintf_r+0xd16>
 8001dc2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001dc4:	0667      	lsls	r7, r4, #25
 8001dc6:	f140 82ce 	bpl.w	8002366 <_svfprintf_r+0xd16>
 8001dca:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8001dce:	f9bc 4000 	ldrsh.w	r4, [ip]
 8001dd2:	f10c 0c04 	add.w	ip, ip, #4
 8001dd6:	17e5      	asrs	r5, r4, #31
 8001dd8:	4622      	mov	r2, r4
 8001dda:	462b      	mov	r3, r5
 8001ddc:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8001de0:	e741      	b.n	8001c66 <_svfprintf_r+0x616>
 8001de2:	f899 8000 	ldrb.w	r8, [r9]
 8001de6:	222b      	movs	r2, #43	; 0x2b
 8001de8:	e48e      	b.n	8001708 <_svfprintf_r+0xb8>
 8001dea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001dec:	f045 0508 	orr.w	r5, r5, #8
 8001df0:	9509      	str	r5, [sp, #36]	; 0x24
 8001df2:	f899 8000 	ldrb.w	r8, [r9]
 8001df6:	e487      	b.n	8001708 <_svfprintf_r+0xb8>
 8001df8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001dfa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001dfc:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 8001e00:	1deb      	adds	r3, r5, #7
 8001e02:	0725      	lsls	r5, r4, #28
 8001e04:	f023 0307 	bic.w	r3, r3, #7
 8001e08:	f140 838a 	bpl.w	8002520 <_svfprintf_r+0xed0>
 8001e0c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001e10:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
 8001e14:	f103 0c08 	add.w	ip, r3, #8
 8001e18:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8001e1c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8001e20:	f002 fcd6 	bl	80047d0 <__fpclassifyd>
 8001e24:	2801      	cmp	r0, #1
 8001e26:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8001e2a:	f040 835f 	bne.w	80024ec <_svfprintf_r+0xe9c>
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2300      	movs	r3, #0
 8001e32:	f003 f9f3 	bl	800521c <__aeabi_dcmplt>
 8001e36:	2800      	cmp	r0, #0
 8001e38:	f040 856d 	bne.w	8002916 <_svfprintf_r+0x12c6>
 8001e3c:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8001e40:	2503      	movs	r5, #3
 8001e42:	950b      	str	r5, [sp, #44]	; 0x2c
 8001e44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001e46:	4f46      	ldr	r7, [pc, #280]	; (8001f60 <_svfprintf_r+0x910>)
 8001e48:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <_svfprintf_r+0x914>)
 8001e4a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8001e4e:	2400      	movs	r4, #0
 8001e50:	9509      	str	r5, [sp, #36]	; 0x24
 8001e52:	2500      	movs	r5, #0
 8001e54:	940a      	str	r4, [sp, #40]	; 0x28
 8001e56:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001e5a:	bfd8      	it	le
 8001e5c:	461f      	movle	r7, r3
 8001e5e:	2403      	movs	r4, #3
 8001e60:	9514      	str	r5, [sp, #80]	; 0x50
 8001e62:	e58c      	b.n	800197e <_svfprintf_r+0x32e>
 8001e64:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8001e68:	f04c 0c20 	orr.w	ip, ip, #32
 8001e6c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8001e70:	f899 8000 	ldrb.w	r8, [r9]
 8001e74:	e448      	b.n	8001708 <_svfprintf_r+0xb8>
 8001e76:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001e78:	1de3      	adds	r3, r4, #7
 8001e7a:	f023 0307 	bic.w	r3, r3, #7
 8001e7e:	f103 0508 	add.w	r5, r3, #8
 8001e82:	9510      	str	r5, [sp, #64]	; 0x40
 8001e84:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e54b      	b.n	8001924 <_svfprintf_r+0x2d4>
 8001e8c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001e8e:	1deb      	adds	r3, r5, #7
 8001e90:	f023 0307 	bic.w	r3, r3, #7
 8001e94:	f103 0c08 	add.w	ip, r3, #8
 8001e98:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001e9c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e53f      	b.n	8001924 <_svfprintf_r+0x2d4>
 8001ea4:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 8001ea8:	f1b8 0f00 	cmp.w	r8, #0
 8001eac:	f43f ace1 	beq.w	8001872 <_svfprintf_r+0x222>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f04f 0c01 	mov.w	ip, #1
 8001eb6:	469a      	mov	sl, r3
 8001eb8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8001ebc:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
 8001ec0:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8001ec4:	930a      	str	r3, [sp, #40]	; 0x28
 8001ec6:	9314      	str	r3, [sp, #80]	; 0x50
 8001ec8:	4664      	mov	r4, ip
 8001eca:	af2e      	add	r7, sp, #184	; 0xb8
 8001ecc:	e55d      	b.n	800198a <_svfprintf_r+0x33a>
 8001ece:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8001ed2:	e5b5      	b.n	8001a40 <_svfprintf_r+0x3f0>
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	f000 80ec 	beq.w	80020b2 <_svfprintf_r+0xa62>
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
 8001ee0:	d118      	bne.n	8001f14 <_svfprintf_r+0x8c4>
 8001ee2:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f004 000f 	and.w	r0, r4, #15
 8001eec:	0922      	lsrs	r2, r4, #4
 8001eee:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
 8001ef2:	460f      	mov	r7, r1
 8001ef4:	092b      	lsrs	r3, r5, #4
 8001ef6:	f81c 1000 	ldrb.w	r1, [ip, r0]
 8001efa:	7039      	strb	r1, [r7, #0]
 8001efc:	ea52 0003 	orrs.w	r0, r2, r3
 8001f00:	4614      	mov	r4, r2
 8001f02:	461d      	mov	r5, r3
 8001f04:	f107 31ff 	add.w	r1, r7, #4294967295
 8001f08:	d1ee      	bne.n	8001ee8 <_svfprintf_r+0x898>
 8001f0a:	9d08      	ldr	r5, [sp, #32]
 8001f0c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8001f10:	1bec      	subs	r4, r5, r7
 8001f12:	e52b      	b.n	800196c <_svfprintf_r+0x31c>
 8001f14:	08e0      	lsrs	r0, r4, #3
 8001f16:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
 8001f1a:	f004 0207 	and.w	r2, r4, #7
 8001f1e:	08e9      	lsrs	r1, r5, #3
 8001f20:	3230      	adds	r2, #48	; 0x30
 8001f22:	ea50 0c01 	orrs.w	ip, r0, r1
 8001f26:	461f      	mov	r7, r3
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	460d      	mov	r5, r1
 8001f2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8001f32:	d1ef      	bne.n	8001f14 <_svfprintf_r+0x8c4>
 8001f34:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001f36:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 8001f3a:	07e0      	lsls	r0, r4, #31
 8001f3c:	4639      	mov	r1, r7
 8001f3e:	f140 80c1 	bpl.w	80020c4 <_svfprintf_r+0xa74>
 8001f42:	2a30      	cmp	r2, #48	; 0x30
 8001f44:	f000 80be 	beq.w	80020c4 <_svfprintf_r+0xa74>
 8001f48:	9d08      	ldr	r5, [sp, #32]
 8001f4a:	461f      	mov	r7, r3
 8001f4c:	2330      	movs	r3, #48	; 0x30
 8001f4e:	1bec      	subs	r4, r5, r7
 8001f50:	f801 3c01 	strb.w	r3, [r1, #-1]
 8001f54:	e50a      	b.n	800196c <_svfprintf_r+0x31c>
 8001f56:	bf00      	nop
 8001f58:	080058bc 	.word	0x080058bc
 8001f5c:	080058d0 	.word	0x080058d0
 8001f60:	080058b0 	.word	0x080058b0
 8001f64:	080058ac 	.word	0x080058ac
 8001f68:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8001f6c:	f340 80ad 	ble.w	80020ca <_svfprintf_r+0xa7a>
 8001f70:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8001f74:	2200      	movs	r2, #0
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8cd c01c 	str.w	ip, [sp, #28]
 8001f7c:	f003 f944 	bl	8005208 <__aeabi_dcmpeq>
 8001f80:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8001f84:	2800      	cmp	r0, #0
 8001f86:	f000 8126 	beq.w	80021d6 <_svfprintf_r+0xb86>
 8001f8a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001f8c:	4aaa      	ldr	r2, [pc, #680]	; (8002238 <_svfprintf_r+0xbe8>)
 8001f8e:	6032      	str	r2, [r6, #0]
 8001f90:	3301      	adds	r3, #1
 8001f92:	f10c 0c01 	add.w	ip, ip, #1
 8001f96:	2201      	movs	r2, #1
 8001f98:	2b07      	cmp	r3, #7
 8001f9a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8001f9e:	932c      	str	r3, [sp, #176]	; 0xb0
 8001fa0:	6072      	str	r2, [r6, #4]
 8001fa2:	f300 82f7 	bgt.w	8002594 <_svfprintf_r+0xf44>
 8001fa6:	3608      	adds	r6, #8
 8001fa8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8001faa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8001fac:	42a3      	cmp	r3, r4
 8001fae:	db03      	blt.n	8001fb8 <_svfprintf_r+0x968>
 8001fb0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001fb2:	07ec      	lsls	r4, r5, #31
 8001fb4:	f57f adbe 	bpl.w	8001b34 <_svfprintf_r+0x4e4>
 8001fb8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001fba:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8001fbc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8001fbe:	6034      	str	r4, [r6, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	44ac      	add	ip, r5
 8001fc4:	2b07      	cmp	r3, #7
 8001fc6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8001fca:	6075      	str	r5, [r6, #4]
 8001fcc:	932c      	str	r3, [sp, #176]	; 0xb0
 8001fce:	f300 8348 	bgt.w	8002662 <_svfprintf_r+0x1012>
 8001fd2:	3608      	adds	r6, #8
 8001fd4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8001fd6:	1e6c      	subs	r4, r5, #1
 8001fd8:	2c00      	cmp	r4, #0
 8001fda:	f77f adab 	ble.w	8001b34 <_svfprintf_r+0x4e4>
 8001fde:	2c10      	cmp	r4, #16
 8001fe0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001fe2:	4d96      	ldr	r5, [pc, #600]	; (800223c <_svfprintf_r+0xbec>)
 8001fe4:	f340 8197 	ble.w	8002316 <_svfprintf_r+0xcc6>
 8001fe8:	2710      	movs	r7, #16
 8001fea:	4662      	mov	r2, ip
 8001fec:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8001ff0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8001ff4:	e004      	b.n	8002000 <_svfprintf_r+0x9b0>
 8001ff6:	3608      	adds	r6, #8
 8001ff8:	3c10      	subs	r4, #16
 8001ffa:	2c10      	cmp	r4, #16
 8001ffc:	f340 818a 	ble.w	8002314 <_svfprintf_r+0xcc4>
 8002000:	3301      	adds	r3, #1
 8002002:	3210      	adds	r2, #16
 8002004:	2b07      	cmp	r3, #7
 8002006:	922d      	str	r2, [sp, #180]	; 0xb4
 8002008:	932c      	str	r3, [sp, #176]	; 0xb0
 800200a:	e886 00a0 	stmia.w	r6, {r5, r7}
 800200e:	ddf2      	ble.n	8001ff6 <_svfprintf_r+0x9a6>
 8002010:	4640      	mov	r0, r8
 8002012:	4651      	mov	r1, sl
 8002014:	aa2b      	add	r2, sp, #172	; 0xac
 8002016:	f002 fc45 	bl	80048a4 <__ssprint_r>
 800201a:	2800      	cmp	r0, #0
 800201c:	f47f ac30 	bne.w	8001880 <_svfprintf_r+0x230>
 8002020:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8002022:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8002024:	ae38      	add	r6, sp, #224	; 0xe0
 8002026:	e7e7      	b.n	8001ff8 <_svfprintf_r+0x9a8>
 8002028:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800202a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800202c:	ebc0 0a05 	rsb	sl, r0, r5
 8002030:	f1ba 0f00 	cmp.w	sl, #0
 8002034:	f77f ad2c 	ble.w	8001a90 <_svfprintf_r+0x440>
 8002038:	f1ba 0f10 	cmp.w	sl, #16
 800203c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800203e:	4d7f      	ldr	r5, [pc, #508]	; (800223c <_svfprintf_r+0xbec>)
 8002040:	dd2b      	ble.n	800209a <_svfprintf_r+0xa4a>
 8002042:	9412      	str	r4, [sp, #72]	; 0x48
 8002044:	4632      	mov	r2, r6
 8002046:	f04f 0b10 	mov.w	fp, #16
 800204a:	462e      	mov	r6, r5
 800204c:	4661      	mov	r1, ip
 800204e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002050:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002052:	e006      	b.n	8002062 <_svfprintf_r+0xa12>
 8002054:	f1aa 0a10 	sub.w	sl, sl, #16
 8002058:	f1ba 0f10 	cmp.w	sl, #16
 800205c:	f102 0208 	add.w	r2, r2, #8
 8002060:	dd17      	ble.n	8002092 <_svfprintf_r+0xa42>
 8002062:	3301      	adds	r3, #1
 8002064:	3110      	adds	r1, #16
 8002066:	2b07      	cmp	r3, #7
 8002068:	912d      	str	r1, [sp, #180]	; 0xb4
 800206a:	932c      	str	r3, [sp, #176]	; 0xb0
 800206c:	e882 0840 	stmia.w	r2, {r6, fp}
 8002070:	ddf0      	ble.n	8002054 <_svfprintf_r+0xa04>
 8002072:	4620      	mov	r0, r4
 8002074:	4629      	mov	r1, r5
 8002076:	aa2b      	add	r2, sp, #172	; 0xac
 8002078:	f002 fc14 	bl	80048a4 <__ssprint_r>
 800207c:	2800      	cmp	r0, #0
 800207e:	f47f abff 	bne.w	8001880 <_svfprintf_r+0x230>
 8002082:	f1aa 0a10 	sub.w	sl, sl, #16
 8002086:	f1ba 0f10 	cmp.w	sl, #16
 800208a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800208c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800208e:	aa38      	add	r2, sp, #224	; 0xe0
 8002090:	dce7      	bgt.n	8002062 <_svfprintf_r+0xa12>
 8002092:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8002094:	4635      	mov	r5, r6
 8002096:	468c      	mov	ip, r1
 8002098:	4616      	mov	r6, r2
 800209a:	3301      	adds	r3, #1
 800209c:	44d4      	add	ip, sl
 800209e:	2b07      	cmp	r3, #7
 80020a0:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 80020a4:	932c      	str	r3, [sp, #176]	; 0xb0
 80020a6:	e886 0420 	stmia.w	r6, {r5, sl}
 80020aa:	f300 8212 	bgt.w	80024d2 <_svfprintf_r+0xe82>
 80020ae:	3608      	adds	r6, #8
 80020b0:	e4ee      	b.n	8001a90 <_svfprintf_r+0x440>
 80020b2:	2d00      	cmp	r5, #0
 80020b4:	bf08      	it	eq
 80020b6:	2c0a      	cmpeq	r4, #10
 80020b8:	f080 8138 	bcs.w	800232c <_svfprintf_r+0xcdc>
 80020bc:	af48      	add	r7, sp, #288	; 0x120
 80020be:	3430      	adds	r4, #48	; 0x30
 80020c0:	f807 4d41 	strb.w	r4, [r7, #-65]!
 80020c4:	9d08      	ldr	r5, [sp, #32]
 80020c6:	1bec      	subs	r4, r5, r7
 80020c8:	e450      	b.n	800196c <_svfprintf_r+0x31c>
 80020ca:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80020cc:	2c01      	cmp	r4, #1
 80020ce:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80020d0:	f340 81d5 	ble.w	800247e <_svfprintf_r+0xe2e>
 80020d4:	3401      	adds	r4, #1
 80020d6:	f10c 0301 	add.w	r3, ip, #1
 80020da:	2201      	movs	r2, #1
 80020dc:	2c07      	cmp	r4, #7
 80020de:	6037      	str	r7, [r6, #0]
 80020e0:	932d      	str	r3, [sp, #180]	; 0xb4
 80020e2:	942c      	str	r4, [sp, #176]	; 0xb0
 80020e4:	6072      	str	r2, [r6, #4]
 80020e6:	f300 81db 	bgt.w	80024a0 <_svfprintf_r+0xe50>
 80020ea:	3608      	adds	r6, #8
 80020ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80020f0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80020f2:	6035      	str	r5, [r6, #0]
 80020f4:	3401      	adds	r4, #1
 80020f6:	4498      	add	r8, r3
 80020f8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80020fa:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
 80020fe:	2c07      	cmp	r4, #7
 8002100:	942c      	str	r4, [sp, #176]	; 0xb0
 8002102:	6075      	str	r5, [r6, #4]
 8002104:	f300 81d8 	bgt.w	80024b8 <_svfprintf_r+0xe68>
 8002108:	3608      	adds	r6, #8
 800210a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800210e:	2200      	movs	r2, #0
 8002110:	2300      	movs	r3, #0
 8002112:	f003 f879 	bl	8005208 <__aeabi_dcmpeq>
 8002116:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8002118:	2800      	cmp	r0, #0
 800211a:	f040 80b9 	bne.w	8002290 <_svfprintf_r+0xc40>
 800211e:	1e6b      	subs	r3, r5, #1
 8002120:	3401      	adds	r4, #1
 8002122:	3701      	adds	r7, #1
 8002124:	4498      	add	r8, r3
 8002126:	2c07      	cmp	r4, #7
 8002128:	942c      	str	r4, [sp, #176]	; 0xb0
 800212a:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
 800212e:	6037      	str	r7, [r6, #0]
 8002130:	6073      	str	r3, [r6, #4]
 8002132:	f300 80e2 	bgt.w	80022fa <_svfprintf_r+0xcaa>
 8002136:	3608      	adds	r6, #8
 8002138:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 800213c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800213e:	3401      	adds	r4, #1
 8002140:	44c4      	add	ip, r8
 8002142:	ab27      	add	r3, sp, #156	; 0x9c
 8002144:	2c07      	cmp	r4, #7
 8002146:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 800214a:	942c      	str	r4, [sp, #176]	; 0xb0
 800214c:	e886 0028 	stmia.w	r6, {r3, r5}
 8002150:	f77f acef 	ble.w	8001b32 <_svfprintf_r+0x4e2>
 8002154:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002156:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002158:	aa2b      	add	r2, sp, #172	; 0xac
 800215a:	f002 fba3 	bl	80048a4 <__ssprint_r>
 800215e:	2800      	cmp	r0, #0
 8002160:	f47f ab8e 	bne.w	8001880 <_svfprintf_r+0x230>
 8002164:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8002168:	ae38      	add	r6, sp, #224	; 0xe0
 800216a:	e4e3      	b.n	8001b34 <_svfprintf_r+0x4e4>
 800216c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800216e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002170:	aa2b      	add	r2, sp, #172	; 0xac
 8002172:	f002 fb97 	bl	80048a4 <__ssprint_r>
 8002176:	2800      	cmp	r0, #0
 8002178:	f43f ad35 	beq.w	8001be6 <_svfprintf_r+0x596>
 800217c:	f7ff bb80 	b.w	8001880 <_svfprintf_r+0x230>
 8002180:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002182:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002184:	aa2b      	add	r2, sp, #172	; 0xac
 8002186:	f002 fb8d 	bl	80048a4 <__ssprint_r>
 800218a:	2800      	cmp	r0, #0
 800218c:	f47f ab78 	bne.w	8001880 <_svfprintf_r+0x230>
 8002190:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8002194:	ae38      	add	r6, sp, #224	; 0xe0
 8002196:	e4bd      	b.n	8001b14 <_svfprintf_r+0x4c4>
 8002198:	980d      	ldr	r0, [sp, #52]	; 0x34
 800219a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800219c:	aa2b      	add	r2, sp, #172	; 0xac
 800219e:	f002 fb81 	bl	80048a4 <__ssprint_r>
 80021a2:	2800      	cmp	r0, #0
 80021a4:	f47f ab6c 	bne.w	8001880 <_svfprintf_r+0x230>
 80021a8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 80021ac:	ae38      	add	r6, sp, #224	; 0xe0
 80021ae:	e45a      	b.n	8001a66 <_svfprintf_r+0x416>
 80021b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80021b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80021b4:	aa2b      	add	r2, sp, #172	; 0xac
 80021b6:	f002 fb75 	bl	80048a4 <__ssprint_r>
 80021ba:	2800      	cmp	r0, #0
 80021bc:	f47f ab60 	bne.w	8001880 <_svfprintf_r+0x230>
 80021c0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 80021c4:	ae38      	add	r6, sp, #224	; 0xe0
 80021c6:	e45f      	b.n	8001a88 <_svfprintf_r+0x438>
 80021c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80021ca:	af38      	add	r7, sp, #224	; 0xe0
 80021cc:	f7ff bbce 	b.w	800196c <_svfprintf_r+0x31c>
 80021d0:	2302      	movs	r3, #2
 80021d2:	f7ff bba7 	b.w	8001924 <_svfprintf_r+0x2d4>
 80021d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f340 81e7 	ble.w	80025ac <_svfprintf_r+0xf5c>
 80021de:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80021e0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80021e2:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80021e6:	42ac      	cmp	r4, r5
 80021e8:	bfa8      	it	ge
 80021ea:	462c      	movge	r4, r5
 80021ec:	2c00      	cmp	r4, #0
 80021ee:	44ba      	add	sl, r7
 80021f0:	dd0b      	ble.n	800220a <_svfprintf_r+0xbba>
 80021f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80021f4:	6037      	str	r7, [r6, #0]
 80021f6:	3301      	adds	r3, #1
 80021f8:	44a4      	add	ip, r4
 80021fa:	2b07      	cmp	r3, #7
 80021fc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8002200:	6074      	str	r4, [r6, #4]
 8002202:	932c      	str	r3, [sp, #176]	; 0xb0
 8002204:	f300 8328 	bgt.w	8002858 <_svfprintf_r+0x1208>
 8002208:	3608      	adds	r6, #8
 800220a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800220c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8002210:	1b2c      	subs	r4, r5, r4
 8002212:	2c00      	cmp	r4, #0
 8002214:	f340 80db 	ble.w	80023ce <_svfprintf_r+0xd7e>
 8002218:	2c10      	cmp	r4, #16
 800221a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800221c:	4d07      	ldr	r5, [pc, #28]	; (800223c <_svfprintf_r+0xbec>)
 800221e:	f340 81ad 	ble.w	800257c <_svfprintf_r+0xf2c>
 8002222:	970a      	str	r7, [sp, #40]	; 0x28
 8002224:	f04f 0810 	mov.w	r8, #16
 8002228:	462f      	mov	r7, r5
 800222a:	4662      	mov	r2, ip
 800222c:	4625      	mov	r5, r4
 800222e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8002232:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002234:	e009      	b.n	800224a <_svfprintf_r+0xbfa>
 8002236:	bf00      	nop
 8002238:	080058ec 	.word	0x080058ec
 800223c:	0800589c 	.word	0x0800589c
 8002240:	3608      	adds	r6, #8
 8002242:	3d10      	subs	r5, #16
 8002244:	2d10      	cmp	r5, #16
 8002246:	f340 8195 	ble.w	8002574 <_svfprintf_r+0xf24>
 800224a:	3301      	adds	r3, #1
 800224c:	3210      	adds	r2, #16
 800224e:	2b07      	cmp	r3, #7
 8002250:	922d      	str	r2, [sp, #180]	; 0xb4
 8002252:	932c      	str	r3, [sp, #176]	; 0xb0
 8002254:	e886 0180 	stmia.w	r6, {r7, r8}
 8002258:	ddf2      	ble.n	8002240 <_svfprintf_r+0xbf0>
 800225a:	4658      	mov	r0, fp
 800225c:	4621      	mov	r1, r4
 800225e:	aa2b      	add	r2, sp, #172	; 0xac
 8002260:	f002 fb20 	bl	80048a4 <__ssprint_r>
 8002264:	2800      	cmp	r0, #0
 8002266:	f47f ab0b 	bne.w	8001880 <_svfprintf_r+0x230>
 800226a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800226c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800226e:	ae38      	add	r6, sp, #224	; 0xe0
 8002270:	e7e7      	b.n	8002242 <_svfprintf_r+0xbf2>
 8002272:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002274:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002276:	aa2b      	add	r2, sp, #172	; 0xac
 8002278:	f002 fb14 	bl	80048a4 <__ssprint_r>
 800227c:	2800      	cmp	r0, #0
 800227e:	f47f aaff 	bne.w	8001880 <_svfprintf_r+0x230>
 8002282:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8002286:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 800228a:	ae38      	add	r6, sp, #224	; 0xe0
 800228c:	f7ff bbd8 	b.w	8001a40 <_svfprintf_r+0x3f0>
 8002290:	1e6f      	subs	r7, r5, #1
 8002292:	2f00      	cmp	r7, #0
 8002294:	f77f af50 	ble.w	8002138 <_svfprintf_r+0xae8>
 8002298:	2f10      	cmp	r7, #16
 800229a:	4db3      	ldr	r5, [pc, #716]	; (8002568 <_svfprintf_r+0xf18>)
 800229c:	dd23      	ble.n	80022e6 <_svfprintf_r+0xc96>
 800229e:	4643      	mov	r3, r8
 80022a0:	f04f 0a10 	mov.w	sl, #16
 80022a4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80022a8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80022ac:	e004      	b.n	80022b8 <_svfprintf_r+0xc68>
 80022ae:	3f10      	subs	r7, #16
 80022b0:	2f10      	cmp	r7, #16
 80022b2:	f106 0608 	add.w	r6, r6, #8
 80022b6:	dd15      	ble.n	80022e4 <_svfprintf_r+0xc94>
 80022b8:	3401      	adds	r4, #1
 80022ba:	3310      	adds	r3, #16
 80022bc:	2c07      	cmp	r4, #7
 80022be:	932d      	str	r3, [sp, #180]	; 0xb4
 80022c0:	942c      	str	r4, [sp, #176]	; 0xb0
 80022c2:	e886 0420 	stmia.w	r6, {r5, sl}
 80022c6:	ddf2      	ble.n	80022ae <_svfprintf_r+0xc5e>
 80022c8:	4640      	mov	r0, r8
 80022ca:	4659      	mov	r1, fp
 80022cc:	aa2b      	add	r2, sp, #172	; 0xac
 80022ce:	f002 fae9 	bl	80048a4 <__ssprint_r>
 80022d2:	2800      	cmp	r0, #0
 80022d4:	f47f aad4 	bne.w	8001880 <_svfprintf_r+0x230>
 80022d8:	3f10      	subs	r7, #16
 80022da:	2f10      	cmp	r7, #16
 80022dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80022de:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80022e0:	ae38      	add	r6, sp, #224	; 0xe0
 80022e2:	dce9      	bgt.n	80022b8 <_svfprintf_r+0xc68>
 80022e4:	4698      	mov	r8, r3
 80022e6:	3401      	adds	r4, #1
 80022e8:	44b8      	add	r8, r7
 80022ea:	2c07      	cmp	r4, #7
 80022ec:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
 80022f0:	942c      	str	r4, [sp, #176]	; 0xb0
 80022f2:	e886 00a0 	stmia.w	r6, {r5, r7}
 80022f6:	f77f af1e 	ble.w	8002136 <_svfprintf_r+0xae6>
 80022fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80022fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80022fe:	aa2b      	add	r2, sp, #172	; 0xac
 8002300:	f002 fad0 	bl	80048a4 <__ssprint_r>
 8002304:	2800      	cmp	r0, #0
 8002306:	f47f aabb 	bne.w	8001880 <_svfprintf_r+0x230>
 800230a:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
 800230e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8002310:	ae38      	add	r6, sp, #224	; 0xe0
 8002312:	e711      	b.n	8002138 <_svfprintf_r+0xae8>
 8002314:	4694      	mov	ip, r2
 8002316:	3301      	adds	r3, #1
 8002318:	44a4      	add	ip, r4
 800231a:	2b07      	cmp	r3, #7
 800231c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8002320:	932c      	str	r3, [sp, #176]	; 0xb0
 8002322:	6035      	str	r5, [r6, #0]
 8002324:	6074      	str	r4, [r6, #4]
 8002326:	f77f ac04 	ble.w	8001b32 <_svfprintf_r+0x4e2>
 800232a:	e713      	b.n	8002154 <_svfprintf_r+0xb04>
 800232c:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
 8002330:	4620      	mov	r0, r4
 8002332:	4629      	mov	r1, r5
 8002334:	220a      	movs	r2, #10
 8002336:	2300      	movs	r3, #0
 8002338:	f002 ffc0 	bl	80052bc <__aeabi_uldivmod>
 800233c:	3230      	adds	r2, #48	; 0x30
 800233e:	f88b 2000 	strb.w	r2, [fp]
 8002342:	4620      	mov	r0, r4
 8002344:	4629      	mov	r1, r5
 8002346:	220a      	movs	r2, #10
 8002348:	2300      	movs	r3, #0
 800234a:	f002 ffb7 	bl	80052bc <__aeabi_uldivmod>
 800234e:	4604      	mov	r4, r0
 8002350:	460d      	mov	r5, r1
 8002352:	ea54 0c05 	orrs.w	ip, r4, r5
 8002356:	465f      	mov	r7, fp
 8002358:	f10b 3bff 	add.w	fp, fp, #4294967295
 800235c:	d1e8      	bne.n	8002330 <_svfprintf_r+0xce0>
 800235e:	9d08      	ldr	r5, [sp, #32]
 8002360:	1bec      	subs	r4, r5, r7
 8002362:	f7ff bb03 	b.w	800196c <_svfprintf_r+0x31c>
 8002366:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002368:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 800236c:	682c      	ldr	r4, [r5, #0]
 800236e:	17e5      	asrs	r5, r4, #31
 8002370:	4622      	mov	r2, r4
 8002372:	462b      	mov	r3, r5
 8002374:	f10c 0c04 	add.w	ip, ip, #4
 8002378:	2a00      	cmp	r2, #0
 800237a:	f173 0000 	sbcs.w	r0, r3, #0
 800237e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8002382:	f6bf ac75 	bge.w	8001c70 <_svfprintf_r+0x620>
 8002386:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 800238a:	4264      	negs	r4, r4
 800238c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8002390:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 8002394:	2301      	movs	r3, #1
 8002396:	f7ff bac9 	b.w	800192c <_svfprintf_r+0x2dc>
 800239a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800239c:	682c      	ldr	r4, [r5, #0]
 800239e:	3504      	adds	r5, #4
 80023a0:	9510      	str	r5, [sp, #64]	; 0x40
 80023a2:	2500      	movs	r5, #0
 80023a4:	f7ff babe 	b.w	8001924 <_svfprintf_r+0x2d4>
 80023a8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80023aa:	682c      	ldr	r4, [r5, #0]
 80023ac:	3504      	adds	r5, #4
 80023ae:	9510      	str	r5, [sp, #64]	; 0x40
 80023b0:	2301      	movs	r3, #1
 80023b2:	2500      	movs	r5, #0
 80023b4:	f7ff bab6 	b.w	8001924 <_svfprintf_r+0x2d4>
 80023b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80023ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80023bc:	aa2b      	add	r2, sp, #172	; 0xac
 80023be:	f002 fa71 	bl	80048a4 <__ssprint_r>
 80023c2:	2800      	cmp	r0, #0
 80023c4:	f47f aa5c 	bne.w	8001880 <_svfprintf_r+0x230>
 80023c8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 80023cc:	ae38      	add	r6, sp, #224	; 0xe0
 80023ce:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80023d0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80023d2:	442f      	add	r7, r5
 80023d4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80023d6:	42ac      	cmp	r4, r5
 80023d8:	db42      	blt.n	8002460 <_svfprintf_r+0xe10>
 80023da:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80023dc:	07e9      	lsls	r1, r5, #31
 80023de:	d43f      	bmi.n	8002460 <_svfprintf_r+0xe10>
 80023e0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80023e2:	ebc7 050a 	rsb	r5, r7, sl
 80023e6:	1b04      	subs	r4, r0, r4
 80023e8:	42ac      	cmp	r4, r5
 80023ea:	bfb8      	it	lt
 80023ec:	4625      	movlt	r5, r4
 80023ee:	2d00      	cmp	r5, #0
 80023f0:	dd0b      	ble.n	800240a <_svfprintf_r+0xdba>
 80023f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80023f4:	6037      	str	r7, [r6, #0]
 80023f6:	3301      	adds	r3, #1
 80023f8:	44ac      	add	ip, r5
 80023fa:	2b07      	cmp	r3, #7
 80023fc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8002400:	6075      	str	r5, [r6, #4]
 8002402:	932c      	str	r3, [sp, #176]	; 0xb0
 8002404:	f300 8252 	bgt.w	80028ac <_svfprintf_r+0x125c>
 8002408:	3608      	adds	r6, #8
 800240a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800240e:	1b64      	subs	r4, r4, r5
 8002410:	2c00      	cmp	r4, #0
 8002412:	f77f ab8f 	ble.w	8001b34 <_svfprintf_r+0x4e4>
 8002416:	2c10      	cmp	r4, #16
 8002418:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800241a:	4d53      	ldr	r5, [pc, #332]	; (8002568 <_svfprintf_r+0xf18>)
 800241c:	f77f af7b 	ble.w	8002316 <_svfprintf_r+0xcc6>
 8002420:	2710      	movs	r7, #16
 8002422:	4662      	mov	r2, ip
 8002424:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8002428:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800242c:	e004      	b.n	8002438 <_svfprintf_r+0xde8>
 800242e:	3608      	adds	r6, #8
 8002430:	3c10      	subs	r4, #16
 8002432:	2c10      	cmp	r4, #16
 8002434:	f77f af6e 	ble.w	8002314 <_svfprintf_r+0xcc4>
 8002438:	3301      	adds	r3, #1
 800243a:	3210      	adds	r2, #16
 800243c:	2b07      	cmp	r3, #7
 800243e:	922d      	str	r2, [sp, #180]	; 0xb4
 8002440:	932c      	str	r3, [sp, #176]	; 0xb0
 8002442:	e886 00a0 	stmia.w	r6, {r5, r7}
 8002446:	ddf2      	ble.n	800242e <_svfprintf_r+0xdde>
 8002448:	4640      	mov	r0, r8
 800244a:	4651      	mov	r1, sl
 800244c:	aa2b      	add	r2, sp, #172	; 0xac
 800244e:	f002 fa29 	bl	80048a4 <__ssprint_r>
 8002452:	2800      	cmp	r0, #0
 8002454:	f47f aa14 	bne.w	8001880 <_svfprintf_r+0x230>
 8002458:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800245a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800245c:	ae38      	add	r6, sp, #224	; 0xe0
 800245e:	e7e7      	b.n	8002430 <_svfprintf_r+0xde0>
 8002460:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8002462:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8002464:	6035      	str	r5, [r6, #0]
 8002466:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8002468:	6075      	str	r5, [r6, #4]
 800246a:	3301      	adds	r3, #1
 800246c:	44ac      	add	ip, r5
 800246e:	2b07      	cmp	r3, #7
 8002470:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8002474:	932c      	str	r3, [sp, #176]	; 0xb0
 8002476:	f300 81fb 	bgt.w	8002870 <_svfprintf_r+0x1220>
 800247a:	3608      	adds	r6, #8
 800247c:	e7b0      	b.n	80023e0 <_svfprintf_r+0xd90>
 800247e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002480:	07ea      	lsls	r2, r5, #31
 8002482:	f53f ae27 	bmi.w	80020d4 <_svfprintf_r+0xa84>
 8002486:	3401      	adds	r4, #1
 8002488:	f10c 0801 	add.w	r8, ip, #1
 800248c:	2301      	movs	r3, #1
 800248e:	2c07      	cmp	r4, #7
 8002490:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
 8002494:	942c      	str	r4, [sp, #176]	; 0xb0
 8002496:	6037      	str	r7, [r6, #0]
 8002498:	6073      	str	r3, [r6, #4]
 800249a:	f77f ae4c 	ble.w	8002136 <_svfprintf_r+0xae6>
 800249e:	e72c      	b.n	80022fa <_svfprintf_r+0xcaa>
 80024a0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80024a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80024a4:	aa2b      	add	r2, sp, #172	; 0xac
 80024a6:	f002 f9fd 	bl	80048a4 <__ssprint_r>
 80024aa:	2800      	cmp	r0, #0
 80024ac:	f47f a9e8 	bne.w	8001880 <_svfprintf_r+0x230>
 80024b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80024b2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80024b4:	ae38      	add	r6, sp, #224	; 0xe0
 80024b6:	e619      	b.n	80020ec <_svfprintf_r+0xa9c>
 80024b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80024ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80024bc:	aa2b      	add	r2, sp, #172	; 0xac
 80024be:	f002 f9f1 	bl	80048a4 <__ssprint_r>
 80024c2:	2800      	cmp	r0, #0
 80024c4:	f47f a9dc 	bne.w	8001880 <_svfprintf_r+0x230>
 80024c8:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
 80024cc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80024ce:	ae38      	add	r6, sp, #224	; 0xe0
 80024d0:	e61b      	b.n	800210a <_svfprintf_r+0xaba>
 80024d2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80024d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80024d6:	aa2b      	add	r2, sp, #172	; 0xac
 80024d8:	f002 f9e4 	bl	80048a4 <__ssprint_r>
 80024dc:	2800      	cmp	r0, #0
 80024de:	f47f a9cf 	bne.w	8001880 <_svfprintf_r+0x230>
 80024e2:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 80024e6:	ae38      	add	r6, sp, #224	; 0xe0
 80024e8:	f7ff bad2 	b.w	8001a90 <_svfprintf_r+0x440>
 80024ec:	f002 f970 	bl	80047d0 <__fpclassifyd>
 80024f0:	2800      	cmp	r0, #0
 80024f2:	f040 80c2 	bne.w	800267a <_svfprintf_r+0x102a>
 80024f6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80024f8:	4f1c      	ldr	r7, [pc, #112]	; (800256c <_svfprintf_r+0xf1c>)
 80024fa:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <_svfprintf_r+0xf20>)
 80024fc:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8002500:	900a      	str	r0, [sp, #40]	; 0x28
 8002502:	f04f 0c03 	mov.w	ip, #3
 8002506:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 800250a:	9409      	str	r4, [sp, #36]	; 0x24
 800250c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8002510:	9014      	str	r0, [sp, #80]	; 0x50
 8002512:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002516:	bfd8      	it	le
 8002518:	461f      	movle	r7, r3
 800251a:	4664      	mov	r4, ip
 800251c:	f7ff ba2f 	b.w	800197e <_svfprintf_r+0x32e>
 8002520:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002524:	3308      	adds	r3, #8
 8002526:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
 800252a:	9310      	str	r3, [sp, #64]	; 0x40
 800252c:	e476      	b.n	8001e1c <_svfprintf_r+0x7cc>
 800252e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8002532:	f01c 0f10 	tst.w	ip, #16
 8002536:	f000 8155 	beq.w	80027e4 <_svfprintf_r+0x1194>
 800253a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800253c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	3404      	adds	r4, #4
 8002542:	9410      	str	r4, [sp, #64]	; 0x40
 8002544:	601d      	str	r5, [r3, #0]
 8002546:	f7ff b8a9 	b.w	800169c <_svfprintf_r+0x4c>
 800254a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800254c:	0664      	lsls	r4, r4, #25
 800254e:	f140 8142 	bpl.w	80027d6 <_svfprintf_r+0x1186>
 8002552:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8002556:	f8bc 4000 	ldrh.w	r4, [ip]
 800255a:	f10c 0c04 	add.w	ip, ip, #4
 800255e:	2500      	movs	r5, #0
 8002560:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8002564:	f7ff b9ca 	b.w	80018fc <_svfprintf_r+0x2ac>
 8002568:	0800589c 	.word	0x0800589c
 800256c:	080058b8 	.word	0x080058b8
 8002570:	080058b4 	.word	0x080058b4
 8002574:	462c      	mov	r4, r5
 8002576:	463d      	mov	r5, r7
 8002578:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800257a:	4694      	mov	ip, r2
 800257c:	3301      	adds	r3, #1
 800257e:	44a4      	add	ip, r4
 8002580:	2b07      	cmp	r3, #7
 8002582:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8002586:	932c      	str	r3, [sp, #176]	; 0xb0
 8002588:	6035      	str	r5, [r6, #0]
 800258a:	6074      	str	r4, [r6, #4]
 800258c:	f73f af14 	bgt.w	80023b8 <_svfprintf_r+0xd68>
 8002590:	3608      	adds	r6, #8
 8002592:	e71c      	b.n	80023ce <_svfprintf_r+0xd7e>
 8002594:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002596:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002598:	aa2b      	add	r2, sp, #172	; 0xac
 800259a:	f002 f983 	bl	80048a4 <__ssprint_r>
 800259e:	2800      	cmp	r0, #0
 80025a0:	f47f a96e 	bne.w	8001880 <_svfprintf_r+0x230>
 80025a4:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 80025a8:	ae38      	add	r6, sp, #224	; 0xe0
 80025aa:	e4fd      	b.n	8001fa8 <_svfprintf_r+0x958>
 80025ac:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80025ae:	49b7      	ldr	r1, [pc, #732]	; (800288c <_svfprintf_r+0x123c>)
 80025b0:	6031      	str	r1, [r6, #0]
 80025b2:	3201      	adds	r2, #1
 80025b4:	f10c 0c01 	add.w	ip, ip, #1
 80025b8:	2101      	movs	r1, #1
 80025ba:	2a07      	cmp	r2, #7
 80025bc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 80025c0:	922c      	str	r2, [sp, #176]	; 0xb0
 80025c2:	6071      	str	r1, [r6, #4]
 80025c4:	f300 80f7 	bgt.w	80027b6 <_svfprintf_r+0x1166>
 80025c8:	3608      	adds	r6, #8
 80025ca:	461c      	mov	r4, r3
 80025cc:	b92c      	cbnz	r4, 80025da <_svfprintf_r+0xf8a>
 80025ce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80025d0:	b91d      	cbnz	r5, 80025da <_svfprintf_r+0xf8a>
 80025d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80025d4:	07e8      	lsls	r0, r5, #31
 80025d6:	f57f aaad 	bpl.w	8001b34 <_svfprintf_r+0x4e4>
 80025da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80025dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80025de:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80025e0:	6035      	str	r5, [r6, #0]
 80025e2:	3301      	adds	r3, #1
 80025e4:	4461      	add	r1, ip
 80025e6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80025e8:	912d      	str	r1, [sp, #180]	; 0xb4
 80025ea:	2b07      	cmp	r3, #7
 80025ec:	6075      	str	r5, [r6, #4]
 80025ee:	932c      	str	r3, [sp, #176]	; 0xb0
 80025f0:	f300 81de 	bgt.w	80029b0 <_svfprintf_r+0x1360>
 80025f4:	f106 0208 	add.w	r2, r6, #8
 80025f8:	4264      	negs	r4, r4
 80025fa:	2c00      	cmp	r4, #0
 80025fc:	f340 810b 	ble.w	8002816 <_svfprintf_r+0x11c6>
 8002600:	2c10      	cmp	r4, #16
 8002602:	4da3      	ldr	r5, [pc, #652]	; (8002890 <_svfprintf_r+0x1240>)
 8002604:	f340 8148 	ble.w	8002898 <_svfprintf_r+0x1248>
 8002608:	46a3      	mov	fp, r4
 800260a:	2610      	movs	r6, #16
 800260c:	460c      	mov	r4, r1
 800260e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8002612:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002616:	e006      	b.n	8002626 <_svfprintf_r+0xfd6>
 8002618:	3208      	adds	r2, #8
 800261a:	f1ab 0b10 	sub.w	fp, fp, #16
 800261e:	f1bb 0f10 	cmp.w	fp, #16
 8002622:	f340 8137 	ble.w	8002894 <_svfprintf_r+0x1244>
 8002626:	3301      	adds	r3, #1
 8002628:	3410      	adds	r4, #16
 800262a:	2b07      	cmp	r3, #7
 800262c:	942d      	str	r4, [sp, #180]	; 0xb4
 800262e:	932c      	str	r3, [sp, #176]	; 0xb0
 8002630:	e882 0060 	stmia.w	r2, {r5, r6}
 8002634:	ddf0      	ble.n	8002618 <_svfprintf_r+0xfc8>
 8002636:	4640      	mov	r0, r8
 8002638:	4651      	mov	r1, sl
 800263a:	aa2b      	add	r2, sp, #172	; 0xac
 800263c:	f002 f932 	bl	80048a4 <__ssprint_r>
 8002640:	2800      	cmp	r0, #0
 8002642:	f47f a91d 	bne.w	8001880 <_svfprintf_r+0x230>
 8002646:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8002648:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800264a:	aa38      	add	r2, sp, #224	; 0xe0
 800264c:	e7e5      	b.n	800261a <_svfprintf_r+0xfca>
 800264e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002650:	f893 8001 	ldrb.w	r8, [r3, #1]
 8002654:	f044 0420 	orr.w	r4, r4, #32
 8002658:	f109 0901 	add.w	r9, r9, #1
 800265c:	9409      	str	r4, [sp, #36]	; 0x24
 800265e:	f7ff b853 	b.w	8001708 <_svfprintf_r+0xb8>
 8002662:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002664:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002666:	aa2b      	add	r2, sp, #172	; 0xac
 8002668:	f002 f91c 	bl	80048a4 <__ssprint_r>
 800266c:	2800      	cmp	r0, #0
 800266e:	f47f a907 	bne.w	8001880 <_svfprintf_r+0x230>
 8002672:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8002676:	ae38      	add	r6, sp, #224	; 0xe0
 8002678:	e4ac      	b.n	8001fd4 <_svfprintf_r+0x984>
 800267a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800267c:	3501      	adds	r5, #1
 800267e:	f028 0a20 	bic.w	sl, r8, #32
 8002682:	f000 80a5 	beq.w	80027d0 <_svfprintf_r+0x1180>
 8002686:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800268a:	d104      	bne.n	8002696 <_svfprintf_r+0x1046>
 800268c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800268e:	2d00      	cmp	r5, #0
 8002690:	bf08      	it	eq
 8002692:	2501      	moveq	r5, #1
 8002694:	950a      	str	r5, [sp, #40]	; 0x28
 8002696:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800269a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 80026a4:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 80026a8:	f2c0 819c 	blt.w	80029e4 <_svfprintf_r+0x1394>
 80026ac:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 80026b0:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
 80026b4:	f04f 0b00 	mov.w	fp, #0
 80026b8:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80026bc:	f000 819b 	beq.w	80029f6 <_svfprintf_r+0x13a6>
 80026c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80026c4:	f000 81a9 	beq.w	8002a1a <_svfprintf_r+0x13ca>
 80026c8:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
 80026cc:	bf0a      	itet	eq
 80026ce:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
 80026d0:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
 80026d2:	1c65      	addeq	r5, r4, #1
 80026d4:	2002      	movs	r0, #2
 80026d6:	a925      	add	r1, sp, #148	; 0x94
 80026d8:	aa26      	add	r2, sp, #152	; 0x98
 80026da:	ab29      	add	r3, sp, #164	; 0xa4
 80026dc:	e88d 0021 	stmia.w	sp, {r0, r5}
 80026e0:	9203      	str	r2, [sp, #12]
 80026e2:	9304      	str	r3, [sp, #16]
 80026e4:	9102      	str	r1, [sp, #8]
 80026e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80026e8:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 80026ec:	f000 fac4 	bl	8002c78 <_dtoa_r>
 80026f0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80026f4:	4607      	mov	r7, r0
 80026f6:	d002      	beq.n	80026fe <_svfprintf_r+0x10ae>
 80026f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80026fc:	d105      	bne.n	800270a <_svfprintf_r+0x10ba>
 80026fe:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8002702:	f01c 0f01 	tst.w	ip, #1
 8002706:	f000 819c 	beq.w	8002a42 <_svfprintf_r+0x13f2>
 800270a:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
 800270e:	eb07 0405 	add.w	r4, r7, r5
 8002712:	f000 811c 	beq.w	800294e <_svfprintf_r+0x12fe>
 8002716:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800271a:	2200      	movs	r2, #0
 800271c:	2300      	movs	r3, #0
 800271e:	f002 fd73 	bl	8005208 <__aeabi_dcmpeq>
 8002722:	2800      	cmp	r0, #0
 8002724:	f040 8105 	bne.w	8002932 <_svfprintf_r+0x12e2>
 8002728:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800272a:	429c      	cmp	r4, r3
 800272c:	d906      	bls.n	800273c <_svfprintf_r+0x10ec>
 800272e:	2130      	movs	r1, #48	; 0x30
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	9229      	str	r2, [sp, #164]	; 0xa4
 8002734:	7019      	strb	r1, [r3, #0]
 8002736:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002738:	429c      	cmp	r4, r3
 800273a:	d8f9      	bhi.n	8002730 <_svfprintf_r+0x10e0>
 800273c:	1bdb      	subs	r3, r3, r7
 800273e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002742:	9311      	str	r3, [sp, #68]	; 0x44
 8002744:	f000 80ed 	beq.w	8002922 <_svfprintf_r+0x12d2>
 8002748:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800274c:	f340 81f2 	ble.w	8002b34 <_svfprintf_r+0x14e4>
 8002750:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002754:	f000 8168 	beq.w	8002a28 <_svfprintf_r+0x13d8>
 8002758:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800275a:	9414      	str	r4, [sp, #80]	; 0x50
 800275c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800275e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002760:	42ac      	cmp	r4, r5
 8002762:	f300 8132 	bgt.w	80029ca <_svfprintf_r+0x137a>
 8002766:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800276a:	f01c 0f01 	tst.w	ip, #1
 800276e:	f040 81ad 	bne.w	8002acc <_svfprintf_r+0x147c>
 8002772:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8002776:	462c      	mov	r4, r5
 8002778:	f04f 0867 	mov.w	r8, #103	; 0x67
 800277c:	f1bb 0f00 	cmp.w	fp, #0
 8002780:	f040 80b2 	bne.w	80028e8 <_svfprintf_r+0x1298>
 8002784:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8002786:	930b      	str	r3, [sp, #44]	; 0x2c
 8002788:	9509      	str	r5, [sp, #36]	; 0x24
 800278a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800278e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8002792:	f7ff b8f4 	b.w	800197e <_svfprintf_r+0x32e>
 8002796:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002798:	2140      	movs	r1, #64	; 0x40
 800279a:	f001 f98d 	bl	8003ab8 <_malloc_r>
 800279e:	6020      	str	r0, [r4, #0]
 80027a0:	6120      	str	r0, [r4, #16]
 80027a2:	2800      	cmp	r0, #0
 80027a4:	f000 81bf 	beq.w	8002b26 <_svfprintf_r+0x14d6>
 80027a8:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 80027ac:	2340      	movs	r3, #64	; 0x40
 80027ae:	f8cc 3014 	str.w	r3, [ip, #20]
 80027b2:	f7fe bf63 	b.w	800167c <_svfprintf_r+0x2c>
 80027b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80027b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80027ba:	aa2b      	add	r2, sp, #172	; 0xac
 80027bc:	f002 f872 	bl	80048a4 <__ssprint_r>
 80027c0:	2800      	cmp	r0, #0
 80027c2:	f47f a85d 	bne.w	8001880 <_svfprintf_r+0x230>
 80027c6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80027c8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 80027cc:	ae38      	add	r6, sp, #224	; 0xe0
 80027ce:	e6fd      	b.n	80025cc <_svfprintf_r+0xf7c>
 80027d0:	2406      	movs	r4, #6
 80027d2:	940a      	str	r4, [sp, #40]	; 0x28
 80027d4:	e75f      	b.n	8002696 <_svfprintf_r+0x1046>
 80027d6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80027d8:	682c      	ldr	r4, [r5, #0]
 80027da:	3504      	adds	r5, #4
 80027dc:	9510      	str	r5, [sp, #64]	; 0x40
 80027de:	2500      	movs	r5, #0
 80027e0:	f7ff b88c 	b.w	80018fc <_svfprintf_r+0x2ac>
 80027e4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80027e8:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80027ec:	f000 8087 	beq.w	80028fe <_svfprintf_r+0x12ae>
 80027f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80027f2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80027f4:	6823      	ldr	r3, [r4, #0]
 80027f6:	3404      	adds	r4, #4
 80027f8:	9410      	str	r4, [sp, #64]	; 0x40
 80027fa:	801d      	strh	r5, [r3, #0]
 80027fc:	f7fe bf4e 	b.w	800169c <_svfprintf_r+0x4c>
 8002800:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002802:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002804:	aa2b      	add	r2, sp, #172	; 0xac
 8002806:	f002 f84d 	bl	80048a4 <__ssprint_r>
 800280a:	2800      	cmp	r0, #0
 800280c:	f47f a838 	bne.w	8001880 <_svfprintf_r+0x230>
 8002810:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8002812:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8002814:	aa38      	add	r2, sp, #224	; 0xe0
 8002816:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800281a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800281c:	6017      	str	r7, [r2, #0]
 800281e:	3301      	adds	r3, #1
 8002820:	448c      	add	ip, r1
 8002822:	2b07      	cmp	r3, #7
 8002824:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8002828:	932c      	str	r3, [sp, #176]	; 0xb0
 800282a:	6054      	str	r4, [r2, #4]
 800282c:	f73f ac92 	bgt.w	8002154 <_svfprintf_r+0xb04>
 8002830:	f102 0608 	add.w	r6, r2, #8
 8002834:	f7ff b97e 	b.w	8001b34 <_svfprintf_r+0x4e4>
 8002838:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800283c:	f002 f802 	bl	8004844 <strlen>
 8002840:	9510      	str	r5, [sp, #64]	; 0x40
 8002842:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
 8002846:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002848:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800284c:	4604      	mov	r4, r0
 800284e:	9514      	str	r5, [sp, #80]	; 0x50
 8002850:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8002854:	f7ff b893 	b.w	800197e <_svfprintf_r+0x32e>
 8002858:	980d      	ldr	r0, [sp, #52]	; 0x34
 800285a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800285c:	aa2b      	add	r2, sp, #172	; 0xac
 800285e:	f002 f821 	bl	80048a4 <__ssprint_r>
 8002862:	2800      	cmp	r0, #0
 8002864:	f47f a80c 	bne.w	8001880 <_svfprintf_r+0x230>
 8002868:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 800286c:	ae38      	add	r6, sp, #224	; 0xe0
 800286e:	e4cc      	b.n	800220a <_svfprintf_r+0xbba>
 8002870:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002872:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002874:	aa2b      	add	r2, sp, #172	; 0xac
 8002876:	f002 f815 	bl	80048a4 <__ssprint_r>
 800287a:	2800      	cmp	r0, #0
 800287c:	f47f a800 	bne.w	8001880 <_svfprintf_r+0x230>
 8002880:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8002882:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8002886:	ae38      	add	r6, sp, #224	; 0xe0
 8002888:	e5aa      	b.n	80023e0 <_svfprintf_r+0xd90>
 800288a:	bf00      	nop
 800288c:	080058ec 	.word	0x080058ec
 8002890:	0800589c 	.word	0x0800589c
 8002894:	4621      	mov	r1, r4
 8002896:	465c      	mov	r4, fp
 8002898:	3301      	adds	r3, #1
 800289a:	4421      	add	r1, r4
 800289c:	2b07      	cmp	r3, #7
 800289e:	912d      	str	r1, [sp, #180]	; 0xb4
 80028a0:	932c      	str	r3, [sp, #176]	; 0xb0
 80028a2:	6015      	str	r5, [r2, #0]
 80028a4:	6054      	str	r4, [r2, #4]
 80028a6:	dcab      	bgt.n	8002800 <_svfprintf_r+0x11b0>
 80028a8:	3208      	adds	r2, #8
 80028aa:	e7b4      	b.n	8002816 <_svfprintf_r+0x11c6>
 80028ac:	980d      	ldr	r0, [sp, #52]	; 0x34
 80028ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80028b0:	aa2b      	add	r2, sp, #172	; 0xac
 80028b2:	f001 fff7 	bl	80048a4 <__ssprint_r>
 80028b6:	2800      	cmp	r0, #0
 80028b8:	f47e afe2 	bne.w	8001880 <_svfprintf_r+0x230>
 80028bc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80028be:	9911      	ldr	r1, [sp, #68]	; 0x44
 80028c0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 80028c4:	1b0c      	subs	r4, r1, r4
 80028c6:	ae38      	add	r6, sp, #224	; 0xe0
 80028c8:	e59f      	b.n	800240a <_svfprintf_r+0xdba>
 80028ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80028cc:	9714      	str	r7, [sp, #80]	; 0x50
 80028ce:	2c06      	cmp	r4, #6
 80028d0:	bf28      	it	cs
 80028d2:	2406      	movcs	r4, #6
 80028d4:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
 80028d8:	46ba      	mov	sl, r7
 80028da:	970a      	str	r7, [sp, #40]	; 0x28
 80028dc:	9510      	str	r5, [sp, #64]	; 0x40
 80028de:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80028e2:	4f97      	ldr	r7, [pc, #604]	; (8002b40 <_svfprintf_r+0x14f0>)
 80028e4:	f7ff b84b 	b.w	800197e <_svfprintf_r+0x32e>
 80028e8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80028ea:	9509      	str	r5, [sp, #36]	; 0x24
 80028ec:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 80028f0:	2500      	movs	r5, #0
 80028f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80028f4:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 80028f8:	950a      	str	r5, [sp, #40]	; 0x28
 80028fa:	f7ff b843 	b.w	8001984 <_svfprintf_r+0x334>
 80028fe:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8002902:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8002904:	f8dc 3000 	ldr.w	r3, [ip]
 8002908:	f10c 0c04 	add.w	ip, ip, #4
 800290c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8002910:	601c      	str	r4, [r3, #0]
 8002912:	f7fe bec3 	b.w	800169c <_svfprintf_r+0x4c>
 8002916:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 800291a:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 800291e:	f7ff ba8f 	b.w	8001e40 <_svfprintf_r+0x7f0>
 8002922:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002924:	1cdc      	adds	r4, r3, #3
 8002926:	db19      	blt.n	800295c <_svfprintf_r+0x130c>
 8002928:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800292a:	429c      	cmp	r4, r3
 800292c:	db16      	blt.n	800295c <_svfprintf_r+0x130c>
 800292e:	9314      	str	r3, [sp, #80]	; 0x50
 8002930:	e714      	b.n	800275c <_svfprintf_r+0x110c>
 8002932:	4623      	mov	r3, r4
 8002934:	e702      	b.n	800273c <_svfprintf_r+0x10ec>
 8002936:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
 800293a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800293e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002940:	9510      	str	r5, [sp, #64]	; 0x40
 8002942:	900a      	str	r0, [sp, #40]	; 0x28
 8002944:	9014      	str	r0, [sp, #80]	; 0x50
 8002946:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 800294a:	f7ff b818 	b.w	800197e <_svfprintf_r+0x32e>
 800294e:	783b      	ldrb	r3, [r7, #0]
 8002950:	2b30      	cmp	r3, #48	; 0x30
 8002952:	f000 80ad 	beq.w	8002ab0 <_svfprintf_r+0x1460>
 8002956:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8002958:	442c      	add	r4, r5
 800295a:	e6dc      	b.n	8002716 <_svfprintf_r+0x10c6>
 800295c:	f1a8 0802 	sub.w	r8, r8, #2
 8002960:	3b01      	subs	r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	9325      	str	r3, [sp, #148]	; 0x94
 8002966:	bfba      	itte	lt
 8002968:	425b      	neglt	r3, r3
 800296a:	222d      	movlt	r2, #45	; 0x2d
 800296c:	222b      	movge	r2, #43	; 0x2b
 800296e:	2b09      	cmp	r3, #9
 8002970:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
 8002974:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
 8002978:	dc65      	bgt.n	8002a46 <_svfprintf_r+0x13f6>
 800297a:	3330      	adds	r3, #48	; 0x30
 800297c:	2230      	movs	r2, #48	; 0x30
 800297e:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 8002982:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
 8002986:	ab28      	add	r3, sp, #160	; 0xa0
 8002988:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800298a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800298c:	aa27      	add	r2, sp, #156	; 0x9c
 800298e:	1a9a      	subs	r2, r3, r2
 8002990:	2d01      	cmp	r5, #1
 8002992:	9219      	str	r2, [sp, #100]	; 0x64
 8002994:	4414      	add	r4, r2
 8002996:	f340 80b7 	ble.w	8002b08 <_svfprintf_r+0x14b8>
 800299a:	3401      	adds	r4, #1
 800299c:	2500      	movs	r5, #0
 800299e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 80029a2:	9514      	str	r5, [sp, #80]	; 0x50
 80029a4:	e6ea      	b.n	800277c <_svfprintf_r+0x112c>
 80029a6:	2400      	movs	r4, #0
 80029a8:	4681      	mov	r9, r0
 80029aa:	940a      	str	r4, [sp, #40]	; 0x28
 80029ac:	f7fe beae 	b.w	800170c <_svfprintf_r+0xbc>
 80029b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80029b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80029b4:	aa2b      	add	r2, sp, #172	; 0xac
 80029b6:	f001 ff75 	bl	80048a4 <__ssprint_r>
 80029ba:	2800      	cmp	r0, #0
 80029bc:	f47e af60 	bne.w	8001880 <_svfprintf_r+0x230>
 80029c0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80029c2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80029c4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80029c6:	aa38      	add	r2, sp, #224	; 0xe0
 80029c8:	e616      	b.n	80025f8 <_svfprintf_r+0xfa8>
 80029ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80029cc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80029ce:	2c00      	cmp	r4, #0
 80029d0:	bfd4      	ite	le
 80029d2:	f1c4 0402 	rsble	r4, r4, #2
 80029d6:	2401      	movgt	r4, #1
 80029d8:	442c      	add	r4, r5
 80029da:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 80029de:	f04f 0867 	mov.w	r8, #103	; 0x67
 80029e2:	e6cb      	b.n	800277c <_svfprintf_r+0x112c>
 80029e4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80029e6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80029e8:	9020      	str	r0, [sp, #128]	; 0x80
 80029ea:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80029ee:	9121      	str	r1, [sp, #132]	; 0x84
 80029f0:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
 80029f4:	e660      	b.n	80026b8 <_svfprintf_r+0x1068>
 80029f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80029f8:	9501      	str	r5, [sp, #4]
 80029fa:	2003      	movs	r0, #3
 80029fc:	a925      	add	r1, sp, #148	; 0x94
 80029fe:	aa26      	add	r2, sp, #152	; 0x98
 8002a00:	ab29      	add	r3, sp, #164	; 0xa4
 8002a02:	9000      	str	r0, [sp, #0]
 8002a04:	9203      	str	r2, [sp, #12]
 8002a06:	9304      	str	r3, [sp, #16]
 8002a08:	9102      	str	r1, [sp, #8]
 8002a0a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002a0c:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8002a10:	f000 f932 	bl	8002c78 <_dtoa_r>
 8002a14:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002a16:	4607      	mov	r7, r0
 8002a18:	e677      	b.n	800270a <_svfprintf_r+0x10ba>
 8002a1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002a1c:	9401      	str	r4, [sp, #4]
 8002a1e:	2003      	movs	r0, #3
 8002a20:	a925      	add	r1, sp, #148	; 0x94
 8002a22:	aa26      	add	r2, sp, #152	; 0x98
 8002a24:	ab29      	add	r3, sp, #164	; 0xa4
 8002a26:	e7ec      	b.n	8002a02 <_svfprintf_r+0x13b2>
 8002a28:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8002a2a:	9514      	str	r5, [sp, #80]	; 0x50
 8002a2c:	2d00      	cmp	r5, #0
 8002a2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002a30:	dd63      	ble.n	8002afa <_svfprintf_r+0x14aa>
 8002a32:	bbb4      	cbnz	r4, 8002aa2 <_svfprintf_r+0x1452>
 8002a34:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002a36:	07e8      	lsls	r0, r5, #31
 8002a38:	d433      	bmi.n	8002aa2 <_svfprintf_r+0x1452>
 8002a3a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8002a3c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8002a40:	e69c      	b.n	800277c <_svfprintf_r+0x112c>
 8002a42:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002a44:	e67a      	b.n	800273c <_svfprintf_r+0x10ec>
 8002a46:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
 8002a4a:	4d3e      	ldr	r5, [pc, #248]	; (8002b44 <_svfprintf_r+0x14f4>)
 8002a4c:	17da      	asrs	r2, r3, #31
 8002a4e:	fb85 5103 	smull	r5, r1, r5, r3
 8002a52:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
 8002a56:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 8002a60:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002a64:	2909      	cmp	r1, #9
 8002a66:	7010      	strb	r0, [r2, #0]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8002a6e:	dcec      	bgt.n	8002a4a <_svfprintf_r+0x13fa>
 8002a70:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8002a74:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
 8002a78:	b2d9      	uxtb	r1, r3
 8002a7a:	4284      	cmp	r4, r0
 8002a7c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002a80:	d95a      	bls.n	8002b38 <_svfprintf_r+0x14e8>
 8002a82:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
 8002a86:	4613      	mov	r3, r2
 8002a88:	e001      	b.n	8002a8e <_svfprintf_r+0x143e>
 8002a8a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002a8e:	42a3      	cmp	r3, r4
 8002a90:	f800 1f01 	strb.w	r1, [r0, #1]!
 8002a94:	d1f9      	bne.n	8002a8a <_svfprintf_r+0x143a>
 8002a96:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 8002a9a:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8002a9e:	3bf6      	subs	r3, #246	; 0xf6
 8002aa0:	e772      	b.n	8002988 <_svfprintf_r+0x1338>
 8002aa2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002aa4:	1c6c      	adds	r4, r5, #1
 8002aa6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002aa8:	442c      	add	r4, r5
 8002aaa:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8002aae:	e665      	b.n	800277c <_svfprintf_r+0x112c>
 8002ab0:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f002 fba6 	bl	8005208 <__aeabi_dcmpeq>
 8002abc:	2800      	cmp	r0, #0
 8002abe:	f47f af4a 	bne.w	8002956 <_svfprintf_r+0x1306>
 8002ac2:	f1c5 0501 	rsb	r5, r5, #1
 8002ac6:	9525      	str	r5, [sp, #148]	; 0x94
 8002ac8:	442c      	add	r4, r5
 8002aca:	e624      	b.n	8002716 <_svfprintf_r+0x10c6>
 8002acc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002ace:	1c6c      	adds	r4, r5, #1
 8002ad0:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8002ad4:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002ad8:	e650      	b.n	800277c <_svfprintf_r+0x112c>
 8002ada:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002adc:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8002ae0:	682d      	ldr	r5, [r5, #0]
 8002ae2:	f899 8001 	ldrb.w	r8, [r9, #1]
 8002ae6:	950a      	str	r5, [sp, #40]	; 0x28
 8002ae8:	f10c 0304 	add.w	r3, ip, #4
 8002aec:	2d00      	cmp	r5, #0
 8002aee:	9310      	str	r3, [sp, #64]	; 0x40
 8002af0:	4681      	mov	r9, r0
 8002af2:	f6be ae09 	bge.w	8001708 <_svfprintf_r+0xb8>
 8002af6:	f7fe be04 	b.w	8001702 <_svfprintf_r+0xb2>
 8002afa:	b97c      	cbnz	r4, 8002b1c <_svfprintf_r+0x14cc>
 8002afc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002afe:	07e9      	lsls	r1, r5, #31
 8002b00:	d40c      	bmi.n	8002b1c <_svfprintf_r+0x14cc>
 8002b02:	2301      	movs	r3, #1
 8002b04:	461c      	mov	r4, r3
 8002b06:	e639      	b.n	800277c <_svfprintf_r+0x112c>
 8002b08:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8002b0c:	f01c 0301 	ands.w	r3, ip, #1
 8002b10:	f47f af43 	bne.w	800299a <_svfprintf_r+0x134a>
 8002b14:	9314      	str	r3, [sp, #80]	; 0x50
 8002b16:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8002b1a:	e62f      	b.n	800277c <_svfprintf_r+0x112c>
 8002b1c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002b1e:	1cac      	adds	r4, r5, #2
 8002b20:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8002b24:	e62a      	b.n	800277c <_svfprintf_r+0x112c>
 8002b26:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002b28:	230c      	movs	r3, #12
 8002b2a:	602b      	str	r3, [r5, #0]
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	f7fe beae 	b.w	8001890 <_svfprintf_r+0x240>
 8002b34:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002b36:	e713      	b.n	8002960 <_svfprintf_r+0x1310>
 8002b38:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
 8002b3c:	e724      	b.n	8002988 <_svfprintf_r+0x1338>
 8002b3e:	bf00      	nop
 8002b40:	080058e4 	.word	0x080058e4
 8002b44:	66666667 	.word	0x66666667

08002b48 <quorem>:
quorem():
 8002b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b4c:	6903      	ldr	r3, [r0, #16]
 8002b4e:	690d      	ldr	r5, [r1, #16]
 8002b50:	429d      	cmp	r5, r3
 8002b52:	b083      	sub	sp, #12
 8002b54:	4683      	mov	fp, r0
 8002b56:	f300 808b 	bgt.w	8002c70 <quorem+0x128>
 8002b5a:	3d01      	subs	r5, #1
 8002b5c:	f101 0414 	add.w	r4, r1, #20
 8002b60:	f100 0a14 	add.w	sl, r0, #20
 8002b64:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 8002b68:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8002b6c:	3201      	adds	r2, #1
 8002b6e:	fbb3 f8f2 	udiv	r8, r3, r2
 8002b72:	00aa      	lsls	r2, r5, #2
 8002b74:	4691      	mov	r9, r2
 8002b76:	9200      	str	r2, [sp, #0]
 8002b78:	4452      	add	r2, sl
 8002b7a:	44a1      	add	r9, r4
 8002b7c:	9201      	str	r2, [sp, #4]
 8002b7e:	f1b8 0f00 	cmp.w	r8, #0
 8002b82:	d03d      	beq.n	8002c00 <quorem+0xb8>
 8002b84:	f04f 0e00 	mov.w	lr, #0
 8002b88:	4670      	mov	r0, lr
 8002b8a:	4622      	mov	r2, r4
 8002b8c:	4653      	mov	r3, sl
 8002b8e:	468c      	mov	ip, r1
 8002b90:	f852 6b04 	ldr.w	r6, [r2], #4
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	b2b7      	uxth	r7, r6
 8002b98:	0c36      	lsrs	r6, r6, #16
 8002b9a:	fb07 ee08 	mla	lr, r7, r8, lr
 8002b9e:	fb06 f608 	mul.w	r6, r6, r8
 8002ba2:	eb06 461e 	add.w	r6, r6, lr, lsr #16
 8002ba6:	fa1f f78e 	uxth.w	r7, lr
 8002baa:	1bc7      	subs	r7, r0, r7
 8002bac:	b2b0      	uxth	r0, r6
 8002bae:	fa17 f781 	uxtah	r7, r7, r1
 8002bb2:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
 8002bb6:	eb00 4027 	add.w	r0, r0, r7, asr #16
 8002bba:	b2bf      	uxth	r7, r7
 8002bbc:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
 8002bc0:	4591      	cmp	r9, r2
 8002bc2:	f843 7b04 	str.w	r7, [r3], #4
 8002bc6:	ea4f 4020 	mov.w	r0, r0, asr #16
 8002bca:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8002bce:	d2df      	bcs.n	8002b90 <quorem+0x48>
 8002bd0:	9a00      	ldr	r2, [sp, #0]
 8002bd2:	f85a 3002 	ldr.w	r3, [sl, r2]
 8002bd6:	4661      	mov	r1, ip
 8002bd8:	b993      	cbnz	r3, 8002c00 <quorem+0xb8>
 8002bda:	9a01      	ldr	r2, [sp, #4]
 8002bdc:	1f13      	subs	r3, r2, #4
 8002bde:	459a      	cmp	sl, r3
 8002be0:	d20c      	bcs.n	8002bfc <quorem+0xb4>
 8002be2:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8002be6:	b94b      	cbnz	r3, 8002bfc <quorem+0xb4>
 8002be8:	f1a2 0308 	sub.w	r3, r2, #8
 8002bec:	e002      	b.n	8002bf4 <quorem+0xac>
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	3b04      	subs	r3, #4
 8002bf2:	b91a      	cbnz	r2, 8002bfc <quorem+0xb4>
 8002bf4:	459a      	cmp	sl, r3
 8002bf6:	f105 35ff 	add.w	r5, r5, #4294967295
 8002bfa:	d3f8      	bcc.n	8002bee <quorem+0xa6>
 8002bfc:	f8cb 5010 	str.w	r5, [fp, #16]
 8002c00:	4658      	mov	r0, fp
 8002c02:	f001 fcf9 	bl	80045f8 <__mcmp>
 8002c06:	2800      	cmp	r0, #0
 8002c08:	db2e      	blt.n	8002c68 <quorem+0x120>
 8002c0a:	f108 0801 	add.w	r8, r8, #1
 8002c0e:	4653      	mov	r3, sl
 8002c10:	2200      	movs	r2, #0
 8002c12:	f854 6b04 	ldr.w	r6, [r4], #4
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	b2b1      	uxth	r1, r6
 8002c1a:	1a52      	subs	r2, r2, r1
 8002c1c:	0c36      	lsrs	r6, r6, #16
 8002c1e:	fa12 f180 	uxtah	r1, r2, r0
 8002c22:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
 8002c26:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8002c2a:	b289      	uxth	r1, r1
 8002c2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002c30:	45a1      	cmp	r9, r4
 8002c32:	f843 1b04 	str.w	r1, [r3], #4
 8002c36:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002c3a:	d2ea      	bcs.n	8002c12 <quorem+0xca>
 8002c3c:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
 8002c40:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
 8002c44:	b982      	cbnz	r2, 8002c68 <quorem+0x120>
 8002c46:	1f1a      	subs	r2, r3, #4
 8002c48:	4592      	cmp	sl, r2
 8002c4a:	d20b      	bcs.n	8002c64 <quorem+0x11c>
 8002c4c:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8002c50:	b942      	cbnz	r2, 8002c64 <quorem+0x11c>
 8002c52:	3b08      	subs	r3, #8
 8002c54:	e002      	b.n	8002c5c <quorem+0x114>
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	3b04      	subs	r3, #4
 8002c5a:	b91a      	cbnz	r2, 8002c64 <quorem+0x11c>
 8002c5c:	459a      	cmp	sl, r3
 8002c5e:	f105 35ff 	add.w	r5, r5, #4294967295
 8002c62:	d3f8      	bcc.n	8002c56 <quorem+0x10e>
 8002c64:	f8cb 5010 	str.w	r5, [fp, #16]
 8002c68:	4640      	mov	r0, r8
 8002c6a:	b003      	add	sp, #12
 8002c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c70:	2000      	movs	r0, #0
 8002c72:	b003      	add	sp, #12
 8002c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002c78 <_dtoa_r>:
_dtoa_r():
 8002c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c7c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002c7e:	b09b      	sub	sp, #108	; 0x6c
 8002c80:	4604      	mov	r4, r0
 8002c82:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8002c84:	4692      	mov	sl, r2
 8002c86:	469b      	mov	fp, r3
 8002c88:	b149      	cbz	r1, 8002c9e <_dtoa_r+0x26>
 8002c8a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002c8c:	604b      	str	r3, [r1, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	608b      	str	r3, [r1, #8]
 8002c96:	f001 fab7 	bl	8004208 <_Bfree>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	6423      	str	r3, [r4, #64]	; 0x40
 8002c9e:	f1bb 0f00 	cmp.w	fp, #0
 8002ca2:	46d9      	mov	r9, fp
 8002ca4:	db33      	blt.n	8002d0e <_dtoa_r+0x96>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	602b      	str	r3, [r5, #0]
 8002caa:	4ba5      	ldr	r3, [pc, #660]	; (8002f40 <_dtoa_r+0x2c8>)
 8002cac:	461a      	mov	r2, r3
 8002cae:	ea09 0303 	and.w	r3, r9, r3
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d014      	beq.n	8002ce0 <_dtoa_r+0x68>
 8002cb6:	4650      	mov	r0, sl
 8002cb8:	4659      	mov	r1, fp
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f002 faa3 	bl	8005208 <__aeabi_dcmpeq>
 8002cc2:	4680      	mov	r8, r0
 8002cc4:	b348      	cbz	r0, 8002d1a <_dtoa_r+0xa2>
 8002cc6:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8002cc8:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8002cca:	2301      	movs	r3, #1
 8002ccc:	6033      	str	r3, [r6, #0]
 8002cce:	2d00      	cmp	r5, #0
 8002cd0:	f000 80c9 	beq.w	8002e66 <_dtoa_r+0x1ee>
 8002cd4:	489b      	ldr	r0, [pc, #620]	; (8002f44 <_dtoa_r+0x2cc>)
 8002cd6:	6028      	str	r0, [r5, #0]
 8002cd8:	3801      	subs	r0, #1
 8002cda:	b01b      	add	sp, #108	; 0x6c
 8002cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ce0:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8002ce2:	f242 730f 	movw	r3, #9999	; 0x270f
 8002ce6:	602b      	str	r3, [r5, #0]
 8002ce8:	f1ba 0f00 	cmp.w	sl, #0
 8002cec:	f000 80a4 	beq.w	8002e38 <_dtoa_r+0x1c0>
 8002cf0:	4895      	ldr	r0, [pc, #596]	; (8002f48 <_dtoa_r+0x2d0>)
 8002cf2:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8002cf4:	2e00      	cmp	r6, #0
 8002cf6:	d0f0      	beq.n	8002cda <_dtoa_r+0x62>
 8002cf8:	78c3      	ldrb	r3, [r0, #3]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80b5 	beq.w	8002e6a <_dtoa_r+0x1f2>
 8002d00:	f100 0308 	add.w	r3, r0, #8
 8002d04:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8002d06:	602b      	str	r3, [r5, #0]
 8002d08:	b01b      	add	sp, #108	; 0x6c
 8002d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
 8002d14:	602b      	str	r3, [r5, #0]
 8002d16:	46cb      	mov	fp, r9
 8002d18:	e7c7      	b.n	8002caa <_dtoa_r+0x32>
 8002d1a:	aa19      	add	r2, sp, #100	; 0x64
 8002d1c:	ab18      	add	r3, sp, #96	; 0x60
 8002d1e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002d22:	4620      	mov	r0, r4
 8002d24:	4652      	mov	r2, sl
 8002d26:	465b      	mov	r3, fp
 8002d28:	f001 fcf4 	bl	8004714 <__d2b>
 8002d2c:	ea5f 5519 	movs.w	r5, r9, lsr #20
 8002d30:	900a      	str	r0, [sp, #40]	; 0x28
 8002d32:	f040 808a 	bne.w	8002e4a <_dtoa_r+0x1d2>
 8002d36:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8002d38:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8002d3a:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8002d3e:	443d      	add	r5, r7
 8002d40:	429d      	cmp	r5, r3
 8002d42:	f2c0 8294 	blt.w	800326e <_dtoa_r+0x5f6>
 8002d46:	331f      	adds	r3, #31
 8002d48:	f205 4212 	addw	r2, r5, #1042	; 0x412
 8002d4c:	1b5b      	subs	r3, r3, r5
 8002d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8002d52:	fa2a f202 	lsr.w	r2, sl, r2
 8002d56:	ea43 0002 	orr.w	r0, r3, r2
 8002d5a:	f7fe f975 	bl	8001048 <__aeabi_ui2d>
 8002d5e:	2601      	movs	r6, #1
 8002d60:	3d01      	subs	r5, #1
 8002d62:	46b8      	mov	r8, r7
 8002d64:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002d68:	9616      	str	r6, [sp, #88]	; 0x58
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	4b77      	ldr	r3, [pc, #476]	; (8002f4c <_dtoa_r+0x2d4>)
 8002d6e:	f7fe f82d 	bl	8000dcc <__aeabi_dsub>
 8002d72:	a36d      	add	r3, pc, #436	; (adr r3, 8002f28 <_dtoa_r+0x2b0>)
 8002d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d78:	f7fe f9dc 	bl	8001134 <__aeabi_dmul>
 8002d7c:	a36c      	add	r3, pc, #432	; (adr r3, 8002f30 <_dtoa_r+0x2b8>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f7fe f825 	bl	8000dd0 <__adddf3>
 8002d86:	4606      	mov	r6, r0
 8002d88:	4628      	mov	r0, r5
 8002d8a:	460f      	mov	r7, r1
 8002d8c:	f7fe f96c 	bl	8001068 <__aeabi_i2d>
 8002d90:	a369      	add	r3, pc, #420	; (adr r3, 8002f38 <_dtoa_r+0x2c0>)
 8002d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d96:	f7fe f9cd 	bl	8001134 <__aeabi_dmul>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4630      	mov	r0, r6
 8002da0:	4639      	mov	r1, r7
 8002da2:	f7fe f815 	bl	8000dd0 <__adddf3>
 8002da6:	4606      	mov	r6, r0
 8002da8:	460f      	mov	r7, r1
 8002daa:	f002 fa5f 	bl	800526c <__aeabi_d2iz>
 8002dae:	4639      	mov	r1, r7
 8002db0:	9007      	str	r0, [sp, #28]
 8002db2:	2200      	movs	r2, #0
 8002db4:	4630      	mov	r0, r6
 8002db6:	2300      	movs	r3, #0
 8002db8:	f002 fa30 	bl	800521c <__aeabi_dcmplt>
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	f040 8228 	bne.w	8003212 <_dtoa_r+0x59a>
 8002dc2:	9e07      	ldr	r6, [sp, #28]
 8002dc4:	2e16      	cmp	r6, #22
 8002dc6:	f200 8221 	bhi.w	800320c <_dtoa_r+0x594>
 8002dca:	4b61      	ldr	r3, [pc, #388]	; (8002f50 <_dtoa_r+0x2d8>)
 8002dcc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002dd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	465b      	mov	r3, fp
 8002dd8:	f002 fa3e 	bl	8005258 <__aeabi_dcmpgt>
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	f000 824b 	beq.w	8003278 <_dtoa_r+0x600>
 8002de2:	3e01      	subs	r6, #1
 8002de4:	9607      	str	r6, [sp, #28]
 8002de6:	2600      	movs	r6, #0
 8002de8:	960e      	str	r6, [sp, #56]	; 0x38
 8002dea:	ebc5 0508 	rsb	r5, r5, r8
 8002dee:	3d01      	subs	r5, #1
 8002df0:	9506      	str	r5, [sp, #24]
 8002df2:	f100 8225 	bmi.w	8003240 <_dtoa_r+0x5c8>
 8002df6:	2500      	movs	r5, #0
 8002df8:	9508      	str	r5, [sp, #32]
 8002dfa:	9e07      	ldr	r6, [sp, #28]
 8002dfc:	2e00      	cmp	r6, #0
 8002dfe:	f2c0 8216 	blt.w	800322e <_dtoa_r+0x5b6>
 8002e02:	9d06      	ldr	r5, [sp, #24]
 8002e04:	960d      	str	r6, [sp, #52]	; 0x34
 8002e06:	4435      	add	r5, r6
 8002e08:	2600      	movs	r6, #0
 8002e0a:	9506      	str	r5, [sp, #24]
 8002e0c:	960c      	str	r6, [sp, #48]	; 0x30
 8002e0e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8002e10:	2d09      	cmp	r5, #9
 8002e12:	d82c      	bhi.n	8002e6e <_dtoa_r+0x1f6>
 8002e14:	2d05      	cmp	r5, #5
 8002e16:	bfc4      	itt	gt
 8002e18:	3d04      	subgt	r5, #4
 8002e1a:	9524      	strgt	r5, [sp, #144]	; 0x90
 8002e1c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8002e1e:	f1a6 0302 	sub.w	r3, r6, #2
 8002e22:	bfcc      	ite	gt
 8002e24:	2500      	movgt	r5, #0
 8002e26:	2501      	movle	r5, #1
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d822      	bhi.n	8002e72 <_dtoa_r+0x1fa>
 8002e2c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002e30:	029e03b7 	.word	0x029e03b7
 8002e34:	049a03c0 	.word	0x049a03c0
 8002e38:	4a46      	ldr	r2, [pc, #280]	; (8002f54 <_dtoa_r+0x2dc>)
 8002e3a:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <_dtoa_r+0x2d0>)
 8002e3c:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8002e40:	2800      	cmp	r0, #0
 8002e42:	bf0c      	ite	eq
 8002e44:	4610      	moveq	r0, r2
 8002e46:	4618      	movne	r0, r3
 8002e48:	e753      	b.n	8002cf2 <_dtoa_r+0x7a>
 8002e4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002e4e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002e52:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
 8002e56:	4650      	mov	r0, sl
 8002e58:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002e5c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002e60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002e64:	e781      	b.n	8002d6a <_dtoa_r+0xf2>
 8002e66:	483c      	ldr	r0, [pc, #240]	; (8002f58 <_dtoa_r+0x2e0>)
 8002e68:	e737      	b.n	8002cda <_dtoa_r+0x62>
 8002e6a:	1cc3      	adds	r3, r0, #3
 8002e6c:	e74a      	b.n	8002d04 <_dtoa_r+0x8c>
 8002e6e:	2500      	movs	r5, #0
 8002e70:	9524      	str	r5, [sp, #144]	; 0x90
 8002e72:	2500      	movs	r5, #0
 8002e74:	6465      	str	r5, [r4, #68]	; 0x44
 8002e76:	4629      	mov	r1, r5
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f001 f99f 	bl	80041bc <_Balloc>
 8002e7e:	f04f 39ff 	mov.w	r9, #4294967295
 8002e82:	2601      	movs	r6, #1
 8002e84:	9009      	str	r0, [sp, #36]	; 0x24
 8002e86:	9525      	str	r5, [sp, #148]	; 0x94
 8002e88:	6420      	str	r0, [r4, #64]	; 0x40
 8002e8a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8002e8e:	960b      	str	r6, [sp, #44]	; 0x2c
 8002e90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f2c0 80d2 	blt.w	800303c <_dtoa_r+0x3c4>
 8002e98:	9e07      	ldr	r6, [sp, #28]
 8002e9a:	2e0e      	cmp	r6, #14
 8002e9c:	f300 80ce 	bgt.w	800303c <_dtoa_r+0x3c4>
 8002ea0:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <_dtoa_r+0x2d8>)
 8002ea2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002ea6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002eae:	9925      	ldr	r1, [sp, #148]	; 0x94
 8002eb0:	2900      	cmp	r1, #0
 8002eb2:	f2c0 8380 	blt.w	80035b6 <_dtoa_r+0x93e>
 8002eb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002eba:	4659      	mov	r1, fp
 8002ebc:	4650      	mov	r0, sl
 8002ebe:	f7fe fa63 	bl	8001388 <__aeabi_ddiv>
 8002ec2:	f002 f9d3 	bl	800526c <__aeabi_d2iz>
 8002ec6:	4605      	mov	r5, r0
 8002ec8:	f7fe f8ce 	bl	8001068 <__aeabi_i2d>
 8002ecc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002ed0:	f7fe f930 	bl	8001134 <__aeabi_dmul>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4650      	mov	r0, sl
 8002eda:	4659      	mov	r1, fp
 8002edc:	f7fd ff76 	bl	8000dcc <__aeabi_dsub>
 8002ee0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ee2:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8002ee6:	f1b9 0f01 	cmp.w	r9, #1
 8002eea:	4606      	mov	r6, r0
 8002eec:	460f      	mov	r7, r1
 8002eee:	7013      	strb	r3, [r2, #0]
 8002ef0:	f102 0b01 	add.w	fp, r2, #1
 8002ef4:	d064      	beq.n	8002fc0 <_dtoa_r+0x348>
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <_dtoa_r+0x2e4>)
 8002efa:	f7fe f91b 	bl	8001134 <__aeabi_dmul>
 8002efe:	2200      	movs	r2, #0
 8002f00:	2300      	movs	r3, #0
 8002f02:	4606      	mov	r6, r0
 8002f04:	460f      	mov	r7, r1
 8002f06:	f002 f97f 	bl	8005208 <__aeabi_dcmpeq>
 8002f0a:	2800      	cmp	r0, #0
 8002f0c:	f040 8081 	bne.w	8003012 <_dtoa_r+0x39a>
 8002f10:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8002f14:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002f16:	9403      	str	r4, [sp, #12]
 8002f18:	44c8      	add	r8, r9
 8002f1a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8002f1e:	f105 0902 	add.w	r9, r5, #2
 8002f22:	e028      	b.n	8002f76 <_dtoa_r+0x2fe>
 8002f24:	f3af 8000 	nop.w
 8002f28:	636f4361 	.word	0x636f4361
 8002f2c:	3fd287a7 	.word	0x3fd287a7
 8002f30:	8b60c8b3 	.word	0x8b60c8b3
 8002f34:	3fc68a28 	.word	0x3fc68a28
 8002f38:	509f79fb 	.word	0x509f79fb
 8002f3c:	3fd34413 	.word	0x3fd34413
 8002f40:	7ff00000 	.word	0x7ff00000
 8002f44:	080058ed 	.word	0x080058ed
 8002f48:	0800590c 	.word	0x0800590c
 8002f4c:	3ff80000 	.word	0x3ff80000
 8002f50:	08005920 	.word	0x08005920
 8002f54:	08005900 	.word	0x08005900
 8002f58:	080058ec 	.word	0x080058ec
 8002f5c:	40240000 	.word	0x40240000
 8002f60:	f7fe f8e8 	bl	8001134 <__aeabi_dmul>
 8002f64:	2200      	movs	r2, #0
 8002f66:	2300      	movs	r3, #0
 8002f68:	4606      	mov	r6, r0
 8002f6a:	460f      	mov	r7, r1
 8002f6c:	f002 f94c 	bl	8005208 <__aeabi_dcmpeq>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	f040 83c1 	bne.w	80036f8 <_dtoa_r+0xa80>
 8002f76:	4652      	mov	r2, sl
 8002f78:	465b      	mov	r3, fp
 8002f7a:	4630      	mov	r0, r6
 8002f7c:	4639      	mov	r1, r7
 8002f7e:	f7fe fa03 	bl	8001388 <__aeabi_ddiv>
 8002f82:	f002 f973 	bl	800526c <__aeabi_d2iz>
 8002f86:	4605      	mov	r5, r0
 8002f88:	f7fe f86e 	bl	8001068 <__aeabi_i2d>
 8002f8c:	4652      	mov	r2, sl
 8002f8e:	465b      	mov	r3, fp
 8002f90:	f7fe f8d0 	bl	8001134 <__aeabi_dmul>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4630      	mov	r0, r6
 8002f9a:	4639      	mov	r1, r7
 8002f9c:	f7fd ff16 	bl	8000dcc <__aeabi_dsub>
 8002fa0:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8002fa4:	45c1      	cmp	r9, r8
 8002fa6:	f809 ec01 	strb.w	lr, [r9, #-1]
 8002faa:	464c      	mov	r4, r9
 8002fac:	4606      	mov	r6, r0
 8002fae:	460f      	mov	r7, r1
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	4ba7      	ldr	r3, [pc, #668]	; (8003254 <_dtoa_r+0x5dc>)
 8002fb6:	f109 0901 	add.w	r9, r9, #1
 8002fba:	d1d1      	bne.n	8002f60 <_dtoa_r+0x2e8>
 8002fbc:	46a3      	mov	fp, r4
 8002fbe:	9c03      	ldr	r4, [sp, #12]
 8002fc0:	4632      	mov	r2, r6
 8002fc2:	463b      	mov	r3, r7
 8002fc4:	4630      	mov	r0, r6
 8002fc6:	4639      	mov	r1, r7
 8002fc8:	f7fd ff02 	bl	8000dd0 <__adddf3>
 8002fcc:	4606      	mov	r6, r0
 8002fce:	460f      	mov	r7, r1
 8002fd0:	4632      	mov	r2, r6
 8002fd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002fd6:	463b      	mov	r3, r7
 8002fd8:	f002 f920 	bl	800521c <__aeabi_dcmplt>
 8002fdc:	b940      	cbnz	r0, 8002ff0 <_dtoa_r+0x378>
 8002fde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002fe2:	4632      	mov	r2, r6
 8002fe4:	463b      	mov	r3, r7
 8002fe6:	f002 f90f 	bl	8005208 <__aeabi_dcmpeq>
 8002fea:	b190      	cbz	r0, 8003012 <_dtoa_r+0x39a>
 8002fec:	07eb      	lsls	r3, r5, #31
 8002fee:	d510      	bpl.n	8003012 <_dtoa_r+0x39a>
 8002ff0:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
 8002ff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ff6:	e005      	b.n	8003004 <_dtoa_r+0x38c>
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	f000 8428 	beq.w	800384e <_dtoa_r+0xbd6>
 8002ffe:	f813 5c01 	ldrb.w	r5, [r3, #-1]
 8003002:	469b      	mov	fp, r3
 8003004:	2d39      	cmp	r5, #57	; 0x39
 8003006:	f10b 33ff 	add.w	r3, fp, #4294967295
 800300a:	d0f5      	beq.n	8002ff8 <_dtoa_r+0x380>
 800300c:	1c6a      	adds	r2, r5, #1
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	4620      	mov	r0, r4
 8003014:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003016:	f001 f8f7 	bl	8004208 <_Bfree>
 800301a:	9e07      	ldr	r6, [sp, #28]
 800301c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800301e:	1c73      	adds	r3, r6, #1
 8003020:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8003022:	2200      	movs	r2, #0
 8003024:	f88b 2000 	strb.w	r2, [fp]
 8003028:	602b      	str	r3, [r5, #0]
 800302a:	2e00      	cmp	r6, #0
 800302c:	f000 8325 	beq.w	800367a <_dtoa_r+0xa02>
 8003030:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003032:	f8c6 b000 	str.w	fp, [r6]
 8003036:	b01b      	add	sp, #108	; 0x6c
 8003038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800303c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800303e:	2d00      	cmp	r5, #0
 8003040:	f000 8103 	beq.w	800324a <_dtoa_r+0x5d2>
 8003044:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8003046:	2e01      	cmp	r6, #1
 8003048:	f340 82dc 	ble.w	8003604 <_dtoa_r+0x98c>
 800304c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800304e:	f109 37ff 	add.w	r7, r9, #4294967295
 8003052:	42be      	cmp	r6, r7
 8003054:	f2c0 8389 	blt.w	800376a <_dtoa_r+0xaf2>
 8003058:	1bf7      	subs	r7, r6, r7
 800305a:	f1b9 0f00 	cmp.w	r9, #0
 800305e:	f2c0 8486 	blt.w	800396e <_dtoa_r+0xcf6>
 8003062:	9d08      	ldr	r5, [sp, #32]
 8003064:	464b      	mov	r3, r9
 8003066:	9e08      	ldr	r6, [sp, #32]
 8003068:	441e      	add	r6, r3
 800306a:	9608      	str	r6, [sp, #32]
 800306c:	9e06      	ldr	r6, [sp, #24]
 800306e:	4620      	mov	r0, r4
 8003070:	441e      	add	r6, r3
 8003072:	2101      	movs	r1, #1
 8003074:	9606      	str	r6, [sp, #24]
 8003076:	f001 f96b 	bl	8004350 <__i2b>
 800307a:	4606      	mov	r6, r0
 800307c:	b165      	cbz	r5, 8003098 <_dtoa_r+0x420>
 800307e:	9806      	ldr	r0, [sp, #24]
 8003080:	2800      	cmp	r0, #0
 8003082:	dd09      	ble.n	8003098 <_dtoa_r+0x420>
 8003084:	4603      	mov	r3, r0
 8003086:	9908      	ldr	r1, [sp, #32]
 8003088:	42ab      	cmp	r3, r5
 800308a:	bfa8      	it	ge
 800308c:	462b      	movge	r3, r5
 800308e:	1ac9      	subs	r1, r1, r3
 8003090:	1ac0      	subs	r0, r0, r3
 8003092:	9108      	str	r1, [sp, #32]
 8003094:	1aed      	subs	r5, r5, r3
 8003096:	9006      	str	r0, [sp, #24]
 8003098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800309a:	2a00      	cmp	r2, #0
 800309c:	dd1d      	ble.n	80030da <_dtoa_r+0x462>
 800309e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8358 	beq.w	8003756 <_dtoa_r+0xade>
 80030a6:	2f00      	cmp	r7, #0
 80030a8:	dd11      	ble.n	80030ce <_dtoa_r+0x456>
 80030aa:	4631      	mov	r1, r6
 80030ac:	463a      	mov	r2, r7
 80030ae:	4620      	mov	r0, r4
 80030b0:	f001 f9f6 	bl	80044a0 <__pow5mult>
 80030b4:	4606      	mov	r6, r0
 80030b6:	4631      	mov	r1, r6
 80030b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030ba:	4620      	mov	r0, r4
 80030bc:	f001 f952 	bl	8004364 <__multiply>
 80030c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80030c2:	4680      	mov	r8, r0
 80030c4:	4620      	mov	r0, r4
 80030c6:	f001 f89f 	bl	8004208 <_Bfree>
 80030ca:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80030ce:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 80030d2:	ebbe 0207 	subs.w	r2, lr, r7
 80030d6:	f040 828f 	bne.w	80035f8 <_dtoa_r+0x980>
 80030da:	4620      	mov	r0, r4
 80030dc:	2101      	movs	r1, #1
 80030de:	f001 f937 	bl	8004350 <__i2b>
 80030e2:	4680      	mov	r8, r0
 80030e4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80030e6:	2800      	cmp	r0, #0
 80030e8:	dd05      	ble.n	80030f6 <_dtoa_r+0x47e>
 80030ea:	4641      	mov	r1, r8
 80030ec:	4620      	mov	r0, r4
 80030ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80030f0:	f001 f9d6 	bl	80044a0 <__pow5mult>
 80030f4:	4680      	mov	r8, r0
 80030f6:	9924      	ldr	r1, [sp, #144]	; 0x90
 80030f8:	2901      	cmp	r1, #1
 80030fa:	f340 82c1 	ble.w	8003680 <_dtoa_r+0xa08>
 80030fe:	2700      	movs	r7, #0
 8003100:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003102:	2800      	cmp	r0, #0
 8003104:	f040 82af 	bne.w	8003666 <_dtoa_r+0x9ee>
 8003108:	2001      	movs	r0, #1
 800310a:	9b06      	ldr	r3, [sp, #24]
 800310c:	4403      	add	r3, r0
 800310e:	f013 031f 	ands.w	r3, r3, #31
 8003112:	f000 80a1 	beq.w	8003258 <_dtoa_r+0x5e0>
 8003116:	f1c3 0220 	rsb	r2, r3, #32
 800311a:	2a04      	cmp	r2, #4
 800311c:	f340 84b5 	ble.w	8003a8a <_dtoa_r+0xe12>
 8003120:	9908      	ldr	r1, [sp, #32]
 8003122:	9a06      	ldr	r2, [sp, #24]
 8003124:	f1c3 031c 	rsb	r3, r3, #28
 8003128:	4419      	add	r1, r3
 800312a:	441a      	add	r2, r3
 800312c:	9108      	str	r1, [sp, #32]
 800312e:	441d      	add	r5, r3
 8003130:	9206      	str	r2, [sp, #24]
 8003132:	9908      	ldr	r1, [sp, #32]
 8003134:	2900      	cmp	r1, #0
 8003136:	dd05      	ble.n	8003144 <_dtoa_r+0x4cc>
 8003138:	990a      	ldr	r1, [sp, #40]	; 0x28
 800313a:	9a08      	ldr	r2, [sp, #32]
 800313c:	4620      	mov	r0, r4
 800313e:	f001 f9fd 	bl	800453c <__lshift>
 8003142:	900a      	str	r0, [sp, #40]	; 0x28
 8003144:	9a06      	ldr	r2, [sp, #24]
 8003146:	2a00      	cmp	r2, #0
 8003148:	dd04      	ble.n	8003154 <_dtoa_r+0x4dc>
 800314a:	4641      	mov	r1, r8
 800314c:	4620      	mov	r0, r4
 800314e:	f001 f9f5 	bl	800453c <__lshift>
 8003152:	4680      	mov	r8, r0
 8003154:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003156:	2b00      	cmp	r3, #0
 8003158:	f040 826a 	bne.w	8003630 <_dtoa_r+0x9b8>
 800315c:	f1b9 0f00 	cmp.w	r9, #0
 8003160:	f340 82a6 	ble.w	80036b0 <_dtoa_r+0xa38>
 8003164:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003166:	2800      	cmp	r0, #0
 8003168:	f040 8088 	bne.w	800327c <_dtoa_r+0x604>
 800316c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800316e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003170:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8003174:	e006      	b.n	8003184 <_dtoa_r+0x50c>
 8003176:	4639      	mov	r1, r7
 8003178:	4620      	mov	r0, r4
 800317a:	220a      	movs	r2, #10
 800317c:	2300      	movs	r3, #0
 800317e:	f001 f84d 	bl	800421c <__multadd>
 8003182:	4607      	mov	r7, r0
 8003184:	4638      	mov	r0, r7
 8003186:	4641      	mov	r1, r8
 8003188:	f7ff fcde 	bl	8002b48 <quorem>
 800318c:	3030      	adds	r0, #48	; 0x30
 800318e:	f80b 0005 	strb.w	r0, [fp, r5]
 8003192:	3501      	adds	r5, #1
 8003194:	45a9      	cmp	r9, r5
 8003196:	dcee      	bgt.n	8003176 <_dtoa_r+0x4fe>
 8003198:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800319c:	970a      	str	r7, [sp, #40]	; 0x28
 800319e:	4682      	mov	sl, r0
 80031a0:	f1b9 0f01 	cmp.w	r9, #1
 80031a4:	bfac      	ite	ge
 80031a6:	44cb      	addge	fp, r9
 80031a8:	f10b 0b01 	addlt.w	fp, fp, #1
 80031ac:	2500      	movs	r5, #0
 80031ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80031b0:	2201      	movs	r2, #1
 80031b2:	4620      	mov	r0, r4
 80031b4:	f001 f9c2 	bl	800453c <__lshift>
 80031b8:	4641      	mov	r1, r8
 80031ba:	900a      	str	r0, [sp, #40]	; 0x28
 80031bc:	f001 fa1c 	bl	80045f8 <__mcmp>
 80031c0:	2800      	cmp	r0, #0
 80031c2:	f340 8309 	ble.w	80037d8 <_dtoa_r+0xb60>
 80031c6:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 80031ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80031cc:	e005      	b.n	80031da <_dtoa_r+0x562>
 80031ce:	4299      	cmp	r1, r3
 80031d0:	f000 828b 	beq.w	80036ea <_dtoa_r+0xa72>
 80031d4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80031d8:	469b      	mov	fp, r3
 80031da:	2a39      	cmp	r2, #57	; 0x39
 80031dc:	f10b 33ff 	add.w	r3, fp, #4294967295
 80031e0:	d0f5      	beq.n	80031ce <_dtoa_r+0x556>
 80031e2:	3201      	adds	r2, #1
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	4641      	mov	r1, r8
 80031e8:	4620      	mov	r0, r4
 80031ea:	f001 f80d 	bl	8004208 <_Bfree>
 80031ee:	2e00      	cmp	r6, #0
 80031f0:	f43f af0f 	beq.w	8003012 <_dtoa_r+0x39a>
 80031f4:	b12d      	cbz	r5, 8003202 <_dtoa_r+0x58a>
 80031f6:	42b5      	cmp	r5, r6
 80031f8:	d003      	beq.n	8003202 <_dtoa_r+0x58a>
 80031fa:	4629      	mov	r1, r5
 80031fc:	4620      	mov	r0, r4
 80031fe:	f001 f803 	bl	8004208 <_Bfree>
 8003202:	4631      	mov	r1, r6
 8003204:	4620      	mov	r0, r4
 8003206:	f000 ffff 	bl	8004208 <_Bfree>
 800320a:	e702      	b.n	8003012 <_dtoa_r+0x39a>
 800320c:	2601      	movs	r6, #1
 800320e:	960e      	str	r6, [sp, #56]	; 0x38
 8003210:	e5eb      	b.n	8002dea <_dtoa_r+0x172>
 8003212:	9807      	ldr	r0, [sp, #28]
 8003214:	f7fd ff28 	bl	8001068 <__aeabi_i2d>
 8003218:	4632      	mov	r2, r6
 800321a:	463b      	mov	r3, r7
 800321c:	f001 fff4 	bl	8005208 <__aeabi_dcmpeq>
 8003220:	2800      	cmp	r0, #0
 8003222:	f47f adce 	bne.w	8002dc2 <_dtoa_r+0x14a>
 8003226:	9e07      	ldr	r6, [sp, #28]
 8003228:	3e01      	subs	r6, #1
 800322a:	9607      	str	r6, [sp, #28]
 800322c:	e5c9      	b.n	8002dc2 <_dtoa_r+0x14a>
 800322e:	9e07      	ldr	r6, [sp, #28]
 8003230:	9d08      	ldr	r5, [sp, #32]
 8003232:	1bad      	subs	r5, r5, r6
 8003234:	9508      	str	r5, [sp, #32]
 8003236:	4275      	negs	r5, r6
 8003238:	2600      	movs	r6, #0
 800323a:	950c      	str	r5, [sp, #48]	; 0x30
 800323c:	960d      	str	r6, [sp, #52]	; 0x34
 800323e:	e5e6      	b.n	8002e0e <_dtoa_r+0x196>
 8003240:	426d      	negs	r5, r5
 8003242:	2600      	movs	r6, #0
 8003244:	9508      	str	r5, [sp, #32]
 8003246:	9606      	str	r6, [sp, #24]
 8003248:	e5d7      	b.n	8002dfa <_dtoa_r+0x182>
 800324a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800324c:	9d08      	ldr	r5, [sp, #32]
 800324e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003250:	e714      	b.n	800307c <_dtoa_r+0x404>
 8003252:	bf00      	nop
 8003254:	40240000 	.word	0x40240000
 8003258:	231c      	movs	r3, #28
 800325a:	f8dd e020 	ldr.w	lr, [sp, #32]
 800325e:	9806      	ldr	r0, [sp, #24]
 8003260:	449e      	add	lr, r3
 8003262:	4418      	add	r0, r3
 8003264:	f8cd e020 	str.w	lr, [sp, #32]
 8003268:	441d      	add	r5, r3
 800326a:	9006      	str	r0, [sp, #24]
 800326c:	e761      	b.n	8003132 <_dtoa_r+0x4ba>
 800326e:	48a7      	ldr	r0, [pc, #668]	; (800350c <_dtoa_r+0x894>)
 8003270:	1b40      	subs	r0, r0, r5
 8003272:	fa0a f000 	lsl.w	r0, sl, r0
 8003276:	e570      	b.n	8002d5a <_dtoa_r+0xe2>
 8003278:	900e      	str	r0, [sp, #56]	; 0x38
 800327a:	e5b6      	b.n	8002dea <_dtoa_r+0x172>
 800327c:	2d00      	cmp	r5, #0
 800327e:	dd05      	ble.n	800328c <_dtoa_r+0x614>
 8003280:	4631      	mov	r1, r6
 8003282:	462a      	mov	r2, r5
 8003284:	4620      	mov	r0, r4
 8003286:	f001 f959 	bl	800453c <__lshift>
 800328a:	4606      	mov	r6, r0
 800328c:	2f00      	cmp	r7, #0
 800328e:	f040 82e8 	bne.w	8003862 <_dtoa_r+0xbea>
 8003292:	4637      	mov	r7, r6
 8003294:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003296:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003298:	444d      	add	r5, r9
 800329a:	9508      	str	r5, [sp, #32]
 800329c:	f00a 0501 	and.w	r5, sl, #1
 80032a0:	950b      	str	r5, [sp, #44]	; 0x2c
 80032a2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80032a6:	1c45      	adds	r5, r0, #1
 80032a8:	e00a      	b.n	80032c0 <_dtoa_r+0x648>
 80032aa:	f000 ffb7 	bl	800421c <__multadd>
 80032ae:	4639      	mov	r1, r7
 80032b0:	4606      	mov	r6, r0
 80032b2:	220a      	movs	r2, #10
 80032b4:	4620      	mov	r0, r4
 80032b6:	2300      	movs	r3, #0
 80032b8:	f000 ffb0 	bl	800421c <__multadd>
 80032bc:	4607      	mov	r7, r0
 80032be:	3501      	adds	r5, #1
 80032c0:	4641      	mov	r1, r8
 80032c2:	4648      	mov	r0, r9
 80032c4:	f7ff fc40 	bl	8002b48 <quorem>
 80032c8:	4631      	mov	r1, r6
 80032ca:	4683      	mov	fp, r0
 80032cc:	4648      	mov	r0, r9
 80032ce:	f001 f993 	bl	80045f8 <__mcmp>
 80032d2:	4641      	mov	r1, r8
 80032d4:	9003      	str	r0, [sp, #12]
 80032d6:	463a      	mov	r2, r7
 80032d8:	4620      	mov	r0, r4
 80032da:	f001 f9b1 	bl	8004640 <__mdiff>
 80032de:	68c2      	ldr	r2, [r0, #12]
 80032e0:	1e69      	subs	r1, r5, #1
 80032e2:	4603      	mov	r3, r0
 80032e4:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
 80032e8:	9106      	str	r1, [sp, #24]
 80032ea:	2a00      	cmp	r2, #0
 80032ec:	f040 8193 	bne.w	8003616 <_dtoa_r+0x99e>
 80032f0:	4619      	mov	r1, r3
 80032f2:	4648      	mov	r0, r9
 80032f4:	9302      	str	r3, [sp, #8]
 80032f6:	f001 f97f 	bl	80045f8 <__mcmp>
 80032fa:	9b02      	ldr	r3, [sp, #8]
 80032fc:	4602      	mov	r2, r0
 80032fe:	4619      	mov	r1, r3
 8003300:	4620      	mov	r0, r4
 8003302:	9202      	str	r2, [sp, #8]
 8003304:	f000 ff80 	bl	8004208 <_Bfree>
 8003308:	9a02      	ldr	r2, [sp, #8]
 800330a:	b92a      	cbnz	r2, 8003318 <_dtoa_r+0x6a0>
 800330c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800330e:	b91b      	cbnz	r3, 8003318 <_dtoa_r+0x6a0>
 8003310:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003312:	2800      	cmp	r0, #0
 8003314:	f000 8391 	beq.w	8003a3a <_dtoa_r+0xdc2>
 8003318:	9b03      	ldr	r3, [sp, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f2c0 8234 	blt.w	8003788 <_dtoa_r+0xb10>
 8003320:	d105      	bne.n	800332e <_dtoa_r+0x6b6>
 8003322:	9824      	ldr	r0, [sp, #144]	; 0x90
 8003324:	b918      	cbnz	r0, 800332e <_dtoa_r+0x6b6>
 8003326:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003328:	2900      	cmp	r1, #0
 800332a:	f000 822d 	beq.w	8003788 <_dtoa_r+0xb10>
 800332e:	2a00      	cmp	r2, #0
 8003330:	f300 82ab 	bgt.w	800388a <_dtoa_r+0xc12>
 8003334:	f8dd e020 	ldr.w	lr, [sp, #32]
 8003338:	f805 ac01 	strb.w	sl, [r5, #-1]
 800333c:	4575      	cmp	r5, lr
 800333e:	46ab      	mov	fp, r5
 8003340:	f000 82b3 	beq.w	80038aa <_dtoa_r+0xc32>
 8003344:	4649      	mov	r1, r9
 8003346:	220a      	movs	r2, #10
 8003348:	2300      	movs	r3, #0
 800334a:	4620      	mov	r0, r4
 800334c:	f000 ff66 	bl	800421c <__multadd>
 8003350:	42be      	cmp	r6, r7
 8003352:	4681      	mov	r9, r0
 8003354:	4631      	mov	r1, r6
 8003356:	4620      	mov	r0, r4
 8003358:	f04f 020a 	mov.w	r2, #10
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	d1a3      	bne.n	80032aa <_dtoa_r+0x632>
 8003362:	f000 ff5b 	bl	800421c <__multadd>
 8003366:	4606      	mov	r6, r0
 8003368:	4607      	mov	r7, r0
 800336a:	e7a8      	b.n	80032be <_dtoa_r+0x646>
 800336c:	2600      	movs	r6, #0
 800336e:	960b      	str	r6, [sp, #44]	; 0x2c
 8003370:	9e07      	ldr	r6, [sp, #28]
 8003372:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
 8003376:	44b6      	add	lr, r6
 8003378:	f10e 0901 	add.w	r9, lr, #1
 800337c:	f1b9 0f00 	cmp.w	r9, #0
 8003380:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8003384:	464e      	mov	r6, r9
 8003386:	f340 8150 	ble.w	800362a <_dtoa_r+0x9b2>
 800338a:	2100      	movs	r1, #0
 800338c:	2e17      	cmp	r6, #23
 800338e:	6461      	str	r1, [r4, #68]	; 0x44
 8003390:	d90a      	bls.n	80033a8 <_dtoa_r+0x730>
 8003392:	2201      	movs	r2, #1
 8003394:	2304      	movs	r3, #4
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	f103 0014 	add.w	r0, r3, #20
 800339c:	42b0      	cmp	r0, r6
 800339e:	4611      	mov	r1, r2
 80033a0:	f102 0201 	add.w	r2, r2, #1
 80033a4:	d9f7      	bls.n	8003396 <_dtoa_r+0x71e>
 80033a6:	6461      	str	r1, [r4, #68]	; 0x44
 80033a8:	4620      	mov	r0, r4
 80033aa:	f000 ff07 	bl	80041bc <_Balloc>
 80033ae:	2e0e      	cmp	r6, #14
 80033b0:	9009      	str	r0, [sp, #36]	; 0x24
 80033b2:	6420      	str	r0, [r4, #64]	; 0x40
 80033b4:	f63f ad6c 	bhi.w	8002e90 <_dtoa_r+0x218>
 80033b8:	2d00      	cmp	r5, #0
 80033ba:	f43f ad69 	beq.w	8002e90 <_dtoa_r+0x218>
 80033be:	9d07      	ldr	r5, [sp, #28]
 80033c0:	2d00      	cmp	r5, #0
 80033c2:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 80033c6:	f340 821b 	ble.w	8003800 <_dtoa_r+0xb88>
 80033ca:	4b51      	ldr	r3, [pc, #324]	; (8003510 <_dtoa_r+0x898>)
 80033cc:	f005 020f 	and.w	r2, r5, #15
 80033d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80033d4:	112d      	asrs	r5, r5, #4
 80033d6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80033da:	06eb      	lsls	r3, r5, #27
 80033dc:	f140 81cd 	bpl.w	800377a <_dtoa_r+0xb02>
 80033e0:	4b4c      	ldr	r3, [pc, #304]	; (8003514 <_dtoa_r+0x89c>)
 80033e2:	4650      	mov	r0, sl
 80033e4:	4659      	mov	r1, fp
 80033e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80033ea:	f7fd ffcd 	bl	8001388 <__aeabi_ddiv>
 80033ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80033f2:	f005 050f 	and.w	r5, r5, #15
 80033f6:	f04f 0803 	mov.w	r8, #3
 80033fa:	b18d      	cbz	r5, 8003420 <_dtoa_r+0x7a8>
 80033fc:	f8df a114 	ldr.w	sl, [pc, #276]	; 8003514 <_dtoa_r+0x89c>
 8003400:	4630      	mov	r0, r6
 8003402:	4639      	mov	r1, r7
 8003404:	07ee      	lsls	r6, r5, #31
 8003406:	d505      	bpl.n	8003414 <_dtoa_r+0x79c>
 8003408:	e9da 2300 	ldrd	r2, r3, [sl]
 800340c:	f108 0801 	add.w	r8, r8, #1
 8003410:	f7fd fe90 	bl	8001134 <__aeabi_dmul>
 8003414:	106d      	asrs	r5, r5, #1
 8003416:	f10a 0a08 	add.w	sl, sl, #8
 800341a:	d1f3      	bne.n	8003404 <_dtoa_r+0x78c>
 800341c:	4606      	mov	r6, r0
 800341e:	460f      	mov	r7, r1
 8003420:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003424:	4632      	mov	r2, r6
 8003426:	463b      	mov	r3, r7
 8003428:	f7fd ffae 	bl	8001388 <__aeabi_ddiv>
 800342c:	4682      	mov	sl, r0
 800342e:	468b      	mov	fp, r1
 8003430:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003432:	b145      	cbz	r5, 8003446 <_dtoa_r+0x7ce>
 8003434:	4650      	mov	r0, sl
 8003436:	4659      	mov	r1, fp
 8003438:	2200      	movs	r2, #0
 800343a:	4b37      	ldr	r3, [pc, #220]	; (8003518 <_dtoa_r+0x8a0>)
 800343c:	f001 feee 	bl	800521c <__aeabi_dcmplt>
 8003440:	2800      	cmp	r0, #0
 8003442:	f040 82a9 	bne.w	8003998 <_dtoa_r+0xd20>
 8003446:	4640      	mov	r0, r8
 8003448:	f7fd fe0e 	bl	8001068 <__aeabi_i2d>
 800344c:	4652      	mov	r2, sl
 800344e:	465b      	mov	r3, fp
 8003450:	f7fd fe70 	bl	8001134 <__aeabi_dmul>
 8003454:	2200      	movs	r2, #0
 8003456:	4b31      	ldr	r3, [pc, #196]	; (800351c <_dtoa_r+0x8a4>)
 8003458:	f7fd fcba 	bl	8000dd0 <__adddf3>
 800345c:	4606      	mov	r6, r0
 800345e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8003462:	f1b9 0f00 	cmp.w	r9, #0
 8003466:	f000 815a 	beq.w	800371e <_dtoa_r+0xaa6>
 800346a:	9d07      	ldr	r5, [sp, #28]
 800346c:	9517      	str	r5, [sp, #92]	; 0x5c
 800346e:	46c8      	mov	r8, r9
 8003470:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003472:	2d00      	cmp	r5, #0
 8003474:	f000 8222 	beq.w	80038bc <_dtoa_r+0xc44>
 8003478:	4b25      	ldr	r3, [pc, #148]	; (8003510 <_dtoa_r+0x898>)
 800347a:	4929      	ldr	r1, [pc, #164]	; (8003520 <_dtoa_r+0x8a8>)
 800347c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003480:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003484:	2000      	movs	r0, #0
 8003486:	f7fd ff7f 	bl	8001388 <__aeabi_ddiv>
 800348a:	4632      	mov	r2, r6
 800348c:	463b      	mov	r3, r7
 800348e:	f7fd fc9d 	bl	8000dcc <__aeabi_dsub>
 8003492:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003496:	4659      	mov	r1, fp
 8003498:	4650      	mov	r0, sl
 800349a:	f001 fee7 	bl	800526c <__aeabi_d2iz>
 800349e:	4605      	mov	r5, r0
 80034a0:	f7fd fde2 	bl	8001068 <__aeabi_i2d>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4650      	mov	r0, sl
 80034aa:	4659      	mov	r1, fp
 80034ac:	f7fd fc8e 	bl	8000dcc <__aeabi_dsub>
 80034b0:	3530      	adds	r5, #48	; 0x30
 80034b2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80034b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80034b8:	b2ed      	uxtb	r5, r5
 80034ba:	7035      	strb	r5, [r6, #0]
 80034bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80034c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034c4:	f106 0b01 	add.w	fp, r6, #1
 80034c8:	f001 fec6 	bl	8005258 <__aeabi_dcmpgt>
 80034cc:	2800      	cmp	r0, #0
 80034ce:	f040 82a9 	bne.w	8003a24 <_dtoa_r+0xdac>
 80034d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034d6:	2000      	movs	r0, #0
 80034d8:	490f      	ldr	r1, [pc, #60]	; (8003518 <_dtoa_r+0x8a0>)
 80034da:	f7fd fc77 	bl	8000dcc <__aeabi_dsub>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80034e6:	f001 feb7 	bl	8005258 <__aeabi_dcmpgt>
 80034ea:	2800      	cmp	r0, #0
 80034ec:	f040 82a0 	bne.w	8003a30 <_dtoa_r+0xdb8>
 80034f0:	f1b8 0f01 	cmp.w	r8, #1
 80034f4:	f340 8180 	ble.w	80037f8 <_dtoa_r+0xb80>
 80034f8:	44b0      	add	r8, r6
 80034fa:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 80034fe:	46a2      	mov	sl, r4
 8003500:	46c1      	mov	r9, r8
 8003502:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8003506:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 800350a:	e019      	b.n	8003540 <_dtoa_r+0x8c8>
 800350c:	fffffbee 	.word	0xfffffbee
 8003510:	08005920 	.word	0x08005920
 8003514:	080059e8 	.word	0x080059e8
 8003518:	3ff00000 	.word	0x3ff00000
 800351c:	401c0000 	.word	0x401c0000
 8003520:	3fe00000 	.word	0x3fe00000
 8003524:	2000      	movs	r0, #0
 8003526:	49a8      	ldr	r1, [pc, #672]	; (80037c8 <_dtoa_r+0xb50>)
 8003528:	f7fd fc50 	bl	8000dcc <__aeabi_dsub>
 800352c:	4622      	mov	r2, r4
 800352e:	462b      	mov	r3, r5
 8003530:	f001 fe74 	bl	800521c <__aeabi_dcmplt>
 8003534:	2800      	cmp	r0, #0
 8003536:	f040 8279 	bne.w	8003a2c <_dtoa_r+0xdb4>
 800353a:	45cb      	cmp	fp, r9
 800353c:	f000 8159 	beq.w	80037f2 <_dtoa_r+0xb7a>
 8003540:	4620      	mov	r0, r4
 8003542:	4629      	mov	r1, r5
 8003544:	2200      	movs	r2, #0
 8003546:	4ba1      	ldr	r3, [pc, #644]	; (80037cc <_dtoa_r+0xb54>)
 8003548:	f7fd fdf4 	bl	8001134 <__aeabi_dmul>
 800354c:	2200      	movs	r2, #0
 800354e:	4b9f      	ldr	r3, [pc, #636]	; (80037cc <_dtoa_r+0xb54>)
 8003550:	4604      	mov	r4, r0
 8003552:	460d      	mov	r5, r1
 8003554:	4630      	mov	r0, r6
 8003556:	4639      	mov	r1, r7
 8003558:	f7fd fdec 	bl	8001134 <__aeabi_dmul>
 800355c:	460f      	mov	r7, r1
 800355e:	4606      	mov	r6, r0
 8003560:	f001 fe84 	bl	800526c <__aeabi_d2iz>
 8003564:	4680      	mov	r8, r0
 8003566:	f7fd fd7f 	bl	8001068 <__aeabi_i2d>
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	4630      	mov	r0, r6
 8003570:	4639      	mov	r1, r7
 8003572:	f7fd fc2b 	bl	8000dcc <__aeabi_dsub>
 8003576:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800357a:	fa5f f888 	uxtb.w	r8, r8
 800357e:	4622      	mov	r2, r4
 8003580:	462b      	mov	r3, r5
 8003582:	f80b 8b01 	strb.w	r8, [fp], #1
 8003586:	4606      	mov	r6, r0
 8003588:	460f      	mov	r7, r1
 800358a:	f001 fe47 	bl	800521c <__aeabi_dcmplt>
 800358e:	4632      	mov	r2, r6
 8003590:	463b      	mov	r3, r7
 8003592:	2800      	cmp	r0, #0
 8003594:	d0c6      	beq.n	8003524 <_dtoa_r+0x8ac>
 8003596:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8003598:	9607      	str	r6, [sp, #28]
 800359a:	4654      	mov	r4, sl
 800359c:	e539      	b.n	8003012 <_dtoa_r+0x39a>
 800359e:	2600      	movs	r6, #0
 80035a0:	960b      	str	r6, [sp, #44]	; 0x2c
 80035a2:	9825      	ldr	r0, [sp, #148]	; 0x94
 80035a4:	2800      	cmp	r0, #0
 80035a6:	dd3c      	ble.n	8003622 <_dtoa_r+0x9aa>
 80035a8:	4606      	mov	r6, r0
 80035aa:	900f      	str	r0, [sp, #60]	; 0x3c
 80035ac:	4681      	mov	r9, r0
 80035ae:	e6ec      	b.n	800338a <_dtoa_r+0x712>
 80035b0:	2601      	movs	r6, #1
 80035b2:	960b      	str	r6, [sp, #44]	; 0x2c
 80035b4:	e7f5      	b.n	80035a2 <_dtoa_r+0x92a>
 80035b6:	f1b9 0f00 	cmp.w	r9, #0
 80035ba:	f73f ac7c 	bgt.w	8002eb6 <_dtoa_r+0x23e>
 80035be:	f040 80c6 	bne.w	800374e <_dtoa_r+0xad6>
 80035c2:	2200      	movs	r2, #0
 80035c4:	4b82      	ldr	r3, [pc, #520]	; (80037d0 <_dtoa_r+0xb58>)
 80035c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80035ca:	f7fd fdb3 	bl	8001134 <__aeabi_dmul>
 80035ce:	4652      	mov	r2, sl
 80035d0:	465b      	mov	r3, fp
 80035d2:	f001 fe37 	bl	8005244 <__aeabi_dcmpge>
 80035d6:	46c8      	mov	r8, r9
 80035d8:	464e      	mov	r6, r9
 80035da:	2800      	cmp	r0, #0
 80035dc:	d07c      	beq.n	80036d8 <_dtoa_r+0xa60>
 80035de:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80035e0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80035e4:	43ed      	mvns	r5, r5
 80035e6:	9507      	str	r5, [sp, #28]
 80035e8:	4641      	mov	r1, r8
 80035ea:	4620      	mov	r0, r4
 80035ec:	f000 fe0c 	bl	8004208 <_Bfree>
 80035f0:	2e00      	cmp	r6, #0
 80035f2:	f47f ae06 	bne.w	8003202 <_dtoa_r+0x58a>
 80035f6:	e50c      	b.n	8003012 <_dtoa_r+0x39a>
 80035f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80035fa:	4620      	mov	r0, r4
 80035fc:	f000 ff50 	bl	80044a0 <__pow5mult>
 8003600:	900a      	str	r0, [sp, #40]	; 0x28
 8003602:	e56a      	b.n	80030da <_dtoa_r+0x462>
 8003604:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8003606:	2d00      	cmp	r5, #0
 8003608:	f000 81b7 	beq.w	800397a <_dtoa_r+0xd02>
 800360c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003610:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003612:	9d08      	ldr	r5, [sp, #32]
 8003614:	e527      	b.n	8003066 <_dtoa_r+0x3ee>
 8003616:	4601      	mov	r1, r0
 8003618:	4620      	mov	r0, r4
 800361a:	f000 fdf5 	bl	8004208 <_Bfree>
 800361e:	2201      	movs	r2, #1
 8003620:	e67a      	b.n	8003318 <_dtoa_r+0x6a0>
 8003622:	2601      	movs	r6, #1
 8003624:	9625      	str	r6, [sp, #148]	; 0x94
 8003626:	960f      	str	r6, [sp, #60]	; 0x3c
 8003628:	46b1      	mov	r9, r6
 800362a:	2100      	movs	r1, #0
 800362c:	6461      	str	r1, [r4, #68]	; 0x44
 800362e:	e6bb      	b.n	80033a8 <_dtoa_r+0x730>
 8003630:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003632:	4641      	mov	r1, r8
 8003634:	f000 ffe0 	bl	80045f8 <__mcmp>
 8003638:	2800      	cmp	r0, #0
 800363a:	f6bf ad8f 	bge.w	800315c <_dtoa_r+0x4e4>
 800363e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8003642:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003644:	f10e 3eff 	add.w	lr, lr, #4294967295
 8003648:	4620      	mov	r0, r4
 800364a:	220a      	movs	r2, #10
 800364c:	2300      	movs	r3, #0
 800364e:	f8cd e01c 	str.w	lr, [sp, #28]
 8003652:	f000 fde3 	bl	800421c <__multadd>
 8003656:	900a      	str	r0, [sp, #40]	; 0x28
 8003658:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800365a:	2800      	cmp	r0, #0
 800365c:	f040 8207 	bne.w	8003a6e <_dtoa_r+0xdf6>
 8003660:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8003664:	e57a      	b.n	800315c <_dtoa_r+0x4e4>
 8003666:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800366a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800366e:	6918      	ldr	r0, [r3, #16]
 8003670:	f000 fe20 	bl	80042b4 <__hi0bits>
 8003674:	f1c0 0020 	rsb	r0, r0, #32
 8003678:	e547      	b.n	800310a <_dtoa_r+0x492>
 800367a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800367c:	f7ff bb2d 	b.w	8002cda <_dtoa_r+0x62>
 8003680:	f1ba 0f00 	cmp.w	sl, #0
 8003684:	f47f ad3b 	bne.w	80030fe <_dtoa_r+0x486>
 8003688:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800368c:	2b00      	cmp	r3, #0
 800368e:	f040 817b 	bne.w	8003988 <_dtoa_r+0xd10>
 8003692:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8003696:	0d3f      	lsrs	r7, r7, #20
 8003698:	053f      	lsls	r7, r7, #20
 800369a:	2f00      	cmp	r7, #0
 800369c:	f43f ad30 	beq.w	8003100 <_dtoa_r+0x488>
 80036a0:	9a08      	ldr	r2, [sp, #32]
 80036a2:	9b06      	ldr	r3, [sp, #24]
 80036a4:	3201      	adds	r2, #1
 80036a6:	3301      	adds	r3, #1
 80036a8:	9208      	str	r2, [sp, #32]
 80036aa:	9306      	str	r3, [sp, #24]
 80036ac:	2701      	movs	r7, #1
 80036ae:	e527      	b.n	8003100 <_dtoa_r+0x488>
 80036b0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80036b2:	2902      	cmp	r1, #2
 80036b4:	f77f ad56 	ble.w	8003164 <_dtoa_r+0x4ec>
 80036b8:	f1b9 0f00 	cmp.w	r9, #0
 80036bc:	d18f      	bne.n	80035de <_dtoa_r+0x966>
 80036be:	4641      	mov	r1, r8
 80036c0:	464b      	mov	r3, r9
 80036c2:	2205      	movs	r2, #5
 80036c4:	4620      	mov	r0, r4
 80036c6:	f000 fda9 	bl	800421c <__multadd>
 80036ca:	4680      	mov	r8, r0
 80036cc:	4641      	mov	r1, r8
 80036ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80036d0:	f000 ff92 	bl	80045f8 <__mcmp>
 80036d4:	2800      	cmp	r0, #0
 80036d6:	dd82      	ble.n	80035de <_dtoa_r+0x966>
 80036d8:	9d07      	ldr	r5, [sp, #28]
 80036da:	3501      	adds	r5, #1
 80036dc:	9507      	str	r5, [sp, #28]
 80036de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80036e0:	2331      	movs	r3, #49	; 0x31
 80036e2:	702b      	strb	r3, [r5, #0]
 80036e4:	f105 0b01 	add.w	fp, r5, #1
 80036e8:	e77e      	b.n	80035e8 <_dtoa_r+0x970>
 80036ea:	9807      	ldr	r0, [sp, #28]
 80036ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80036ee:	2331      	movs	r3, #49	; 0x31
 80036f0:	3001      	adds	r0, #1
 80036f2:	9007      	str	r0, [sp, #28]
 80036f4:	700b      	strb	r3, [r1, #0]
 80036f6:	e576      	b.n	80031e6 <_dtoa_r+0x56e>
 80036f8:	46a3      	mov	fp, r4
 80036fa:	9c03      	ldr	r4, [sp, #12]
 80036fc:	e489      	b.n	8003012 <_dtoa_r+0x39a>
 80036fe:	4640      	mov	r0, r8
 8003700:	f7fd fcb2 	bl	8001068 <__aeabi_i2d>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4650      	mov	r0, sl
 800370a:	4659      	mov	r1, fp
 800370c:	f7fd fd12 	bl	8001134 <__aeabi_dmul>
 8003710:	2200      	movs	r2, #0
 8003712:	4b30      	ldr	r3, [pc, #192]	; (80037d4 <_dtoa_r+0xb5c>)
 8003714:	f7fd fb5c 	bl	8000dd0 <__adddf3>
 8003718:	4606      	mov	r6, r0
 800371a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800371e:	4650      	mov	r0, sl
 8003720:	4659      	mov	r1, fp
 8003722:	2200      	movs	r2, #0
 8003724:	4b2a      	ldr	r3, [pc, #168]	; (80037d0 <_dtoa_r+0xb58>)
 8003726:	f7fd fb51 	bl	8000dcc <__aeabi_dsub>
 800372a:	4632      	mov	r2, r6
 800372c:	463b      	mov	r3, r7
 800372e:	4682      	mov	sl, r0
 8003730:	468b      	mov	fp, r1
 8003732:	f001 fd91 	bl	8005258 <__aeabi_dcmpgt>
 8003736:	2800      	cmp	r0, #0
 8003738:	f040 80bc 	bne.w	80038b4 <_dtoa_r+0xc3c>
 800373c:	4632      	mov	r2, r6
 800373e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8003742:	4650      	mov	r0, sl
 8003744:	4659      	mov	r1, fp
 8003746:	f001 fd69 	bl	800521c <__aeabi_dcmplt>
 800374a:	2800      	cmp	r0, #0
 800374c:	d054      	beq.n	80037f8 <_dtoa_r+0xb80>
 800374e:	f04f 0800 	mov.w	r8, #0
 8003752:	4646      	mov	r6, r8
 8003754:	e743      	b.n	80035de <_dtoa_r+0x966>
 8003756:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800375a:	4620      	mov	r0, r4
 800375c:	f000 fea0 	bl	80044a0 <__pow5mult>
 8003760:	900a      	str	r0, [sp, #40]	; 0x28
 8003762:	e4ba      	b.n	80030da <_dtoa_r+0x462>
 8003764:	2601      	movs	r6, #1
 8003766:	960b      	str	r6, [sp, #44]	; 0x2c
 8003768:	e602      	b.n	8003370 <_dtoa_r+0x6f8>
 800376a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800376c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800376e:	970c      	str	r7, [sp, #48]	; 0x30
 8003770:	1b7b      	subs	r3, r7, r5
 8003772:	441e      	add	r6, r3
 8003774:	960d      	str	r6, [sp, #52]	; 0x34
 8003776:	2700      	movs	r7, #0
 8003778:	e46f      	b.n	800305a <_dtoa_r+0x3e2>
 800377a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800377e:	f04f 0802 	mov.w	r8, #2
 8003782:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003786:	e638      	b.n	80033fa <_dtoa_r+0x782>
 8003788:	2a00      	cmp	r2, #0
 800378a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800378e:	46d9      	mov	r9, fp
 8003790:	dd11      	ble.n	80037b6 <_dtoa_r+0xb3e>
 8003792:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003794:	2201      	movs	r2, #1
 8003796:	4620      	mov	r0, r4
 8003798:	f000 fed0 	bl	800453c <__lshift>
 800379c:	4641      	mov	r1, r8
 800379e:	900a      	str	r0, [sp, #40]	; 0x28
 80037a0:	f000 ff2a 	bl	80045f8 <__mcmp>
 80037a4:	2800      	cmp	r0, #0
 80037a6:	f340 815b 	ble.w	8003a60 <_dtoa_r+0xde8>
 80037aa:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80037ae:	f000 811a 	beq.w	80039e6 <_dtoa_r+0xd6e>
 80037b2:	f109 0a31 	add.w	sl, r9, #49	; 0x31
 80037b6:	9b06      	ldr	r3, [sp, #24]
 80037b8:	4635      	mov	r5, r6
 80037ba:	f883 a000 	strb.w	sl, [r3]
 80037be:	f103 0b01 	add.w	fp, r3, #1
 80037c2:	463e      	mov	r6, r7
 80037c4:	e50f      	b.n	80031e6 <_dtoa_r+0x56e>
 80037c6:	bf00      	nop
 80037c8:	3ff00000 	.word	0x3ff00000
 80037cc:	40240000 	.word	0x40240000
 80037d0:	40140000 	.word	0x40140000
 80037d4:	401c0000 	.word	0x401c0000
 80037d8:	d103      	bne.n	80037e2 <_dtoa_r+0xb6a>
 80037da:	f01a 0f01 	tst.w	sl, #1
 80037de:	f47f acf2 	bne.w	80031c6 <_dtoa_r+0x54e>
 80037e2:	465b      	mov	r3, fp
 80037e4:	469b      	mov	fp, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 80037ec:	2a30      	cmp	r2, #48	; 0x30
 80037ee:	d0f9      	beq.n	80037e4 <_dtoa_r+0xb6c>
 80037f0:	e4f9      	b.n	80031e6 <_dtoa_r+0x56e>
 80037f2:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 80037f6:	4654      	mov	r4, sl
 80037f8:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 80037fc:	f7ff bb48 	b.w	8002e90 <_dtoa_r+0x218>
 8003800:	9e07      	ldr	r6, [sp, #28]
 8003802:	4275      	negs	r5, r6
 8003804:	2d00      	cmp	r5, #0
 8003806:	f000 80c2 	beq.w	800398e <_dtoa_r+0xd16>
 800380a:	4ba3      	ldr	r3, [pc, #652]	; (8003a98 <_dtoa_r+0xe20>)
 800380c:	f005 020f 	and.w	r2, r5, #15
 8003810:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003818:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800381c:	f7fd fc8a 	bl	8001134 <__aeabi_dmul>
 8003820:	112d      	asrs	r5, r5, #4
 8003822:	4682      	mov	sl, r0
 8003824:	468b      	mov	fp, r1
 8003826:	f000 812d 	beq.w	8003a84 <_dtoa_r+0xe0c>
 800382a:	4e9c      	ldr	r6, [pc, #624]	; (8003a9c <_dtoa_r+0xe24>)
 800382c:	f04f 0802 	mov.w	r8, #2
 8003830:	07ea      	lsls	r2, r5, #31
 8003832:	d505      	bpl.n	8003840 <_dtoa_r+0xbc8>
 8003834:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003838:	f108 0801 	add.w	r8, r8, #1
 800383c:	f7fd fc7a 	bl	8001134 <__aeabi_dmul>
 8003840:	106d      	asrs	r5, r5, #1
 8003842:	f106 0608 	add.w	r6, r6, #8
 8003846:	d1f3      	bne.n	8003830 <_dtoa_r+0xbb8>
 8003848:	4682      	mov	sl, r0
 800384a:	468b      	mov	fp, r1
 800384c:	e5f0      	b.n	8003430 <_dtoa_r+0x7b8>
 800384e:	9e07      	ldr	r6, [sp, #28]
 8003850:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003852:	2230      	movs	r2, #48	; 0x30
 8003854:	702a      	strb	r2, [r5, #0]
 8003856:	3601      	adds	r6, #1
 8003858:	2231      	movs	r2, #49	; 0x31
 800385a:	9607      	str	r6, [sp, #28]
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	f7ff bbd8 	b.w	8003012 <_dtoa_r+0x39a>
 8003862:	6871      	ldr	r1, [r6, #4]
 8003864:	4620      	mov	r0, r4
 8003866:	f000 fca9 	bl	80041bc <_Balloc>
 800386a:	6933      	ldr	r3, [r6, #16]
 800386c:	1c9a      	adds	r2, r3, #2
 800386e:	4605      	mov	r5, r0
 8003870:	0092      	lsls	r2, r2, #2
 8003872:	f106 010c 	add.w	r1, r6, #12
 8003876:	300c      	adds	r0, #12
 8003878:	f000 fc02 	bl	8004080 <memcpy>
 800387c:	4620      	mov	r0, r4
 800387e:	4629      	mov	r1, r5
 8003880:	2201      	movs	r2, #1
 8003882:	f000 fe5b 	bl	800453c <__lshift>
 8003886:	4607      	mov	r7, r0
 8003888:	e504      	b.n	8003294 <_dtoa_r+0x61c>
 800388a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800388e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8003892:	f000 80a8 	beq.w	80039e6 <_dtoa_r+0xd6e>
 8003896:	9d06      	ldr	r5, [sp, #24]
 8003898:	f10a 0301 	add.w	r3, sl, #1
 800389c:	702b      	strb	r3, [r5, #0]
 800389e:	4635      	mov	r5, r6
 80038a0:	9e06      	ldr	r6, [sp, #24]
 80038a2:	f106 0b01 	add.w	fp, r6, #1
 80038a6:	463e      	mov	r6, r7
 80038a8:	e49d      	b.n	80031e6 <_dtoa_r+0x56e>
 80038aa:	4635      	mov	r5, r6
 80038ac:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80038b0:	463e      	mov	r6, r7
 80038b2:	e47c      	b.n	80031ae <_dtoa_r+0x536>
 80038b4:	f04f 0800 	mov.w	r8, #0
 80038b8:	4646      	mov	r6, r8
 80038ba:	e70d      	b.n	80036d8 <_dtoa_r+0xa60>
 80038bc:	4976      	ldr	r1, [pc, #472]	; (8003a98 <_dtoa_r+0xe20>)
 80038be:	f108 35ff 	add.w	r5, r8, #4294967295
 80038c2:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80038c6:	4632      	mov	r2, r6
 80038c8:	463b      	mov	r3, r7
 80038ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038ce:	9510      	str	r5, [sp, #64]	; 0x40
 80038d0:	f7fd fc30 	bl	8001134 <__aeabi_dmul>
 80038d4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80038d8:	4659      	mov	r1, fp
 80038da:	4650      	mov	r0, sl
 80038dc:	f001 fcc6 	bl	800526c <__aeabi_d2iz>
 80038e0:	4605      	mov	r5, r0
 80038e2:	f7fd fbc1 	bl	8001068 <__aeabi_i2d>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4650      	mov	r0, sl
 80038ec:	4659      	mov	r1, fp
 80038ee:	f7fd fa6d 	bl	8000dcc <__aeabi_dsub>
 80038f2:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80038f6:	3530      	adds	r5, #48	; 0x30
 80038f8:	f1b8 0f01 	cmp.w	r8, #1
 80038fc:	4606      	mov	r6, r0
 80038fe:	460f      	mov	r7, r1
 8003900:	f88e 5000 	strb.w	r5, [lr]
 8003904:	f10e 0b01 	add.w	fp, lr, #1
 8003908:	d01e      	beq.n	8003948 <_dtoa_r+0xcd0>
 800390a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800390c:	1e6b      	subs	r3, r5, #1
 800390e:	eb03 0a08 	add.w	sl, r3, r8
 8003912:	2200      	movs	r2, #0
 8003914:	4b62      	ldr	r3, [pc, #392]	; (8003aa0 <_dtoa_r+0xe28>)
 8003916:	f7fd fc0d 	bl	8001134 <__aeabi_dmul>
 800391a:	460f      	mov	r7, r1
 800391c:	4606      	mov	r6, r0
 800391e:	f001 fca5 	bl	800526c <__aeabi_d2iz>
 8003922:	4680      	mov	r8, r0
 8003924:	f7fd fba0 	bl	8001068 <__aeabi_i2d>
 8003928:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	4630      	mov	r0, r6
 8003932:	4639      	mov	r1, r7
 8003934:	f7fd fa4a 	bl	8000dcc <__aeabi_dsub>
 8003938:	f805 8f01 	strb.w	r8, [r5, #1]!
 800393c:	4555      	cmp	r5, sl
 800393e:	d1e8      	bne.n	8003912 <_dtoa_r+0xc9a>
 8003940:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003942:	4606      	mov	r6, r0
 8003944:	460f      	mov	r7, r1
 8003946:	44ab      	add	fp, r5
 8003948:	2200      	movs	r2, #0
 800394a:	4b56      	ldr	r3, [pc, #344]	; (8003aa4 <_dtoa_r+0xe2c>)
 800394c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8003950:	f7fd fa3e 	bl	8000dd0 <__adddf3>
 8003954:	4632      	mov	r2, r6
 8003956:	463b      	mov	r3, r7
 8003958:	f001 fc60 	bl	800521c <__aeabi_dcmplt>
 800395c:	2800      	cmp	r0, #0
 800395e:	d04d      	beq.n	80039fc <_dtoa_r+0xd84>
 8003960:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8003962:	9607      	str	r6, [sp, #28]
 8003964:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
 8003968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800396a:	f7ff bb4b 	b.w	8003004 <_dtoa_r+0x38c>
 800396e:	9e08      	ldr	r6, [sp, #32]
 8003970:	2300      	movs	r3, #0
 8003972:	ebc9 0506 	rsb	r5, r9, r6
 8003976:	f7ff bb76 	b.w	8003066 <_dtoa_r+0x3ee>
 800397a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800397c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800397e:	9d08      	ldr	r5, [sp, #32]
 8003980:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003984:	f7ff bb6f 	b.w	8003066 <_dtoa_r+0x3ee>
 8003988:	4657      	mov	r7, sl
 800398a:	f7ff bbb9 	b.w	8003100 <_dtoa_r+0x488>
 800398e:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8003992:	f04f 0802 	mov.w	r8, #2
 8003996:	e54b      	b.n	8003430 <_dtoa_r+0x7b8>
 8003998:	f1b9 0f00 	cmp.w	r9, #0
 800399c:	f43f aeaf 	beq.w	80036fe <_dtoa_r+0xa86>
 80039a0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80039a2:	2e00      	cmp	r6, #0
 80039a4:	f77f af28 	ble.w	80037f8 <_dtoa_r+0xb80>
 80039a8:	2200      	movs	r2, #0
 80039aa:	4b3d      	ldr	r3, [pc, #244]	; (8003aa0 <_dtoa_r+0xe28>)
 80039ac:	4650      	mov	r0, sl
 80039ae:	4659      	mov	r1, fp
 80039b0:	f7fd fbc0 	bl	8001134 <__aeabi_dmul>
 80039b4:	4682      	mov	sl, r0
 80039b6:	f108 0001 	add.w	r0, r8, #1
 80039ba:	468b      	mov	fp, r1
 80039bc:	f7fd fb54 	bl	8001068 <__aeabi_i2d>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4650      	mov	r0, sl
 80039c6:	4659      	mov	r1, fp
 80039c8:	f7fd fbb4 	bl	8001134 <__aeabi_dmul>
 80039cc:	2200      	movs	r2, #0
 80039ce:	4b36      	ldr	r3, [pc, #216]	; (8003aa8 <_dtoa_r+0xe30>)
 80039d0:	f7fd f9fe 	bl	8000dd0 <__adddf3>
 80039d4:	9d07      	ldr	r5, [sp, #28]
 80039d6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80039da:	3d01      	subs	r5, #1
 80039dc:	4606      	mov	r6, r0
 80039de:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80039e2:	9517      	str	r5, [sp, #92]	; 0x5c
 80039e4:	e544      	b.n	8003470 <_dtoa_r+0x7f8>
 80039e6:	4635      	mov	r5, r6
 80039e8:	9b06      	ldr	r3, [sp, #24]
 80039ea:	9e06      	ldr	r6, [sp, #24]
 80039ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80039ee:	2239      	movs	r2, #57	; 0x39
 80039f0:	7032      	strb	r2, [r6, #0]
 80039f2:	f103 0b01 	add.w	fp, r3, #1
 80039f6:	463e      	mov	r6, r7
 80039f8:	f7ff bbef 	b.w	80031da <_dtoa_r+0x562>
 80039fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003a00:	2000      	movs	r0, #0
 8003a02:	4928      	ldr	r1, [pc, #160]	; (8003aa4 <_dtoa_r+0xe2c>)
 8003a04:	f7fd f9e2 	bl	8000dcc <__aeabi_dsub>
 8003a08:	4632      	mov	r2, r6
 8003a0a:	463b      	mov	r3, r7
 8003a0c:	f001 fc24 	bl	8005258 <__aeabi_dcmpgt>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	f43f aef1 	beq.w	80037f8 <_dtoa_r+0xb80>
 8003a16:	465b      	mov	r3, fp
 8003a18:	469b      	mov	fp, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 8003a20:	2a30      	cmp	r2, #48	; 0x30
 8003a22:	d0f9      	beq.n	8003a18 <_dtoa_r+0xda0>
 8003a24:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8003a26:	9507      	str	r5, [sp, #28]
 8003a28:	f7ff baf3 	b.w	8003012 <_dtoa_r+0x39a>
 8003a2c:	4645      	mov	r5, r8
 8003a2e:	4654      	mov	r4, sl
 8003a30:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8003a32:	9607      	str	r6, [sp, #28]
 8003a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a36:	f7ff bae5 	b.w	8003004 <_dtoa_r+0x38c>
 8003a3a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003a3e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8003a42:	d0d0      	beq.n	80039e6 <_dtoa_r+0xd6e>
 8003a44:	9b03      	ldr	r3, [sp, #12]
 8003a46:	4635      	mov	r5, r6
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	9e06      	ldr	r6, [sp, #24]
 8003a4c:	bfc8      	it	gt
 8003a4e:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
 8003a52:	f886 a000 	strb.w	sl, [r6]
 8003a56:	f106 0b01 	add.w	fp, r6, #1
 8003a5a:	463e      	mov	r6, r7
 8003a5c:	f7ff bbc3 	b.w	80031e6 <_dtoa_r+0x56e>
 8003a60:	f47f aea9 	bne.w	80037b6 <_dtoa_r+0xb3e>
 8003a64:	f01a 0f01 	tst.w	sl, #1
 8003a68:	f43f aea5 	beq.w	80037b6 <_dtoa_r+0xb3e>
 8003a6c:	e69d      	b.n	80037aa <_dtoa_r+0xb32>
 8003a6e:	4631      	mov	r1, r6
 8003a70:	4620      	mov	r0, r4
 8003a72:	220a      	movs	r2, #10
 8003a74:	2300      	movs	r3, #0
 8003a76:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8003a7a:	f000 fbcf 	bl	800421c <__multadd>
 8003a7e:	4606      	mov	r6, r0
 8003a80:	f7ff bb6c 	b.w	800315c <_dtoa_r+0x4e4>
 8003a84:	f04f 0802 	mov.w	r8, #2
 8003a88:	e4d2      	b.n	8003430 <_dtoa_r+0x7b8>
 8003a8a:	f43f ab52 	beq.w	8003132 <_dtoa_r+0x4ba>
 8003a8e:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8003a92:	f7ff bbe2 	b.w	800325a <_dtoa_r+0x5e2>
 8003a96:	bf00      	nop
 8003a98:	08005920 	.word	0x08005920
 8003a9c:	080059e8 	.word	0x080059e8
 8003aa0:	40240000 	.word	0x40240000
 8003aa4:	3fe00000 	.word	0x3fe00000
 8003aa8:	401c0000 	.word	0x401c0000
$t():
 8003aac:	f3af 8000 	nop.w

08003ab0 <_localeconv_r>:
_localeconv_r():
 8003ab0:	4800      	ldr	r0, [pc, #0]	; (8003ab4 <_localeconv_r+0x4>)
 8003ab2:	4770      	bx	lr
 8003ab4:	2000043c 	.word	0x2000043c

08003ab8 <_malloc_r>:
_malloc_r():
 8003ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003abc:	f101 050b 	add.w	r5, r1, #11
 8003ac0:	2d16      	cmp	r5, #22
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	4606      	mov	r6, r0
 8003ac6:	d927      	bls.n	8003b18 <_malloc_r+0x60>
 8003ac8:	f035 0507 	bics.w	r5, r5, #7
 8003acc:	d427      	bmi.n	8003b1e <_malloc_r+0x66>
 8003ace:	42a9      	cmp	r1, r5
 8003ad0:	d825      	bhi.n	8003b1e <_malloc_r+0x66>
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	f000 fb6e 	bl	80041b4 <__malloc_lock>
 8003ad8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8003adc:	d226      	bcs.n	8003b2c <_malloc_r+0x74>
 8003ade:	4fc1      	ldr	r7, [pc, #772]	; (8003de4 <_malloc_r+0x32c>)
 8003ae0:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 8003ae4:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
 8003ae8:	68dc      	ldr	r4, [r3, #12]
 8003aea:	429c      	cmp	r4, r3
 8003aec:	f000 81d2 	beq.w	8003e94 <_malloc_r+0x3dc>
 8003af0:	6863      	ldr	r3, [r4, #4]
 8003af2:	68e2      	ldr	r2, [r4, #12]
 8003af4:	68a1      	ldr	r1, [r4, #8]
 8003af6:	f023 0303 	bic.w	r3, r3, #3
 8003afa:	4423      	add	r3, r4
 8003afc:	4630      	mov	r0, r6
 8003afe:	685d      	ldr	r5, [r3, #4]
 8003b00:	60ca      	str	r2, [r1, #12]
 8003b02:	f045 0501 	orr.w	r5, r5, #1
 8003b06:	6091      	str	r1, [r2, #8]
 8003b08:	605d      	str	r5, [r3, #4]
 8003b0a:	f000 fb55 	bl	80041b8 <__malloc_unlock>
 8003b0e:	3408      	adds	r4, #8
 8003b10:	4620      	mov	r0, r4
 8003b12:	b003      	add	sp, #12
 8003b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b18:	2510      	movs	r5, #16
 8003b1a:	42a9      	cmp	r1, r5
 8003b1c:	d9d9      	bls.n	8003ad2 <_malloc_r+0x1a>
 8003b1e:	2400      	movs	r4, #0
 8003b20:	230c      	movs	r3, #12
 8003b22:	4620      	mov	r0, r4
 8003b24:	6033      	str	r3, [r6, #0]
 8003b26:	b003      	add	sp, #12
 8003b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b2c:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 8003b30:	f000 808a 	beq.w	8003c48 <_malloc_r+0x190>
 8003b34:	f1bc 0f04 	cmp.w	ip, #4
 8003b38:	f200 8160 	bhi.w	8003dfc <_malloc_r+0x344>
 8003b3c:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 8003b40:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8003b44:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8003b48:	4fa6      	ldr	r7, [pc, #664]	; (8003de4 <_malloc_r+0x32c>)
 8003b4a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8003b4e:	68cc      	ldr	r4, [r1, #12]
 8003b50:	42a1      	cmp	r1, r4
 8003b52:	d105      	bne.n	8003b60 <_malloc_r+0xa8>
 8003b54:	e00c      	b.n	8003b70 <_malloc_r+0xb8>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	da7a      	bge.n	8003c50 <_malloc_r+0x198>
 8003b5a:	68e4      	ldr	r4, [r4, #12]
 8003b5c:	42a1      	cmp	r1, r4
 8003b5e:	d007      	beq.n	8003b70 <_malloc_r+0xb8>
 8003b60:	6862      	ldr	r2, [r4, #4]
 8003b62:	f022 0203 	bic.w	r2, r2, #3
 8003b66:	1b53      	subs	r3, r2, r5
 8003b68:	2b0f      	cmp	r3, #15
 8003b6a:	ddf4      	ble.n	8003b56 <_malloc_r+0x9e>
 8003b6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003b70:	f10c 0c01 	add.w	ip, ip, #1
 8003b74:	4b9b      	ldr	r3, [pc, #620]	; (8003de4 <_malloc_r+0x32c>)
 8003b76:	693c      	ldr	r4, [r7, #16]
 8003b78:	f103 0e08 	add.w	lr, r3, #8
 8003b7c:	4574      	cmp	r4, lr
 8003b7e:	f000 817e 	beq.w	8003e7e <_malloc_r+0x3c6>
 8003b82:	6861      	ldr	r1, [r4, #4]
 8003b84:	f021 0103 	bic.w	r1, r1, #3
 8003b88:	1b4a      	subs	r2, r1, r5
 8003b8a:	2a0f      	cmp	r2, #15
 8003b8c:	f300 8164 	bgt.w	8003e58 <_malloc_r+0x3a0>
 8003b90:	2a00      	cmp	r2, #0
 8003b92:	f8c3 e014 	str.w	lr, [r3, #20]
 8003b96:	f8c3 e010 	str.w	lr, [r3, #16]
 8003b9a:	da6a      	bge.n	8003c72 <_malloc_r+0x1ba>
 8003b9c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003ba0:	f080 813a 	bcs.w	8003e18 <_malloc_r+0x360>
 8003ba4:	08c9      	lsrs	r1, r1, #3
 8003ba6:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
 8003baa:	ea4f 08a1 	mov.w	r8, r1, asr #2
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	6881      	ldr	r1, [r0, #8]
 8003bb2:	60a1      	str	r1, [r4, #8]
 8003bb4:	f04f 0901 	mov.w	r9, #1
 8003bb8:	fa09 f808 	lsl.w	r8, r9, r8
 8003bbc:	ea48 0202 	orr.w	r2, r8, r2
 8003bc0:	60e0      	str	r0, [r4, #12]
 8003bc2:	605a      	str	r2, [r3, #4]
 8003bc4:	6084      	str	r4, [r0, #8]
 8003bc6:	60cc      	str	r4, [r1, #12]
 8003bc8:	ea4f 03ac 	mov.w	r3, ip, asr #2
 8003bcc:	2001      	movs	r0, #1
 8003bce:	4098      	lsls	r0, r3
 8003bd0:	4290      	cmp	r0, r2
 8003bd2:	d85b      	bhi.n	8003c8c <_malloc_r+0x1d4>
 8003bd4:	4202      	tst	r2, r0
 8003bd6:	d106      	bne.n	8003be6 <_malloc_r+0x12e>
 8003bd8:	f02c 0c03 	bic.w	ip, ip, #3
 8003bdc:	0040      	lsls	r0, r0, #1
 8003bde:	4202      	tst	r2, r0
 8003be0:	f10c 0c04 	add.w	ip, ip, #4
 8003be4:	d0fa      	beq.n	8003bdc <_malloc_r+0x124>
 8003be6:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
 8003bea:	4644      	mov	r4, r8
 8003bec:	46e1      	mov	r9, ip
 8003bee:	68e3      	ldr	r3, [r4, #12]
 8003bf0:	429c      	cmp	r4, r3
 8003bf2:	d107      	bne.n	8003c04 <_malloc_r+0x14c>
 8003bf4:	e145      	b.n	8003e82 <_malloc_r+0x3ca>
 8003bf6:	2a00      	cmp	r2, #0
 8003bf8:	f280 8156 	bge.w	8003ea8 <_malloc_r+0x3f0>
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	429c      	cmp	r4, r3
 8003c00:	f000 813f 	beq.w	8003e82 <_malloc_r+0x3ca>
 8003c04:	6859      	ldr	r1, [r3, #4]
 8003c06:	f021 0103 	bic.w	r1, r1, #3
 8003c0a:	1b4a      	subs	r2, r1, r5
 8003c0c:	2a0f      	cmp	r2, #15
 8003c0e:	ddf2      	ble.n	8003bf6 <_malloc_r+0x13e>
 8003c10:	461c      	mov	r4, r3
 8003c12:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8003c16:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8003c1a:	1959      	adds	r1, r3, r5
 8003c1c:	f045 0901 	orr.w	r9, r5, #1
 8003c20:	f042 0501 	orr.w	r5, r2, #1
 8003c24:	f8c3 9004 	str.w	r9, [r3, #4]
 8003c28:	4630      	mov	r0, r6
 8003c2a:	f8c8 c00c 	str.w	ip, [r8, #12]
 8003c2e:	f8cc 8008 	str.w	r8, [ip, #8]
 8003c32:	6179      	str	r1, [r7, #20]
 8003c34:	6139      	str	r1, [r7, #16]
 8003c36:	f8c1 e00c 	str.w	lr, [r1, #12]
 8003c3a:	f8c1 e008 	str.w	lr, [r1, #8]
 8003c3e:	604d      	str	r5, [r1, #4]
 8003c40:	508a      	str	r2, [r1, r2]
 8003c42:	f000 fab9 	bl	80041b8 <__malloc_unlock>
 8003c46:	e763      	b.n	8003b10 <_malloc_r+0x58>
 8003c48:	217e      	movs	r1, #126	; 0x7e
 8003c4a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8003c4e:	e77b      	b.n	8003b48 <_malloc_r+0x90>
 8003c50:	4422      	add	r2, r4
 8003c52:	68e3      	ldr	r3, [r4, #12]
 8003c54:	6850      	ldr	r0, [r2, #4]
 8003c56:	68a1      	ldr	r1, [r4, #8]
 8003c58:	f040 0501 	orr.w	r5, r0, #1
 8003c5c:	60cb      	str	r3, [r1, #12]
 8003c5e:	4630      	mov	r0, r6
 8003c60:	6099      	str	r1, [r3, #8]
 8003c62:	6055      	str	r5, [r2, #4]
 8003c64:	f000 faa8 	bl	80041b8 <__malloc_unlock>
 8003c68:	3408      	adds	r4, #8
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	b003      	add	sp, #12
 8003c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c72:	4421      	add	r1, r4
 8003c74:	4630      	mov	r0, r6
 8003c76:	684b      	ldr	r3, [r1, #4]
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	604b      	str	r3, [r1, #4]
 8003c7e:	f000 fa9b 	bl	80041b8 <__malloc_unlock>
 8003c82:	3408      	adds	r4, #8
 8003c84:	4620      	mov	r0, r4
 8003c86:	b003      	add	sp, #12
 8003c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c8c:	68bc      	ldr	r4, [r7, #8]
 8003c8e:	6863      	ldr	r3, [r4, #4]
 8003c90:	f023 0903 	bic.w	r9, r3, #3
 8003c94:	45a9      	cmp	r9, r5
 8003c96:	d304      	bcc.n	8003ca2 <_malloc_r+0x1ea>
 8003c98:	ebc5 0309 	rsb	r3, r5, r9
 8003c9c:	2b0f      	cmp	r3, #15
 8003c9e:	f300 8091 	bgt.w	8003dc4 <_malloc_r+0x30c>
 8003ca2:	4b51      	ldr	r3, [pc, #324]	; (8003de8 <_malloc_r+0x330>)
 8003ca4:	4a51      	ldr	r2, [pc, #324]	; (8003dec <_malloc_r+0x334>)
 8003ca6:	6819      	ldr	r1, [r3, #0]
 8003ca8:	6813      	ldr	r3, [r2, #0]
 8003caa:	3301      	adds	r3, #1
 8003cac:	eb05 0a01 	add.w	sl, r5, r1
 8003cb0:	eb04 0b09 	add.w	fp, r4, r9
 8003cb4:	f000 8161 	beq.w	8003f7a <_malloc_r+0x4c2>
 8003cb8:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
 8003cbc:	f10a 0a0f 	add.w	sl, sl, #15
 8003cc0:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
 8003cc4:	f02a 0a0f 	bic.w	sl, sl, #15
 8003cc8:	4630      	mov	r0, r6
 8003cca:	4651      	mov	r1, sl
 8003ccc:	9201      	str	r2, [sp, #4]
 8003cce:	f000 fda7 	bl	8004820 <_sbrk_r>
 8003cd2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003cd6:	4680      	mov	r8, r0
 8003cd8:	9a01      	ldr	r2, [sp, #4]
 8003cda:	f000 8100 	beq.w	8003ede <_malloc_r+0x426>
 8003cde:	4583      	cmp	fp, r0
 8003ce0:	f200 80fa 	bhi.w	8003ed8 <_malloc_r+0x420>
 8003ce4:	f8df c110 	ldr.w	ip, [pc, #272]	; 8003df8 <_malloc_r+0x340>
 8003ce8:	f8dc 3000 	ldr.w	r3, [ip]
 8003cec:	45c3      	cmp	fp, r8
 8003cee:	4453      	add	r3, sl
 8003cf0:	f8cc 3000 	str.w	r3, [ip]
 8003cf4:	f000 814a 	beq.w	8003f8c <_malloc_r+0x4d4>
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	493c      	ldr	r1, [pc, #240]	; (8003dec <_malloc_r+0x334>)
 8003cfc:	3201      	adds	r2, #1
 8003cfe:	bf1b      	ittet	ne
 8003d00:	ebcb 0b08 	rsbne	fp, fp, r8
 8003d04:	445b      	addne	r3, fp
 8003d06:	f8c1 8000 	streq.w	r8, [r1]
 8003d0a:	f8cc 3000 	strne.w	r3, [ip]
 8003d0e:	f018 0307 	ands.w	r3, r8, #7
 8003d12:	f000 8113 	beq.w	8003f3c <_malloc_r+0x484>
 8003d16:	f1c3 0208 	rsb	r2, r3, #8
 8003d1a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003d1e:	4490      	add	r8, r2
 8003d20:	3308      	adds	r3, #8
 8003d22:	44c2      	add	sl, r8
 8003d24:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
 8003d28:	ebca 0a03 	rsb	sl, sl, r3
 8003d2c:	4651      	mov	r1, sl
 8003d2e:	4630      	mov	r0, r6
 8003d30:	f8cd c004 	str.w	ip, [sp, #4]
 8003d34:	f000 fd74 	bl	8004820 <_sbrk_r>
 8003d38:	1c43      	adds	r3, r0, #1
 8003d3a:	f8dd c004 	ldr.w	ip, [sp, #4]
 8003d3e:	f000 8135 	beq.w	8003fac <_malloc_r+0x4f4>
 8003d42:	ebc8 0200 	rsb	r2, r8, r0
 8003d46:	4452      	add	r2, sl
 8003d48:	f042 0201 	orr.w	r2, r2, #1
 8003d4c:	f8dc 3000 	ldr.w	r3, [ip]
 8003d50:	f8c7 8008 	str.w	r8, [r7, #8]
 8003d54:	4453      	add	r3, sl
 8003d56:	42bc      	cmp	r4, r7
 8003d58:	f8c8 2004 	str.w	r2, [r8, #4]
 8003d5c:	f8cc 3000 	str.w	r3, [ip]
 8003d60:	f8df a094 	ldr.w	sl, [pc, #148]	; 8003df8 <_malloc_r+0x340>
 8003d64:	d015      	beq.n	8003d92 <_malloc_r+0x2da>
 8003d66:	f1b9 0f0f 	cmp.w	r9, #15
 8003d6a:	f240 80ea 	bls.w	8003f42 <_malloc_r+0x48a>
 8003d6e:	6861      	ldr	r1, [r4, #4]
 8003d70:	f1a9 020c 	sub.w	r2, r9, #12
 8003d74:	f022 0207 	bic.w	r2, r2, #7
 8003d78:	f001 0e01 	and.w	lr, r1, #1
 8003d7c:	18a1      	adds	r1, r4, r2
 8003d7e:	2005      	movs	r0, #5
 8003d80:	ea42 0e0e 	orr.w	lr, r2, lr
 8003d84:	2a0f      	cmp	r2, #15
 8003d86:	f8c4 e004 	str.w	lr, [r4, #4]
 8003d8a:	6048      	str	r0, [r1, #4]
 8003d8c:	6088      	str	r0, [r1, #8]
 8003d8e:	f200 8111 	bhi.w	8003fb4 <_malloc_r+0x4fc>
 8003d92:	4a17      	ldr	r2, [pc, #92]	; (8003df0 <_malloc_r+0x338>)
 8003d94:	68bc      	ldr	r4, [r7, #8]
 8003d96:	6811      	ldr	r1, [r2, #0]
 8003d98:	428b      	cmp	r3, r1
 8003d9a:	bf88      	it	hi
 8003d9c:	6013      	strhi	r3, [r2, #0]
 8003d9e:	4a15      	ldr	r2, [pc, #84]	; (8003df4 <_malloc_r+0x33c>)
 8003da0:	6811      	ldr	r1, [r2, #0]
 8003da2:	428b      	cmp	r3, r1
 8003da4:	bf88      	it	hi
 8003da6:	6013      	strhi	r3, [r2, #0]
 8003da8:	6862      	ldr	r2, [r4, #4]
 8003daa:	f022 0203 	bic.w	r2, r2, #3
 8003dae:	4295      	cmp	r5, r2
 8003db0:	ebc5 0302 	rsb	r3, r5, r2
 8003db4:	d801      	bhi.n	8003dba <_malloc_r+0x302>
 8003db6:	2b0f      	cmp	r3, #15
 8003db8:	dc04      	bgt.n	8003dc4 <_malloc_r+0x30c>
 8003dba:	4630      	mov	r0, r6
 8003dbc:	f000 f9fc 	bl	80041b8 <__malloc_unlock>
 8003dc0:	2400      	movs	r4, #0
 8003dc2:	e6a5      	b.n	8003b10 <_malloc_r+0x58>
 8003dc4:	1962      	adds	r2, r4, r5
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	f045 0501 	orr.w	r5, r5, #1
 8003dce:	6065      	str	r5, [r4, #4]
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	60ba      	str	r2, [r7, #8]
 8003dd4:	6053      	str	r3, [r2, #4]
 8003dd6:	f000 f9ef 	bl	80041b8 <__malloc_unlock>
 8003dda:	3408      	adds	r4, #8
 8003ddc:	4620      	mov	r0, r4
 8003dde:	b003      	add	sp, #12
 8003de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de4:	20000474 	.word	0x20000474
 8003de8:	200008c4 	.word	0x200008c4
 8003dec:	20000880 	.word	0x20000880
 8003df0:	200008c0 	.word	0x200008c0
 8003df4:	200008bc 	.word	0x200008bc
 8003df8:	200008c8 	.word	0x200008c8
 8003dfc:	f1bc 0f14 	cmp.w	ip, #20
 8003e00:	d961      	bls.n	8003ec6 <_malloc_r+0x40e>
 8003e02:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 8003e06:	f200 808f 	bhi.w	8003f28 <_malloc_r+0x470>
 8003e0a:	ea4f 3c15 	mov.w	ip, r5, lsr #12
 8003e0e:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 8003e12:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8003e16:	e697      	b.n	8003b48 <_malloc_r+0x90>
 8003e18:	0a4b      	lsrs	r3, r1, #9
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d958      	bls.n	8003ed0 <_malloc_r+0x418>
 8003e1e:	2b14      	cmp	r3, #20
 8003e20:	f200 80ae 	bhi.w	8003f80 <_malloc_r+0x4c8>
 8003e24:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8003e28:	0050      	lsls	r0, r2, #1
 8003e2a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8003e2e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003fec <_malloc_r+0x534>
 8003e32:	6883      	ldr	r3, [r0, #8]
 8003e34:	4283      	cmp	r3, r0
 8003e36:	f000 808a 	beq.w	8003f4e <_malloc_r+0x496>
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	f022 0203 	bic.w	r2, r2, #3
 8003e40:	4291      	cmp	r1, r2
 8003e42:	d202      	bcs.n	8003e4a <_malloc_r+0x392>
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	4298      	cmp	r0, r3
 8003e48:	d1f7      	bne.n	8003e3a <_malloc_r+0x382>
 8003e4a:	68d9      	ldr	r1, [r3, #12]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	60e1      	str	r1, [r4, #12]
 8003e50:	60a3      	str	r3, [r4, #8]
 8003e52:	608c      	str	r4, [r1, #8]
 8003e54:	60dc      	str	r4, [r3, #12]
 8003e56:	e6b7      	b.n	8003bc8 <_malloc_r+0x110>
 8003e58:	1961      	adds	r1, r4, r5
 8003e5a:	f042 0701 	orr.w	r7, r2, #1
 8003e5e:	f045 0501 	orr.w	r5, r5, #1
 8003e62:	6065      	str	r5, [r4, #4]
 8003e64:	4630      	mov	r0, r6
 8003e66:	6159      	str	r1, [r3, #20]
 8003e68:	6119      	str	r1, [r3, #16]
 8003e6a:	f8c1 e00c 	str.w	lr, [r1, #12]
 8003e6e:	f8c1 e008 	str.w	lr, [r1, #8]
 8003e72:	604f      	str	r7, [r1, #4]
 8003e74:	508a      	str	r2, [r1, r2]
 8003e76:	3408      	adds	r4, #8
 8003e78:	f000 f99e 	bl	80041b8 <__malloc_unlock>
 8003e7c:	e648      	b.n	8003b10 <_malloc_r+0x58>
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	e6a2      	b.n	8003bc8 <_malloc_r+0x110>
 8003e82:	f109 0901 	add.w	r9, r9, #1
 8003e86:	f019 0f03 	tst.w	r9, #3
 8003e8a:	f104 0408 	add.w	r4, r4, #8
 8003e8e:	f47f aeae 	bne.w	8003bee <_malloc_r+0x136>
 8003e92:	e02d      	b.n	8003ef0 <_malloc_r+0x438>
 8003e94:	f104 0308 	add.w	r3, r4, #8
 8003e98:	6964      	ldr	r4, [r4, #20]
 8003e9a:	42a3      	cmp	r3, r4
 8003e9c:	bf08      	it	eq
 8003e9e:	f10c 0c02 	addeq.w	ip, ip, #2
 8003ea2:	f43f ae67 	beq.w	8003b74 <_malloc_r+0xbc>
 8003ea6:	e623      	b.n	8003af0 <_malloc_r+0x38>
 8003ea8:	4419      	add	r1, r3
 8003eaa:	461c      	mov	r4, r3
 8003eac:	6848      	ldr	r0, [r1, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8003eb4:	f040 0501 	orr.w	r5, r0, #1
 8003eb8:	604d      	str	r5, [r1, #4]
 8003eba:	4630      	mov	r0, r6
 8003ebc:	60d3      	str	r3, [r2, #12]
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	f000 f97a 	bl	80041b8 <__malloc_unlock>
 8003ec4:	e624      	b.n	8003b10 <_malloc_r+0x58>
 8003ec6:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
 8003eca:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8003ece:	e63b      	b.n	8003b48 <_malloc_r+0x90>
 8003ed0:	098a      	lsrs	r2, r1, #6
 8003ed2:	3238      	adds	r2, #56	; 0x38
 8003ed4:	0050      	lsls	r0, r2, #1
 8003ed6:	e7a8      	b.n	8003e2a <_malloc_r+0x372>
 8003ed8:	42bc      	cmp	r4, r7
 8003eda:	f43f af03 	beq.w	8003ce4 <_malloc_r+0x22c>
 8003ede:	68bc      	ldr	r4, [r7, #8]
 8003ee0:	6862      	ldr	r2, [r4, #4]
 8003ee2:	f022 0203 	bic.w	r2, r2, #3
 8003ee6:	e762      	b.n	8003dae <_malloc_r+0x2f6>
 8003ee8:	f8d8 8000 	ldr.w	r8, [r8]
 8003eec:	4598      	cmp	r8, r3
 8003eee:	d17b      	bne.n	8003fe8 <_malloc_r+0x530>
 8003ef0:	f01c 0f03 	tst.w	ip, #3
 8003ef4:	f1a8 0308 	sub.w	r3, r8, #8
 8003ef8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003efc:	d1f4      	bne.n	8003ee8 <_malloc_r+0x430>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	ea23 0300 	bic.w	r3, r3, r0
 8003f04:	607b      	str	r3, [r7, #4]
 8003f06:	0040      	lsls	r0, r0, #1
 8003f08:	4298      	cmp	r0, r3
 8003f0a:	f63f aebf 	bhi.w	8003c8c <_malloc_r+0x1d4>
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	f43f aebc 	beq.w	8003c8c <_malloc_r+0x1d4>
 8003f14:	4203      	tst	r3, r0
 8003f16:	46cc      	mov	ip, r9
 8003f18:	f47f ae65 	bne.w	8003be6 <_malloc_r+0x12e>
 8003f1c:	0040      	lsls	r0, r0, #1
 8003f1e:	4203      	tst	r3, r0
 8003f20:	f10c 0c04 	add.w	ip, ip, #4
 8003f24:	d0fa      	beq.n	8003f1c <_malloc_r+0x464>
 8003f26:	e65e      	b.n	8003be6 <_malloc_r+0x12e>
 8003f28:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 8003f2c:	d81a      	bhi.n	8003f64 <_malloc_r+0x4ac>
 8003f2e:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
 8003f32:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 8003f36:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8003f3a:	e605      	b.n	8003b48 <_malloc_r+0x90>
 8003f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f40:	e6ef      	b.n	8003d22 <_malloc_r+0x26a>
 8003f42:	2301      	movs	r3, #1
 8003f44:	f8c8 3004 	str.w	r3, [r8, #4]
 8003f48:	4644      	mov	r4, r8
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	e72f      	b.n	8003dae <_malloc_r+0x2f6>
 8003f4e:	1091      	asrs	r1, r2, #2
 8003f50:	2001      	movs	r0, #1
 8003f52:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003f56:	fa00 f101 	lsl.w	r1, r0, r1
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	f8c8 2004 	str.w	r2, [r8, #4]
 8003f60:	4619      	mov	r1, r3
 8003f62:	e774      	b.n	8003e4e <_malloc_r+0x396>
 8003f64:	f240 5354 	movw	r3, #1364	; 0x554
 8003f68:	459c      	cmp	ip, r3
 8003f6a:	d81b      	bhi.n	8003fa4 <_malloc_r+0x4ec>
 8003f6c:	ea4f 4c95 	mov.w	ip, r5, lsr #18
 8003f70:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
 8003f74:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8003f78:	e5e6      	b.n	8003b48 <_malloc_r+0x90>
 8003f7a:	f10a 0a10 	add.w	sl, sl, #16
 8003f7e:	e6a3      	b.n	8003cc8 <_malloc_r+0x210>
 8003f80:	2b54      	cmp	r3, #84	; 0x54
 8003f82:	d81f      	bhi.n	8003fc4 <_malloc_r+0x50c>
 8003f84:	0b0a      	lsrs	r2, r1, #12
 8003f86:	326e      	adds	r2, #110	; 0x6e
 8003f88:	0050      	lsls	r0, r2, #1
 8003f8a:	e74e      	b.n	8003e2a <_malloc_r+0x372>
 8003f8c:	f3cb 010b 	ubfx	r1, fp, #0, #12
 8003f90:	2900      	cmp	r1, #0
 8003f92:	f47f aeb1 	bne.w	8003cf8 <_malloc_r+0x240>
 8003f96:	eb0a 0109 	add.w	r1, sl, r9
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	f041 0101 	orr.w	r1, r1, #1
 8003fa0:	6051      	str	r1, [r2, #4]
 8003fa2:	e6f6      	b.n	8003d92 <_malloc_r+0x2da>
 8003fa4:	21fc      	movs	r1, #252	; 0xfc
 8003fa6:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8003faa:	e5cd      	b.n	8003b48 <_malloc_r+0x90>
 8003fac:	2201      	movs	r2, #1
 8003fae:	f04f 0a00 	mov.w	sl, #0
 8003fb2:	e6cb      	b.n	8003d4c <_malloc_r+0x294>
 8003fb4:	f104 0108 	add.w	r1, r4, #8
 8003fb8:	4630      	mov	r0, r6
 8003fba:	f000 fd71 	bl	8004aa0 <_free_r>
 8003fbe:	f8da 3000 	ldr.w	r3, [sl]
 8003fc2:	e6e6      	b.n	8003d92 <_malloc_r+0x2da>
 8003fc4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003fc8:	d803      	bhi.n	8003fd2 <_malloc_r+0x51a>
 8003fca:	0bca      	lsrs	r2, r1, #15
 8003fcc:	3277      	adds	r2, #119	; 0x77
 8003fce:	0050      	lsls	r0, r2, #1
 8003fd0:	e72b      	b.n	8003e2a <_malloc_r+0x372>
 8003fd2:	f240 5254 	movw	r2, #1364	; 0x554
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d803      	bhi.n	8003fe2 <_malloc_r+0x52a>
 8003fda:	0c8a      	lsrs	r2, r1, #18
 8003fdc:	327c      	adds	r2, #124	; 0x7c
 8003fde:	0050      	lsls	r0, r2, #1
 8003fe0:	e723      	b.n	8003e2a <_malloc_r+0x372>
 8003fe2:	20fc      	movs	r0, #252	; 0xfc
 8003fe4:	227e      	movs	r2, #126	; 0x7e
 8003fe6:	e720      	b.n	8003e2a <_malloc_r+0x372>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	e78c      	b.n	8003f06 <_malloc_r+0x44e>
 8003fec:	20000474 	.word	0x20000474

08003ff0 <memchr>:
memchr():
 8003ff0:	0783      	lsls	r3, r0, #30
 8003ff2:	b470      	push	{r4, r5, r6}
 8003ff4:	b2c9      	uxtb	r1, r1
 8003ff6:	d03f      	beq.n	8004078 <memchr+0x88>
 8003ff8:	1e54      	subs	r4, r2, #1
 8003ffa:	b32a      	cbz	r2, 8004048 <memchr+0x58>
 8003ffc:	7803      	ldrb	r3, [r0, #0]
 8003ffe:	428b      	cmp	r3, r1
 8004000:	d023      	beq.n	800404a <memchr+0x5a>
 8004002:	1c43      	adds	r3, r0, #1
 8004004:	e004      	b.n	8004010 <memchr+0x20>
 8004006:	b1fc      	cbz	r4, 8004048 <memchr+0x58>
 8004008:	7804      	ldrb	r4, [r0, #0]
 800400a:	428c      	cmp	r4, r1
 800400c:	d01d      	beq.n	800404a <memchr+0x5a>
 800400e:	4614      	mov	r4, r2
 8004010:	f013 0f03 	tst.w	r3, #3
 8004014:	4618      	mov	r0, r3
 8004016:	f104 32ff 	add.w	r2, r4, #4294967295
 800401a:	f103 0301 	add.w	r3, r3, #1
 800401e:	d1f2      	bne.n	8004006 <memchr+0x16>
 8004020:	2c03      	cmp	r4, #3
 8004022:	d814      	bhi.n	800404e <memchr+0x5e>
 8004024:	1e65      	subs	r5, r4, #1
 8004026:	b34c      	cbz	r4, 800407c <memchr+0x8c>
 8004028:	7803      	ldrb	r3, [r0, #0]
 800402a:	428b      	cmp	r3, r1
 800402c:	d00d      	beq.n	800404a <memchr+0x5a>
 800402e:	1c42      	adds	r2, r0, #1
 8004030:	2300      	movs	r3, #0
 8004032:	e002      	b.n	800403a <memchr+0x4a>
 8004034:	7804      	ldrb	r4, [r0, #0]
 8004036:	428c      	cmp	r4, r1
 8004038:	d007      	beq.n	800404a <memchr+0x5a>
 800403a:	42ab      	cmp	r3, r5
 800403c:	4610      	mov	r0, r2
 800403e:	f103 0301 	add.w	r3, r3, #1
 8004042:	f102 0201 	add.w	r2, r2, #1
 8004046:	d1f5      	bne.n	8004034 <memchr+0x44>
 8004048:	2000      	movs	r0, #0
 800404a:	bc70      	pop	{r4, r5, r6}
 800404c:	4770      	bx	lr
 800404e:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8004052:	4603      	mov	r3, r0
 8004054:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8004058:	4618      	mov	r0, r3
 800405a:	3304      	adds	r3, #4
 800405c:	6802      	ldr	r2, [r0, #0]
 800405e:	4072      	eors	r2, r6
 8004060:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 8004064:	ea25 0202 	bic.w	r2, r5, r2
 8004068:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800406c:	d1da      	bne.n	8004024 <memchr+0x34>
 800406e:	3c04      	subs	r4, #4
 8004070:	2c03      	cmp	r4, #3
 8004072:	4618      	mov	r0, r3
 8004074:	d8f0      	bhi.n	8004058 <memchr+0x68>
 8004076:	e7d5      	b.n	8004024 <memchr+0x34>
 8004078:	4614      	mov	r4, r2
 800407a:	e7d1      	b.n	8004020 <memchr+0x30>
 800407c:	4620      	mov	r0, r4
 800407e:	e7e4      	b.n	800404a <memchr+0x5a>

08004080 <memcpy>:
memcpy():
 8004080:	4684      	mov	ip, r0
 8004082:	ea41 0300 	orr.w	r3, r1, r0
 8004086:	f013 0303 	ands.w	r3, r3, #3
 800408a:	d16d      	bne.n	8004168 <memcpy+0xe8>
 800408c:	3a40      	subs	r2, #64	; 0x40
 800408e:	d341      	bcc.n	8004114 <memcpy+0x94>
 8004090:	f851 3b04 	ldr.w	r3, [r1], #4
 8004094:	f840 3b04 	str.w	r3, [r0], #4
 8004098:	f851 3b04 	ldr.w	r3, [r1], #4
 800409c:	f840 3b04 	str.w	r3, [r0], #4
 80040a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80040a4:	f840 3b04 	str.w	r3, [r0], #4
 80040a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80040ac:	f840 3b04 	str.w	r3, [r0], #4
 80040b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80040b4:	f840 3b04 	str.w	r3, [r0], #4
 80040b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80040bc:	f840 3b04 	str.w	r3, [r0], #4
 80040c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80040c4:	f840 3b04 	str.w	r3, [r0], #4
 80040c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80040cc:	f840 3b04 	str.w	r3, [r0], #4
 80040d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80040d4:	f840 3b04 	str.w	r3, [r0], #4
 80040d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80040dc:	f840 3b04 	str.w	r3, [r0], #4
 80040e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80040e4:	f840 3b04 	str.w	r3, [r0], #4
 80040e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80040ec:	f840 3b04 	str.w	r3, [r0], #4
 80040f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80040f4:	f840 3b04 	str.w	r3, [r0], #4
 80040f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80040fc:	f840 3b04 	str.w	r3, [r0], #4
 8004100:	f851 3b04 	ldr.w	r3, [r1], #4
 8004104:	f840 3b04 	str.w	r3, [r0], #4
 8004108:	f851 3b04 	ldr.w	r3, [r1], #4
 800410c:	f840 3b04 	str.w	r3, [r0], #4
 8004110:	3a40      	subs	r2, #64	; 0x40
 8004112:	d2bd      	bcs.n	8004090 <memcpy+0x10>
 8004114:	3230      	adds	r2, #48	; 0x30
 8004116:	d311      	bcc.n	800413c <memcpy+0xbc>
 8004118:	f851 3b04 	ldr.w	r3, [r1], #4
 800411c:	f840 3b04 	str.w	r3, [r0], #4
 8004120:	f851 3b04 	ldr.w	r3, [r1], #4
 8004124:	f840 3b04 	str.w	r3, [r0], #4
 8004128:	f851 3b04 	ldr.w	r3, [r1], #4
 800412c:	f840 3b04 	str.w	r3, [r0], #4
 8004130:	f851 3b04 	ldr.w	r3, [r1], #4
 8004134:	f840 3b04 	str.w	r3, [r0], #4
 8004138:	3a10      	subs	r2, #16
 800413a:	d2ed      	bcs.n	8004118 <memcpy+0x98>
 800413c:	320c      	adds	r2, #12
 800413e:	d305      	bcc.n	800414c <memcpy+0xcc>
 8004140:	f851 3b04 	ldr.w	r3, [r1], #4
 8004144:	f840 3b04 	str.w	r3, [r0], #4
 8004148:	3a04      	subs	r2, #4
 800414a:	d2f9      	bcs.n	8004140 <memcpy+0xc0>
 800414c:	3204      	adds	r2, #4
 800414e:	d008      	beq.n	8004162 <memcpy+0xe2>
 8004150:	07d2      	lsls	r2, r2, #31
 8004152:	bf1c      	itt	ne
 8004154:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8004158:	f800 3b01 	strbne.w	r3, [r0], #1
 800415c:	d301      	bcc.n	8004162 <memcpy+0xe2>
 800415e:	880b      	ldrh	r3, [r1, #0]
 8004160:	8003      	strh	r3, [r0, #0]
 8004162:	4660      	mov	r0, ip
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	2a08      	cmp	r2, #8
 800416a:	d313      	bcc.n	8004194 <memcpy+0x114>
 800416c:	078b      	lsls	r3, r1, #30
 800416e:	d08d      	beq.n	800408c <memcpy+0xc>
 8004170:	f010 0303 	ands.w	r3, r0, #3
 8004174:	d08a      	beq.n	800408c <memcpy+0xc>
 8004176:	f1c3 0304 	rsb	r3, r3, #4
 800417a:	1ad2      	subs	r2, r2, r3
 800417c:	07db      	lsls	r3, r3, #31
 800417e:	bf1c      	itt	ne
 8004180:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8004184:	f800 3b01 	strbne.w	r3, [r0], #1
 8004188:	d380      	bcc.n	800408c <memcpy+0xc>
 800418a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800418e:	f820 3b02 	strh.w	r3, [r0], #2
 8004192:	e77b      	b.n	800408c <memcpy+0xc>
 8004194:	3a04      	subs	r2, #4
 8004196:	d3d9      	bcc.n	800414c <memcpy+0xcc>
 8004198:	3a01      	subs	r2, #1
 800419a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800419e:	f800 3b01 	strb.w	r3, [r0], #1
 80041a2:	d2f9      	bcs.n	8004198 <memcpy+0x118>
 80041a4:	780b      	ldrb	r3, [r1, #0]
 80041a6:	7003      	strb	r3, [r0, #0]
 80041a8:	784b      	ldrb	r3, [r1, #1]
 80041aa:	7043      	strb	r3, [r0, #1]
 80041ac:	788b      	ldrb	r3, [r1, #2]
 80041ae:	7083      	strb	r3, [r0, #2]
 80041b0:	4660      	mov	r0, ip
 80041b2:	4770      	bx	lr

080041b4 <__malloc_lock>:
__malloc_lock():
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop

080041b8 <__malloc_unlock>:
__malloc_unlock():
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop

080041bc <_Balloc>:
_Balloc():
 80041bc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80041be:	b570      	push	{r4, r5, r6, lr}
 80041c0:	4605      	mov	r5, r0
 80041c2:	460c      	mov	r4, r1
 80041c4:	b14a      	cbz	r2, 80041da <_Balloc+0x1e>
 80041c6:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80041ca:	b180      	cbz	r0, 80041ee <_Balloc+0x32>
 80041cc:	6801      	ldr	r1, [r0, #0]
 80041ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80041d2:	2200      	movs	r2, #0
 80041d4:	6102      	str	r2, [r0, #16]
 80041d6:	60c2      	str	r2, [r0, #12]
 80041d8:	bd70      	pop	{r4, r5, r6, pc}
 80041da:	2221      	movs	r2, #33	; 0x21
 80041dc:	2104      	movs	r1, #4
 80041de:	f000 fbe1 	bl	80049a4 <_calloc_r>
 80041e2:	64e8      	str	r0, [r5, #76]	; 0x4c
 80041e4:	4602      	mov	r2, r0
 80041e6:	2800      	cmp	r0, #0
 80041e8:	d1ed      	bne.n	80041c6 <_Balloc+0xa>
 80041ea:	2000      	movs	r0, #0
 80041ec:	bd70      	pop	{r4, r5, r6, pc}
 80041ee:	2101      	movs	r1, #1
 80041f0:	fa01 f604 	lsl.w	r6, r1, r4
 80041f4:	1d72      	adds	r2, r6, #5
 80041f6:	4628      	mov	r0, r5
 80041f8:	0092      	lsls	r2, r2, #2
 80041fa:	f000 fbd3 	bl	80049a4 <_calloc_r>
 80041fe:	2800      	cmp	r0, #0
 8004200:	d0f3      	beq.n	80041ea <_Balloc+0x2e>
 8004202:	6044      	str	r4, [r0, #4]
 8004204:	6086      	str	r6, [r0, #8]
 8004206:	e7e4      	b.n	80041d2 <_Balloc+0x16>

08004208 <_Bfree>:
_Bfree():
 8004208:	b131      	cbz	r1, 8004218 <_Bfree+0x10>
 800420a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800420c:	684a      	ldr	r2, [r1, #4]
 800420e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004212:	6008      	str	r0, [r1, #0]
 8004214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop

0800421c <__multadd>:
__multadd():
 800421c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004220:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8004224:	b082      	sub	sp, #8
 8004226:	4689      	mov	r9, r1
 8004228:	4682      	mov	sl, r0
 800422a:	f101 0514 	add.w	r5, r1, #20
 800422e:	2400      	movs	r4, #0
 8004230:	682f      	ldr	r7, [r5, #0]
 8004232:	b2be      	uxth	r6, r7
 8004234:	0c3f      	lsrs	r7, r7, #16
 8004236:	fb02 3606 	mla	r6, r2, r6, r3
 800423a:	fb02 f307 	mul.w	r3, r2, r7
 800423e:	eb03 4316 	add.w	r3, r3, r6, lsr #16
 8004242:	3401      	adds	r4, #1
 8004244:	b2b6      	uxth	r6, r6
 8004246:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 800424a:	45a0      	cmp	r8, r4
 800424c:	f845 6b04 	str.w	r6, [r5], #4
 8004250:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8004254:	dcec      	bgt.n	8004230 <__multadd+0x14>
 8004256:	b153      	cbz	r3, 800426e <__multadd+0x52>
 8004258:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800425c:	4590      	cmp	r8, r2
 800425e:	da0a      	bge.n	8004276 <__multadd+0x5a>
 8004260:	eb09 0188 	add.w	r1, r9, r8, lsl #2
 8004264:	f108 0201 	add.w	r2, r8, #1
 8004268:	614b      	str	r3, [r1, #20]
 800426a:	f8c9 2010 	str.w	r2, [r9, #16]
 800426e:	4648      	mov	r0, r9
 8004270:	b002      	add	sp, #8
 8004272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004276:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	3101      	adds	r1, #1
 800427e:	4650      	mov	r0, sl
 8004280:	f7ff ff9c 	bl	80041bc <_Balloc>
 8004284:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8004288:	3202      	adds	r2, #2
 800428a:	f109 010c 	add.w	r1, r9, #12
 800428e:	4604      	mov	r4, r0
 8004290:	0092      	lsls	r2, r2, #2
 8004292:	300c      	adds	r0, #12
 8004294:	f7ff fef4 	bl	8004080 <memcpy>
 8004298:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
 800429c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80042a0:	9b01      	ldr	r3, [sp, #4]
 80042a2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80042a6:	f8c9 0000 	str.w	r0, [r9]
 80042aa:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
 80042ae:	46a1      	mov	r9, r4
 80042b0:	e7d6      	b.n	8004260 <__multadd+0x44>
 80042b2:	bf00      	nop

080042b4 <__hi0bits>:
__hi0bits():
 80042b4:	0c03      	lsrs	r3, r0, #16
 80042b6:	041b      	lsls	r3, r3, #16
 80042b8:	b9b3      	cbnz	r3, 80042e8 <__hi0bits+0x34>
 80042ba:	0400      	lsls	r0, r0, #16
 80042bc:	2310      	movs	r3, #16
 80042be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80042c2:	bf04      	itt	eq
 80042c4:	0200      	lsleq	r0, r0, #8
 80042c6:	3308      	addeq	r3, #8
 80042c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80042cc:	bf04      	itt	eq
 80042ce:	0100      	lsleq	r0, r0, #4
 80042d0:	3304      	addeq	r3, #4
 80042d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80042d6:	bf04      	itt	eq
 80042d8:	0080      	lsleq	r0, r0, #2
 80042da:	3302      	addeq	r3, #2
 80042dc:	2800      	cmp	r0, #0
 80042de:	db07      	blt.n	80042f0 <__hi0bits+0x3c>
 80042e0:	0042      	lsls	r2, r0, #1
 80042e2:	d403      	bmi.n	80042ec <__hi0bits+0x38>
 80042e4:	2020      	movs	r0, #32
 80042e6:	4770      	bx	lr
 80042e8:	2300      	movs	r3, #0
 80042ea:	e7e8      	b.n	80042be <__hi0bits+0xa>
 80042ec:	1c58      	adds	r0, r3, #1
 80042ee:	4770      	bx	lr
 80042f0:	4618      	mov	r0, r3
 80042f2:	4770      	bx	lr

080042f4 <__lo0bits>:
__lo0bits():
 80042f4:	6803      	ldr	r3, [r0, #0]
 80042f6:	f013 0207 	ands.w	r2, r3, #7
 80042fa:	d007      	beq.n	800430c <__lo0bits+0x18>
 80042fc:	07d9      	lsls	r1, r3, #31
 80042fe:	d420      	bmi.n	8004342 <__lo0bits+0x4e>
 8004300:	079a      	lsls	r2, r3, #30
 8004302:	d420      	bmi.n	8004346 <__lo0bits+0x52>
 8004304:	089b      	lsrs	r3, r3, #2
 8004306:	6003      	str	r3, [r0, #0]
 8004308:	2002      	movs	r0, #2
 800430a:	4770      	bx	lr
 800430c:	b299      	uxth	r1, r3
 800430e:	b909      	cbnz	r1, 8004314 <__lo0bits+0x20>
 8004310:	0c1b      	lsrs	r3, r3, #16
 8004312:	2210      	movs	r2, #16
 8004314:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004318:	bf04      	itt	eq
 800431a:	0a1b      	lsreq	r3, r3, #8
 800431c:	3208      	addeq	r2, #8
 800431e:	0719      	lsls	r1, r3, #28
 8004320:	bf04      	itt	eq
 8004322:	091b      	lsreq	r3, r3, #4
 8004324:	3204      	addeq	r2, #4
 8004326:	0799      	lsls	r1, r3, #30
 8004328:	bf04      	itt	eq
 800432a:	089b      	lsreq	r3, r3, #2
 800432c:	3202      	addeq	r2, #2
 800432e:	07d9      	lsls	r1, r3, #31
 8004330:	d404      	bmi.n	800433c <__lo0bits+0x48>
 8004332:	085b      	lsrs	r3, r3, #1
 8004334:	d101      	bne.n	800433a <__lo0bits+0x46>
 8004336:	2020      	movs	r0, #32
 8004338:	4770      	bx	lr
 800433a:	3201      	adds	r2, #1
 800433c:	6003      	str	r3, [r0, #0]
 800433e:	4610      	mov	r0, r2
 8004340:	4770      	bx	lr
 8004342:	2000      	movs	r0, #0
 8004344:	4770      	bx	lr
 8004346:	085b      	lsrs	r3, r3, #1
 8004348:	6003      	str	r3, [r0, #0]
 800434a:	2001      	movs	r0, #1
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop

08004350 <__i2b>:
__i2b():
 8004350:	b510      	push	{r4, lr}
 8004352:	460c      	mov	r4, r1
 8004354:	2101      	movs	r1, #1
 8004356:	f7ff ff31 	bl	80041bc <_Balloc>
 800435a:	2201      	movs	r2, #1
 800435c:	6144      	str	r4, [r0, #20]
 800435e:	6102      	str	r2, [r0, #16]
 8004360:	bd10      	pop	{r4, pc}
 8004362:	bf00      	nop

08004364 <__multiply>:
__multiply():
 8004364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004368:	690d      	ldr	r5, [r1, #16]
 800436a:	f8d2 9010 	ldr.w	r9, [r2, #16]
 800436e:	454d      	cmp	r5, r9
 8004370:	b085      	sub	sp, #20
 8004372:	460c      	mov	r4, r1
 8004374:	4692      	mov	sl, r2
 8004376:	da04      	bge.n	8004382 <__multiply+0x1e>
 8004378:	462a      	mov	r2, r5
 800437a:	4654      	mov	r4, sl
 800437c:	464d      	mov	r5, r9
 800437e:	468a      	mov	sl, r1
 8004380:	4691      	mov	r9, r2
 8004382:	68a3      	ldr	r3, [r4, #8]
 8004384:	6861      	ldr	r1, [r4, #4]
 8004386:	eb05 0709 	add.w	r7, r5, r9
 800438a:	429f      	cmp	r7, r3
 800438c:	bfc8      	it	gt
 800438e:	3101      	addgt	r1, #1
 8004390:	f7ff ff14 	bl	80041bc <_Balloc>
 8004394:	f100 0614 	add.w	r6, r0, #20
 8004398:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800439c:	4546      	cmp	r6, r8
 800439e:	9001      	str	r0, [sp, #4]
 80043a0:	d205      	bcs.n	80043ae <__multiply+0x4a>
 80043a2:	4633      	mov	r3, r6
 80043a4:	2000      	movs	r0, #0
 80043a6:	f843 0b04 	str.w	r0, [r3], #4
 80043aa:	4598      	cmp	r8, r3
 80043ac:	d8fb      	bhi.n	80043a6 <__multiply+0x42>
 80043ae:	f10a 0c14 	add.w	ip, sl, #20
 80043b2:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
 80043b6:	3414      	adds	r4, #20
 80043b8:	45cc      	cmp	ip, r9
 80043ba:	9400      	str	r4, [sp, #0]
 80043bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80043c0:	d25b      	bcs.n	800447a <__multiply+0x116>
 80043c2:	f8cd 8008 	str.w	r8, [sp, #8]
 80043c6:	9703      	str	r7, [sp, #12]
 80043c8:	46c8      	mov	r8, r9
 80043ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 80043ce:	b29c      	uxth	r4, r3
 80043d0:	b324      	cbz	r4, 800441c <__multiply+0xb8>
 80043d2:	9a00      	ldr	r2, [sp, #0]
 80043d4:	4633      	mov	r3, r6
 80043d6:	f04f 0900 	mov.w	r9, #0
 80043da:	e000      	b.n	80043de <__multiply+0x7a>
 80043dc:	460b      	mov	r3, r1
 80043de:	f852 7b04 	ldr.w	r7, [r2], #4
 80043e2:	6819      	ldr	r1, [r3, #0]
 80043e4:	fa1f fb87 	uxth.w	fp, r7
 80043e8:	fa1f fa81 	uxth.w	sl, r1
 80043ec:	0c38      	lsrs	r0, r7, #16
 80043ee:	0c09      	lsrs	r1, r1, #16
 80043f0:	fb04 a70b 	mla	r7, r4, fp, sl
 80043f4:	44b9      	add	r9, r7
 80043f6:	fb04 1000 	mla	r0, r4, r0, r1
 80043fa:	eb00 4019 	add.w	r0, r0, r9, lsr #16
 80043fe:	4619      	mov	r1, r3
 8004400:	fa1f f989 	uxth.w	r9, r9
 8004404:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
 8004408:	4295      	cmp	r5, r2
 800440a:	ea4f 4910 	mov.w	r9, r0, lsr #16
 800440e:	f841 7b04 	str.w	r7, [r1], #4
 8004412:	d8e3      	bhi.n	80043dc <__multiply+0x78>
 8004414:	f8c3 9004 	str.w	r9, [r3, #4]
 8004418:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 800441c:	ea5f 4913 	movs.w	r9, r3, lsr #16
 8004420:	d024      	beq.n	800446c <__multiply+0x108>
 8004422:	f8d6 a000 	ldr.w	sl, [r6]
 8004426:	9b00      	ldr	r3, [sp, #0]
 8004428:	4650      	mov	r0, sl
 800442a:	4631      	mov	r1, r6
 800442c:	f04f 0b00 	mov.w	fp, #0
 8004430:	e000      	b.n	8004434 <__multiply+0xd0>
 8004432:	4611      	mov	r1, r2
 8004434:	881a      	ldrh	r2, [r3, #0]
 8004436:	0c00      	lsrs	r0, r0, #16
 8004438:	fb09 0002 	mla	r0, r9, r2, r0
 800443c:	4483      	add	fp, r0
 800443e:	fa1f fa8a 	uxth.w	sl, sl
 8004442:	460a      	mov	r2, r1
 8004444:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
 8004448:	f842 0b04 	str.w	r0, [r2], #4
 800444c:	f853 7b04 	ldr.w	r7, [r3], #4
 8004450:	6848      	ldr	r0, [r1, #4]
 8004452:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8004456:	b284      	uxth	r4, r0
 8004458:	fb09 4a0a 	mla	sl, r9, sl, r4
 800445c:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
 8004460:	429d      	cmp	r5, r3
 8004462:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
 8004466:	d8e4      	bhi.n	8004432 <__multiply+0xce>
 8004468:	f8c1 a004 	str.w	sl, [r1, #4]
 800446c:	45e0      	cmp	r8, ip
 800446e:	f106 0604 	add.w	r6, r6, #4
 8004472:	d8aa      	bhi.n	80043ca <__multiply+0x66>
 8004474:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004478:	9f03      	ldr	r7, [sp, #12]
 800447a:	2f00      	cmp	r7, #0
 800447c:	dd0a      	ble.n	8004494 <__multiply+0x130>
 800447e:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8004482:	f1a8 0804 	sub.w	r8, r8, #4
 8004486:	b11b      	cbz	r3, 8004490 <__multiply+0x12c>
 8004488:	e004      	b.n	8004494 <__multiply+0x130>
 800448a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800448e:	b90b      	cbnz	r3, 8004494 <__multiply+0x130>
 8004490:	3f01      	subs	r7, #1
 8004492:	d1fa      	bne.n	800448a <__multiply+0x126>
 8004494:	9b01      	ldr	r3, [sp, #4]
 8004496:	4618      	mov	r0, r3
 8004498:	611f      	str	r7, [r3, #16]
 800449a:	b005      	add	sp, #20
 800449c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080044a0 <__pow5mult>:
__pow5mult():
 80044a0:	f012 0303 	ands.w	r3, r2, #3
 80044a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a8:	4614      	mov	r4, r2
 80044aa:	4607      	mov	r7, r0
 80044ac:	460e      	mov	r6, r1
 80044ae:	d12c      	bne.n	800450a <__pow5mult+0x6a>
 80044b0:	10a4      	asrs	r4, r4, #2
 80044b2:	d01c      	beq.n	80044ee <__pow5mult+0x4e>
 80044b4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80044b6:	2d00      	cmp	r5, #0
 80044b8:	d030      	beq.n	800451c <__pow5mult+0x7c>
 80044ba:	f04f 0800 	mov.w	r8, #0
 80044be:	e004      	b.n	80044ca <__pow5mult+0x2a>
 80044c0:	1064      	asrs	r4, r4, #1
 80044c2:	d014      	beq.n	80044ee <__pow5mult+0x4e>
 80044c4:	6828      	ldr	r0, [r5, #0]
 80044c6:	b1a8      	cbz	r0, 80044f4 <__pow5mult+0x54>
 80044c8:	4605      	mov	r5, r0
 80044ca:	07e3      	lsls	r3, r4, #31
 80044cc:	d5f8      	bpl.n	80044c0 <__pow5mult+0x20>
 80044ce:	4638      	mov	r0, r7
 80044d0:	4631      	mov	r1, r6
 80044d2:	462a      	mov	r2, r5
 80044d4:	f7ff ff46 	bl	8004364 <__multiply>
 80044d8:	b1ae      	cbz	r6, 8004506 <__pow5mult+0x66>
 80044da:	6872      	ldr	r2, [r6, #4]
 80044dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044de:	1064      	asrs	r4, r4, #1
 80044e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80044e4:	6031      	str	r1, [r6, #0]
 80044e6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80044ea:	4606      	mov	r6, r0
 80044ec:	d1ea      	bne.n	80044c4 <__pow5mult+0x24>
 80044ee:	4630      	mov	r0, r6
 80044f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044f4:	4638      	mov	r0, r7
 80044f6:	4629      	mov	r1, r5
 80044f8:	462a      	mov	r2, r5
 80044fa:	f7ff ff33 	bl	8004364 <__multiply>
 80044fe:	6028      	str	r0, [r5, #0]
 8004500:	f8c0 8000 	str.w	r8, [r0]
 8004504:	e7e0      	b.n	80044c8 <__pow5mult+0x28>
 8004506:	4606      	mov	r6, r0
 8004508:	e7da      	b.n	80044c0 <__pow5mult+0x20>
 800450a:	1e5d      	subs	r5, r3, #1
 800450c:	4a0a      	ldr	r2, [pc, #40]	; (8004538 <__pow5mult+0x98>)
 800450e:	2300      	movs	r3, #0
 8004510:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8004514:	f7ff fe82 	bl	800421c <__multadd>
 8004518:	4606      	mov	r6, r0
 800451a:	e7c9      	b.n	80044b0 <__pow5mult+0x10>
 800451c:	2101      	movs	r1, #1
 800451e:	4638      	mov	r0, r7
 8004520:	f7ff fe4c 	bl	80041bc <_Balloc>
 8004524:	f240 2171 	movw	r1, #625	; 0x271
 8004528:	2201      	movs	r2, #1
 800452a:	2300      	movs	r3, #0
 800452c:	6141      	str	r1, [r0, #20]
 800452e:	6102      	str	r2, [r0, #16]
 8004530:	4605      	mov	r5, r0
 8004532:	64b8      	str	r0, [r7, #72]	; 0x48
 8004534:	6003      	str	r3, [r0, #0]
 8004536:	e7c0      	b.n	80044ba <__pow5mult+0x1a>
 8004538:	08005a10 	.word	0x08005a10

0800453c <__lshift>:
__lshift():
 800453c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004540:	4693      	mov	fp, r2
 8004542:	690a      	ldr	r2, [r1, #16]
 8004544:	688b      	ldr	r3, [r1, #8]
 8004546:	ea4f 1a6b 	mov.w	sl, fp, asr #5
 800454a:	eb0a 0902 	add.w	r9, sl, r2
 800454e:	f109 0601 	add.w	r6, r9, #1
 8004552:	429e      	cmp	r6, r3
 8004554:	460f      	mov	r7, r1
 8004556:	4680      	mov	r8, r0
 8004558:	6849      	ldr	r1, [r1, #4]
 800455a:	dd04      	ble.n	8004566 <__lshift+0x2a>
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	429e      	cmp	r6, r3
 8004560:	f101 0101 	add.w	r1, r1, #1
 8004564:	dcfa      	bgt.n	800455c <__lshift+0x20>
 8004566:	4640      	mov	r0, r8
 8004568:	f7ff fe28 	bl	80041bc <_Balloc>
 800456c:	f1ba 0f00 	cmp.w	sl, #0
 8004570:	f100 0414 	add.w	r4, r0, #20
 8004574:	dd09      	ble.n	800458a <__lshift+0x4e>
 8004576:	2300      	movs	r3, #0
 8004578:	461a      	mov	r2, r3
 800457a:	4625      	mov	r5, r4
 800457c:	3301      	adds	r3, #1
 800457e:	4553      	cmp	r3, sl
 8004580:	f845 2b04 	str.w	r2, [r5], #4
 8004584:	d1fa      	bne.n	800457c <__lshift+0x40>
 8004586:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	f107 0314 	add.w	r3, r7, #20
 8004590:	f01b 0b1f 	ands.w	fp, fp, #31
 8004594:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 8004598:	d021      	beq.n	80045de <__lshift+0xa2>
 800459a:	f1cb 0a20 	rsb	sl, fp, #32
 800459e:	2200      	movs	r2, #0
 80045a0:	e000      	b.n	80045a4 <__lshift+0x68>
 80045a2:	462c      	mov	r4, r5
 80045a4:	6819      	ldr	r1, [r3, #0]
 80045a6:	4625      	mov	r5, r4
 80045a8:	fa01 f10b 	lsl.w	r1, r1, fp
 80045ac:	430a      	orrs	r2, r1
 80045ae:	f845 2b04 	str.w	r2, [r5], #4
 80045b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80045b6:	4563      	cmp	r3, ip
 80045b8:	fa22 f20a 	lsr.w	r2, r2, sl
 80045bc:	d3f1      	bcc.n	80045a2 <__lshift+0x66>
 80045be:	6062      	str	r2, [r4, #4]
 80045c0:	b10a      	cbz	r2, 80045c6 <__lshift+0x8a>
 80045c2:	f109 0602 	add.w	r6, r9, #2
 80045c6:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	3e01      	subs	r6, #1
 80045ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045d2:	6106      	str	r6, [r0, #16]
 80045d4:	6039      	str	r1, [r7, #0]
 80045d6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 80045da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045de:	f853 2b04 	ldr.w	r2, [r3], #4
 80045e2:	f844 2b04 	str.w	r2, [r4], #4
 80045e6:	459c      	cmp	ip, r3
 80045e8:	d9ed      	bls.n	80045c6 <__lshift+0x8a>
 80045ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80045ee:	f844 2b04 	str.w	r2, [r4], #4
 80045f2:	459c      	cmp	ip, r3
 80045f4:	d8f3      	bhi.n	80045de <__lshift+0xa2>
 80045f6:	e7e6      	b.n	80045c6 <__lshift+0x8a>

080045f8 <__mcmp>:
__mcmp():
 80045f8:	6902      	ldr	r2, [r0, #16]
 80045fa:	690b      	ldr	r3, [r1, #16]
 80045fc:	1ad2      	subs	r2, r2, r3
 80045fe:	b410      	push	{r4}
 8004600:	d115      	bne.n	800462e <__mcmp+0x36>
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	3014      	adds	r0, #20
 8004606:	3114      	adds	r1, #20
 8004608:	4419      	add	r1, r3
 800460a:	4403      	add	r3, r0
 800460c:	e001      	b.n	8004612 <__mcmp+0x1a>
 800460e:	4298      	cmp	r0, r3
 8004610:	d211      	bcs.n	8004636 <__mcmp+0x3e>
 8004612:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004616:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800461a:	42a2      	cmp	r2, r4
 800461c:	d0f7      	beq.n	800460e <__mcmp+0x16>
 800461e:	4294      	cmp	r4, r2
 8004620:	bf94      	ite	ls
 8004622:	2001      	movls	r0, #1
 8004624:	f04f 30ff 	movhi.w	r0, #4294967295
 8004628:	f85d 4b04 	ldr.w	r4, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	4610      	mov	r0, r2
 8004630:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	2000      	movs	r0, #0
 8004638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop

08004640 <__mdiff>:
__mdiff():
 8004640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004644:	460d      	mov	r5, r1
 8004646:	4604      	mov	r4, r0
 8004648:	4611      	mov	r1, r2
 800464a:	4628      	mov	r0, r5
 800464c:	4616      	mov	r6, r2
 800464e:	f7ff ffd3 	bl	80045f8 <__mcmp>
 8004652:	1e07      	subs	r7, r0, #0
 8004654:	d055      	beq.n	8004702 <__mdiff+0xc2>
 8004656:	db4e      	blt.n	80046f6 <__mdiff+0xb6>
 8004658:	f04f 0800 	mov.w	r8, #0
 800465c:	6869      	ldr	r1, [r5, #4]
 800465e:	4620      	mov	r0, r4
 8004660:	f7ff fdac 	bl	80041bc <_Balloc>
 8004664:	692f      	ldr	r7, [r5, #16]
 8004666:	6932      	ldr	r2, [r6, #16]
 8004668:	f8c0 800c 	str.w	r8, [r0, #12]
 800466c:	3514      	adds	r5, #20
 800466e:	3614      	adds	r6, #20
 8004670:	f100 0314 	add.w	r3, r0, #20
 8004674:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004678:	eb06 0882 	add.w	r8, r6, r2, lsl #2
 800467c:	2100      	movs	r1, #0
 800467e:	f856 2b04 	ldr.w	r2, [r6], #4
 8004682:	f855 4b04 	ldr.w	r4, [r5], #4
 8004686:	fa1f f982 	uxth.w	r9, r2
 800468a:	fa11 fa84 	uxtah	sl, r1, r4
 800468e:	0c11      	lsrs	r1, r2, #16
 8004690:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
 8004694:	ebc9 020a 	rsb	r2, r9, sl
 8004698:	eb01 4122 	add.w	r1, r1, r2, asr #16
 800469c:	b292      	uxth	r2, r2
 800469e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80046a2:	45b0      	cmp	r8, r6
 80046a4:	f843 2b04 	str.w	r2, [r3], #4
 80046a8:	ea4f 4121 	mov.w	r1, r1, asr #16
 80046ac:	462c      	mov	r4, r5
 80046ae:	d8e6      	bhi.n	800467e <__mdiff+0x3e>
 80046b0:	45ac      	cmp	ip, r5
 80046b2:	4698      	mov	r8, r3
 80046b4:	d915      	bls.n	80046e2 <__mdiff+0xa2>
 80046b6:	f854 6b04 	ldr.w	r6, [r4], #4
 80046ba:	fa11 f186 	uxtah	r1, r1, r6
 80046be:	0c36      	lsrs	r6, r6, #16
 80046c0:	eb06 4621 	add.w	r6, r6, r1, asr #16
 80046c4:	b289      	uxth	r1, r1
 80046c6:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
 80046ca:	45a4      	cmp	ip, r4
 80046cc:	f843 2b04 	str.w	r2, [r3], #4
 80046d0:	ea4f 4126 	mov.w	r1, r6, asr #16
 80046d4:	d8ef      	bhi.n	80046b6 <__mdiff+0x76>
 80046d6:	43eb      	mvns	r3, r5
 80046d8:	4463      	add	r3, ip
 80046da:	f023 0303 	bic.w	r3, r3, #3
 80046de:	3304      	adds	r3, #4
 80046e0:	4443      	add	r3, r8
 80046e2:	3b04      	subs	r3, #4
 80046e4:	b922      	cbnz	r2, 80046f0 <__mdiff+0xb0>
 80046e6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80046ea:	3f01      	subs	r7, #1
 80046ec:	2a00      	cmp	r2, #0
 80046ee:	d0fa      	beq.n	80046e6 <__mdiff+0xa6>
 80046f0:	6107      	str	r7, [r0, #16]
 80046f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f6:	462b      	mov	r3, r5
 80046f8:	f04f 0801 	mov.w	r8, #1
 80046fc:	4635      	mov	r5, r6
 80046fe:	461e      	mov	r6, r3
 8004700:	e7ac      	b.n	800465c <__mdiff+0x1c>
 8004702:	4620      	mov	r0, r4
 8004704:	4639      	mov	r1, r7
 8004706:	f7ff fd59 	bl	80041bc <_Balloc>
 800470a:	2301      	movs	r3, #1
 800470c:	6147      	str	r7, [r0, #20]
 800470e:	6103      	str	r3, [r0, #16]
 8004710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004714 <__d2b>:
__d2b():
 8004714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004718:	b083      	sub	sp, #12
 800471a:	2101      	movs	r1, #1
 800471c:	461d      	mov	r5, r3
 800471e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8004722:	4614      	mov	r4, r2
 8004724:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004726:	f7ff fd49 	bl	80041bc <_Balloc>
 800472a:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800472e:	4680      	mov	r8, r0
 8004730:	b10e      	cbz	r6, 8004736 <__d2b+0x22>
 8004732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	b324      	cbz	r4, 8004784 <__d2b+0x70>
 800473a:	a802      	add	r0, sp, #8
 800473c:	f840 4d08 	str.w	r4, [r0, #-8]!
 8004740:	4668      	mov	r0, sp
 8004742:	f7ff fdd7 	bl	80042f4 <__lo0bits>
 8004746:	2800      	cmp	r0, #0
 8004748:	d135      	bne.n	80047b6 <__d2b+0xa2>
 800474a:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800474e:	f8c8 2014 	str.w	r2, [r8, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	bf0c      	ite	eq
 8004756:	2401      	moveq	r4, #1
 8004758:	2402      	movne	r4, #2
 800475a:	f8c8 3018 	str.w	r3, [r8, #24]
 800475e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004762:	b9de      	cbnz	r6, 800479c <__d2b+0x88>
 8004764:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8004768:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800476c:	6038      	str	r0, [r7, #0]
 800476e:	6918      	ldr	r0, [r3, #16]
 8004770:	f7ff fda0 	bl	80042b4 <__hi0bits>
 8004774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004776:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800477a:	6018      	str	r0, [r3, #0]
 800477c:	4640      	mov	r0, r8
 800477e:	b003      	add	sp, #12
 8004780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004784:	a801      	add	r0, sp, #4
 8004786:	f7ff fdb5 	bl	80042f4 <__lo0bits>
 800478a:	2401      	movs	r4, #1
 800478c:	9b01      	ldr	r3, [sp, #4]
 800478e:	f8c8 3014 	str.w	r3, [r8, #20]
 8004792:	3020      	adds	r0, #32
 8004794:	f8c8 4010 	str.w	r4, [r8, #16]
 8004798:	2e00      	cmp	r6, #0
 800479a:	d0e3      	beq.n	8004764 <__d2b+0x50>
 800479c:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
 80047a0:	eb09 0300 	add.w	r3, r9, r0
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80047ac:	6018      	str	r0, [r3, #0]
 80047ae:	4640      	mov	r0, r8
 80047b0:	b003      	add	sp, #12
 80047b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047b6:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80047ba:	f1c0 0120 	rsb	r1, r0, #32
 80047be:	fa03 f101 	lsl.w	r1, r3, r1
 80047c2:	430a      	orrs	r2, r1
 80047c4:	40c3      	lsrs	r3, r0
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	f8c8 2014 	str.w	r2, [r8, #20]
 80047cc:	e7c1      	b.n	8004752 <__d2b+0x3e>
 80047ce:	bf00      	nop

080047d0 <__fpclassifyd>:
__fpclassifyd():
 80047d0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80047d4:	b410      	push	{r4}
 80047d6:	d008      	beq.n	80047ea <__fpclassifyd+0x1a>
 80047d8:	4a0f      	ldr	r2, [pc, #60]	; (8004818 <__fpclassifyd+0x48>)
 80047da:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
 80047de:	4294      	cmp	r4, r2
 80047e0:	d80a      	bhi.n	80047f8 <__fpclassifyd+0x28>
 80047e2:	2004      	movs	r0, #4
 80047e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	2800      	cmp	r0, #0
 80047ec:	bf0c      	ite	eq
 80047ee:	2002      	moveq	r0, #2
 80047f0:	2003      	movne	r0, #3
 80047f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047fc:	d201      	bcs.n	8004802 <__fpclassifyd+0x32>
 80047fe:	2003      	movs	r0, #3
 8004800:	e7f7      	b.n	80047f2 <__fpclassifyd+0x22>
 8004802:	4a06      	ldr	r2, [pc, #24]	; (800481c <__fpclassifyd+0x4c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d001      	beq.n	800480c <__fpclassifyd+0x3c>
 8004808:	2000      	movs	r0, #0
 800480a:	e7f2      	b.n	80047f2 <__fpclassifyd+0x22>
 800480c:	f1d0 0001 	rsbs	r0, r0, #1
 8004810:	bf38      	it	cc
 8004812:	2000      	movcc	r0, #0
 8004814:	e7ed      	b.n	80047f2 <__fpclassifyd+0x22>
 8004816:	bf00      	nop
 8004818:	7fdfffff 	.word	0x7fdfffff
 800481c:	7ff00000 	.word	0x7ff00000

08004820 <_sbrk_r>:
_sbrk_r():
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4c07      	ldr	r4, [pc, #28]	; (8004840 <_sbrk_r+0x20>)
 8004824:	2300      	movs	r3, #0
 8004826:	4605      	mov	r5, r0
 8004828:	4608      	mov	r0, r1
 800482a:	6023      	str	r3, [r4, #0]
 800482c:	f7fb fe3e 	bl	80004ac <_sbrk>
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	d000      	beq.n	8004836 <_sbrk_r+0x16>
 8004834:	bd38      	pop	{r3, r4, r5, pc}
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0fb      	beq.n	8004834 <_sbrk_r+0x14>
 800483c:	602b      	str	r3, [r5, #0]
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	200008f0 	.word	0x200008f0

08004844 <strlen>:
strlen():
 8004844:	f020 0103 	bic.w	r1, r0, #3
 8004848:	f010 0003 	ands.w	r0, r0, #3
 800484c:	f1c0 0000 	rsb	r0, r0, #0
 8004850:	f851 3b04 	ldr.w	r3, [r1], #4
 8004854:	f100 0c04 	add.w	ip, r0, #4
 8004858:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800485c:	f06f 0200 	mvn.w	r2, #0
 8004860:	bf1c      	itt	ne
 8004862:	fa22 f20c 	lsrne.w	r2, r2, ip
 8004866:	4313      	orrne	r3, r2
 8004868:	f04f 0c01 	mov.w	ip, #1
 800486c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8004870:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8004874:	eba3 020c 	sub.w	r2, r3, ip
 8004878:	ea22 0203 	bic.w	r2, r2, r3
 800487c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8004880:	bf04      	itt	eq
 8004882:	f851 3b04 	ldreq.w	r3, [r1], #4
 8004886:	3004      	addeq	r0, #4
 8004888:	d0f4      	beq.n	8004874 <strlen+0x30>
 800488a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800488e:	bf1f      	itttt	ne
 8004890:	3001      	addne	r0, #1
 8004892:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8004896:	3001      	addne	r0, #1
 8004898:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 800489c:	bf18      	it	ne
 800489e:	3001      	addne	r0, #1
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop

080048a4 <__ssprint_r>:
__ssprint_r():
 80048a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a8:	6894      	ldr	r4, [r2, #8]
 80048aa:	6816      	ldr	r6, [r2, #0]
 80048ac:	b083      	sub	sp, #12
 80048ae:	4692      	mov	sl, r2
 80048b0:	4680      	mov	r8, r0
 80048b2:	460d      	mov	r5, r1
 80048b4:	2c00      	cmp	r4, #0
 80048b6:	d06f      	beq.n	8004998 <__ssprint_r+0xf4>
 80048b8:	f04f 0b00 	mov.w	fp, #0
 80048bc:	6808      	ldr	r0, [r1, #0]
 80048be:	688b      	ldr	r3, [r1, #8]
 80048c0:	465c      	mov	r4, fp
 80048c2:	2c00      	cmp	r4, #0
 80048c4:	d043      	beq.n	800494e <__ssprint_r+0xaa>
 80048c6:	429c      	cmp	r4, r3
 80048c8:	461f      	mov	r7, r3
 80048ca:	d345      	bcc.n	8004958 <__ssprint_r+0xb4>
 80048cc:	89ab      	ldrh	r3, [r5, #12]
 80048ce:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80048d2:	d044      	beq.n	800495e <__ssprint_r+0xba>
 80048d4:	696f      	ldr	r7, [r5, #20]
 80048d6:	6929      	ldr	r1, [r5, #16]
 80048d8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80048dc:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80048e0:	ebc1 0900 	rsb	r9, r1, r0
 80048e4:	1c62      	adds	r2, r4, #1
 80048e6:	107f      	asrs	r7, r7, #1
 80048e8:	444a      	add	r2, r9
 80048ea:	4297      	cmp	r7, r2
 80048ec:	bf34      	ite	cc
 80048ee:	4617      	movcc	r7, r2
 80048f0:	463a      	movcs	r2, r7
 80048f2:	055b      	lsls	r3, r3, #21
 80048f4:	d535      	bpl.n	8004962 <__ssprint_r+0xbe>
 80048f6:	4611      	mov	r1, r2
 80048f8:	4640      	mov	r0, r8
 80048fa:	f7ff f8dd 	bl	8003ab8 <_malloc_r>
 80048fe:	2800      	cmp	r0, #0
 8004900:	d039      	beq.n	8004976 <__ssprint_r+0xd2>
 8004902:	6929      	ldr	r1, [r5, #16]
 8004904:	9001      	str	r0, [sp, #4]
 8004906:	464a      	mov	r2, r9
 8004908:	f7ff fbba 	bl	8004080 <memcpy>
 800490c:	89aa      	ldrh	r2, [r5, #12]
 800490e:	9b01      	ldr	r3, [sp, #4]
 8004910:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8004914:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004918:	81aa      	strh	r2, [r5, #12]
 800491a:	ebc9 0207 	rsb	r2, r9, r7
 800491e:	eb03 0009 	add.w	r0, r3, r9
 8004922:	616f      	str	r7, [r5, #20]
 8004924:	612b      	str	r3, [r5, #16]
 8004926:	6028      	str	r0, [r5, #0]
 8004928:	60aa      	str	r2, [r5, #8]
 800492a:	4627      	mov	r7, r4
 800492c:	46a1      	mov	r9, r4
 800492e:	464a      	mov	r2, r9
 8004930:	4659      	mov	r1, fp
 8004932:	f000 f983 	bl	8004c3c <memmove>
 8004936:	f8da 2008 	ldr.w	r2, [sl, #8]
 800493a:	68ab      	ldr	r3, [r5, #8]
 800493c:	6828      	ldr	r0, [r5, #0]
 800493e:	1bdb      	subs	r3, r3, r7
 8004940:	4448      	add	r0, r9
 8004942:	1b14      	subs	r4, r2, r4
 8004944:	60ab      	str	r3, [r5, #8]
 8004946:	6028      	str	r0, [r5, #0]
 8004948:	f8ca 4008 	str.w	r4, [sl, #8]
 800494c:	b324      	cbz	r4, 8004998 <__ssprint_r+0xf4>
 800494e:	f8d6 b000 	ldr.w	fp, [r6]
 8004952:	6874      	ldr	r4, [r6, #4]
 8004954:	3608      	adds	r6, #8
 8004956:	e7b4      	b.n	80048c2 <__ssprint_r+0x1e>
 8004958:	4627      	mov	r7, r4
 800495a:	46a1      	mov	r9, r4
 800495c:	e7e7      	b.n	800492e <__ssprint_r+0x8a>
 800495e:	46b9      	mov	r9, r7
 8004960:	e7e5      	b.n	800492e <__ssprint_r+0x8a>
 8004962:	4640      	mov	r0, r8
 8004964:	f000 fa14 	bl	8004d90 <_realloc_r>
 8004968:	4603      	mov	r3, r0
 800496a:	2800      	cmp	r0, #0
 800496c:	d1d5      	bne.n	800491a <__ssprint_r+0x76>
 800496e:	4640      	mov	r0, r8
 8004970:	6929      	ldr	r1, [r5, #16]
 8004972:	f000 f895 	bl	8004aa0 <_free_r>
 8004976:	89aa      	ldrh	r2, [r5, #12]
 8004978:	230c      	movs	r3, #12
 800497a:	f8c8 3000 	str.w	r3, [r8]
 800497e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004982:	2300      	movs	r3, #0
 8004984:	f04f 30ff 	mov.w	r0, #4294967295
 8004988:	81aa      	strh	r2, [r5, #12]
 800498a:	f8ca 3008 	str.w	r3, [sl, #8]
 800498e:	f8ca 3004 	str.w	r3, [sl, #4]
 8004992:	b003      	add	sp, #12
 8004994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004998:	4620      	mov	r0, r4
 800499a:	f8ca 4004 	str.w	r4, [sl, #4]
 800499e:	b003      	add	sp, #12
 80049a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080049a4 <_calloc_r>:
_calloc_r():
 80049a4:	b510      	push	{r4, lr}
 80049a6:	fb02 f101 	mul.w	r1, r2, r1
 80049aa:	f7ff f885 	bl	8003ab8 <_malloc_r>
 80049ae:	4604      	mov	r4, r0
 80049b0:	b168      	cbz	r0, 80049ce <_calloc_r+0x2a>
 80049b2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80049b6:	f022 0203 	bic.w	r2, r2, #3
 80049ba:	3a04      	subs	r2, #4
 80049bc:	2a24      	cmp	r2, #36	; 0x24
 80049be:	d818      	bhi.n	80049f2 <_calloc_r+0x4e>
 80049c0:	2a13      	cmp	r2, #19
 80049c2:	d806      	bhi.n	80049d2 <_calloc_r+0x2e>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	605a      	str	r2, [r3, #4]
 80049cc:	609a      	str	r2, [r3, #8]
 80049ce:	4620      	mov	r0, r4
 80049d0:	bd10      	pop	{r4, pc}
 80049d2:	2300      	movs	r3, #0
 80049d4:	2a1b      	cmp	r2, #27
 80049d6:	6003      	str	r3, [r0, #0]
 80049d8:	6043      	str	r3, [r0, #4]
 80049da:	d90f      	bls.n	80049fc <_calloc_r+0x58>
 80049dc:	2a24      	cmp	r2, #36	; 0x24
 80049de:	6083      	str	r3, [r0, #8]
 80049e0:	60c3      	str	r3, [r0, #12]
 80049e2:	bf05      	ittet	eq
 80049e4:	6103      	streq	r3, [r0, #16]
 80049e6:	6143      	streq	r3, [r0, #20]
 80049e8:	f100 0310 	addne.w	r3, r0, #16
 80049ec:	f100 0318 	addeq.w	r3, r0, #24
 80049f0:	e7e9      	b.n	80049c6 <_calloc_r+0x22>
 80049f2:	2100      	movs	r1, #0
 80049f4:	f000 f982 	bl	8004cfc <memset>
 80049f8:	4620      	mov	r0, r4
 80049fa:	bd10      	pop	{r4, pc}
 80049fc:	f100 0308 	add.w	r3, r0, #8
 8004a00:	e7e1      	b.n	80049c6 <_calloc_r+0x22>
 8004a02:	bf00      	nop

08004a04 <_malloc_trim_r>:
_malloc_trim_r():
 8004a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a06:	4d23      	ldr	r5, [pc, #140]	; (8004a94 <_malloc_trim_r+0x90>)
 8004a08:	460f      	mov	r7, r1
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	f7ff fbd2 	bl	80041b4 <__malloc_lock>
 8004a10:	68ab      	ldr	r3, [r5, #8]
 8004a12:	685e      	ldr	r6, [r3, #4]
 8004a14:	f026 0603 	bic.w	r6, r6, #3
 8004a18:	1bf1      	subs	r1, r6, r7
 8004a1a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8004a1e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8004a22:	f021 010f 	bic.w	r1, r1, #15
 8004a26:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
 8004a2a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8004a2e:	db07      	blt.n	8004a40 <_malloc_trim_r+0x3c>
 8004a30:	4620      	mov	r0, r4
 8004a32:	2100      	movs	r1, #0
 8004a34:	f7ff fef4 	bl	8004820 <_sbrk_r>
 8004a38:	68ab      	ldr	r3, [r5, #8]
 8004a3a:	4433      	add	r3, r6
 8004a3c:	4298      	cmp	r0, r3
 8004a3e:	d004      	beq.n	8004a4a <_malloc_trim_r+0x46>
 8004a40:	4620      	mov	r0, r4
 8004a42:	f7ff fbb9 	bl	80041b8 <__malloc_unlock>
 8004a46:	2000      	movs	r0, #0
 8004a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	4279      	negs	r1, r7
 8004a4e:	f7ff fee7 	bl	8004820 <_sbrk_r>
 8004a52:	3001      	adds	r0, #1
 8004a54:	d00d      	beq.n	8004a72 <_malloc_trim_r+0x6e>
 8004a56:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <_malloc_trim_r+0x94>)
 8004a58:	68aa      	ldr	r2, [r5, #8]
 8004a5a:	6819      	ldr	r1, [r3, #0]
 8004a5c:	1bf6      	subs	r6, r6, r7
 8004a5e:	f046 0601 	orr.w	r6, r6, #1
 8004a62:	4620      	mov	r0, r4
 8004a64:	1bc9      	subs	r1, r1, r7
 8004a66:	6056      	str	r6, [r2, #4]
 8004a68:	6019      	str	r1, [r3, #0]
 8004a6a:	f7ff fba5 	bl	80041b8 <__malloc_unlock>
 8004a6e:	2001      	movs	r0, #1
 8004a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a72:	4620      	mov	r0, r4
 8004a74:	2100      	movs	r1, #0
 8004a76:	f7ff fed3 	bl	8004820 <_sbrk_r>
 8004a7a:	68ab      	ldr	r3, [r5, #8]
 8004a7c:	1ac2      	subs	r2, r0, r3
 8004a7e:	2a0f      	cmp	r2, #15
 8004a80:	ddde      	ble.n	8004a40 <_malloc_trim_r+0x3c>
 8004a82:	4d06      	ldr	r5, [pc, #24]	; (8004a9c <_malloc_trim_r+0x98>)
 8004a84:	4904      	ldr	r1, [pc, #16]	; (8004a98 <_malloc_trim_r+0x94>)
 8004a86:	682d      	ldr	r5, [r5, #0]
 8004a88:	f042 0201 	orr.w	r2, r2, #1
 8004a8c:	1b40      	subs	r0, r0, r5
 8004a8e:	605a      	str	r2, [r3, #4]
 8004a90:	6008      	str	r0, [r1, #0]
 8004a92:	e7d5      	b.n	8004a40 <_malloc_trim_r+0x3c>
 8004a94:	20000474 	.word	0x20000474
 8004a98:	200008c8 	.word	0x200008c8
 8004a9c:	20000880 	.word	0x20000880

08004aa0 <_free_r>:
_free_r():
 8004aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa4:	460d      	mov	r5, r1
 8004aa6:	4606      	mov	r6, r0
 8004aa8:	2900      	cmp	r1, #0
 8004aaa:	d055      	beq.n	8004b58 <_free_r+0xb8>
 8004aac:	f7ff fb82 	bl	80041b4 <__malloc_lock>
 8004ab0:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8004ab4:	f8df c174 	ldr.w	ip, [pc, #372]	; 8004c2c <_free_r+0x18c>
 8004ab8:	f021 0301 	bic.w	r3, r1, #1
 8004abc:	f1a5 0408 	sub.w	r4, r5, #8
 8004ac0:	18e2      	adds	r2, r4, r3
 8004ac2:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8004ac6:	6857      	ldr	r7, [r2, #4]
 8004ac8:	4290      	cmp	r0, r2
 8004aca:	f027 0703 	bic.w	r7, r7, #3
 8004ace:	d069      	beq.n	8004ba4 <_free_r+0x104>
 8004ad0:	f011 0101 	ands.w	r1, r1, #1
 8004ad4:	6057      	str	r7, [r2, #4]
 8004ad6:	d032      	beq.n	8004b3e <_free_r+0x9e>
 8004ad8:	2100      	movs	r1, #0
 8004ada:	19d0      	adds	r0, r2, r7
 8004adc:	6840      	ldr	r0, [r0, #4]
 8004ade:	07c0      	lsls	r0, r0, #31
 8004ae0:	d406      	bmi.n	8004af0 <_free_r+0x50>
 8004ae2:	443b      	add	r3, r7
 8004ae4:	6890      	ldr	r0, [r2, #8]
 8004ae6:	2900      	cmp	r1, #0
 8004ae8:	d04e      	beq.n	8004b88 <_free_r+0xe8>
 8004aea:	68d2      	ldr	r2, [r2, #12]
 8004aec:	60c2      	str	r2, [r0, #12]
 8004aee:	6090      	str	r0, [r2, #8]
 8004af0:	f043 0201 	orr.w	r2, r3, #1
 8004af4:	6062      	str	r2, [r4, #4]
 8004af6:	50e3      	str	r3, [r4, r3]
 8004af8:	b9e1      	cbnz	r1, 8004b34 <_free_r+0x94>
 8004afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004afe:	d32d      	bcc.n	8004b5c <_free_r+0xbc>
 8004b00:	0a5a      	lsrs	r2, r3, #9
 8004b02:	2a04      	cmp	r2, #4
 8004b04:	d86a      	bhi.n	8004bdc <_free_r+0x13c>
 8004b06:	0998      	lsrs	r0, r3, #6
 8004b08:	3038      	adds	r0, #56	; 0x38
 8004b0a:	0041      	lsls	r1, r0, #1
 8004b0c:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
 8004b10:	4946      	ldr	r1, [pc, #280]	; (8004c2c <_free_r+0x18c>)
 8004b12:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8004b16:	4562      	cmp	r2, ip
 8004b18:	d066      	beq.n	8004be8 <_free_r+0x148>
 8004b1a:	6851      	ldr	r1, [r2, #4]
 8004b1c:	f021 0103 	bic.w	r1, r1, #3
 8004b20:	428b      	cmp	r3, r1
 8004b22:	d202      	bcs.n	8004b2a <_free_r+0x8a>
 8004b24:	6892      	ldr	r2, [r2, #8]
 8004b26:	4594      	cmp	ip, r2
 8004b28:	d1f7      	bne.n	8004b1a <_free_r+0x7a>
 8004b2a:	68d3      	ldr	r3, [r2, #12]
 8004b2c:	60e3      	str	r3, [r4, #12]
 8004b2e:	60a2      	str	r2, [r4, #8]
 8004b30:	609c      	str	r4, [r3, #8]
 8004b32:	60d4      	str	r4, [r2, #12]
 8004b34:	4630      	mov	r0, r6
 8004b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3a:	f7ff bb3d 	b.w	80041b8 <__malloc_unlock>
 8004b3e:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8004b42:	1b64      	subs	r4, r4, r5
 8004b44:	f10c 0808 	add.w	r8, ip, #8
 8004b48:	68a0      	ldr	r0, [r4, #8]
 8004b4a:	4540      	cmp	r0, r8
 8004b4c:	442b      	add	r3, r5
 8004b4e:	d043      	beq.n	8004bd8 <_free_r+0x138>
 8004b50:	68e5      	ldr	r5, [r4, #12]
 8004b52:	60c5      	str	r5, [r0, #12]
 8004b54:	60a8      	str	r0, [r5, #8]
 8004b56:	e7c0      	b.n	8004ada <_free_r+0x3a>
 8004b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b5c:	08db      	lsrs	r3, r3, #3
 8004b5e:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
 8004b62:	2501      	movs	r5, #1
 8004b64:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8004b68:	6891      	ldr	r1, [r2, #8]
 8004b6a:	60a1      	str	r1, [r4, #8]
 8004b6c:	109b      	asrs	r3, r3, #2
 8004b6e:	fa05 f303 	lsl.w	r3, r5, r3
 8004b72:	4318      	orrs	r0, r3
 8004b74:	60e2      	str	r2, [r4, #12]
 8004b76:	f8cc 0004 	str.w	r0, [ip, #4]
 8004b7a:	6094      	str	r4, [r2, #8]
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	60cc      	str	r4, [r1, #12]
 8004b80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b84:	f7ff bb18 	b.w	80041b8 <__malloc_unlock>
 8004b88:	4d29      	ldr	r5, [pc, #164]	; (8004c30 <_free_r+0x190>)
 8004b8a:	42a8      	cmp	r0, r5
 8004b8c:	d1ad      	bne.n	8004aea <_free_r+0x4a>
 8004b8e:	f043 0201 	orr.w	r2, r3, #1
 8004b92:	f8cc 4014 	str.w	r4, [ip, #20]
 8004b96:	f8cc 4010 	str.w	r4, [ip, #16]
 8004b9a:	60e0      	str	r0, [r4, #12]
 8004b9c:	60a0      	str	r0, [r4, #8]
 8004b9e:	6062      	str	r2, [r4, #4]
 8004ba0:	50e3      	str	r3, [r4, r3]
 8004ba2:	e7c7      	b.n	8004b34 <_free_r+0x94>
 8004ba4:	441f      	add	r7, r3
 8004ba6:	07cb      	lsls	r3, r1, #31
 8004ba8:	d407      	bmi.n	8004bba <_free_r+0x11a>
 8004baa:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8004bae:	1ae4      	subs	r4, r4, r3
 8004bb0:	441f      	add	r7, r3
 8004bb2:	68a2      	ldr	r2, [r4, #8]
 8004bb4:	68e3      	ldr	r3, [r4, #12]
 8004bb6:	60d3      	str	r3, [r2, #12]
 8004bb8:	609a      	str	r2, [r3, #8]
 8004bba:	4b1e      	ldr	r3, [pc, #120]	; (8004c34 <_free_r+0x194>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f047 0201 	orr.w	r2, r7, #1
 8004bc2:	429f      	cmp	r7, r3
 8004bc4:	6062      	str	r2, [r4, #4]
 8004bc6:	f8cc 4008 	str.w	r4, [ip, #8]
 8004bca:	d3b3      	bcc.n	8004b34 <_free_r+0x94>
 8004bcc:	4b1a      	ldr	r3, [pc, #104]	; (8004c38 <_free_r+0x198>)
 8004bce:	4630      	mov	r0, r6
 8004bd0:	6819      	ldr	r1, [r3, #0]
 8004bd2:	f7ff ff17 	bl	8004a04 <_malloc_trim_r>
 8004bd6:	e7ad      	b.n	8004b34 <_free_r+0x94>
 8004bd8:	2101      	movs	r1, #1
 8004bda:	e77e      	b.n	8004ada <_free_r+0x3a>
 8004bdc:	2a14      	cmp	r2, #20
 8004bde:	d80c      	bhi.n	8004bfa <_free_r+0x15a>
 8004be0:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 8004be4:	0041      	lsls	r1, r0, #1
 8004be6:	e791      	b.n	8004b0c <_free_r+0x6c>
 8004be8:	684b      	ldr	r3, [r1, #4]
 8004bea:	1080      	asrs	r0, r0, #2
 8004bec:	2501      	movs	r5, #1
 8004bee:	fa05 f000 	lsl.w	r0, r5, r0
 8004bf2:	4303      	orrs	r3, r0
 8004bf4:	604b      	str	r3, [r1, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	e798      	b.n	8004b2c <_free_r+0x8c>
 8004bfa:	2a54      	cmp	r2, #84	; 0x54
 8004bfc:	d803      	bhi.n	8004c06 <_free_r+0x166>
 8004bfe:	0b18      	lsrs	r0, r3, #12
 8004c00:	306e      	adds	r0, #110	; 0x6e
 8004c02:	0041      	lsls	r1, r0, #1
 8004c04:	e782      	b.n	8004b0c <_free_r+0x6c>
 8004c06:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004c0a:	d803      	bhi.n	8004c14 <_free_r+0x174>
 8004c0c:	0bd8      	lsrs	r0, r3, #15
 8004c0e:	3077      	adds	r0, #119	; 0x77
 8004c10:	0041      	lsls	r1, r0, #1
 8004c12:	e77b      	b.n	8004b0c <_free_r+0x6c>
 8004c14:	f240 5154 	movw	r1, #1364	; 0x554
 8004c18:	428a      	cmp	r2, r1
 8004c1a:	d803      	bhi.n	8004c24 <_free_r+0x184>
 8004c1c:	0c98      	lsrs	r0, r3, #18
 8004c1e:	307c      	adds	r0, #124	; 0x7c
 8004c20:	0041      	lsls	r1, r0, #1
 8004c22:	e773      	b.n	8004b0c <_free_r+0x6c>
 8004c24:	21fc      	movs	r1, #252	; 0xfc
 8004c26:	207e      	movs	r0, #126	; 0x7e
 8004c28:	e770      	b.n	8004b0c <_free_r+0x6c>
 8004c2a:	bf00      	nop
 8004c2c:	20000474 	.word	0x20000474
 8004c30:	2000047c 	.word	0x2000047c
 8004c34:	2000087c 	.word	0x2000087c
 8004c38:	200008c4 	.word	0x200008c4

08004c3c <memmove>:
memmove():
 8004c3c:	4288      	cmp	r0, r1
 8004c3e:	b4f0      	push	{r4, r5, r6, r7}
 8004c40:	d910      	bls.n	8004c64 <memmove+0x28>
 8004c42:	188c      	adds	r4, r1, r2
 8004c44:	42a0      	cmp	r0, r4
 8004c46:	d20d      	bcs.n	8004c64 <memmove+0x28>
 8004c48:	1885      	adds	r5, r0, r2
 8004c4a:	1e53      	subs	r3, r2, #1
 8004c4c:	b142      	cbz	r2, 8004c60 <memmove+0x24>
 8004c4e:	4621      	mov	r1, r4
 8004c50:	462a      	mov	r2, r5
 8004c52:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 8004c56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	1c5c      	adds	r4, r3, #1
 8004c5e:	d1f8      	bne.n	8004c52 <memmove+0x16>
 8004c60:	bcf0      	pop	{r4, r5, r6, r7}
 8004c62:	4770      	bx	lr
 8004c64:	2a0f      	cmp	r2, #15
 8004c66:	d93f      	bls.n	8004ce8 <memmove+0xac>
 8004c68:	ea40 0301 	orr.w	r3, r0, r1
 8004c6c:	079b      	lsls	r3, r3, #30
 8004c6e:	d13f      	bne.n	8004cf0 <memmove+0xb4>
 8004c70:	f1a2 0710 	sub.w	r7, r2, #16
 8004c74:	093f      	lsrs	r7, r7, #4
 8004c76:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 8004c7a:	3610      	adds	r6, #16
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	4603      	mov	r3, r0
 8004c80:	6825      	ldr	r5, [r4, #0]
 8004c82:	601d      	str	r5, [r3, #0]
 8004c84:	6865      	ldr	r5, [r4, #4]
 8004c86:	605d      	str	r5, [r3, #4]
 8004c88:	68a5      	ldr	r5, [r4, #8]
 8004c8a:	609d      	str	r5, [r3, #8]
 8004c8c:	68e5      	ldr	r5, [r4, #12]
 8004c8e:	60dd      	str	r5, [r3, #12]
 8004c90:	3310      	adds	r3, #16
 8004c92:	42b3      	cmp	r3, r6
 8004c94:	f104 0410 	add.w	r4, r4, #16
 8004c98:	d1f2      	bne.n	8004c80 <memmove+0x44>
 8004c9a:	1c7b      	adds	r3, r7, #1
 8004c9c:	f002 0c0f 	and.w	ip, r2, #15
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	f1bc 0f03 	cmp.w	ip, #3
 8004ca6:	4419      	add	r1, r3
 8004ca8:	4403      	add	r3, r0
 8004caa:	d923      	bls.n	8004cf4 <memmove+0xb8>
 8004cac:	460e      	mov	r6, r1
 8004cae:	461d      	mov	r5, r3
 8004cb0:	4664      	mov	r4, ip
 8004cb2:	3c04      	subs	r4, #4
 8004cb4:	f856 7b04 	ldr.w	r7, [r6], #4
 8004cb8:	f845 7b04 	str.w	r7, [r5], #4
 8004cbc:	2c03      	cmp	r4, #3
 8004cbe:	d8f8      	bhi.n	8004cb2 <memmove+0x76>
 8004cc0:	f1ac 0404 	sub.w	r4, ip, #4
 8004cc4:	f024 0403 	bic.w	r4, r4, #3
 8004cc8:	3404      	adds	r4, #4
 8004cca:	f002 0203 	and.w	r2, r2, #3
 8004cce:	4423      	add	r3, r4
 8004cd0:	4421      	add	r1, r4
 8004cd2:	2a00      	cmp	r2, #0
 8004cd4:	d0c4      	beq.n	8004c60 <memmove+0x24>
 8004cd6:	441a      	add	r2, r3
 8004cd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cdc:	f803 4b01 	strb.w	r4, [r3], #1
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d1f9      	bne.n	8004cd8 <memmove+0x9c>
 8004ce4:	bcf0      	pop	{r4, r5, r6, r7}
 8004ce6:	4770      	bx	lr
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2a00      	cmp	r2, #0
 8004cec:	d1f3      	bne.n	8004cd6 <memmove+0x9a>
 8004cee:	e7b7      	b.n	8004c60 <memmove+0x24>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	e7f0      	b.n	8004cd6 <memmove+0x9a>
 8004cf4:	4662      	mov	r2, ip
 8004cf6:	2a00      	cmp	r2, #0
 8004cf8:	d1ed      	bne.n	8004cd6 <memmove+0x9a>
 8004cfa:	e7b1      	b.n	8004c60 <memmove+0x24>

08004cfc <memset>:
memset():
 8004cfc:	b4f0      	push	{r4, r5, r6, r7}
 8004cfe:	0784      	lsls	r4, r0, #30
 8004d00:	d043      	beq.n	8004d8a <memset+0x8e>
 8004d02:	1e54      	subs	r4, r2, #1
 8004d04:	2a00      	cmp	r2, #0
 8004d06:	d03e      	beq.n	8004d86 <memset+0x8a>
 8004d08:	b2cd      	uxtb	r5, r1
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	e003      	b.n	8004d16 <memset+0x1a>
 8004d0e:	1e62      	subs	r2, r4, #1
 8004d10:	2c00      	cmp	r4, #0
 8004d12:	d038      	beq.n	8004d86 <memset+0x8a>
 8004d14:	4614      	mov	r4, r2
 8004d16:	f803 5b01 	strb.w	r5, [r3], #1
 8004d1a:	079a      	lsls	r2, r3, #30
 8004d1c:	d1f7      	bne.n	8004d0e <memset+0x12>
 8004d1e:	2c03      	cmp	r4, #3
 8004d20:	d92a      	bls.n	8004d78 <memset+0x7c>
 8004d22:	b2cd      	uxtb	r5, r1
 8004d24:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004d28:	2c0f      	cmp	r4, #15
 8004d2a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004d2e:	d915      	bls.n	8004d5c <memset+0x60>
 8004d30:	f1a4 0710 	sub.w	r7, r4, #16
 8004d34:	093f      	lsrs	r7, r7, #4
 8004d36:	f103 0610 	add.w	r6, r3, #16
 8004d3a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8004d3e:	461a      	mov	r2, r3
 8004d40:	6015      	str	r5, [r2, #0]
 8004d42:	6055      	str	r5, [r2, #4]
 8004d44:	6095      	str	r5, [r2, #8]
 8004d46:	60d5      	str	r5, [r2, #12]
 8004d48:	3210      	adds	r2, #16
 8004d4a:	42b2      	cmp	r2, r6
 8004d4c:	d1f8      	bne.n	8004d40 <memset+0x44>
 8004d4e:	f004 040f 	and.w	r4, r4, #15
 8004d52:	3701      	adds	r7, #1
 8004d54:	2c03      	cmp	r4, #3
 8004d56:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8004d5a:	d90d      	bls.n	8004d78 <memset+0x7c>
 8004d5c:	461e      	mov	r6, r3
 8004d5e:	4622      	mov	r2, r4
 8004d60:	3a04      	subs	r2, #4
 8004d62:	2a03      	cmp	r2, #3
 8004d64:	f846 5b04 	str.w	r5, [r6], #4
 8004d68:	d8fa      	bhi.n	8004d60 <memset+0x64>
 8004d6a:	1f22      	subs	r2, r4, #4
 8004d6c:	f022 0203 	bic.w	r2, r2, #3
 8004d70:	3204      	adds	r2, #4
 8004d72:	4413      	add	r3, r2
 8004d74:	f004 0403 	and.w	r4, r4, #3
 8004d78:	b12c      	cbz	r4, 8004d86 <memset+0x8a>
 8004d7a:	b2c9      	uxtb	r1, r1
 8004d7c:	441c      	add	r4, r3
 8004d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d82:	42a3      	cmp	r3, r4
 8004d84:	d1fb      	bne.n	8004d7e <memset+0x82>
 8004d86:	bcf0      	pop	{r4, r5, r6, r7}
 8004d88:	4770      	bx	lr
 8004d8a:	4614      	mov	r4, r2
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	e7c6      	b.n	8004d1e <memset+0x22>

08004d90 <_realloc_r>:
_realloc_r():
 8004d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d94:	460c      	mov	r4, r1
 8004d96:	b083      	sub	sp, #12
 8004d98:	4690      	mov	r8, r2
 8004d9a:	4681      	mov	r9, r0
 8004d9c:	2900      	cmp	r1, #0
 8004d9e:	f000 80e2 	beq.w	8004f66 <_realloc_r+0x1d6>
 8004da2:	f7ff fa07 	bl	80041b4 <__malloc_lock>
 8004da6:	f108 060b 	add.w	r6, r8, #11
 8004daa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004dae:	2e16      	cmp	r6, #22
 8004db0:	f023 0503 	bic.w	r5, r3, #3
 8004db4:	f1a4 0708 	sub.w	r7, r4, #8
 8004db8:	d84b      	bhi.n	8004e52 <_realloc_r+0xc2>
 8004dba:	2110      	movs	r1, #16
 8004dbc:	460e      	mov	r6, r1
 8004dbe:	45b0      	cmp	r8, r6
 8004dc0:	d84c      	bhi.n	8004e5c <_realloc_r+0xcc>
 8004dc2:	428d      	cmp	r5, r1
 8004dc4:	da78      	bge.n	8004eb8 <_realloc_r+0x128>
 8004dc6:	f8df b390 	ldr.w	fp, [pc, #912]	; 8005158 <_realloc_r+0x3c8>
 8004dca:	f8db e008 	ldr.w	lr, [fp, #8]
 8004dce:	1978      	adds	r0, r7, r5
 8004dd0:	4586      	cmp	lr, r0
 8004dd2:	f000 80ce 	beq.w	8004f72 <_realloc_r+0x1e2>
 8004dd6:	6842      	ldr	r2, [r0, #4]
 8004dd8:	f022 0c01 	bic.w	ip, r2, #1
 8004ddc:	4484      	add	ip, r0
 8004dde:	f8dc c004 	ldr.w	ip, [ip, #4]
 8004de2:	f01c 0f01 	tst.w	ip, #1
 8004de6:	d07a      	beq.n	8004ede <_realloc_r+0x14e>
 8004de8:	2200      	movs	r2, #0
 8004dea:	4610      	mov	r0, r2
 8004dec:	07db      	lsls	r3, r3, #31
 8004dee:	f100 8092 	bmi.w	8004f16 <_realloc_r+0x186>
 8004df2:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8004df6:	ebc3 0a07 	rsb	sl, r3, r7
 8004dfa:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004dfe:	f023 0303 	bic.w	r3, r3, #3
 8004e02:	442b      	add	r3, r5
 8004e04:	b388      	cbz	r0, 8004e6a <_realloc_r+0xda>
 8004e06:	4570      	cmp	r0, lr
 8004e08:	f000 80ed 	beq.w	8004fe6 <_realloc_r+0x256>
 8004e0c:	eb02 0e03 	add.w	lr, r2, r3
 8004e10:	458e      	cmp	lr, r1
 8004e12:	db2a      	blt.n	8004e6a <_realloc_r+0xda>
 8004e14:	68c3      	ldr	r3, [r0, #12]
 8004e16:	6882      	ldr	r2, [r0, #8]
 8004e18:	4657      	mov	r7, sl
 8004e1a:	60d3      	str	r3, [r2, #12]
 8004e1c:	609a      	str	r2, [r3, #8]
 8004e1e:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8004e22:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004e26:	60cb      	str	r3, [r1, #12]
 8004e28:	1f2a      	subs	r2, r5, #4
 8004e2a:	2a24      	cmp	r2, #36	; 0x24
 8004e2c:	6099      	str	r1, [r3, #8]
 8004e2e:	f200 8126 	bhi.w	800507e <_realloc_r+0x2ee>
 8004e32:	2a13      	cmp	r2, #19
 8004e34:	f240 80b3 	bls.w	8004f9e <_realloc_r+0x20e>
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	f8ca 3008 	str.w	r3, [sl, #8]
 8004e3e:	6863      	ldr	r3, [r4, #4]
 8004e40:	f8ca 300c 	str.w	r3, [sl, #12]
 8004e44:	2a1b      	cmp	r2, #27
 8004e46:	f200 8130 	bhi.w	80050aa <_realloc_r+0x31a>
 8004e4a:	3408      	adds	r4, #8
 8004e4c:	f10a 0310 	add.w	r3, sl, #16
 8004e50:	e0a6      	b.n	8004fa0 <_realloc_r+0x210>
 8004e52:	f026 0607 	bic.w	r6, r6, #7
 8004e56:	2e00      	cmp	r6, #0
 8004e58:	4631      	mov	r1, r6
 8004e5a:	dab0      	bge.n	8004dbe <_realloc_r+0x2e>
 8004e5c:	230c      	movs	r3, #12
 8004e5e:	2000      	movs	r0, #0
 8004e60:	f8c9 3000 	str.w	r3, [r9]
 8004e64:	b003      	add	sp, #12
 8004e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6a:	428b      	cmp	r3, r1
 8004e6c:	db53      	blt.n	8004f16 <_realloc_r+0x186>
 8004e6e:	4657      	mov	r7, sl
 8004e70:	f8da 100c 	ldr.w	r1, [sl, #12]
 8004e74:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8004e78:	1f2a      	subs	r2, r5, #4
 8004e7a:	2a24      	cmp	r2, #36	; 0x24
 8004e7c:	60c1      	str	r1, [r0, #12]
 8004e7e:	6088      	str	r0, [r1, #8]
 8004e80:	f200 8109 	bhi.w	8005096 <_realloc_r+0x306>
 8004e84:	2a13      	cmp	r2, #19
 8004e86:	f240 8104 	bls.w	8005092 <_realloc_r+0x302>
 8004e8a:	6821      	ldr	r1, [r4, #0]
 8004e8c:	f8ca 1008 	str.w	r1, [sl, #8]
 8004e90:	6861      	ldr	r1, [r4, #4]
 8004e92:	f8ca 100c 	str.w	r1, [sl, #12]
 8004e96:	2a1b      	cmp	r2, #27
 8004e98:	f200 811c 	bhi.w	80050d4 <_realloc_r+0x344>
 8004e9c:	3408      	adds	r4, #8
 8004e9e:	f10a 0210 	add.w	r2, sl, #16
 8004ea2:	6821      	ldr	r1, [r4, #0]
 8004ea4:	6011      	str	r1, [r2, #0]
 8004ea6:	6861      	ldr	r1, [r4, #4]
 8004ea8:	6051      	str	r1, [r2, #4]
 8004eaa:	68a1      	ldr	r1, [r4, #8]
 8004eac:	6091      	str	r1, [r2, #8]
 8004eae:	461d      	mov	r5, r3
 8004eb0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004eb4:	463c      	mov	r4, r7
 8004eb6:	4657      	mov	r7, sl
 8004eb8:	1baa      	subs	r2, r5, r6
 8004eba:	2a0f      	cmp	r2, #15
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	d819      	bhi.n	8004ef6 <_realloc_r+0x166>
 8004ec2:	432b      	orrs	r3, r5
 8004ec4:	443d      	add	r5, r7
 8004ec6:	607b      	str	r3, [r7, #4]
 8004ec8:	686b      	ldr	r3, [r5, #4]
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	606b      	str	r3, [r5, #4]
 8004ed0:	4648      	mov	r0, r9
 8004ed2:	f7ff f971 	bl	80041b8 <__malloc_unlock>
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	b003      	add	sp, #12
 8004eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ede:	f022 0203 	bic.w	r2, r2, #3
 8004ee2:	eb02 0c05 	add.w	ip, r2, r5
 8004ee6:	458c      	cmp	ip, r1
 8004ee8:	db80      	blt.n	8004dec <_realloc_r+0x5c>
 8004eea:	68c2      	ldr	r2, [r0, #12]
 8004eec:	6881      	ldr	r1, [r0, #8]
 8004eee:	4665      	mov	r5, ip
 8004ef0:	60ca      	str	r2, [r1, #12]
 8004ef2:	6091      	str	r1, [r2, #8]
 8004ef4:	e7e0      	b.n	8004eb8 <_realloc_r+0x128>
 8004ef6:	19b9      	adds	r1, r7, r6
 8004ef8:	f042 0001 	orr.w	r0, r2, #1
 8004efc:	431e      	orrs	r6, r3
 8004efe:	440a      	add	r2, r1
 8004f00:	607e      	str	r6, [r7, #4]
 8004f02:	6048      	str	r0, [r1, #4]
 8004f04:	6853      	ldr	r3, [r2, #4]
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	3108      	adds	r1, #8
 8004f0c:	6053      	str	r3, [r2, #4]
 8004f0e:	4648      	mov	r0, r9
 8004f10:	f7ff fdc6 	bl	8004aa0 <_free_r>
 8004f14:	e7dc      	b.n	8004ed0 <_realloc_r+0x140>
 8004f16:	4641      	mov	r1, r8
 8004f18:	4648      	mov	r0, r9
 8004f1a:	f7fe fdcd 	bl	8003ab8 <_malloc_r>
 8004f1e:	4680      	mov	r8, r0
 8004f20:	b1d0      	cbz	r0, 8004f58 <_realloc_r+0x1c8>
 8004f22:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004f26:	f023 0201 	bic.w	r2, r3, #1
 8004f2a:	443a      	add	r2, r7
 8004f2c:	f1a0 0108 	sub.w	r1, r0, #8
 8004f30:	4291      	cmp	r1, r2
 8004f32:	f000 809e 	beq.w	8005072 <_realloc_r+0x2e2>
 8004f36:	1f2a      	subs	r2, r5, #4
 8004f38:	2a24      	cmp	r2, #36	; 0x24
 8004f3a:	d850      	bhi.n	8004fde <_realloc_r+0x24e>
 8004f3c:	2a13      	cmp	r2, #19
 8004f3e:	d823      	bhi.n	8004f88 <_realloc_r+0x1f8>
 8004f40:	4603      	mov	r3, r0
 8004f42:	4622      	mov	r2, r4
 8004f44:	6811      	ldr	r1, [r2, #0]
 8004f46:	6019      	str	r1, [r3, #0]
 8004f48:	6851      	ldr	r1, [r2, #4]
 8004f4a:	6059      	str	r1, [r3, #4]
 8004f4c:	6892      	ldr	r2, [r2, #8]
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	4621      	mov	r1, r4
 8004f52:	4648      	mov	r0, r9
 8004f54:	f7ff fda4 	bl	8004aa0 <_free_r>
 8004f58:	4648      	mov	r0, r9
 8004f5a:	f7ff f92d 	bl	80041b8 <__malloc_unlock>
 8004f5e:	4640      	mov	r0, r8
 8004f60:	b003      	add	sp, #12
 8004f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f66:	4611      	mov	r1, r2
 8004f68:	b003      	add	sp, #12
 8004f6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f6e:	f7fe bda3 	b.w	8003ab8 <_malloc_r>
 8004f72:	f8de 2004 	ldr.w	r2, [lr, #4]
 8004f76:	f022 0203 	bic.w	r2, r2, #3
 8004f7a:	1950      	adds	r0, r2, r5
 8004f7c:	f106 0c10 	add.w	ip, r6, #16
 8004f80:	4560      	cmp	r0, ip
 8004f82:	da19      	bge.n	8004fb8 <_realloc_r+0x228>
 8004f84:	4670      	mov	r0, lr
 8004f86:	e731      	b.n	8004dec <_realloc_r+0x5c>
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	6003      	str	r3, [r0, #0]
 8004f8c:	6863      	ldr	r3, [r4, #4]
 8004f8e:	6043      	str	r3, [r0, #4]
 8004f90:	2a1b      	cmp	r2, #27
 8004f92:	d863      	bhi.n	800505c <_realloc_r+0x2cc>
 8004f94:	f100 0308 	add.w	r3, r0, #8
 8004f98:	f104 0208 	add.w	r2, r4, #8
 8004f9c:	e7d2      	b.n	8004f44 <_realloc_r+0x1b4>
 8004f9e:	463b      	mov	r3, r7
 8004fa0:	6822      	ldr	r2, [r4, #0]
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	6862      	ldr	r2, [r4, #4]
 8004fa6:	605a      	str	r2, [r3, #4]
 8004fa8:	68a2      	ldr	r2, [r4, #8]
 8004faa:	609a      	str	r2, [r3, #8]
 8004fac:	463c      	mov	r4, r7
 8004fae:	4675      	mov	r5, lr
 8004fb0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004fb4:	4657      	mov	r7, sl
 8004fb6:	e77f      	b.n	8004eb8 <_realloc_r+0x128>
 8004fb8:	4437      	add	r7, r6
 8004fba:	1b83      	subs	r3, r0, r6
 8004fbc:	f043 0301 	orr.w	r3, r3, #1
 8004fc0:	f8cb 7008 	str.w	r7, [fp, #8]
 8004fc4:	607b      	str	r3, [r7, #4]
 8004fc6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	431e      	orrs	r6, r3
 8004fd0:	4648      	mov	r0, r9
 8004fd2:	f844 6c04 	str.w	r6, [r4, #-4]
 8004fd6:	f7ff f8ef 	bl	80041b8 <__malloc_unlock>
 8004fda:	4620      	mov	r0, r4
 8004fdc:	e77c      	b.n	8004ed8 <_realloc_r+0x148>
 8004fde:	4621      	mov	r1, r4
 8004fe0:	f7ff fe2c 	bl	8004c3c <memmove>
 8004fe4:	e7b4      	b.n	8004f50 <_realloc_r+0x1c0>
 8004fe6:	eb02 0c03 	add.w	ip, r2, r3
 8004fea:	f106 0210 	add.w	r2, r6, #16
 8004fee:	4594      	cmp	ip, r2
 8004ff0:	f6ff af3b 	blt.w	8004e6a <_realloc_r+0xda>
 8004ff4:	4657      	mov	r7, sl
 8004ff6:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004ffa:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8004ffe:	1f2a      	subs	r2, r5, #4
 8005000:	2a24      	cmp	r2, #36	; 0x24
 8005002:	60cb      	str	r3, [r1, #12]
 8005004:	6099      	str	r1, [r3, #8]
 8005006:	f200 8087 	bhi.w	8005118 <_realloc_r+0x388>
 800500a:	2a13      	cmp	r2, #19
 800500c:	d978      	bls.n	8005100 <_realloc_r+0x370>
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	f8ca 3008 	str.w	r3, [sl, #8]
 8005014:	6863      	ldr	r3, [r4, #4]
 8005016:	f8ca 300c 	str.w	r3, [sl, #12]
 800501a:	2a1b      	cmp	r2, #27
 800501c:	f200 8085 	bhi.w	800512a <_realloc_r+0x39a>
 8005020:	3408      	adds	r4, #8
 8005022:	f10a 0310 	add.w	r3, sl, #16
 8005026:	6822      	ldr	r2, [r4, #0]
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	6862      	ldr	r2, [r4, #4]
 800502c:	605a      	str	r2, [r3, #4]
 800502e:	68a2      	ldr	r2, [r4, #8]
 8005030:	609a      	str	r2, [r3, #8]
 8005032:	eb0a 0306 	add.w	r3, sl, r6
 8005036:	ebc6 020c 	rsb	r2, r6, ip
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	f8cb 3008 	str.w	r3, [fp, #8]
 8005042:	605a      	str	r2, [r3, #4]
 8005044:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	431e      	orrs	r6, r3
 800504e:	4648      	mov	r0, r9
 8005050:	f8ca 6004 	str.w	r6, [sl, #4]
 8005054:	f7ff f8b0 	bl	80041b8 <__malloc_unlock>
 8005058:	4638      	mov	r0, r7
 800505a:	e73d      	b.n	8004ed8 <_realloc_r+0x148>
 800505c:	68a3      	ldr	r3, [r4, #8]
 800505e:	6083      	str	r3, [r0, #8]
 8005060:	68e3      	ldr	r3, [r4, #12]
 8005062:	60c3      	str	r3, [r0, #12]
 8005064:	2a24      	cmp	r2, #36	; 0x24
 8005066:	d02c      	beq.n	80050c2 <_realloc_r+0x332>
 8005068:	f100 0310 	add.w	r3, r0, #16
 800506c:	f104 0210 	add.w	r2, r4, #16
 8005070:	e768      	b.n	8004f44 <_realloc_r+0x1b4>
 8005072:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8005076:	f022 0203 	bic.w	r2, r2, #3
 800507a:	4415      	add	r5, r2
 800507c:	e71c      	b.n	8004eb8 <_realloc_r+0x128>
 800507e:	4621      	mov	r1, r4
 8005080:	4638      	mov	r0, r7
 8005082:	4675      	mov	r5, lr
 8005084:	463c      	mov	r4, r7
 8005086:	f7ff fdd9 	bl	8004c3c <memmove>
 800508a:	4657      	mov	r7, sl
 800508c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005090:	e712      	b.n	8004eb8 <_realloc_r+0x128>
 8005092:	463a      	mov	r2, r7
 8005094:	e705      	b.n	8004ea2 <_realloc_r+0x112>
 8005096:	4621      	mov	r1, r4
 8005098:	4638      	mov	r0, r7
 800509a:	461d      	mov	r5, r3
 800509c:	463c      	mov	r4, r7
 800509e:	f7ff fdcd 	bl	8004c3c <memmove>
 80050a2:	4657      	mov	r7, sl
 80050a4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80050a8:	e706      	b.n	8004eb8 <_realloc_r+0x128>
 80050aa:	68a3      	ldr	r3, [r4, #8]
 80050ac:	f8ca 3010 	str.w	r3, [sl, #16]
 80050b0:	68e3      	ldr	r3, [r4, #12]
 80050b2:	f8ca 3014 	str.w	r3, [sl, #20]
 80050b6:	2a24      	cmp	r2, #36	; 0x24
 80050b8:	d018      	beq.n	80050ec <_realloc_r+0x35c>
 80050ba:	3410      	adds	r4, #16
 80050bc:	f10a 0318 	add.w	r3, sl, #24
 80050c0:	e76e      	b.n	8004fa0 <_realloc_r+0x210>
 80050c2:	6923      	ldr	r3, [r4, #16]
 80050c4:	6103      	str	r3, [r0, #16]
 80050c6:	6963      	ldr	r3, [r4, #20]
 80050c8:	6143      	str	r3, [r0, #20]
 80050ca:	f104 0218 	add.w	r2, r4, #24
 80050ce:	f100 0318 	add.w	r3, r0, #24
 80050d2:	e737      	b.n	8004f44 <_realloc_r+0x1b4>
 80050d4:	68a1      	ldr	r1, [r4, #8]
 80050d6:	f8ca 1010 	str.w	r1, [sl, #16]
 80050da:	68e1      	ldr	r1, [r4, #12]
 80050dc:	f8ca 1014 	str.w	r1, [sl, #20]
 80050e0:	2a24      	cmp	r2, #36	; 0x24
 80050e2:	d00f      	beq.n	8005104 <_realloc_r+0x374>
 80050e4:	3410      	adds	r4, #16
 80050e6:	f10a 0218 	add.w	r2, sl, #24
 80050ea:	e6da      	b.n	8004ea2 <_realloc_r+0x112>
 80050ec:	6923      	ldr	r3, [r4, #16]
 80050ee:	f8ca 3018 	str.w	r3, [sl, #24]
 80050f2:	6963      	ldr	r3, [r4, #20]
 80050f4:	f8ca 301c 	str.w	r3, [sl, #28]
 80050f8:	3418      	adds	r4, #24
 80050fa:	f10a 0320 	add.w	r3, sl, #32
 80050fe:	e74f      	b.n	8004fa0 <_realloc_r+0x210>
 8005100:	463b      	mov	r3, r7
 8005102:	e790      	b.n	8005026 <_realloc_r+0x296>
 8005104:	6922      	ldr	r2, [r4, #16]
 8005106:	f8ca 2018 	str.w	r2, [sl, #24]
 800510a:	6962      	ldr	r2, [r4, #20]
 800510c:	f8ca 201c 	str.w	r2, [sl, #28]
 8005110:	3418      	adds	r4, #24
 8005112:	f10a 0220 	add.w	r2, sl, #32
 8005116:	e6c4      	b.n	8004ea2 <_realloc_r+0x112>
 8005118:	4621      	mov	r1, r4
 800511a:	4638      	mov	r0, r7
 800511c:	f8cd c004 	str.w	ip, [sp, #4]
 8005120:	f7ff fd8c 	bl	8004c3c <memmove>
 8005124:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005128:	e783      	b.n	8005032 <_realloc_r+0x2a2>
 800512a:	68a3      	ldr	r3, [r4, #8]
 800512c:	f8ca 3010 	str.w	r3, [sl, #16]
 8005130:	68e3      	ldr	r3, [r4, #12]
 8005132:	f8ca 3014 	str.w	r3, [sl, #20]
 8005136:	2a24      	cmp	r2, #36	; 0x24
 8005138:	d003      	beq.n	8005142 <_realloc_r+0x3b2>
 800513a:	3410      	adds	r4, #16
 800513c:	f10a 0318 	add.w	r3, sl, #24
 8005140:	e771      	b.n	8005026 <_realloc_r+0x296>
 8005142:	6923      	ldr	r3, [r4, #16]
 8005144:	f8ca 3018 	str.w	r3, [sl, #24]
 8005148:	6963      	ldr	r3, [r4, #20]
 800514a:	f8ca 301c 	str.w	r3, [sl, #28]
 800514e:	3418      	adds	r4, #24
 8005150:	f10a 0320 	add.w	r3, sl, #32
 8005154:	e767      	b.n	8005026 <_realloc_r+0x296>
 8005156:	bf00      	nop
 8005158:	20000474 	.word	0x20000474

0800515c <__gedf2>:
__gtdf2():
 800515c:	f04f 3cff 	mov.w	ip, #4294967295
 8005160:	e006      	b.n	8005170 <__cmpdf2+0x4>
 8005162:	bf00      	nop

08005164 <__ledf2>:
 8005164:	f04f 0c01 	mov.w	ip, #1
 8005168:	e002      	b.n	8005170 <__cmpdf2+0x4>
 800516a:	bf00      	nop

0800516c <__cmpdf2>:
 800516c:	f04f 0c01 	mov.w	ip, #1
 8005170:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005174:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005178:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800517c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005180:	bf18      	it	ne
 8005182:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8005186:	d01b      	beq.n	80051c0 <__cmpdf2+0x54>
 8005188:	b001      	add	sp, #4
 800518a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800518e:	bf0c      	ite	eq
 8005190:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005194:	ea91 0f03 	teqne	r1, r3
 8005198:	bf02      	ittt	eq
 800519a:	ea90 0f02 	teqeq	r0, r2
 800519e:	2000      	moveq	r0, #0
 80051a0:	4770      	bxeq	lr
 80051a2:	f110 0f00 	cmn.w	r0, #0
 80051a6:	ea91 0f03 	teq	r1, r3
 80051aa:	bf58      	it	pl
 80051ac:	4299      	cmppl	r1, r3
 80051ae:	bf08      	it	eq
 80051b0:	4290      	cmpeq	r0, r2
 80051b2:	bf2c      	ite	cs
 80051b4:	17d8      	asrcs	r0, r3, #31
 80051b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80051ba:	f040 0001 	orr.w	r0, r0, #1
 80051be:	4770      	bx	lr
 80051c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80051c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80051c8:	d102      	bne.n	80051d0 <__cmpdf2+0x64>
 80051ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80051ce:	d107      	bne.n	80051e0 <__cmpdf2+0x74>
 80051d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80051d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80051d8:	d1d6      	bne.n	8005188 <__cmpdf2+0x1c>
 80051da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80051de:	d0d3      	beq.n	8005188 <__cmpdf2+0x1c>
 80051e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80051e4:	4770      	bx	lr
__cmpdf2():
 80051e6:	bf00      	nop

080051e8 <__aeabi_cdrcmple>:
__aeabi_cdrcmple():
 80051e8:	4684      	mov	ip, r0
 80051ea:	4610      	mov	r0, r2
 80051ec:	4662      	mov	r2, ip
 80051ee:	468c      	mov	ip, r1
 80051f0:	4619      	mov	r1, r3
 80051f2:	4663      	mov	r3, ip
 80051f4:	e000      	b.n	80051f8 <__aeabi_cdcmpeq>
 80051f6:	bf00      	nop

080051f8 <__aeabi_cdcmpeq>:
 80051f8:	b501      	push	{r0, lr}
 80051fa:	f7ff ffb7 	bl	800516c <__cmpdf2>
 80051fe:	2800      	cmp	r0, #0
 8005200:	bf48      	it	mi
 8005202:	f110 0f00 	cmnmi.w	r0, #0
 8005206:	bd01      	pop	{r0, pc}

08005208 <__aeabi_dcmpeq>:
__aeabi_dcmpeq():
 8005208:	f84d ed08 	str.w	lr, [sp, #-8]!
 800520c:	f7ff fff4 	bl	80051f8 <__aeabi_cdcmpeq>
 8005210:	bf0c      	ite	eq
 8005212:	2001      	moveq	r0, #1
 8005214:	2000      	movne	r0, #0
 8005216:	f85d fb08 	ldr.w	pc, [sp], #8
 800521a:	bf00      	nop

0800521c <__aeabi_dcmplt>:
__aeabi_dcmplt():
 800521c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005220:	f7ff ffea 	bl	80051f8 <__aeabi_cdcmpeq>
 8005224:	bf34      	ite	cc
 8005226:	2001      	movcc	r0, #1
 8005228:	2000      	movcs	r0, #0
 800522a:	f85d fb08 	ldr.w	pc, [sp], #8
 800522e:	bf00      	nop

08005230 <__aeabi_dcmple>:
__aeabi_dcmple():
 8005230:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005234:	f7ff ffe0 	bl	80051f8 <__aeabi_cdcmpeq>
 8005238:	bf94      	ite	ls
 800523a:	2001      	movls	r0, #1
 800523c:	2000      	movhi	r0, #0
 800523e:	f85d fb08 	ldr.w	pc, [sp], #8
 8005242:	bf00      	nop

08005244 <__aeabi_dcmpge>:
__aeabi_dcmpge():
 8005244:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005248:	f7ff ffce 	bl	80051e8 <__aeabi_cdrcmple>
 800524c:	bf94      	ite	ls
 800524e:	2001      	movls	r0, #1
 8005250:	2000      	movhi	r0, #0
 8005252:	f85d fb08 	ldr.w	pc, [sp], #8
 8005256:	bf00      	nop

08005258 <__aeabi_dcmpgt>:
__aeabi_dcmpgt():
 8005258:	f84d ed08 	str.w	lr, [sp, #-8]!
 800525c:	f7ff ffc4 	bl	80051e8 <__aeabi_cdrcmple>
 8005260:	bf34      	ite	cc
 8005262:	2001      	movcc	r0, #1
 8005264:	2000      	movcs	r0, #0
 8005266:	f85d fb08 	ldr.w	pc, [sp], #8
 800526a:	bf00      	nop

0800526c <__aeabi_d2iz>:
__fixdfsi():
 800526c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005270:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005274:	d215      	bcs.n	80052a2 <__aeabi_d2iz+0x36>
 8005276:	d511      	bpl.n	800529c <__aeabi_d2iz+0x30>
 8005278:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800527c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005280:	d912      	bls.n	80052a8 <__aeabi_d2iz+0x3c>
 8005282:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005286:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800528a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800528e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005292:	fa23 f002 	lsr.w	r0, r3, r2
 8005296:	bf18      	it	ne
 8005298:	4240      	negne	r0, r0
 800529a:	4770      	bx	lr
 800529c:	f04f 0000 	mov.w	r0, #0
 80052a0:	4770      	bx	lr
 80052a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80052a6:	d105      	bne.n	80052b4 <__aeabi_d2iz+0x48>
 80052a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80052ac:	bf08      	it	eq
 80052ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80052b2:	4770      	bx	lr
 80052b4:	f04f 0000 	mov.w	r0, #0
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop

080052bc <__aeabi_uldivmod>:
$t():
 80052bc:	b94b      	cbnz	r3, 80052d2 <__aeabi_uldivmod+0x16>
 80052be:	b942      	cbnz	r2, 80052d2 <__aeabi_uldivmod+0x16>
 80052c0:	2900      	cmp	r1, #0
 80052c2:	bf08      	it	eq
 80052c4:	2800      	cmpeq	r0, #0
 80052c6:	d002      	beq.n	80052ce <__aeabi_uldivmod+0x12>
 80052c8:	f04f 31ff 	mov.w	r1, #4294967295
 80052cc:	4608      	mov	r0, r1
 80052ce:	f000 b83b 	b.w	8005348 <__aeabi_idiv0>
 80052d2:	b082      	sub	sp, #8
 80052d4:	46ec      	mov	ip, sp
 80052d6:	e92d 5000 	stmdb	sp!, {ip, lr}
 80052da:	f000 f81d 	bl	8005318 <__gnu_uldivmod_helper>
 80052de:	f8dd e004 	ldr.w	lr, [sp, #4]
 80052e2:	b002      	add	sp, #8
 80052e4:	bc0c      	pop	{r2, r3}
 80052e6:	4770      	bx	lr

080052e8 <__gnu_ldivmod_helper>:
__gnu_ldivmod_helper():
 80052e8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80052ec:	9e06      	ldr	r6, [sp, #24]
 80052ee:	4614      	mov	r4, r2
 80052f0:	461d      	mov	r5, r3
 80052f2:	4680      	mov	r8, r0
 80052f4:	4689      	mov	r9, r1
 80052f6:	f000 f829 	bl	800534c <__divdi3>
 80052fa:	fb04 f301 	mul.w	r3, r4, r1
 80052fe:	fb00 3305 	mla	r3, r0, r5, r3
 8005302:	fba4 4500 	umull	r4, r5, r4, r0
 8005306:	441d      	add	r5, r3
 8005308:	ebb8 0404 	subs.w	r4, r8, r4
 800530c:	eb69 0505 	sbc.w	r5, r9, r5
 8005310:	e9c6 4500 	strd	r4, r5, [r6]
 8005314:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08005318 <__gnu_uldivmod_helper>:
__gnu_uldivmod_helper():
 8005318:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800531c:	9e06      	ldr	r6, [sp, #24]
 800531e:	4614      	mov	r4, r2
 8005320:	4680      	mov	r8, r0
 8005322:	4689      	mov	r9, r1
 8005324:	461d      	mov	r5, r3
 8005326:	f000 f95d 	bl	80055e4 <__udivdi3>
 800532a:	fb00 f505 	mul.w	r5, r0, r5
 800532e:	fb04 5301 	mla	r3, r4, r1, r5
 8005332:	fba0 4504 	umull	r4, r5, r0, r4
 8005336:	441d      	add	r5, r3
 8005338:	ebb8 0404 	subs.w	r4, r8, r4
 800533c:	eb69 0505 	sbc.w	r5, r9, r5
 8005340:	e9c6 4500 	strd	r4, r5, [r6]
 8005344:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08005348 <__aeabi_idiv0>:
__aeabi_ldiv0():
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop

0800534c <__divdi3>:
__divdi3():
 800534c:	2900      	cmp	r1, #0
 800534e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005352:	f2c0 809f 	blt.w	8005494 <__divdi3+0x148>
 8005356:	2400      	movs	r4, #0
 8005358:	2b00      	cmp	r3, #0
 800535a:	f2c0 8096 	blt.w	800548a <__divdi3+0x13e>
 800535e:	4615      	mov	r5, r2
 8005360:	4606      	mov	r6, r0
 8005362:	460f      	mov	r7, r1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d13e      	bne.n	80053e6 <__divdi3+0x9a>
 8005368:	428a      	cmp	r2, r1
 800536a:	d957      	bls.n	800541c <__divdi3+0xd0>
 800536c:	fab2 f382 	clz	r3, r2
 8005370:	b14b      	cbz	r3, 8005386 <__divdi3+0x3a>
 8005372:	f1c3 0220 	rsb	r2, r3, #32
 8005376:	fa01 f703 	lsl.w	r7, r1, r3
 800537a:	fa20 f202 	lsr.w	r2, r0, r2
 800537e:	409d      	lsls	r5, r3
 8005380:	4317      	orrs	r7, r2
 8005382:	fa00 f603 	lsl.w	r6, r0, r3
 8005386:	0c29      	lsrs	r1, r5, #16
 8005388:	fbb7 f2f1 	udiv	r2, r7, r1
 800538c:	0c33      	lsrs	r3, r6, #16
 800538e:	fb01 7c12 	mls	ip, r1, r2, r7
 8005392:	b2a8      	uxth	r0, r5
 8005394:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
 8005398:	fb00 f302 	mul.w	r3, r0, r2
 800539c:	42bb      	cmp	r3, r7
 800539e:	d909      	bls.n	80053b4 <__divdi3+0x68>
 80053a0:	197f      	adds	r7, r7, r5
 80053a2:	f102 3cff 	add.w	ip, r2, #4294967295
 80053a6:	f080 8101 	bcs.w	80055ac <__divdi3+0x260>
 80053aa:	42bb      	cmp	r3, r7
 80053ac:	f240 80fe 	bls.w	80055ac <__divdi3+0x260>
 80053b0:	3a02      	subs	r2, #2
 80053b2:	442f      	add	r7, r5
 80053b4:	1aff      	subs	r7, r7, r3
 80053b6:	fbb7 f3f1 	udiv	r3, r7, r1
 80053ba:	b2b6      	uxth	r6, r6
 80053bc:	fb01 7113 	mls	r1, r1, r3, r7
 80053c0:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 80053c4:	fb00 f003 	mul.w	r0, r0, r3
 80053c8:	4288      	cmp	r0, r1
 80053ca:	d908      	bls.n	80053de <__divdi3+0x92>
 80053cc:	1949      	adds	r1, r1, r5
 80053ce:	f103 37ff 	add.w	r7, r3, #4294967295
 80053d2:	f080 80ed 	bcs.w	80055b0 <__divdi3+0x264>
 80053d6:	4288      	cmp	r0, r1
 80053d8:	f240 80ea 	bls.w	80055b0 <__divdi3+0x264>
 80053dc:	3b02      	subs	r3, #2
 80053de:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80053e2:	2300      	movs	r3, #0
 80053e4:	e003      	b.n	80053ee <__divdi3+0xa2>
 80053e6:	428b      	cmp	r3, r1
 80053e8:	d90a      	bls.n	8005400 <__divdi3+0xb4>
 80053ea:	2300      	movs	r3, #0
 80053ec:	461a      	mov	r2, r3
 80053ee:	4610      	mov	r0, r2
 80053f0:	4619      	mov	r1, r3
 80053f2:	b114      	cbz	r4, 80053fa <__divdi3+0xae>
 80053f4:	4240      	negs	r0, r0
 80053f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80053fa:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053fe:	4770      	bx	lr
 8005400:	fab3 f883 	clz	r8, r3
 8005404:	f1b8 0f00 	cmp.w	r8, #0
 8005408:	f040 8084 	bne.w	8005514 <__divdi3+0x1c8>
 800540c:	428b      	cmp	r3, r1
 800540e:	d302      	bcc.n	8005416 <__divdi3+0xca>
 8005410:	4282      	cmp	r2, r0
 8005412:	f200 80de 	bhi.w	80055d2 <__divdi3+0x286>
 8005416:	2300      	movs	r3, #0
 8005418:	2201      	movs	r2, #1
 800541a:	e7e8      	b.n	80053ee <__divdi3+0xa2>
 800541c:	b912      	cbnz	r2, 8005424 <__divdi3+0xd8>
 800541e:	2301      	movs	r3, #1
 8005420:	fbb3 f5f2 	udiv	r5, r3, r2
 8005424:	fab5 f285 	clz	r2, r5
 8005428:	2a00      	cmp	r2, #0
 800542a:	d139      	bne.n	80054a0 <__divdi3+0x154>
 800542c:	1b7f      	subs	r7, r7, r5
 800542e:	0c28      	lsrs	r0, r5, #16
 8005430:	fa1f fc85 	uxth.w	ip, r5
 8005434:	2301      	movs	r3, #1
 8005436:	fbb7 f1f0 	udiv	r1, r7, r0
 800543a:	0c32      	lsrs	r2, r6, #16
 800543c:	fb00 7711 	mls	r7, r0, r1, r7
 8005440:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8005444:	fb0c f201 	mul.w	r2, ip, r1
 8005448:	42ba      	cmp	r2, r7
 800544a:	d907      	bls.n	800545c <__divdi3+0x110>
 800544c:	197f      	adds	r7, r7, r5
 800544e:	f101 38ff 	add.w	r8, r1, #4294967295
 8005452:	d202      	bcs.n	800545a <__divdi3+0x10e>
 8005454:	42ba      	cmp	r2, r7
 8005456:	f200 80c1 	bhi.w	80055dc <__divdi3+0x290>
 800545a:	4641      	mov	r1, r8
 800545c:	1abf      	subs	r7, r7, r2
 800545e:	fbb7 f2f0 	udiv	r2, r7, r0
 8005462:	b2b6      	uxth	r6, r6
 8005464:	fb00 7012 	mls	r0, r0, r2, r7
 8005468:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
 800546c:	fb0c fc02 	mul.w	ip, ip, r2
 8005470:	4584      	cmp	ip, r0
 8005472:	d907      	bls.n	8005484 <__divdi3+0x138>
 8005474:	1940      	adds	r0, r0, r5
 8005476:	f102 37ff 	add.w	r7, r2, #4294967295
 800547a:	d202      	bcs.n	8005482 <__divdi3+0x136>
 800547c:	4584      	cmp	ip, r0
 800547e:	f200 80ab 	bhi.w	80055d8 <__divdi3+0x28c>
 8005482:	463a      	mov	r2, r7
 8005484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005488:	e7b1      	b.n	80053ee <__divdi3+0xa2>
 800548a:	43e4      	mvns	r4, r4
 800548c:	4252      	negs	r2, r2
 800548e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005492:	e764      	b.n	800535e <__divdi3+0x12>
 8005494:	4240      	negs	r0, r0
 8005496:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800549a:	f04f 34ff 	mov.w	r4, #4294967295
 800549e:	e75b      	b.n	8005358 <__divdi3+0xc>
 80054a0:	4095      	lsls	r5, r2
 80054a2:	f1c2 0320 	rsb	r3, r2, #32
 80054a6:	fa27 f103 	lsr.w	r1, r7, r3
 80054aa:	0c28      	lsrs	r0, r5, #16
 80054ac:	fa26 f303 	lsr.w	r3, r6, r3
 80054b0:	4097      	lsls	r7, r2
 80054b2:	fbb1 f8f0 	udiv	r8, r1, r0
 80054b6:	431f      	orrs	r7, r3
 80054b8:	0c3b      	lsrs	r3, r7, #16
 80054ba:	fb00 1118 	mls	r1, r0, r8, r1
 80054be:	fa1f fc85 	uxth.w	ip, r5
 80054c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80054c6:	fb0c f308 	mul.w	r3, ip, r8
 80054ca:	428b      	cmp	r3, r1
 80054cc:	fa06 f602 	lsl.w	r6, r6, r2
 80054d0:	d908      	bls.n	80054e4 <__divdi3+0x198>
 80054d2:	1949      	adds	r1, r1, r5
 80054d4:	f108 32ff 	add.w	r2, r8, #4294967295
 80054d8:	d279      	bcs.n	80055ce <__divdi3+0x282>
 80054da:	428b      	cmp	r3, r1
 80054dc:	d977      	bls.n	80055ce <__divdi3+0x282>
 80054de:	f1a8 0802 	sub.w	r8, r8, #2
 80054e2:	4429      	add	r1, r5
 80054e4:	1ac9      	subs	r1, r1, r3
 80054e6:	fbb1 f3f0 	udiv	r3, r1, r0
 80054ea:	b2bf      	uxth	r7, r7
 80054ec:	fb00 1113 	mls	r1, r0, r3, r1
 80054f0:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80054f4:	fb0c f203 	mul.w	r2, ip, r3
 80054f8:	42ba      	cmp	r2, r7
 80054fa:	d907      	bls.n	800550c <__divdi3+0x1c0>
 80054fc:	197f      	adds	r7, r7, r5
 80054fe:	f103 31ff 	add.w	r1, r3, #4294967295
 8005502:	d260      	bcs.n	80055c6 <__divdi3+0x27a>
 8005504:	42ba      	cmp	r2, r7
 8005506:	d95e      	bls.n	80055c6 <__divdi3+0x27a>
 8005508:	3b02      	subs	r3, #2
 800550a:	442f      	add	r7, r5
 800550c:	1abf      	subs	r7, r7, r2
 800550e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005512:	e790      	b.n	8005436 <__divdi3+0xea>
 8005514:	f1c8 0220 	rsb	r2, r8, #32
 8005518:	fa03 fc08 	lsl.w	ip, r3, r8
 800551c:	fa25 f302 	lsr.w	r3, r5, r2
 8005520:	ea43 0c0c 	orr.w	ip, r3, ip
 8005524:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8005528:	fa21 f302 	lsr.w	r3, r1, r2
 800552c:	fa01 f708 	lsl.w	r7, r1, r8
 8005530:	fa20 f202 	lsr.w	r2, r0, r2
 8005534:	fbb3 f1f9 	udiv	r1, r3, r9
 8005538:	4317      	orrs	r7, r2
 800553a:	fb09 3311 	mls	r3, r9, r1, r3
 800553e:	0c3a      	lsrs	r2, r7, #16
 8005540:	fa1f fb8c 	uxth.w	fp, ip
 8005544:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8005548:	fb0b fa01 	mul.w	sl, fp, r1
 800554c:	459a      	cmp	sl, r3
 800554e:	fa05 f008 	lsl.w	r0, r5, r8
 8005552:	d908      	bls.n	8005566 <__divdi3+0x21a>
 8005554:	eb13 030c 	adds.w	r3, r3, ip
 8005558:	f101 32ff 	add.w	r2, r1, #4294967295
 800555c:	d235      	bcs.n	80055ca <__divdi3+0x27e>
 800555e:	459a      	cmp	sl, r3
 8005560:	d933      	bls.n	80055ca <__divdi3+0x27e>
 8005562:	3902      	subs	r1, #2
 8005564:	4463      	add	r3, ip
 8005566:	ebca 0303 	rsb	r3, sl, r3
 800556a:	fbb3 f2f9 	udiv	r2, r3, r9
 800556e:	fb09 3312 	mls	r3, r9, r2, r3
 8005572:	b2bf      	uxth	r7, r7
 8005574:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8005578:	fb0b f902 	mul.w	r9, fp, r2
 800557c:	45b9      	cmp	r9, r7
 800557e:	d908      	bls.n	8005592 <__divdi3+0x246>
 8005580:	eb17 070c 	adds.w	r7, r7, ip
 8005584:	f102 33ff 	add.w	r3, r2, #4294967295
 8005588:	d21b      	bcs.n	80055c2 <__divdi3+0x276>
 800558a:	45b9      	cmp	r9, r7
 800558c:	d919      	bls.n	80055c2 <__divdi3+0x276>
 800558e:	3a02      	subs	r2, #2
 8005590:	4467      	add	r7, ip
 8005592:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
 8005596:	fba5 0100 	umull	r0, r1, r5, r0
 800559a:	ebc9 0707 	rsb	r7, r9, r7
 800559e:	428f      	cmp	r7, r1
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	d30a      	bcc.n	80055bc <__divdi3+0x270>
 80055a6:	d005      	beq.n	80055b4 <__divdi3+0x268>
 80055a8:	462a      	mov	r2, r5
 80055aa:	e720      	b.n	80053ee <__divdi3+0xa2>
 80055ac:	4662      	mov	r2, ip
 80055ae:	e701      	b.n	80053b4 <__divdi3+0x68>
 80055b0:	463b      	mov	r3, r7
 80055b2:	e714      	b.n	80053de <__divdi3+0x92>
 80055b4:	fa06 f608 	lsl.w	r6, r6, r8
 80055b8:	4286      	cmp	r6, r0
 80055ba:	d2f5      	bcs.n	80055a8 <__divdi3+0x25c>
 80055bc:	1e6a      	subs	r2, r5, #1
 80055be:	2300      	movs	r3, #0
 80055c0:	e715      	b.n	80053ee <__divdi3+0xa2>
 80055c2:	461a      	mov	r2, r3
 80055c4:	e7e5      	b.n	8005592 <__divdi3+0x246>
 80055c6:	460b      	mov	r3, r1
 80055c8:	e7a0      	b.n	800550c <__divdi3+0x1c0>
 80055ca:	4611      	mov	r1, r2
 80055cc:	e7cb      	b.n	8005566 <__divdi3+0x21a>
 80055ce:	4690      	mov	r8, r2
 80055d0:	e788      	b.n	80054e4 <__divdi3+0x198>
 80055d2:	4643      	mov	r3, r8
 80055d4:	4642      	mov	r2, r8
 80055d6:	e70a      	b.n	80053ee <__divdi3+0xa2>
 80055d8:	3a02      	subs	r2, #2
 80055da:	e753      	b.n	8005484 <__divdi3+0x138>
 80055dc:	3902      	subs	r1, #2
 80055de:	442f      	add	r7, r5
 80055e0:	e73c      	b.n	800545c <__divdi3+0x110>
 80055e2:	bf00      	nop

080055e4 <__udivdi3>:
__udivdi3():
 80055e4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055e8:	4614      	mov	r4, r2
 80055ea:	4605      	mov	r5, r0
 80055ec:	460e      	mov	r6, r1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d143      	bne.n	800567a <__udivdi3+0x96>
 80055f2:	428a      	cmp	r2, r1
 80055f4:	d953      	bls.n	800569e <__udivdi3+0xba>
 80055f6:	fab2 f782 	clz	r7, r2
 80055fa:	b157      	cbz	r7, 8005612 <__udivdi3+0x2e>
 80055fc:	f1c7 0620 	rsb	r6, r7, #32
 8005600:	fa20 f606 	lsr.w	r6, r0, r6
 8005604:	fa01 f307 	lsl.w	r3, r1, r7
 8005608:	fa02 f407 	lsl.w	r4, r2, r7
 800560c:	431e      	orrs	r6, r3
 800560e:	fa00 f507 	lsl.w	r5, r0, r7
 8005612:	0c21      	lsrs	r1, r4, #16
 8005614:	fbb6 f2f1 	udiv	r2, r6, r1
 8005618:	0c2b      	lsrs	r3, r5, #16
 800561a:	fb01 6712 	mls	r7, r1, r2, r6
 800561e:	b2a0      	uxth	r0, r4
 8005620:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
 8005624:	fb00 f302 	mul.w	r3, r0, r2
 8005628:	42b3      	cmp	r3, r6
 800562a:	d909      	bls.n	8005640 <__udivdi3+0x5c>
 800562c:	1936      	adds	r6, r6, r4
 800562e:	f102 37ff 	add.w	r7, r2, #4294967295
 8005632:	f080 80f6 	bcs.w	8005822 <__udivdi3+0x23e>
 8005636:	42b3      	cmp	r3, r6
 8005638:	f240 80f3 	bls.w	8005822 <__udivdi3+0x23e>
 800563c:	3a02      	subs	r2, #2
 800563e:	4426      	add	r6, r4
 8005640:	1af6      	subs	r6, r6, r3
 8005642:	fbb6 f3f1 	udiv	r3, r6, r1
 8005646:	b2ad      	uxth	r5, r5
 8005648:	fb01 6113 	mls	r1, r1, r3, r6
 800564c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 8005650:	fb00 f003 	mul.w	r0, r0, r3
 8005654:	4288      	cmp	r0, r1
 8005656:	d908      	bls.n	800566a <__udivdi3+0x86>
 8005658:	1909      	adds	r1, r1, r4
 800565a:	f103 36ff 	add.w	r6, r3, #4294967295
 800565e:	f080 80e2 	bcs.w	8005826 <__udivdi3+0x242>
 8005662:	4288      	cmp	r0, r1
 8005664:	f240 80df 	bls.w	8005826 <__udivdi3+0x242>
 8005668:	3b02      	subs	r3, #2
 800566a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800566e:	2300      	movs	r3, #0
 8005670:	4610      	mov	r0, r2
 8005672:	4619      	mov	r1, r3
 8005674:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005678:	4770      	bx	lr
 800567a:	428b      	cmp	r3, r1
 800567c:	d84a      	bhi.n	8005714 <__udivdi3+0x130>
 800567e:	fab3 f683 	clz	r6, r3
 8005682:	2e00      	cmp	r6, #0
 8005684:	d14d      	bne.n	8005722 <__udivdi3+0x13e>
 8005686:	428b      	cmp	r3, r1
 8005688:	d302      	bcc.n	8005690 <__udivdi3+0xac>
 800568a:	4282      	cmp	r2, r0
 800568c:	f200 80d6 	bhi.w	800583c <__udivdi3+0x258>
 8005690:	2300      	movs	r3, #0
 8005692:	2201      	movs	r2, #1
 8005694:	4610      	mov	r0, r2
 8005696:	4619      	mov	r1, r3
 8005698:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800569c:	4770      	bx	lr
 800569e:	b912      	cbnz	r2, 80056a6 <__udivdi3+0xc2>
 80056a0:	2401      	movs	r4, #1
 80056a2:	fbb4 f4f2 	udiv	r4, r4, r2
 80056a6:	fab4 f284 	clz	r2, r4
 80056aa:	2a00      	cmp	r2, #0
 80056ac:	d17c      	bne.n	80057a8 <__udivdi3+0x1c4>
 80056ae:	1b09      	subs	r1, r1, r4
 80056b0:	0c26      	lsrs	r6, r4, #16
 80056b2:	b2a7      	uxth	r7, r4
 80056b4:	2301      	movs	r3, #1
 80056b6:	fbb1 f0f6 	udiv	r0, r1, r6
 80056ba:	0c2a      	lsrs	r2, r5, #16
 80056bc:	fb06 1110 	mls	r1, r6, r0, r1
 80056c0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 80056c4:	fb07 f200 	mul.w	r2, r7, r0
 80056c8:	428a      	cmp	r2, r1
 80056ca:	d907      	bls.n	80056dc <__udivdi3+0xf8>
 80056cc:	1909      	adds	r1, r1, r4
 80056ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80056d2:	d202      	bcs.n	80056da <__udivdi3+0xf6>
 80056d4:	428a      	cmp	r2, r1
 80056d6:	f200 80c3 	bhi.w	8005860 <__udivdi3+0x27c>
 80056da:	4660      	mov	r0, ip
 80056dc:	1a89      	subs	r1, r1, r2
 80056de:	fbb1 f2f6 	udiv	r2, r1, r6
 80056e2:	b2ad      	uxth	r5, r5
 80056e4:	fb06 1112 	mls	r1, r6, r2, r1
 80056e8:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80056ec:	fb07 f702 	mul.w	r7, r7, r2
 80056f0:	42af      	cmp	r7, r5
 80056f2:	d908      	bls.n	8005706 <__udivdi3+0x122>
 80056f4:	192c      	adds	r4, r5, r4
 80056f6:	f102 31ff 	add.w	r1, r2, #4294967295
 80056fa:	f080 8096 	bcs.w	800582a <__udivdi3+0x246>
 80056fe:	42a7      	cmp	r7, r4
 8005700:	f240 8093 	bls.w	800582a <__udivdi3+0x246>
 8005704:	3a02      	subs	r2, #2
 8005706:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800570a:	4610      	mov	r0, r2
 800570c:	4619      	mov	r1, r3
 800570e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005712:	4770      	bx	lr
 8005714:	2300      	movs	r3, #0
 8005716:	461a      	mov	r2, r3
 8005718:	4610      	mov	r0, r2
 800571a:	4619      	mov	r1, r3
 800571c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005720:	4770      	bx	lr
 8005722:	f1c6 0520 	rsb	r5, r6, #32
 8005726:	fa22 f405 	lsr.w	r4, r2, r5
 800572a:	40b3      	lsls	r3, r6
 800572c:	431c      	orrs	r4, r3
 800572e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005732:	fa21 f305 	lsr.w	r3, r1, r5
 8005736:	fa01 f706 	lsl.w	r7, r1, r6
 800573a:	fa20 f505 	lsr.w	r5, r0, r5
 800573e:	fbb3 fcf8 	udiv	ip, r3, r8
 8005742:	432f      	orrs	r7, r5
 8005744:	fb08 331c 	mls	r3, r8, ip, r3
 8005748:	0c3d      	lsrs	r5, r7, #16
 800574a:	fa1f fa84 	uxth.w	sl, r4
 800574e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8005752:	fb0a f90c 	mul.w	r9, sl, ip
 8005756:	4599      	cmp	r9, r3
 8005758:	fa02 fb06 	lsl.w	fp, r2, r6
 800575c:	d904      	bls.n	8005768 <__udivdi3+0x184>
 800575e:	191b      	adds	r3, r3, r4
 8005760:	f10c 32ff 	add.w	r2, ip, #4294967295
 8005764:	d36d      	bcc.n	8005842 <__udivdi3+0x25e>
 8005766:	4694      	mov	ip, r2
 8005768:	ebc9 0303 	rsb	r3, r9, r3
 800576c:	fbb3 f5f8 	udiv	r5, r3, r8
 8005770:	fb08 3315 	mls	r3, r8, r5, r3
 8005774:	b2bf      	uxth	r7, r7
 8005776:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 800577a:	fb0a f805 	mul.w	r8, sl, r5
 800577e:	45b8      	cmp	r8, r7
 8005780:	d904      	bls.n	800578c <__udivdi3+0x1a8>
 8005782:	193f      	adds	r7, r7, r4
 8005784:	f105 33ff 	add.w	r3, r5, #4294967295
 8005788:	d361      	bcc.n	800584e <__udivdi3+0x26a>
 800578a:	461d      	mov	r5, r3
 800578c:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8005790:	fbac 230b 	umull	r2, r3, ip, fp
 8005794:	ebc8 0707 	rsb	r7, r8, r7
 8005798:	429f      	cmp	r7, r3
 800579a:	f04f 0500 	mov.w	r5, #0
 800579e:	d349      	bcc.n	8005834 <__udivdi3+0x250>
 80057a0:	d045      	beq.n	800582e <__udivdi3+0x24a>
 80057a2:	4662      	mov	r2, ip
 80057a4:	462b      	mov	r3, r5
 80057a6:	e763      	b.n	8005670 <__udivdi3+0x8c>
 80057a8:	4094      	lsls	r4, r2
 80057aa:	f1c2 0320 	rsb	r3, r2, #32
 80057ae:	fa21 fc03 	lsr.w	ip, r1, r3
 80057b2:	0c26      	lsrs	r6, r4, #16
 80057b4:	fa20 f303 	lsr.w	r3, r0, r3
 80057b8:	fa01 f502 	lsl.w	r5, r1, r2
 80057bc:	fbbc f8f6 	udiv	r8, ip, r6
 80057c0:	ea43 0105 	orr.w	r1, r3, r5
 80057c4:	0c0b      	lsrs	r3, r1, #16
 80057c6:	fb06 cc18 	mls	ip, r6, r8, ip
 80057ca:	b2a7      	uxth	r7, r4
 80057cc:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 80057d0:	fb07 f308 	mul.w	r3, r7, r8
 80057d4:	4563      	cmp	r3, ip
 80057d6:	fa00 f502 	lsl.w	r5, r0, r2
 80057da:	d909      	bls.n	80057f0 <__udivdi3+0x20c>
 80057dc:	eb1c 0c04 	adds.w	ip, ip, r4
 80057e0:	f108 32ff 	add.w	r2, r8, #4294967295
 80057e4:	d23a      	bcs.n	800585c <__udivdi3+0x278>
 80057e6:	4563      	cmp	r3, ip
 80057e8:	d938      	bls.n	800585c <__udivdi3+0x278>
 80057ea:	f1a8 0802 	sub.w	r8, r8, #2
 80057ee:	44a4      	add	ip, r4
 80057f0:	ebc3 0c0c 	rsb	ip, r3, ip
 80057f4:	fbbc f3f6 	udiv	r3, ip, r6
 80057f8:	b289      	uxth	r1, r1
 80057fa:	fb06 cc13 	mls	ip, r6, r3, ip
 80057fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8005802:	fb07 f203 	mul.w	r2, r7, r3
 8005806:	428a      	cmp	r2, r1
 8005808:	d907      	bls.n	800581a <__udivdi3+0x236>
 800580a:	1909      	adds	r1, r1, r4
 800580c:	f103 30ff 	add.w	r0, r3, #4294967295
 8005810:	d222      	bcs.n	8005858 <__udivdi3+0x274>
 8005812:	428a      	cmp	r2, r1
 8005814:	d920      	bls.n	8005858 <__udivdi3+0x274>
 8005816:	3b02      	subs	r3, #2
 8005818:	4421      	add	r1, r4
 800581a:	1a89      	subs	r1, r1, r2
 800581c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005820:	e749      	b.n	80056b6 <__udivdi3+0xd2>
 8005822:	463a      	mov	r2, r7
 8005824:	e70c      	b.n	8005640 <__udivdi3+0x5c>
 8005826:	4633      	mov	r3, r6
 8005828:	e71f      	b.n	800566a <__udivdi3+0x86>
 800582a:	460a      	mov	r2, r1
 800582c:	e76b      	b.n	8005706 <__udivdi3+0x122>
 800582e:	40b0      	lsls	r0, r6
 8005830:	4290      	cmp	r0, r2
 8005832:	d2b6      	bcs.n	80057a2 <__udivdi3+0x1be>
 8005834:	f10c 32ff 	add.w	r2, ip, #4294967295
 8005838:	2300      	movs	r3, #0
 800583a:	e719      	b.n	8005670 <__udivdi3+0x8c>
 800583c:	4633      	mov	r3, r6
 800583e:	4632      	mov	r2, r6
 8005840:	e716      	b.n	8005670 <__udivdi3+0x8c>
 8005842:	4599      	cmp	r9, r3
 8005844:	d98f      	bls.n	8005766 <__udivdi3+0x182>
 8005846:	f1ac 0c02 	sub.w	ip, ip, #2
 800584a:	4423      	add	r3, r4
 800584c:	e78c      	b.n	8005768 <__udivdi3+0x184>
 800584e:	45b8      	cmp	r8, r7
 8005850:	d99b      	bls.n	800578a <__udivdi3+0x1a6>
 8005852:	3d02      	subs	r5, #2
 8005854:	4427      	add	r7, r4
 8005856:	e799      	b.n	800578c <__udivdi3+0x1a8>
 8005858:	4603      	mov	r3, r0
 800585a:	e7de      	b.n	800581a <__udivdi3+0x236>
 800585c:	4690      	mov	r8, r2
 800585e:	e7c7      	b.n	80057f0 <__udivdi3+0x20c>
 8005860:	3802      	subs	r0, #2
 8005862:	4421      	add	r1, r4
 8005864:	e73a      	b.n	80056dc <__udivdi3+0xf8>
 8005866:	bf00      	nop
$d():
 8005868:	20746e69 	.word	0x20746e69
 800586c:	75736572 	.word	0x75736572
 8005870:	3d20746c 	.word	0x3d20746c
 8005874:	2e642520 	.word	0x2e642520
 8005878:	0d206425 	.word	0x0d206425
 800587c:	0000000a 	.word	0x0000000a
 8005880:	616f6c66 	.word	0x616f6c66
 8005884:	65722074 	.word	0x65722074
 8005888:	746c7573 	.word	0x746c7573
 800588c:	25203d20 	.word	0x25203d20
 8005890:	2066322e 	.word	0x2066322e
 8005894:	00000a0d 	.word	0x00000a0d
 8005898:	00000043 	.word	0x00000043

0800589c <zeroes.6763>:
 800589c:	30303030 30303030 30303030 30303030     0000000000000000
 80058ac:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 80058bc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 80058cc:	00000000 33323130 37363534 62613938     ....0123456789ab
 80058dc:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 80058ec:	00000030                                0...

080058f0 <blanks.6762>:
 80058f0:	20202020 20202020 20202020 20202020                     
 8005900:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 8005910:	49534f50 00000058 0000002e 00000000     POSIX...........

08005920 <__mprec_tens>:
 8005920:	00000000 3ff00000 00000000 40240000     .......?......$@
 8005930:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8005940:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8005950:	00000000 412e8480 00000000 416312d0     .......A......cA
 8005960:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8005970:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8005980:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8005990:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 80059a0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 80059b0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 80059c0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 80059d0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 80059e0:	79d99db4 44ea7843                       ...yCx.D

080059e8 <__mprec_bigtens>:
 80059e8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 80059f8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8005a08:	7f73bf3c 75154fdd                       <.s..O.u

08005a10 <p05.5269>:
 8005a10:	00000005 00000019 0000007d              ........}...
