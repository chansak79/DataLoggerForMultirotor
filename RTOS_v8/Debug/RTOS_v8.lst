
RTOS_v8.elf:     file format elf32-littlearm
RTOS_v8.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000189

Program Header:
    LOAD off    0x00008000 vaddr 0x08000000 paddr 0x08000000 align 2**15
         filesz 0x00003340 memsz 0x00003340 flags rwx
    LOAD off    0x00010000 vaddr 0x20000000 paddr 0x08003340 align 2**15
         filesz 0x0000001c memsz 0x000046c8 flags rw-
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector   00000280  08000000  08000000  00008000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 ._inits       00000008  08000280  08000280  00008280  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .text         000030b8  08000288  08000288  00008288  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         0000001c  20000000  08003340  00010000  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000045ac  2000001c  0800335c  0001001c  2**2  ALLOC
  5 ._check_stack 00000100  200045c8  08007908  0001001c  2**0  ALLOC
  6 .comment      00000070  00000000  00000000  0001001c  2**0  CONTENTS, READONLY
  7 .ARM.attributes 00000035  00000000  00000000  0001008c  2**0  CONTENTS, READONLY
  8 .debug_aranges 00000920  00000000  00000000  000100c1  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006508  00000000  00000000  000109e1  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000014af  00000000  00000000  00016ee9  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004bad  00000000  00000000  00018398  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001d1c  00000000  00000000  0001cf48  2**2  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00068970  00000000  00000000  0001ec64  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000830  00000000  00000000  000875d4  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000118bb  00000000  00000000  00087e04  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000280 l    d  ._inits	00000000 ._inits
08000288 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
2000001c l    d  .bss	00000000 .bss
200045c8 l    d  ._check_stack	00000000 ._check_stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 vectors_stm32f4xx.c
00000000 l    df *ABS*	00000000 startup_cm.c
00000000 l    df *ABS*	00000000 startup_stm32f4xx.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
080007ac l     F .text	000000f4 SetSysClock
00000000 l    df *ABS*	00000000 misc.c
00000000 l    df *ABS*	00000000 stm32f4xx_gpio.c
00000000 l    df *ABS*	00000000 stm32f4xx_rcc.c
20000000 l     O .data	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 stm32f4xx_usart.c
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 queue.c
080016e4 l     F .text	000000d0 prvCopyDataToQueue
080018c4 l     F .text	00000030 prvIsQueueFull
08001800 l     F .text	00000096 prvUnlockQueue
080017b4 l     F .text	0000004c prvCopyDataFromQueue
08001898 l     F .text	0000002c prvIsQueueEmpty
00000000 l    df *ABS*	00000000 tasks.c
20000020 l     O .bss	00000064 pxReadyTasksLists
20000084 l     O .bss	00000014 xDelayedTaskList1
20000098 l     O .bss	00000014 xDelayedTaskList2
200000ac l     O .bss	00000004 pxDelayedTaskList
200000b0 l     O .bss	00000004 pxOverflowDelayedTaskList
200000b4 l     O .bss	00000014 xPendingReadyList
200000c8 l     O .bss	00000014 xTasksWaitingTermination
200000dc l     O .bss	00000004 uxTasksDeleted
200000e0 l     O .bss	00000014 xSuspendedTaskList
200000f4 l     O .bss	00000004 uxCurrentNumberOfTasks
200000f8 l     O .bss	00000004 xTickCount
200000fc l     O .bss	00000004 uxTopReadyPriority
20000100 l     O .bss	00000004 xSchedulerRunning
20000104 l     O .bss	00000004 uxSchedulerSuspended
20000108 l     O .bss	00000004 uxPendedTicks
2000010c l     O .bss	00000004 xYieldPending
20000110 l     O .bss	00000004 xNumOfOverflows
20000114 l     O .bss	00000004 uxTaskNumber
20000010 l     O .data	00000004 xNextTaskUnblockTime
080023f4 l     F .text	00000064 prvAllocateTCBAndStack
08002208 l     F .text	0000008e prvInitialiseTCBVariables
08002298 l     F .text	0000007c prvInitialiseTaskLists
08002478 l     F .text	00000048 prvResetNextTaskUnblockTime
08002388 l     F .text	0000006c prvAddCurrentTaskToDelayedList
080021e8 l     F .text	00000020 prvIdleTask
0800331c l     O .text	00000014 ucExpectedStackBytes.5294
08002314 l     F .text	00000074 prvCheckTasksWaitingTermination
08002458 l     F .text	0000001e prvDeleteTCB
00000000 l    df *ABS*	00000000 timers.c
20000118 l     O .bss	00000014 xActiveTimerList1
2000012c l     O .bss	00000014 xActiveTimerList2
20000140 l     O .bss	00000004 pxCurrentTimerList
20000144 l     O .bss	00000004 pxOverflowTimerList
20000148 l     O .bss	00000004 xTimerQueue
08002af4 l     F .text	00000078 prvCheckForValidListAndQueue
080027b0 l     F .text	00000024 prvTimerTask
08002740 l     F .text	00000070 prvProcessExpiredTimer
080028c8 l     F .text	00000084 prvInsertTimerInActiveList
08002840 l     F .text	00000048 prvGetNextExpireTime
080027d4 l     F .text	0000006c prvProcessTimerOrBlockTask
0800294c l     F .text	000000f8 prvProcessReceivedCommands
08002888 l     F .text	00000040 prvSampleTimeNow
08002a44 l     F .text	000000b0 prvSwitchTimerLists
2000014c l     O .bss	00000004 xLastTime.5133
00000000 l    df *ABS*	00000000 heap_2.c
20000150 l     O .bss	00004400 ucHeap
20004550 l     O .bss	00000008 xStart
20004558 l     O .bss	00000008 xEnd
20000014 l     O .data	00000004 xFreeBytesRemaining
08002d00 l     F .text	00000050 prvHeapInit
20004560 l     O .bss	00000004 xHeapHasBeenInitialised.4908
00000000 l    df *ABS*	00000000 port.c
20000018 l     O .data	00000004 uxCriticalNesting
20004564 l     O .bss	00000001 ucMaxSysCallPriority
20004568 l     O .bss	00000004 ulMaxPRIGROUPValue
08002db4 l     F .text	00000020 prvTaskExitError
08002df0 l       .text	00000000 pxCurrentTCBConst2
08002df4 l     F .text	00000018 prvPortStartFirstTask
08003010 l     F .text	0000000e vPortEnableVFP
08002fc0 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
2001fc00 l       *ABS*	00000000 _Heap_Limit
00000400 l       *ABS*	00000000 _Main_Stack_Size
08003340 l       .text	00000000 __exidx_end
200045c8 l       ._check_stack	00000000 _Heap_Begin
08003340 l       .data	00000000 _etext
2001fc00 l       *ABS*	00000000 __Main_Stack_Limit
08000288 l       ._inits	00000000 __fini_array_end
08003340 l       .text	00000000 __exidx_start
00000400 l       *ABS*	00000000 __Main_Stack_Size
00000100 l       *ABS*	00000000 _Minimum_Stack_Size
200045c8 l       ._check_stack	00000000 _end_noinit
08000288 l       ._inits	00000000 __fini_array_start
08000288 l       ._inits	00000000 __init_array_end
08000288 l       ._inits	00000000 __preinit_array_end
20020000 l       *ABS*	00000000 __stack
08000288 l       ._inits	00000000 __init_array_start
08000280 l       ._inits	00000000 __preinit_array_start
08000230  w    F .isr_vector	00000006 RTC_Alarm_IRQHandler
08000230  w    F .isr_vector	00000006 HASH_RNG_IRQHandler
08000230  w    F .isr_vector	00000006 EXTI2_IRQHandler
08000230  w    F .isr_vector	00000006 TIM8_CC_IRQHandler
08000268  w    F .isr_vector	00000006 DebugMon_Handler
08000acc g     F .text	0000008c GPIO_PinAFConfig
08000280 g     O ._inits	00000004 p_system_init
20000000 g       .data	00000000 __data_start__
08002f20 g     F .text	00000030 vPortExitCritical
08000230  w    F .isr_vector	00000006 TIM1_CC_IRQHandler
08000230  w    F .isr_vector	00000006 DMA2_Stream5_IRQHandler
08000240  w    F .isr_vector	00000006 HardFault_Handler
08001944 g     F .text	00000056 vQueueWaitForMessageRestricted
08002f50 g     F .text	00000012 ulPortSetInterruptMask
08000230  w    F .isr_vector	00000006 DMA1_Stream5_IRQHandler
08000288 g     F .text	00000024 vTaskA
08002fc4 g     F .text	00000028 SysTick_Handler
080008a0 g     F .text	000000bc NVIC_Init
08000230  w    F .isr_vector	00000006 PVD_IRQHandler
08000230  w    F .isr_vector	00000006 SDIO_IRQHandler
08000230  w    F .isr_vector	00000006 TAMP_STAMP_IRQHandler
08003340 g       .data	00000000 _sidata
08000580 g     F .text	000000ac USART_init
08002f6c g     F .text	00000058 PendSV_Handler
08001454 g     F .text	000000d4 xQueueGenericSendFromISR
08000238  w    F .isr_vector	00000006 NMI_Handler
080001cc g     F .isr_vector	00000048 system_init
08000230  w    F .isr_vector	00000006 CAN2_RX1_IRQHandler
08000230  w    F .isr_vector	00000006 EXTI3_IRQHandler
2000001c g     O .bss	00000004 pxCurrentTCB
08000230  w    F .isr_vector	00000006 TIM8_TRG_COM_TIM14_IRQHandler
08000230  w    F .isr_vector	00000006 TIM1_UP_TIM10_IRQHandler
2000001c g       .bss	00000000 _sbss
08000214 g     F .isr_vector	00000018 fpu_init
08000230  w    F .isr_vector	00000006 TIM8_UP_TIM13_IRQHandler
08000230  w    F .isr_vector	00000006 I2C3_ER_IRQHandler
08000310 g     F .text	0000003c vTaskD
08002e10 g     F .text	000000d0 xPortStartScheduler
080030e4 g     F .text	00000134 memcpy
08001f88 g     F .text	0000006c vTaskPlaceOnEventList
0800199c g     F .text	00000168 xTaskGenericCreate
08002fec  w    F .text	00000024 vPortSetupTimerInterrupt
08000378 g     F .text	00000034 vTaskF
08000230  w    F .isr_vector	00000006 EXTI0_IRQHandler
08000230  w    F .isr_vector	00000006 I2C2_EV_IRQHandler
200045c8 g       ._check_stack	00000000 _noinit
08000230  w    F .isr_vector	00000006 DMA1_Stream2_IRQHandler
08000230  w    F .isr_vector	00000006 CAN1_RX0_IRQHandler
08002c90 g     F .text	00000070 vPortFree
08000230  w    F .isr_vector	00000006 FPU_IRQHandler
08000230  w    F .isr_vector	00000006 OTG_HS_WKUP_IRQHandler
2000456c g     O .bss	00000004 textQueue
08003024 g     F .text	00000058 vPortValidateInterruptPriority
08000aa8 g     F .text	00000022 GPIO_ToggleBits
08000258  w    F .isr_vector	00000006 UsageFault_Handler
08000ce8 g     F .text	0000003c RCC_APB2PeriphClockCmd
08001094 g     F .text	00000046 vListInsertEnd
08000230  w    F .isr_vector	00000006 CAN2_SCE_IRQHandler
08000230  w    F .isr_vector	00000006 DMA2_Stream2_IRQHandler
0800095c g     F .text	0000011a GPIO_Init
2000001c g       .bss	00000000 __bss_start__
20000000 g       .data	00000000 _sdata
08000230  w    F .isr_vector	00000006 SPI1_IRQHandler
08000e98 g     F .text	0000003e USART_Cmd
08000230  w    F .isr_vector	00000006 TIM6_DAC_IRQHandler
0800107c g     F .text	00000018 vListInitialiseItem
08000230  w    F .isr_vector	00000006 TIM1_BRK_TIM9_IRQHandler
08000230  w    F .isr_vector	00000006 DCMI_IRQHandler
08000230  w    F .isr_vector	00000006 CAN2_RX0_IRQHandler
20004588 g     O .bss	00000040 xQueueRegistry
08002f64 g     F .text	00000006 vPortClearInterruptMask
08000230  w    F .isr_vector	00000006 DMA2_Stream3_IRQHandler
08000538 g     F .text	00000046 USART_puts
08000690 g     F .text	0000006c __libc_init_array
08002b6c g     F .text	00000124 pvPortMalloc
08000230  w    F .isr_vector	00000006 USART6_IRQHandler
0800103c g     F .text	0000003e vListInitialise
20004570 g     O .bss	00000014 str_value
08000230  w    F .isr_vector	00000006 USART3_IRQHandler
08001d00 g     F .text	00000024 xTaskGetTickCount
080012d4 g     F .text	0000017e xQueueGenericSend
08000230  w    F .isr_vector	00000006 CRYP_IRQHandler
080006fc g     F .text	0000003c __libc_fini_array
200045c8 g       .bss	00000000 _ebss
08000f8c g     F .text	000000ae USART_GetITStatus
08000188  w    F .isr_vector	00000044 Reset_Handler
08000230  w    F .isr_vector	00000006 CAN1_RX1_IRQHandler
08000230  w    F .isr_vector	00000006 UART5_IRQHandler
20004584 g     O .bss	00000004 myQueue
08000230  w    F .isr_vector	00000006 DMA2_Stream0_IRQHandler
080002ac g     F .text	00000024 vTaskB
08002044 g     F .text	000000b8 xTaskRemoveFromEventList
08000684 g     F .text	0000000a vApplicationMallocFailedHook
08000230  w    F .isr_vector	00000006 TIM4_IRQHandler
08000a78 g     F .text	0000002e GPIO_WriteBit
08000230  w    F .isr_vector	00000006 I2C1_EV_IRQHandler
08000230  w    F .isr_vector	00000006 DMA1_Stream6_IRQHandler
2000001c g       .data	00000000 __data_end__
08000b58 g     F .text	00000154 RCC_GetClocksFreq
08000230  w    F .isr_vector	00000006 DMA1_Stream1_IRQHandler
08000230  w    F .isr_vector	00000006 UART4_IRQHandler
08000d24 g     F .text	00000174 USART_Init
08002130 g     F .text	000000a0 xTaskCheckForTimeOut
200045c8 g       .bss	00000000 __bss_end__
08000230  w    F .isr_vector	00000006 TIM3_IRQHandler
08000230  w    F .isr_vector	00000006 RCC_IRQHandler
08000230  w    F .isr_vector	00000006 TIM8_BRK_TIM12_IRQHandler
08000230  w    F .isr_vector	00000006 Default_Handler
08001bd8 g     F .text	0000001c vTaskSuspendAll
0800114c g     F .text	00000054 uxListRemove
08000230  w    F .isr_vector	00000006 EXTI15_10_IRQHandler
080025d8 g     F .text	00000084 vTaskPriorityDisinherit
08000230  w    F .isr_vector	00000006 ADC_IRQHandler
08000efc g     F .text	0000008e USART_ITConfig
0800251c g     F .text	000000bc vTaskPriorityInherit
08001e94 g     F .text	000000f4 vTaskSwitchContext
08000230  w    F .isr_vector	00000006 DMA1_Stream7_IRQHandler
08001ff4 g     F .text	00000050 vTaskPlaceOnEventListRestricted
08000230  w    F .isr_vector	00000006 TIM7_IRQHandler
08000230  w    F .isr_vector	00000006 CAN2_TX_IRQHandler
08000230  w    F .isr_vector	00000006 TIM5_IRQHandler
0800307c g     F .text	00000066 memcmp
08000230  w    F .isr_vector	00000006 DMA2_Stream7_IRQHandler
08000230  w    F .isr_vector	00000006 I2C3_EV_IRQHandler
0800034c g     F .text	0000002c vTaskE
080026b4 g     F .text	0000008c xTimerGenericCommand
0800062c g     F .text	00000048 GPIO_init
08000674 g     F .text	00000010 vApplicationStackOverflowHook
08000230  w    F .isr_vector	00000006 EXTI9_5_IRQHandler
08000230  w    F .isr_vector	00000006 RTC_WKUP_IRQHandler
08000230  w    F .isr_vector	00000006 ETH_WKUP_IRQHandler
08002ee0 g     F .text	00000020 vPortYield
08000230  w    F .isr_vector	00000006 SPI2_IRQHandler
08000230  w    F .isr_vector	00000006 OTG_HS_EP1_IN_IRQHandler
08003218 g     F .text	00000094 memset
08000248  w    F .isr_vector	00000006 MemManage_Handler
080003ac g     F .text	00000158 main
08000230  w    F .isr_vector	00000006 DMA1_Stream0_IRQHandler
080010dc g     F .text	00000070 vListInsert
08000230  w    F .isr_vector	00000006 CAN1_TX_IRQHandler
08002dd4 g     F .text	00000020 SVC_Handler
0800265c g     F .text	00000058 xTimerCreateTimerTask
080024c0 g     F .text	00000020 xTaskGetCurrentTaskHandle
08000230  w    F .isr_vector	00000006 EXTI4_IRQHandler
08001250 g     F .text	00000084 xQueueGenericCreate
08000744 g     F .text	00000068 SystemInit
08001bf4 g     F .text	0000010c xTaskResumeAll
08001b68 g     F .text	00000070 vTaskStartScheduler
08000230  w    F .isr_vector	00000006 FSMC_IRQHandler
08000230  w    F .isr_vector	00000006 ETH_IRQHandler
08000230  w    F .isr_vector	00000006 OTG_HS_EP1_OUT_IRQHandler
08000230  w    F .isr_vector	00000006 WWDG_IRQHandler
080021d0 g     F .text	00000018 vTaskMissedYield
08000230  w    F .isr_vector	00000006 TIM2_IRQHandler
08001528 g     F .text	000001ba xQueueGenericReceive
080018f4 g     F .text	00000050 vQueueAddToRegistry
08000230  w    F .isr_vector	00000006 OTG_FS_WKUP_IRQHandler
08001d24 g     F .text	00000170 xTaskIncrementTick
08000230  w    F .isr_vector	00000006 TIM1_TRG_COM_TIM11_IRQHandler
08000230  w    F .isr_vector	00000006 OTG_HS_IRQHandler
20020000 g       *ABS*	00000000 _estack
08000ed8 g     F .text	00000022 USART_SendData
08000230  w    F .isr_vector	00000006 EXTI1_IRQHandler
080011a0 g     F .text	000000b0 xQueueGenericReset
2000001c g       .data	00000000 _edata
080002d0 g     F .text	00000040 vTaskC
08000230  w    F .isr_vector	00000006 USART2_IRQHandler
08000000 g     O .isr_vector	00000188 g_pfnVectors
08000230  w    F .isr_vector	00000006 I2C2_ER_IRQHandler
08001b04 g     F .text	00000064 vTaskDelay
08000284 g     O ._inits	00000004 p_fpu_init
08000230  w    F .isr_vector	00000006 DMA2_Stream1_IRQHandler
080024e0 g     F .text	0000003c xTaskGetSchedulerState
08000230  w    F .isr_vector	00000006 CAN1_SCE_IRQHandler
08000230  w    F .isr_vector	00000006 FLASH_IRQHandler
08000738  w    F .text	0000000a _exit
08000230  w    F .isr_vector	00000006 DMA2_Stream4_IRQHandler
08000250  w    F .isr_vector	00000006 BusFault_Handler
08000cac g     F .text	0000003c RCC_AHB1PeriphClockCmd
08000504 g     F .text	00000034 USART1_IRQHandler
08002d50 g     F .text	00000064 pxPortInitialiseStack
08000230  w    F .isr_vector	00000006 OTG_FS_IRQHandler
08000230  w    F .isr_vector	00000006 SPI3_IRQHandler
08000230  w    F .isr_vector	00000006 DMA1_Stream4_IRQHandler
08000230  w    F .isr_vector	00000006 I2C1_ER_IRQHandler
080020fc g     F .text	00000034 vTaskSetTimeOutState
08002f00 g     F .text	00000020 vPortEnterCritical
08000230  w    F .isr_vector	00000006 DMA2_Stream6_IRQHandler
08000230  w    F .isr_vector	00000006 DMA1_Stream3_IRQHandler



Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
$d():
 8000000:	00 00 02 20 89 01 00 08 39 02 00 08 41 02 00 08     ... ....9...A...
 8000010:	49 02 00 08 51 02 00 08 59 02 00 08 00 00 00 00     I...Q...Y.......
	...
 800002c:	d5 2d 00 08 69 02 00 08 00 00 00 00 6d 2f 00 08     .-..i.......m/..
 800003c:	c5 2f 00 08 31 02 00 08 31 02 00 08 31 02 00 08     ./..1...1...1...
 800004c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800005c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800006c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800007c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800008c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800009c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 80000ac:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 80000bc:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 80000cc:	31 02 00 08 31 02 00 08 05 05 00 08 31 02 00 08     1...1.......1...
 80000dc:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 80000ec:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 80000fc:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800010c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800011c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800012c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800013c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800014c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800015c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800016c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800017c:	31 02 00 08 31 02 00 08 31 02 00 08                 1...1...1...

08000188 <Reset_Handler>:
Reset_Handler():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:217
}

// This is the place where Cortex-M core will go immediately after reset.
void __attribute__ ((section(".after_vectors")))
Reset_Handler(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
 800018e:	4b0d      	ldr	r3, [pc, #52]	; (80001c4 <Reset_Handler+0x3c>)
 8000190:	60bb      	str	r3, [r7, #8]
 8000192:	4b0d      	ldr	r3, [pc, #52]	; (80001c8 <Reset_Handler+0x40>)
 8000194:	607b      	str	r3, [r7, #4]
bss_init():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:118
__attribute__((always_inline))
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 8000196:	68bb      	ldr	r3, [r7, #8]
 8000198:	603b      	str	r3, [r7, #0]
 800019a:	e004      	b.n	80001a6 <Reset_Handler+0x1e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:120
  while (p < section_end)
    *p++ = 0;
 800019c:	683b      	ldr	r3, [r7, #0]
 800019e:	1d1a      	adds	r2, r3, #4
 80001a0:	603a      	str	r2, [r7, #0]
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:119
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 80001a6:	687a      	ldr	r2, [r7, #4]
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	429a      	cmp	r2, r3
 80001ac:	d8f6      	bhi.n	800019c <Reset_Handler+0x14>
Reset_Handler():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:227
  // Zero fill the bss segment
  bss_init(&__bss_start__, &__bss_end__);

  // Call the standard library initialisation (mandatory, SystemInit()
  // and C++ static constructors are called from here).
  __libc_init_array();
 80001ae:	f000 fa6f 	bl	8000690 <__libc_init_array>
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:230

  // Call the main entry point, and save the exit code.
  int r = main();
 80001b2:	f000 f8fb 	bl	80003ac <main>
 80001b6:	60f8      	str	r0, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:233

  // Run the static destructors.
  __libc_fini_array();
 80001b8:	f000 faa0 	bl	80006fc <__libc_fini_array>
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:238

  // On test platforms, like semihosting, this can be used to inform
  // the host on the test result.
  // On embedded platforms, usually reset the processor.
  _exit(r);
 80001bc:	68f8      	ldr	r0, [r7, #12]
 80001be:	f000 fabb 	bl	8000738 <_exit>
 80001c2:	bf00      	nop
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	200045c8 	.word	0x200045c8

080001cc <system_init>:
system_init():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:248

// System initialisation, executed before constructors.
void
__attribute__((section(".after_vectors")))
system_init()
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4b0d      	ldr	r3, [pc, #52]	; (8000208 <system_init+0x3c>)
 80001d4:	60fb      	str	r3, [r7, #12]
 80001d6:	4b0d      	ldr	r3, [pc, #52]	; (800020c <system_init+0x40>)
 80001d8:	60bb      	str	r3, [r7, #8]
 80001da:	4b0d      	ldr	r3, [pc, #52]	; (8000210 <system_init+0x44>)
 80001dc:	607b      	str	r3, [r7, #4]
data_init():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:105
data_init(unsigned int* from, unsigned int* section_begin,
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 80001de:	68bb      	ldr	r3, [r7, #8]
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	e007      	b.n	80001f4 <system_init+0x28>
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:107
  while (p < section_end)
    *p++ = *from++;
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	1d1a      	adds	r2, r3, #4
 80001e8:	603a      	str	r2, [r7, #0]
 80001ea:	68fa      	ldr	r2, [r7, #12]
 80001ec:	1d11      	adds	r1, r2, #4
 80001ee:	60f9      	str	r1, [r7, #12]
 80001f0:	6812      	ldr	r2, [r2, #0]
 80001f2:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:106
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d8f3      	bhi.n	80001e4 <system_init+0x18>
system_init():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:256
  // so we must be sure it is executed somewhere.
  // (for example librdimon)
  data_init(&_sidata, &_sdata, &_edata);

  // Call the CSMSIS system initialisation routine
  SystemInit();
 80001fc:	f000 faa2 	bl	8000744 <SystemInit>
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:257
}
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	08003340 	.word	0x08003340
 800020c:	20000000 	.word	0x20000000
 8000210:	2000001c 	.word	0x2000001c

08000214 <fpu_init>:
fpu_init():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_stm32f4xx.c:13
#if defined (__VFP_FP__) && !defined (__SOFTFP__)

void
__attribute__((section(".after_vectors")))
fpu_init()
  {
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_stm32f4xx.c:17
    // Code to enable the Cortex-M4 FPU only included
    // if appropriate build options have been selected.
    // Code taken from Section 7.1, Cortex-M4 TRM (DDI0439C)
    asm volatile
 8000218:	f8df 0010 	ldr.w	r0, [pc, #16]	; 800022c <fpu_init+0x18>
 800021c:	6801      	ldr	r1, [r0, #0]
 800021e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000222:	6001      	str	r1, [r0, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_stm32f4xx.c:27
        " STR             R1, [R0]"// Write back the modified value to the CPACR
        : /* out */
        : /* in */
        : /* clobber */
    );
  }
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr
$d():
 800022c:	e000ed88 	.word	0xe000ed88

08000230 <ADC_IRQHandler>:
Default_Handler():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:432
//
//*****************************************************************************

void __attribute__ ((section(".after_vectors")))
Default_Handler(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:435 (discriminator 1)
  while (1)
    {
    }
 8000234:	e7fe      	b.n	8000234 <ADC_IRQHandler+0x4>
RTC_Alarm_IRQHandler():
 8000236:	bf00      	nop

08000238 <NMI_Handler>:
NMI_Handler():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:444
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
void __attribute__ ((section(".after_vectors")))
NMI_Handler(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:447 (discriminator 1)
  while (1)
    {
    }
 800023c:	e7fe      	b.n	800023c <NMI_Handler+0x4>
 800023e:	bf00      	nop

08000240 <HardFault_Handler>:
HardFault_Handler():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:452
}

void __attribute__ ((section(".after_vectors")))
HardFault_Handler(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:455 (discriminator 1)
  while (1)
    {
    }
 8000244:	e7fe      	b.n	8000244 <HardFault_Handler+0x4>
 8000246:	bf00      	nop

08000248 <MemManage_Handler>:
MemManage_Handler():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:460
}

void __attribute__ ((section(".after_vectors")))
MemManage_Handler(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:463 (discriminator 1)
  while (1)
    {
    }
 800024c:	e7fe      	b.n	800024c <MemManage_Handler+0x4>
 800024e:	bf00      	nop

08000250 <BusFault_Handler>:
BusFault_Handler():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:468
}

void __attribute__ ((section(".after_vectors")))
BusFault_Handler(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:471 (discriminator 1)
  while (1)
    {
    }
 8000254:	e7fe      	b.n	8000254 <BusFault_Handler+0x4>
 8000256:	bf00      	nop

08000258 <UsageFault_Handler>:
UsageFault_Handler():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:476
}

void __attribute__ ((section(".after_vectors")))
UsageFault_Handler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:479 (discriminator 1)
  while (1)
    {
    }
 800025c:	e7fe      	b.n	800025c <UsageFault_Handler+0x4>
 800025e:	bf00      	nop
SVC_Handler():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:484
}

void __attribute__ ((section(".after_vectors")))
SVC_Handler(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:487 (discriminator 1)
  while (1)
    {
    }
 8000264:	e7fe      	b.n	8000264 <UsageFault_Handler+0xc>
UsageFault_Handler():
 8000266:	bf00      	nop

08000268 <DebugMon_Handler>:
DebugMon_Handler():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:492
}

void __attribute__ ((section(".after_vectors")))
DebugMon_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:495 (discriminator 1)
  while (1)
    {
    }
 800026c:	e7fe      	b.n	800026c <DebugMon_Handler+0x4>
 800026e:	bf00      	nop
PendSV_Handler():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:500
}

void __attribute__ ((section(".after_vectors")))
PendSV_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:503 (discriminator 1)
  while (1)
    {
    }
 8000274:	e7fe      	b.n	8000274 <DebugMon_Handler+0xc>
DebugMon_Handler():
 8000276:	bf00      	nop
SysTick_Handler():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:508
}

void __attribute__ ((section(".after_vectors")))
SysTick_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:511 (discriminator 1)
  while (1)
    {
    }
 800027c:	e7fe      	b.n	800027c <DebugMon_Handler+0x14>
DebugMon_Handler():
 800027e:	bf00      	nop

Disassembly of section .text:

08000288 <vTaskA>:
vTaskA():
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:25
char str_value[20];

xQueueHandle myQueue;
xQueueHandle textQueue;

void vTaskA (void* pvParameters){
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:27 (discriminator 1)
    for (;;) {
    	vTaskDelay(1000);
 8000290:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000294:	f001 fc36 	bl	8001b04 <vTaskDelay>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:28 (discriminator 1)
    	GPIOD->ODR ^= GPIO_Pin_12;
 8000298:	4b03      	ldr	r3, [pc, #12]	; (80002a8 <__fini_array_end+0x20>)
 800029a:	4a03      	ldr	r2, [pc, #12]	; (80002a8 <__fini_array_end+0x20>)
 800029c:	6952      	ldr	r2, [r2, #20]
 800029e:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 80002a2:	615a      	str	r2, [r3, #20]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:29 (discriminator 1)
    }
 80002a4:	e7f4      	b.n	8000290 <vTaskA+0x8>
 80002a6:	bf00      	nop
 80002a8:	40020c00 	.word	0x40020c00

080002ac <vTaskB>:
vTaskB():
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:31
}
void vTaskB (void* pvParameters){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:33 (discriminator 1)
    for (;;) {
    	vTaskDelay(500);
 80002b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002b8:	f001 fc24 	bl	8001b04 <vTaskDelay>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:34 (discriminator 1)
    	GPIOD->ODR ^= GPIO_Pin_13;
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <vTaskB+0x20>)
 80002be:	4a03      	ldr	r2, [pc, #12]	; (80002cc <vTaskB+0x20>)
 80002c0:	6952      	ldr	r2, [r2, #20]
 80002c2:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80002c6:	615a      	str	r2, [r3, #20]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:35 (discriminator 1)
    }
 80002c8:	e7f4      	b.n	80002b4 <vTaskB+0x8>
 80002ca:	bf00      	nop
 80002cc:	40020c00 	.word	0x40020c00

080002d0 <vTaskC>:
vTaskC():
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:38
}

void vTaskC (void* pvParameters){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:39
	int delayLED = 1000;
 80002d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002dc:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:41 (discriminator 1)
	for (;;) {
		xQueueSend(myQueue, &delayLED, 0);
 80002de:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <vTaskC+0x38>)
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	f107 030c 	add.w	r3, r7, #12
 80002e6:	4610      	mov	r0, r2
 80002e8:	4619      	mov	r1, r3
 80002ea:	2200      	movs	r2, #0
 80002ec:	2300      	movs	r3, #0
 80002ee:	f000 fff1 	bl	80012d4 <xQueueGenericSend>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:42 (discriminator 1)
		vTaskDelay(1000);
 80002f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f6:	f001 fc05 	bl	8001b04 <vTaskDelay>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:43 (discriminator 1)
		GPIO_ToggleBits(GPIOD,GPIO_Pin_14);
 80002fa:	4804      	ldr	r0, [pc, #16]	; (800030c <vTaskC+0x3c>)
 80002fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000300:	f000 fbd2 	bl	8000aa8 <GPIO_ToggleBits>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:45 (discriminator 1)

	}
 8000304:	e7eb      	b.n	80002de <vTaskC+0xe>
 8000306:	bf00      	nop
 8000308:	20004584 	.word	0x20004584
 800030c:	40020c00 	.word	0x40020c00

08000310 <vTaskD>:
vTaskD():
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:48
}

void vTaskD (void* pvParameters){
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:52 (discriminator 1)
	int _delayLED;
	for (;;) {

		xQueueReceive(myQueue, &_delayLED, portMAX_DELAY);
 8000318:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <vTaskD+0x34>)
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	f107 030c 	add.w	r3, r7, #12
 8000320:	4610      	mov	r0, r2
 8000322:	4619      	mov	r1, r3
 8000324:	f04f 32ff 	mov.w	r2, #4294967295
 8000328:	2300      	movs	r3, #0
 800032a:	f001 f8fd 	bl	8001528 <xQueueGenericReceive>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:54 (discriminator 1)

		vTaskDelay(_delayLED);
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	4618      	mov	r0, r3
 8000332:	f001 fbe7 	bl	8001b04 <vTaskDelay>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:55 (discriminator 1)
		GPIOD->ODR ^= GPIO_Pin_15;
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <vTaskD+0x38>)
 8000338:	4a03      	ldr	r2, [pc, #12]	; (8000348 <vTaskD+0x38>)
 800033a:	6952      	ldr	r2, [r2, #20]
 800033c:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
 8000340:	615a      	str	r2, [r3, #20]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:56 (discriminator 1)
	}
 8000342:	e7e9      	b.n	8000318 <vTaskD+0x8>
 8000344:	20004584 	.word	0x20004584
 8000348:	40020c00 	.word	0x40020c00

0800034c <vTaskE>:
vTaskE():
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:59
}

void vTaskE (void* pvParameters){
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:61 (discriminator 1)
	for (;;) {
		vTaskDelay(1000);
 8000354:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000358:	f001 fbd4 	bl	8001b04 <vTaskDelay>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:62 (discriminator 1)
		xQueueSend(textQueue, "queue it's work!\r\n", 0);
 800035c:	4b04      	ldr	r3, [pc, #16]	; (8000370 <vTaskE+0x24>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4618      	mov	r0, r3
 8000362:	4904      	ldr	r1, [pc, #16]	; (8000374 <vTaskE+0x28>)
 8000364:	2200      	movs	r2, #0
 8000366:	2300      	movs	r3, #0
 8000368:	f000 ffb4 	bl	80012d4 <xQueueGenericSend>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:63 (discriminator 1)
	}
 800036c:	e7f2      	b.n	8000354 <vTaskE+0x8>
 800036e:	bf00      	nop
 8000370:	2000456c 	.word	0x2000456c
 8000374:	080032ac 	.word	0x080032ac

08000378 <vTaskF>:
vTaskF():
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:66
}

void vTaskF (void* pvParameters){
 8000378:	b580      	push	{r7, lr}
 800037a:	b08a      	sub	sp, #40	; 0x28
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:69 (discriminator 1)
	char _msg[30];
	for (;;) {
		xQueueReceive(textQueue, _msg, portMAX_DELAY);
 8000380:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <vTaskF+0x2c>)
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	f107 0308 	add.w	r3, r7, #8
 8000388:	4610      	mov	r0, r2
 800038a:	4619      	mov	r1, r3
 800038c:	f04f 32ff 	mov.w	r2, #4294967295
 8000390:	2300      	movs	r3, #0
 8000392:	f001 f8c9 	bl	8001528 <xQueueGenericReceive>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:70 (discriminator 1)
		USART_puts(USART1, _msg);
 8000396:	f107 0308 	add.w	r3, r7, #8
 800039a:	4803      	ldr	r0, [pc, #12]	; (80003a8 <vTaskF+0x30>)
 800039c:	4619      	mov	r1, r3
 800039e:	f000 f8cb 	bl	8000538 <USART_puts>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:71 (discriminator 1)
	}
 80003a2:	e7ed      	b.n	8000380 <vTaskF+0x8>
 80003a4:	2000456c 	.word	0x2000456c
 80003a8:	40011000 	.word	0x40011000

080003ac <main>:
main():
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:75
}

int main(void)
{
 80003ac:	b5b0      	push	{r4, r5, r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af04      	add	r7, sp, #16
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:77

	GPIO_init();
 80003b2:	f000 f93b 	bl	800062c <GPIO_init>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:78
	USART_init();
 80003b6:	f000 f8e3 	bl	8000580 <USART_init>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:80

	sprintf(str_value, "\r\nHello World!\r\n" );
 80003ba:	4a40      	ldr	r2, [pc, #256]	; (80004bc <main+0x110>)
 80003bc:	4b40      	ldr	r3, [pc, #256]	; (80004c0 <main+0x114>)
 80003be:	4614      	mov	r4, r2
 80003c0:	461d      	mov	r5, r3
 80003c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003c6:	682b      	ldr	r3, [r5, #0]
 80003c8:	7023      	strb	r3, [r4, #0]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:81
	USART_puts(USART1, str_value);
 80003ca:	483e      	ldr	r0, [pc, #248]	; (80004c4 <main+0x118>)
 80003cc:	493b      	ldr	r1, [pc, #236]	; (80004bc <main+0x110>)
 80003ce:	f000 f8b3 	bl	8000538 <USART_puts>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:83

	myQueue = xQueueCreate( 10, sizeof(int) );
 80003d2:	200a      	movs	r0, #10
 80003d4:	2104      	movs	r1, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	f000 ff3a 	bl	8001250 <xQueueGenericCreate>
 80003dc:	4602      	mov	r2, r0
 80003de:	4b3a      	ldr	r3, [pc, #232]	; (80004c8 <main+0x11c>)
 80003e0:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:84
	textQueue = xQueueCreate( 10, sizeof(char[30]));
 80003e2:	200a      	movs	r0, #10
 80003e4:	211e      	movs	r1, #30
 80003e6:	2200      	movs	r2, #0
 80003e8:	f000 ff32 	bl	8001250 <xQueueGenericCreate>
 80003ec:	4602      	mov	r2, r0
 80003ee:	4b37      	ldr	r3, [pc, #220]	; (80004cc <main+0x120>)
 80003f0:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:86

	xTaskCreate(vTaskA, "Task 1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80003f2:	2301      	movs	r3, #1
 80003f4:	9300      	str	r3, [sp, #0]
 80003f6:	2300      	movs	r3, #0
 80003f8:	9301      	str	r3, [sp, #4]
 80003fa:	2300      	movs	r3, #0
 80003fc:	9302      	str	r3, [sp, #8]
 80003fe:	2300      	movs	r3, #0
 8000400:	9303      	str	r3, [sp, #12]
 8000402:	4833      	ldr	r0, [pc, #204]	; (80004d0 <main+0x124>)
 8000404:	4933      	ldr	r1, [pc, #204]	; (80004d4 <main+0x128>)
 8000406:	2280      	movs	r2, #128	; 0x80
 8000408:	2300      	movs	r3, #0
 800040a:	f001 fac7 	bl	800199c <xTaskGenericCreate>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:87
	xTaskCreate(vTaskB, "Task 2", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800040e:	2301      	movs	r3, #1
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2300      	movs	r3, #0
 8000414:	9301      	str	r3, [sp, #4]
 8000416:	2300      	movs	r3, #0
 8000418:	9302      	str	r3, [sp, #8]
 800041a:	2300      	movs	r3, #0
 800041c:	9303      	str	r3, [sp, #12]
 800041e:	482e      	ldr	r0, [pc, #184]	; (80004d8 <main+0x12c>)
 8000420:	492e      	ldr	r1, [pc, #184]	; (80004dc <main+0x130>)
 8000422:	2280      	movs	r2, #128	; 0x80
 8000424:	2300      	movs	r3, #0
 8000426:	f001 fab9 	bl	800199c <xTaskGenericCreate>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:88
	xTaskCreate(vTaskC, "Task 3", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800042a:	2301      	movs	r3, #1
 800042c:	9300      	str	r3, [sp, #0]
 800042e:	2300      	movs	r3, #0
 8000430:	9301      	str	r3, [sp, #4]
 8000432:	2300      	movs	r3, #0
 8000434:	9302      	str	r3, [sp, #8]
 8000436:	2300      	movs	r3, #0
 8000438:	9303      	str	r3, [sp, #12]
 800043a:	4829      	ldr	r0, [pc, #164]	; (80004e0 <main+0x134>)
 800043c:	4929      	ldr	r1, [pc, #164]	; (80004e4 <main+0x138>)
 800043e:	2280      	movs	r2, #128	; 0x80
 8000440:	2300      	movs	r3, #0
 8000442:	f001 faab 	bl	800199c <xTaskGenericCreate>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:89
	xTaskCreate(vTaskD, "Task 4", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000446:	2301      	movs	r3, #1
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2300      	movs	r3, #0
 800044c:	9301      	str	r3, [sp, #4]
 800044e:	2300      	movs	r3, #0
 8000450:	9302      	str	r3, [sp, #8]
 8000452:	2300      	movs	r3, #0
 8000454:	9303      	str	r3, [sp, #12]
 8000456:	4824      	ldr	r0, [pc, #144]	; (80004e8 <main+0x13c>)
 8000458:	4924      	ldr	r1, [pc, #144]	; (80004ec <main+0x140>)
 800045a:	2280      	movs	r2, #128	; 0x80
 800045c:	2300      	movs	r3, #0
 800045e:	f001 fa9d 	bl	800199c <xTaskGenericCreate>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:90
	xTaskCreate(vTaskE, "Task 5", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000462:	2301      	movs	r3, #1
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2300      	movs	r3, #0
 8000468:	9301      	str	r3, [sp, #4]
 800046a:	2300      	movs	r3, #0
 800046c:	9302      	str	r3, [sp, #8]
 800046e:	2300      	movs	r3, #0
 8000470:	9303      	str	r3, [sp, #12]
 8000472:	481f      	ldr	r0, [pc, #124]	; (80004f0 <main+0x144>)
 8000474:	491f      	ldr	r1, [pc, #124]	; (80004f4 <main+0x148>)
 8000476:	2280      	movs	r2, #128	; 0x80
 8000478:	2300      	movs	r3, #0
 800047a:	f001 fa8f 	bl	800199c <xTaskGenericCreate>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:91
	xTaskCreate(vTaskF, "Task 6", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800047e:	2301      	movs	r3, #1
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2300      	movs	r3, #0
 8000484:	9301      	str	r3, [sp, #4]
 8000486:	2300      	movs	r3, #0
 8000488:	9302      	str	r3, [sp, #8]
 800048a:	2300      	movs	r3, #0
 800048c:	9303      	str	r3, [sp, #12]
 800048e:	481a      	ldr	r0, [pc, #104]	; (80004f8 <main+0x14c>)
 8000490:	491a      	ldr	r1, [pc, #104]	; (80004fc <main+0x150>)
 8000492:	2280      	movs	r2, #128	; 0x80
 8000494:	2300      	movs	r3, #0
 8000496:	f001 fa81 	bl	800199c <xTaskGenericCreate>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:93

	sprintf(str_value, "Task Created\r\n" );
 800049a:	4a08      	ldr	r2, [pc, #32]	; (80004bc <main+0x110>)
 800049c:	4b18      	ldr	r3, [pc, #96]	; (8000500 <main+0x154>)
 800049e:	4614      	mov	r4, r2
 80004a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004a2:	c407      	stmia	r4!, {r0, r1, r2}
 80004a4:	8023      	strh	r3, [r4, #0]
 80004a6:	3402      	adds	r4, #2
 80004a8:	0c1b      	lsrs	r3, r3, #16
 80004aa:	7023      	strb	r3, [r4, #0]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:94
	USART_puts(USART1, str_value);
 80004ac:	4805      	ldr	r0, [pc, #20]	; (80004c4 <main+0x118>)
 80004ae:	4903      	ldr	r1, [pc, #12]	; (80004bc <main+0x110>)
 80004b0:	f000 f842 	bl	8000538 <USART_puts>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:96

	vTaskStartScheduler();
 80004b4:	f001 fb58 	bl	8001b68 <vTaskStartScheduler>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:98 (discriminator 1)

	for(;;);
 80004b8:	e7fe      	b.n	80004b8 <main+0x10c>
 80004ba:	bf00      	nop
 80004bc:	20004570 	.word	0x20004570
 80004c0:	080032c0 	.word	0x080032c0
 80004c4:	40011000 	.word	0x40011000
 80004c8:	20004584 	.word	0x20004584
 80004cc:	2000456c 	.word	0x2000456c
 80004d0:	08000289 	.word	0x08000289
 80004d4:	080032d4 	.word	0x080032d4
 80004d8:	080002ad 	.word	0x080002ad
 80004dc:	080032dc 	.word	0x080032dc
 80004e0:	080002d1 	.word	0x080002d1
 80004e4:	080032e4 	.word	0x080032e4
 80004e8:	08000311 	.word	0x08000311
 80004ec:	080032ec 	.word	0x080032ec
 80004f0:	0800034d 	.word	0x0800034d
 80004f4:	080032f4 	.word	0x080032f4
 80004f8:	08000379 	.word	0x08000379
 80004fc:	080032fc 	.word	0x080032fc
 8000500:	08003304 	.word	0x08003304

08000504 <USART1_IRQHandler>:
USART1_IRQHandler():
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:103

	return 0;
}

void USART1_IRQHandler(void){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:105

  if( USART_GetITStatus(USART1, USART_IT_RXNE) )
 800050a:	480a      	ldr	r0, [pc, #40]	; (8000534 <USART1_IRQHandler+0x30>)
 800050c:	f240 5125 	movw	r1, #1317	; 0x525
 8000510:	f000 fd3c 	bl	8000f8c <USART_GetITStatus>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d009      	beq.n	800052e <USART1_IRQHandler+0x2a>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:107
  {
    char c = USART1->DR;
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <USART1_IRQHandler+0x30>)
 800051c:	889b      	ldrh	r3, [r3, #4]
 800051e:	b29b      	uxth	r3, r3
 8000520:	b2db      	uxtb	r3, r3
 8000522:	71fb      	strb	r3, [r7, #7]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:108
    USART_puts(USART1, &c);
 8000524:	1dfb      	adds	r3, r7, #7
 8000526:	4803      	ldr	r0, [pc, #12]	; (8000534 <USART1_IRQHandler+0x30>)
 8000528:	4619      	mov	r1, r3
 800052a:	f000 f805 	bl	8000538 <USART_puts>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:110
  }
}
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40011000 	.word	0x40011000

08000538 <USART_puts>:
USART_puts():
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:113

void USART_puts(USART_TypeDef* USARTx, volatile char *c)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:114
  while(*c){
 8000542:	e014      	b.n	800056e <USART_puts+0x36>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:116
    // wait until data register is empty
    while( !(USARTx->SR & 0x00000040) );
 8000544:	bf00      	nop
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:116 (discriminator 1)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	b29b      	uxth	r3, r3
 800054c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0f8      	beq.n	8000546 <USART_puts+0xe>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:117
    USART_SendData(USARTx, *c);
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	b25b      	sxtb	r3, r3
 800055c:	b29b      	uxth	r3, r3
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	4619      	mov	r1, r3
 8000562:	f000 fcb9 	bl	8000ed8 <USART_SendData>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:118
    *c++;
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	1c5a      	adds	r2, r3, #1
 800056a:	603a      	str	r2, [r7, #0]
 800056c:	781b      	ldrb	r3, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:114 (discriminator 1)
  }
}

void USART_puts(USART_TypeDef* USARTx, volatile char *c)
{
  while(*c){
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1e5      	bne.n	8000544 <USART_puts+0xc>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:120
    // wait until data register is empty
    while( !(USARTx->SR & 0x00000040) );
    USART_SendData(USARTx, *c);
    *c++;
  }
}
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop

08000580 <USART_init>:
USART_init():
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:123

void USART_init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:124
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000586:	2002      	movs	r0, #2
 8000588:	2101      	movs	r1, #1
 800058a:	f000 fb8f 	bl	8000cac <RCC_AHB1PeriphClockCmd>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:125
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 800058e:	2010      	movs	r0, #16
 8000590:	2101      	movs	r1, #1
 8000592:	f000 fba9 	bl	8000ce8 <RCC_APB2PeriphClockCmd>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:128

  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8000596:	23c0      	movs	r3, #192	; 0xc0
 8000598:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:129
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800059a:	2302      	movs	r3, #2
 800059c:	773b      	strb	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:130
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800059e:	2301      	movs	r3, #1
 80005a0:	77fb      	strb	r3, [r7, #31]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:131
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80005a2:	2300      	movs	r3, #0
 80005a4:	77bb      	strb	r3, [r7, #30]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:132
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005a6:	2302      	movs	r3, #2
 80005a8:	777b      	strb	r3, [r7, #29]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:133
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 80005aa:	f107 0318 	add.w	r3, r7, #24
 80005ae:	481d      	ldr	r0, [pc, #116]	; (8000624 <USART_init+0xa4>)
 80005b0:	4619      	mov	r1, r3
 80005b2:	f000 f9d3 	bl	800095c <GPIO_Init>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:134
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
 80005b6:	481b      	ldr	r0, [pc, #108]	; (8000624 <USART_init+0xa4>)
 80005b8:	2106      	movs	r1, #6
 80005ba:	2207      	movs	r2, #7
 80005bc:	f000 fa86 	bl	8000acc <GPIO_PinAFConfig>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:135
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 80005c0:	4818      	ldr	r0, [pc, #96]	; (8000624 <USART_init+0xa4>)
 80005c2:	2107      	movs	r1, #7
 80005c4:	2207      	movs	r2, #7
 80005c6:	f000 fa81 	bl	8000acc <GPIO_PinAFConfig>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:138

  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_BaudRate              = 115200;
 80005ca:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80005ce:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:139
  USART_InitStructure.USART_WordLength            = USART_WordLength_8b;
 80005d0:	2300      	movs	r3, #0
 80005d2:	81bb      	strh	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:140
  USART_InitStructure.USART_StopBits              = USART_StopBits_1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	81fb      	strh	r3, [r7, #14]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:141
  USART_InitStructure.USART_Parity                = USART_Parity_No;
 80005d8:	2300      	movs	r3, #0
 80005da:	823b      	strh	r3, [r7, #16]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:142
  USART_InitStructure.USART_HardwareFlowControl   = USART_HardwareFlowControl_None;
 80005dc:	2300      	movs	r3, #0
 80005de:	82bb      	strh	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:143
  USART_InitStructure.USART_Mode                  = USART_Mode_Tx | USART_Mode_Rx;
 80005e0:	230c      	movs	r3, #12
 80005e2:	827b      	strh	r3, [r7, #18]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:144
  USART_Init(USART1, &USART_InitStructure);
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	480f      	ldr	r0, [pc, #60]	; (8000628 <USART_init+0xa8>)
 80005ea:	4619      	mov	r1, r3
 80005ec:	f000 fb9a 	bl	8000d24 <USART_Init>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:145
  USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <USART_init+0xa8>)
 80005f2:	f240 5125 	movw	r1, #1317	; 0x525
 80005f6:	2201      	movs	r2, #1
 80005f8:	f000 fc80 	bl	8000efc <USART_ITConfig>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:148

  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 80005fc:	2325      	movs	r3, #37	; 0x25
 80005fe:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:149
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	717b      	strb	r3, [r7, #5]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:150
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	71bb      	strb	r3, [r7, #6]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:151
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000608:	2301      	movs	r3, #1
 800060a:	71fb      	strb	r3, [r7, #7]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:152
  NVIC_Init(&NVIC_InitStructure);
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f946 	bl	80008a0 <NVIC_Init>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:155

    /* Enable USART1 */
  USART_Cmd(USART1, ENABLE);
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <USART_init+0xa8>)
 8000616:	2101      	movs	r1, #1
 8000618:	f000 fc3e 	bl	8000e98 <USART_Cmd>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:156
}
 800061c:	3720      	adds	r7, #32
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40020400 	.word	0x40020400
 8000628:	40011000 	.word	0x40011000

0800062c <GPIO_init>:
GPIO_init():
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:159


void GPIO_init(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:160
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000632:	2008      	movs	r0, #8
 8000634:	2101      	movs	r1, #1
 8000636:	f000 fb39 	bl	8000cac <RCC_AHB1PeriphClockCmd>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:162
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 800063a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800063e:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:163
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000640:	2301      	movs	r3, #1
 8000642:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:164
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000644:	2300      	movs	r3, #0
 8000646:	71bb      	strb	r3, [r7, #6]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:165
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000648:	2303      	movs	r3, #3
 800064a:	717b      	strb	r3, [r7, #5]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:166
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	71fb      	strb	r3, [r7, #7]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:167
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000650:	463b      	mov	r3, r7
 8000652:	4806      	ldr	r0, [pc, #24]	; (800066c <GPIO_init+0x40>)
 8000654:	4619      	mov	r1, r3
 8000656:	f000 f981 	bl	800095c <GPIO_Init>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:169

	GPIO_WriteBit(GPIOB, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15, Bit_RESET);
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <GPIO_init+0x44>)
 800065c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000660:	2200      	movs	r2, #0
 8000662:	f000 fa09 	bl	8000a78 <GPIO_WriteBit>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:170
}
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40020c00 	.word	0x40020c00
 8000670:	40020400 	.word	0x40020400

08000674 <vApplicationStackOverflowHook>:
vApplicationStackOverflowHook():
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:172

void vApplicationStackOverflowHook(xTaskHandle pxTask, signed char *pcTaskName) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:173
	taskDISABLE_INTERRUPTS();
 800067e:	f002 fc67 	bl	8002f50 <ulPortSetInterruptMask>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:174 (discriminator 1)
	for(;;);
 8000682:	e7fe      	b.n	8000682 <vApplicationStackOverflowHook+0xe>

08000684 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:176
}
void vApplicationMallocFailedHook(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:177
	taskDISABLE_INTERRUPTS();
 8000688:	f002 fc62 	bl	8002f50 <ulPortSetInterruptMask>
/home/chansak/workspace/RTOS_v8/Debug/../src/main.c:178 (discriminator 1)
	for(;;);
 800068c:	e7fe      	b.n	800068c <vApplicationMallocFailedHook+0x8>
 800068e:	bf00      	nop

08000690 <__libc_init_array>:
__libc_init_array():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:179
(*__fini_array_end[])(void) __attribute__((weak));

// Iterate over all the preinit/init routines.
inline void
__libc_init_array(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:183
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
 8000696:	4a15      	ldr	r2, [pc, #84]	; (80006ec <__libc_init_array+0x5c>)
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <__libc_init_array+0x60>)
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	109b      	asrs	r3, r3, #2
 800069e:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:184
  for (i = 0; i < count; i++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	e007      	b.n	80006b6 <__libc_init_array+0x26>
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:185 (discriminator 2)
    __preinit_array_start[i]();
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <__libc_init_array+0x60>)
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006ae:	4798      	blx	r3
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:184 (discriminator 2)
{
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3301      	adds	r3, #1
 80006b4:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:184 (discriminator 1)
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d3f3      	bcc.n	80006a6 <__libc_init_array+0x16>
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:192
  // If you need to run the code in the .init section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
 80006be:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <__libc_init_array+0x64>)
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <__libc_init_array+0x68>)
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	109b      	asrs	r3, r3, #2
 80006c6:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:193
  for (i = 0; i < count; i++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	e007      	b.n	80006de <__libc_init_array+0x4e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:194 (discriminator 2)
    __init_array_start[i]();
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <__libc_init_array+0x68>)
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006d6:	4798      	blx	r3
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:193 (discriminator 2)
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
  for (i = 0; i < count; i++)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3301      	adds	r3, #1
 80006dc:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:193 (discriminator 1)
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d3f3      	bcc.n	80006ce <__libc_init_array+0x3e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:195
    __init_array_start[i]();
}
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	08000288 	.word	0x08000288
 80006f0:	08000280 	.word	0x08000280
 80006f4:	08000288 	.word	0x08000288
 80006f8:	08000288 	.word	0x08000288

080006fc <__libc_fini_array>:
__libc_fini_array():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:200

// Run all the cleanup routines.
inline void
__libc_fini_array(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:204
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
 8000702:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <__libc_fini_array+0x34>)
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <__libc_fini_array+0x38>)
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	109b      	asrs	r3, r3, #2
 800070a:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:205
  for (i = count; i > 0; i--)
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	e008      	b.n	8000724 <__libc_fini_array+0x28>
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:206 (discriminator 2)
    __fini_array_start[i - 1]();
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	1e5a      	subs	r2, r3, #1
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <__libc_fini_array+0x38>)
 8000718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800071c:	4798      	blx	r3
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:205 (discriminator 2)
{
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
  for (i = count; i > 0; i--)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	3b01      	subs	r3, #1
 8000722:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:205 (discriminator 1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1f3      	bne.n	8000712 <__libc_fini_array+0x16>
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_cm.c:212

  // If you need to run the code in the .fini section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_fini();
}
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	08000288 	.word	0x08000288
 8000734:	08000288 	.word	0x08000288

08000738 <_exit>:
_exit():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_stm32f4xx.c:44
// You can redefine it in the application, if more functionality
// is required
void
__attribute__((weak))
_exit(int r)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/startup_stm32f4xx.c:47 (discriminator 1)
#if defined(DEBUG)
  while(1)
  ;
 8000740:	e7fe      	b.n	8000740 <_exit+0x8>
 8000742:	bf00      	nop

08000744 <SystemInit>:
SystemInit():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:344
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:347
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x5c>)
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <SystemInit+0x5c>)
 800074c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8000750:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:351
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <SystemInit+0x60>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <SystemInit+0x60>)
 800075c:	6812      	ldr	r2, [r2, #0]
 800075e:	f042 0201 	orr.w	r2, r2, #1
 8000762:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:354

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <SystemInit+0x60>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:357

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <SystemInit+0x60>)
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <SystemInit+0x60>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000778:	6013      	str	r3, [r2, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:360

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <SystemInit+0x60>)
 800077c:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <SystemInit+0x64>)
 800077e:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:363

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <SystemInit+0x60>)
 8000782:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <SystemInit+0x60>)
 8000784:	6812      	ldr	r2, [r2, #0]
 8000786:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800078a:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:366

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <SystemInit+0x60>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:374
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000792:	f000 f80b 	bl	80007ac <SetSysClock>
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:380

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000796:	4b02      	ldr	r3, [pc, #8]	; (80007a0 <SystemInit+0x5c>)
 8000798:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800079c:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:382
#endif
}
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	e000ed00 	.word	0xe000ed00
 80007a4:	40023800 	.word	0x40023800
 80007a8:	24003010 	.word	0x24003010

080007ac <SetSysClock>:
SetSysClock():
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:477
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:481
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:484
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80007ba:	4b35      	ldr	r3, [pc, #212]	; (8000890 <SetSysClock+0xe4>)
 80007bc:	4a34      	ldr	r2, [pc, #208]	; (8000890 <SetSysClock+0xe4>)
 80007be:	6812      	ldr	r2, [r2, #0]
 80007c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80007c4:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:489 (discriminator 1)
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80007c6:	4b32      	ldr	r3, [pc, #200]	; (8000890 <SetSysClock+0xe4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ce:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:490 (discriminator 1)
    StartUpCounter++;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3301      	adds	r3, #1
 80007d4:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:491 (discriminator 1)
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d103      	bne.n	80007e4 <SetSysClock+0x38>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80007e2:	d1f0      	bne.n	80007c6 <SetSysClock+0x1a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:493

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80007e4:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <SetSysClock+0xe4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <SetSysClock+0x4a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:495
  {
    HSEStatus = (uint32_t)0x01;
 80007f0:	2301      	movs	r3, #1
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	e001      	b.n	80007fa <SetSysClock+0x4e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:499
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:502
  }

  if (HSEStatus == (uint32_t)0x01)
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d142      	bne.n	8000886 <SetSysClock+0xda>
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:505
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000800:	4b23      	ldr	r3, [pc, #140]	; (8000890 <SetSysClock+0xe4>)
 8000802:	4a23      	ldr	r2, [pc, #140]	; (8000890 <SetSysClock+0xe4>)
 8000804:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000806:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800080a:	641a      	str	r2, [r3, #64]	; 0x40
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:506
    PWR->CR |= PWR_CR_VOS;
 800080c:	4b21      	ldr	r3, [pc, #132]	; (8000894 <SetSysClock+0xe8>)
 800080e:	4a21      	ldr	r2, [pc, #132]	; (8000894 <SetSysClock+0xe8>)
 8000810:	6812      	ldr	r2, [r2, #0]
 8000812:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000816:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:509

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <SetSysClock+0xe4>)
 800081a:	4a1d      	ldr	r2, [pc, #116]	; (8000890 <SetSysClock+0xe4>)
 800081c:	6892      	ldr	r2, [r2, #8]
 800081e:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:513

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <SetSysClock+0xe4>)
 8000822:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <SetSysClock+0xe4>)
 8000824:	6892      	ldr	r2, [r2, #8]
 8000826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800082a:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:516
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <SetSysClock+0xe4>)
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <SetSysClock+0xe4>)
 8000830:	6892      	ldr	r2, [r2, #8]
 8000832:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000836:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:528
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <SetSysClock+0xe4>)
 800083a:	4a17      	ldr	r2, [pc, #92]	; (8000898 <SetSysClock+0xec>)
 800083c:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:532
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <SetSysClock+0xe4>)
 8000840:	4a13      	ldr	r2, [pc, #76]	; (8000890 <SetSysClock+0xe4>)
 8000842:	6812      	ldr	r2, [r2, #0]
 8000844:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000848:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:535

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800084a:	bf00      	nop
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:535 (discriminator 1)
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <SetSysClock+0xe4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000854:	2b00      	cmp	r3, #0
 8000856:	d0f9      	beq.n	800084c <SetSysClock+0xa0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:555
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <SetSysClock+0xf0>)
 800085a:	f240 7205 	movw	r2, #1797	; 0x705
 800085e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:564
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <SetSysClock+0xe4>)
 8000862:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <SetSysClock+0xe4>)
 8000864:	6892      	ldr	r2, [r2, #8]
 8000866:	f022 0203 	bic.w	r2, r2, #3
 800086a:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:565
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <SetSysClock+0xe4>)
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <SetSysClock+0xe4>)
 8000870:	6892      	ldr	r2, [r2, #8]
 8000872:	f042 0202 	orr.w	r2, r2, #2
 8000876:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:568

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000878:	bf00      	nop
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:568 (discriminator 1)
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <SetSysClock+0xe4>)
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	f003 030c 	and.w	r3, r3, #12
 8000882:	2b08      	cmp	r3, #8
 8000884:	d1f9      	bne.n	800087a <SetSysClock+0xce>
/home/chansak/workspace/RTOS_v8/Debug/../libs/cmsis/src/system_stm32f4xx.c:577
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	40023800 	.word	0x40023800
 8000894:	40007000 	.word	0x40007000
 8000898:	07405408 	.word	0x07405408
 800089c:	40023c00 	.word	0x40023c00

080008a0 <NVIC_Init>:
NVIC_Init():
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/misc.c:137
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/misc.c:138
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80008a8:	2300      	movs	r3, #0
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	2300      	movs	r3, #0
 80008ae:	73bb      	strb	r3, [r7, #14]
 80008b0:	230f      	movs	r3, #15
 80008b2:	737b      	strb	r3, [r7, #13]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/misc.c:145
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	78db      	ldrb	r3, [r3, #3]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d037      	beq.n	800092c <NVIC_Init+0x8c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/misc.c:148
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <NVIC_Init+0xb4>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	43db      	mvns	r3, r3
 80008c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	73fb      	strb	r3, [r7, #15]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/misc.c:149
    tmppre = (0x4 - tmppriority);
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	f1c3 0304 	rsb	r3, r3, #4
 80008d0:	73bb      	strb	r3, [r7, #14]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/misc.c:150
    tmpsub = tmpsub >> tmppriority;
 80008d2:	7b7a      	ldrb	r2, [r7, #13]
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	fa42 f303 	asr.w	r3, r2, r3
 80008da:	737b      	strb	r3, [r7, #13]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/misc.c:152

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	785b      	ldrb	r3, [r3, #1]
 80008e0:	461a      	mov	r2, r3
 80008e2:	7bbb      	ldrb	r3, [r7, #14]
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	73fb      	strb	r3, [r7, #15]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/misc.c:153
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	789a      	ldrb	r2, [r3, #2]
 80008ee:	7b7b      	ldrb	r3, [r7, #13]
 80008f0:	4013      	ands	r3, r2
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	73fb      	strb	r3, [r7, #15]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/misc.c:155
        
    tmppriority = tmppriority << 0x04;
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	011b      	lsls	r3, r3, #4
 80008fe:	73fb      	strb	r3, [r7, #15]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/misc.c:157
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000900:	4a15      	ldr	r2, [pc, #84]	; (8000958 <NVIC_Init+0xb8>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	4413      	add	r3, r2
 8000908:	7bfa      	ldrb	r2, [r7, #15]
 800090a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/misc.c:160
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <NVIC_Init+0xb8>)
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	7812      	ldrb	r2, [r2, #0]
 8000914:	0952      	lsrs	r2, r2, #5
 8000916:	b2d2      	uxtb	r2, r2
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/misc.c:161
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	7809      	ldrb	r1, [r1, #0]
 800091c:	f001 011f 	and.w	r1, r1, #31
 8000920:	2001      	movs	r0, #1
 8000922:	fa00 f101 	lsl.w	r1, r0, r1
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/misc.c:160
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800092a:	e00e      	b.n	800094a <NVIC_Init+0xaa>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/misc.c:166
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <NVIC_Init+0xb8>)
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	7812      	ldrb	r2, [r2, #0]
 8000932:	0952      	lsrs	r2, r2, #5
 8000934:	b2d2      	uxtb	r2, r2
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/misc.c:167
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	7809      	ldrb	r1, [r1, #0]
 800093a:	f001 011f 	and.w	r1, r1, #31
 800093e:	2001      	movs	r0, #1
 8000940:	fa00 f101 	lsl.w	r1, r0, r1
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/misc.c:166
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000944:	3220      	adds	r2, #32
 8000946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/misc.c:169
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000ed00 	.word	0xe000ed00
 8000958:	e000e100 	.word	0xe000e100

0800095c <GPIO_Init>:
GPIO_Init():
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:203
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800095c:	b480      	push	{r7}
 800095e:	b087      	sub	sp, #28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:204
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:214
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	e076      	b.n	8000a66 <GPIO_Init+0x10a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:216
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	2201      	movs	r2, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:218
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	4013      	ands	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:220

    if (currentpin == pos)
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	429a      	cmp	r2, r3
 8000992:	d165      	bne.n	8000a60 <GPIO_Init+0x104>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:222
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	2103      	movs	r1, #3
 800099e:	fa01 f303 	lsl.w	r3, r1, r3
 80009a2:	43db      	mvns	r3, r3
 80009a4:	401a      	ands	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:223
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	791b      	ldrb	r3, [r3, #4]
 80009b2:	4619      	mov	r1, r3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	fa01 f303 	lsl.w	r3, r1, r3
 80009bc:	431a      	orrs	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:225

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	791b      	ldrb	r3, [r3, #4]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d003      	beq.n	80009d2 <GPIO_Init+0x76>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:225 (discriminator 1)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	791b      	ldrb	r3, [r3, #4]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d12e      	bne.n	8000a30 <GPIO_Init+0xd4>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:231
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	2103      	movs	r1, #3
 80009dc:	fa01 f303 	lsl.w	r3, r1, r3
 80009e0:	43db      	mvns	r3, r3
 80009e2:	401a      	ands	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:232
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	795b      	ldrb	r3, [r3, #5]
 80009f0:	4619      	mov	r1, r3
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	431a      	orrs	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:238

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	2101      	movs	r1, #1
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	401a      	ands	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:239
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	685a      	ldr	r2, [r3, #4]
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	799b      	ldrb	r3, [r3, #6]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	fa01 f303 	lsl.w	r3, r1, r3
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:243
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	2103      	movs	r1, #3
 8000a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	401a      	ands	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:244
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	79db      	ldrb	r3, [r3, #7]
 8000a50:	4619      	mov	r1, r3
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:214
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	3301      	adds	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:214 (discriminator 1)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d985      	bls.n	8000978 <GPIO_Init+0x1c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:247
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000a6c:	371c      	adds	r7, #28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <GPIO_WriteBit>:
GPIO_WriteBit():
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:456
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	4613      	mov	r3, r2
 8000a82:	460a      	mov	r2, r1
 8000a84:	807a      	strh	r2, [r7, #2]
 8000a86:	707b      	strb	r3, [r7, #1]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:462
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000a88:	787b      	ldrb	r3, [r7, #1]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <GPIO_WriteBit+0x1e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:464
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	887a      	ldrh	r2, [r7, #2]
 8000a92:	831a      	strh	r2, [r3, #24]
 8000a94:	e002      	b.n	8000a9c <GPIO_WriteBit+0x24>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:468
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	887a      	ldrh	r2, [r7, #2]
 8000a9a:	835a      	strh	r2, [r3, #26]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:470
  }
}
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <GPIO_ToggleBits>:
GPIO_ToggleBits():
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:497
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	807b      	strh	r3, [r7, #2]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:501
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	695a      	ldr	r2, [r3, #20]
 8000ab8:	887b      	ldrh	r3, [r7, #2]
 8000aba:	405a      	eors	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	615a      	str	r2, [r3, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:502
}
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <GPIO_PinAFConfig>:
GPIO_PinAFConfig():
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:580
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	460a      	mov	r2, r1
 8000ad8:	807a      	strh	r2, [r7, #2]
 8000ada:	707b      	strb	r3, [r7, #1]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:581
  uint32_t temp = 0x00;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:582
  uint32_t temp_2 = 0x00;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:589
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000ae4:	787a      	ldrb	r2, [r7, #1]
 8000ae6:	887b      	ldrh	r3, [r7, #2]
 8000ae8:	f003 0307 	and.w	r3, r3, #7
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:590
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000af4:	887b      	ldrh	r3, [r7, #2]
 8000af6:	08db      	lsrs	r3, r3, #3
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	461a      	mov	r2, r3
 8000afc:	887b      	ldrh	r3, [r7, #2]
 8000afe:	08db      	lsrs	r3, r3, #3
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	4619      	mov	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3108      	adds	r1, #8
 8000b08:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8000b0c:	887b      	ldrh	r3, [r7, #2]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	200f      	movs	r0, #15
 8000b16:	fa00 f303 	lsl.w	r3, r0, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	4019      	ands	r1, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3208      	adds	r2, #8
 8000b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:591
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000b26:	887b      	ldrh	r3, [r7, #2]
 8000b28:	08db      	lsrs	r3, r3, #3
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3208      	adds	r2, #8
 8000b32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:592
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000b3c:	887b      	ldrh	r3, [r7, #2]
 8000b3e:	08db      	lsrs	r3, r3, #3
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	461a      	mov	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3208      	adds	r2, #8
 8000b48:	68b9      	ldr	r1, [r7, #8]
 8000b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:593
}
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <RCC_GetClocksFreq>:
RCC_GetClocksFreq():
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1032
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1033
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	2302      	movs	r3, #2
 8000b76:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1036

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b78:	4b48      	ldr	r3, [pc, #288]	; (8000c9c <RCC_GetClocksFreq+0x144>)
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	f003 030c 	and.w	r3, r3, #12
 8000b80:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1038

  switch (tmp)
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d007      	beq.n	8000b98 <RCC_GetClocksFreq+0x40>
 8000b88:	2b08      	cmp	r3, #8
 8000b8a:	d009      	beq.n	8000ba0 <RCC_GetClocksFreq+0x48>
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d13f      	bne.n	8000c10 <RCC_GetClocksFreq+0xb8>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1041
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a43      	ldr	r2, [pc, #268]	; (8000ca0 <RCC_GetClocksFreq+0x148>)
 8000b94:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1042
      break;
 8000b96:	e03f      	b.n	8000c18 <RCC_GetClocksFreq+0xc0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1044
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a42      	ldr	r2, [pc, #264]	; (8000ca4 <RCC_GetClocksFreq+0x14c>)
 8000b9c:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1045
      break;
 8000b9e:	e03b      	b.n	8000c18 <RCC_GetClocksFreq+0xc0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1051
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000ba0:	4b3e      	ldr	r3, [pc, #248]	; (8000c9c <RCC_GetClocksFreq+0x144>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ba8:	0d9b      	lsrs	r3, r3, #22
 8000baa:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1052
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bac:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <RCC_GetClocksFreq+0x144>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000bb4:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1054
      
      if (pllsource != 0)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d00d      	beq.n	8000bd8 <RCC_GetClocksFreq+0x80>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1057
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000bbc:	4a39      	ldr	r2, [pc, #228]	; (8000ca4 <RCC_GetClocksFreq+0x14c>)
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bc4:	4b35      	ldr	r3, [pc, #212]	; (8000c9c <RCC_GetClocksFreq+0x144>)
 8000bc6:	6859      	ldr	r1, [r3, #4]
 8000bc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000bcc:	400b      	ands	r3, r1
 8000bce:	099b      	lsrs	r3, r3, #6
 8000bd0:	fb03 f302 	mul.w	r3, r3, r2
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	e00c      	b.n	8000bf2 <RCC_GetClocksFreq+0x9a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1062
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000bd8:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <RCC_GetClocksFreq+0x148>)
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000be0:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <RCC_GetClocksFreq+0x144>)
 8000be2:	6859      	ldr	r1, [r3, #4]
 8000be4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000be8:	400b      	ands	r3, r1
 8000bea:	099b      	lsrs	r3, r3, #6
 8000bec:	fb03 f302 	mul.w	r3, r3, r2
 8000bf0:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1065
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <RCC_GetClocksFreq+0x144>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bfa:	0c1b      	lsrs	r3, r3, #16
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1066
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000c02:	69fa      	ldr	r2, [r7, #28]
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1067
      break;
 8000c0e:	e003      	b.n	8000c18 <RCC_GetClocksFreq+0xc0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1069
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a23      	ldr	r2, [pc, #140]	; (8000ca0 <RCC_GetClocksFreq+0x148>)
 8000c14:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1070
      break;
 8000c16:	bf00      	nop
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1075
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000c18:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <RCC_GetClocksFreq+0x144>)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c20:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1076
  tmp = tmp >> 4;
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	091b      	lsrs	r3, r3, #4
 8000c26:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1077
  presc = APBAHBPrescTable[tmp];
 8000c28:	4a1f      	ldr	r2, [pc, #124]	; (8000ca8 <RCC_GetClocksFreq+0x150>)
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1079
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	40da      	lsrs	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1082

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <RCC_GetClocksFreq+0x144>)
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000c48:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1083
  tmp = tmp >> 10;
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	0a9b      	lsrs	r3, r3, #10
 8000c4e:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1084
  presc = APBAHBPrescTable[tmp];
 8000c50:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <RCC_GetClocksFreq+0x150>)
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	4413      	add	r3, r2
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1086
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	40da      	lsrs	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1089

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <RCC_GetClocksFreq+0x144>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000c70:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1090
  tmp = tmp >> 13;
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	0b5b      	lsrs	r3, r3, #13
 8000c76:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1091
  presc = APBAHBPrescTable[tmp];
 8000c78:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <RCC_GetClocksFreq+0x150>)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1093
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	40da      	lsrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1094
}
 8000c90:	3724      	adds	r7, #36	; 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	00f42400 	.word	0x00f42400
 8000ca4:	007a1200 	.word	0x007a1200
 8000ca8:	20000000 	.word	0x20000000

08000cac <RCC_AHB1PeriphClockCmd>:
RCC_AHB1PeriphClockCmd():
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1461
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1466
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000cb8:	78fb      	ldrb	r3, [r7, #3]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d006      	beq.n	8000ccc <RCC_AHB1PeriphClockCmd+0x20>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1468
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <RCC_AHB1PeriphClockCmd+0x38>)
 8000cc0:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <RCC_AHB1PeriphClockCmd+0x38>)
 8000cc2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	631a      	str	r2, [r3, #48]	; 0x30
 8000cca:	e006      	b.n	8000cda <RCC_AHB1PeriphClockCmd+0x2e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1472
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <RCC_AHB1PeriphClockCmd+0x38>)
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <RCC_AHB1PeriphClockCmd+0x38>)
 8000cd0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	43d2      	mvns	r2, r2
 8000cd6:	400a      	ands	r2, r1
 8000cd8:	631a      	str	r2, [r3, #48]	; 0x30
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1474
  }
}
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <RCC_APB2PeriphClockCmd>:
RCC_APB2PeriphClockCmd():
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1618
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1623
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cf4:	78fb      	ldrb	r3, [r7, #3]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d006      	beq.n	8000d08 <RCC_APB2PeriphClockCmd+0x20>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1625
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <RCC_APB2PeriphClockCmd+0x38>)
 8000cfc:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <RCC_APB2PeriphClockCmd+0x38>)
 8000cfe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	430a      	orrs	r2, r1
 8000d04:	645a      	str	r2, [r3, #68]	; 0x44
 8000d06:	e006      	b.n	8000d16 <RCC_APB2PeriphClockCmd+0x2e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1629
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <RCC_APB2PeriphClockCmd+0x38>)
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <RCC_APB2PeriphClockCmd+0x38>)
 8000d0c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	43d2      	mvns	r2, r2
 8000d12:	400a      	ands	r2, r1
 8000d14:	645a      	str	r2, [r3, #68]	; 0x44
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1631
  }
}
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	40023800 	.word	0x40023800

08000d24 <USART_Init>:
USART_Init():
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:247
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:248
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:249
  uint32_t integerdivider = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:250
  uint32_t fractionaldivider = 0x00;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:269
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	8a1b      	ldrh	r3, [r3, #16]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:272

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:276

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	88db      	ldrh	r3, [r3, #6]
 8000d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d54:	4313      	orrs	r3, r2
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:279
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	821a      	strh	r2, [r3, #16]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:282

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	899b      	ldrh	r3, [r3, #12]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:285

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000d6e:	f023 030c 	bic.w	r3, r3, #12
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:291

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	889a      	ldrh	r2, [r3, #4]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	891b      	ldrh	r3, [r3, #8]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b29a      	uxth	r2, r3
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:292
            USART_InitStruct->USART_Mode;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	895b      	ldrh	r3, [r3, #10]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:291

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000d84:	4313      	orrs	r3, r2
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:295
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	819a      	strh	r2, [r3, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:298

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	8a9b      	ldrh	r3, [r3, #20]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:301

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:305

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	899b      	ldrh	r3, [r3, #12]
 8000daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dac:	4313      	orrs	r3, r2
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:308

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	829a      	strh	r2, [r3, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:312

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fecb 	bl	8000b58 <RCC_GetClocksFreq>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:314

  if ((USARTx == USART1) || (USARTx == USART6))
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <USART_Init+0x168>)
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d003      	beq.n	8000dd2 <USART_Init+0xae>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:314 (discriminator 1)
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	4b30      	ldr	r3, [pc, #192]	; (8000e90 <USART_Init+0x16c>)
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d102      	bne.n	8000dd8 <USART_Init+0xb4>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:316
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	623b      	str	r3, [r7, #32]
 8000dd6:	e001      	b.n	8000ddc <USART_Init+0xb8>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:320
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	623b      	str	r3, [r7, #32]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:324
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	899b      	ldrh	r3, [r3, #12]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	da0c      	bge.n	8000e04 <USART_Init+0xe0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:327
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000dea:	6a3a      	ldr	r2, [r7, #32]
 8000dec:	4613      	mov	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	009a      	lsls	r2, r3, #2
 8000df4:	441a      	add	r2, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	e00b      	b.n	8000e1c <USART_Init+0xf8>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:332
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000e04:	6a3a      	ldr	r2, [r7, #32]
 8000e06:	4613      	mov	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	009a      	lsls	r2, r3, #2
 8000e0e:	441a      	add	r2, r3
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:334
  }
  tmpreg = (integerdivider / 100) << 4;
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <USART_Init+0x170>)
 8000e20:	fba3 1302 	umull	r1, r3, r3, r2
 8000e24:	095b      	lsrs	r3, r3, #5
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:337

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2c:	091b      	lsrs	r3, r3, #4
 8000e2e:	2264      	movs	r2, #100	; 0x64
 8000e30:	fb02 f303 	mul.w	r3, r2, r3
 8000e34:	69fa      	ldr	r2, [r7, #28]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:340

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	899b      	ldrh	r3, [r3, #12]
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	b21b      	sxth	r3, r3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	da0d      	bge.n	8000e64 <USART_Init+0x140>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:342
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000e50:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <USART_Init+0x170>)
 8000e52:	fba3 1302 	umull	r1, r3, r3, r2
 8000e56:	095b      	lsrs	r3, r3, #5
 8000e58:	f003 0307 	and.w	r3, r3, #7
 8000e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
 8000e62:	e00c      	b.n	8000e7e <USART_Init+0x15a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:346
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <USART_Init+0x170>)
 8000e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	f003 030f 	and.w	r3, r3, #15
 8000e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:350
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	811a      	strh	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:351
}
 8000e86:	3728      	adds	r7, #40	; 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40011000 	.word	0x40011000
 8000e90:	40011400 	.word	0x40011400
 8000e94:	51eb851f 	.word	0x51eb851f

08000e98 <USART_Cmd>:
USART_Cmd():
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:428
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:433
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ea4:	78fb      	ldrb	r3, [r7, #3]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d008      	beq.n	8000ebc <USART_Cmd+0x24>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:436
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	899b      	ldrh	r3, [r3, #12]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	819a      	strh	r2, [r3, #12]
 8000eba:	e007      	b.n	8000ecc <USART_Cmd+0x34>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:441
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	899b      	ldrh	r3, [r3, #12]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	819a      	strh	r2, [r3, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:443
  }
}
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <USART_SendData>:
USART_SendData():
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:558
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:564
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000ee4:	887b      	ldrh	r3, [r7, #2]
 8000ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	809a      	strh	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:565
}
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <USART_ITConfig>:
USART_ITConfig():
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1232
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	4613      	mov	r3, r2
 8000f06:	460a      	mov	r2, r1
 8000f08:	807a      	strh	r2, [r7, #2]
 8000f0a:	707b      	strb	r3, [r7, #1]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1233
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1234
  uint32_t usartxbase = 0x00;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1246
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1249

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	095b      	lsrs	r3, r3, #5
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1252

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	f003 031f 	and.w	r3, r3, #31
 8000f30:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1253
  itmask = (((uint32_t)0x01) << itpos);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2201      	movs	r2, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1255
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d103      	bne.n	8000f4a <USART_ITConfig+0x4e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1257
  {
    usartxbase += 0x0C;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	330c      	adds	r3, #12
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	e009      	b.n	8000f5e <USART_ITConfig+0x62>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1259
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d103      	bne.n	8000f58 <USART_ITConfig+0x5c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1261
  {
    usartxbase += 0x10;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3310      	adds	r3, #16
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e002      	b.n	8000f5e <USART_ITConfig+0x62>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1265
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	3314      	adds	r3, #20
 8000f5c:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1267
  }
  if (NewState != DISABLE)
 8000f5e:	787b      	ldrb	r3, [r7, #1]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d006      	beq.n	8000f72 <USART_ITConfig+0x76>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1269
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	6811      	ldr	r1, [r2, #0]
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	e006      	b.n	8000f80 <USART_ITConfig+0x84>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1273
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	6811      	ldr	r1, [r2, #0]
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	43d2      	mvns	r2, r2
 8000f7c:	400a      	ands	r2, r1
 8000f7e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1275
  }
}
 8000f80:	371c      	adds	r7, #28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <USART_GetITStatus>:
USART_GetITStatus():
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1379
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1380
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1381
  ITStatus bitstatus = RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	74fb      	strb	r3, [r7, #19]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1393
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	095b      	lsrs	r3, r3, #5
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1395
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000fb2:	887b      	ldrh	r3, [r7, #2]
 8000fb4:	f003 031f 	and.w	r3, r3, #31
 8000fb8:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1396
  itmask = (uint32_t)0x01 << itmask;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1398
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d106      	bne.n	8000fd8 <USART_GetITStatus+0x4c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1400
  {
    itmask &= USARTx->CR1;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	899b      	ldrh	r3, [r3, #12]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	e00f      	b.n	8000ff8 <USART_GetITStatus+0x6c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1402
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d106      	bne.n	8000fec <USART_GetITStatus+0x60>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1404
  {
    itmask &= USARTx->CR2;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	8a1b      	ldrh	r3, [r3, #16]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	e005      	b.n	8000ff8 <USART_GetITStatus+0x6c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1408
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	8a9b      	ldrh	r3, [r3, #20]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1411
  }
  
  bitpos = USART_IT >> 0x08;
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	0a1b      	lsrs	r3, r3, #8
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1412
  bitpos = (uint32_t)0x01 << bitpos;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2201      	movs	r2, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1413
  bitpos &= USARTx->SR;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	b29b      	uxth	r3, r3
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	4013      	ands	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1414
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <USART_GetITStatus+0x9c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1414 (discriminator 1)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <USART_GetITStatus+0x9c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1416
  {
    bitstatus = SET;
 8001022:	2301      	movs	r3, #1
 8001024:	74fb      	strb	r3, [r7, #19]
 8001026:	e001      	b.n	800102c <USART_GetITStatus+0xa0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1420
  }
  else
  {
    bitstatus = RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	74fb      	strb	r3, [r7, #19]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1423
  }
  
  return bitstatus;  
 800102c:	7cfb      	ldrb	r3, [r7, #19]
/home/chansak/workspace/RTOS_v8/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1424
}
 800102e:	4618      	mov	r0, r3
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <vListInitialise>:
vListInitialise():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:76
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:80
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f103 0208 	add.w	r2, r3, #8
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:84

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:88

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f103 0208 	add.w	r2, r3, #8
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:89
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f103 0208 	add.w	r2, r3, #8
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	611a      	str	r2, [r3, #16]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:91

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:92
}
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <vListInitialiseItem>:
vListInitialiseItem():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:96
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:98
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:99
}
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <vListInsertEnd>:
vListInsertEnd():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:103
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:104
ListItem_t * const pxIndex = pxList->pxIndex;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:109

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:110
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:111
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:112
	pxIndex->pxPrevious = pxNewListItem;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:115

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	611a      	str	r2, [r3, #16]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:117

	( pxList->uxNumberOfItems )++;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:118
}
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <vListInsert>:
vListInsert():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:122
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:124
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:135
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f2:	d103      	bne.n	80010fc <vListInsert+0x20>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:137
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	e00c      	b.n	8001116 <vListInsert+0x3a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:159
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3308      	adds	r3, #8
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e002      	b.n	800110a <vListInsert+0x2e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:159 (discriminator 2)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:159 (discriminator 1)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	429a      	cmp	r2, r3
 8001114:	d9f6      	bls.n	8001104 <vListInsert+0x28>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:166
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:167
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:168
	pxNewListItem->pxPrevious = pxIterator;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:169
	pxIterator->pxNext = pxNewListItem;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:173

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	611a      	str	r2, [r3, #16]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:175

	( pxList->uxNumberOfItems )++;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:176
}
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <uxListRemove>:
uxListRemove():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:180
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:183
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:185

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6892      	ldr	r2, [r2, #8]
 8001162:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:186
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	6852      	ldr	r2, [r2, #4]
 800116c:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:189

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	429a      	cmp	r2, r3
 8001176:	d103      	bne.n	8001180 <uxListRemove+0x34>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:191
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:198
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:199
	( pxList->uxNumberOfItems )--;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	1e5a      	subs	r2, r3, #1
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:201

	return pxList->uxNumberOfItems;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/list.c:202
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <xQueueGenericReset>:
xQueueGenericReset():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:246
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:247
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:249

	configASSERT( pxQueue );
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <xQueueGenericReset+0x1a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:249 (discriminator 1)
 80011b4:	f001 fecc 	bl	8002f50 <ulPortSetInterruptMask>
 80011b8:	e7fe      	b.n	80011b8 <xQueueGenericReset+0x18>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:251

	taskENTER_CRITICAL();
 80011ba:	f001 fea1 	bl	8002f00 <vPortEnterCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:253
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c6:	68f9      	ldr	r1, [r7, #12]
 80011c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80011ca:	fb01 f303 	mul.w	r3, r1, r3
 80011ce:	441a      	add	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:254
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	639a      	str	r2, [r3, #56]	; 0x38
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:255
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:256
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ea:	3b01      	subs	r3, #1
 80011ec:	68f9      	ldr	r1, [r7, #12]
 80011ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80011f0:	fb01 f303 	mul.w	r3, r1, r3
 80011f4:	441a      	add	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:257
		pxQueue->xRxLock = queueUNLOCKED;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001200:	645a      	str	r2, [r3, #68]	; 0x44
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:258
		pxQueue->xTxLock = queueUNLOCKED;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	649a      	str	r2, [r3, #72]	; 0x48
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:260

		if( xNewQueue == pdFALSE )
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d10e      	bne.n	800122e <xQueueGenericReset+0x8e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:267
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d014      	beq.n	8001242 <xQueueGenericReset+0xa2>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:269
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3310      	adds	r3, #16
 800121c:	4618      	mov	r0, r3
 800121e:	f000 ff11 	bl	8002044 <xTaskRemoveFromEventList>
 8001222:	4603      	mov	r3, r0
 8001224:	2b01      	cmp	r3, #1
 8001226:	d10c      	bne.n	8001242 <xQueueGenericReset+0xa2>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:271
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001228:	f001 fe5a 	bl	8002ee0 <vPortYield>
 800122c:	e009      	b.n	8001242 <xQueueGenericReset+0xa2>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:286
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3310      	adds	r3, #16
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff02 	bl	800103c <vListInitialise>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:287
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3324      	adds	r3, #36	; 0x24
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fefd 	bl	800103c <vListInitialise>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:290
		}
	}
	taskEXIT_CRITICAL();
 8001242:	f001 fe6d 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:294

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001246:	2301      	movs	r3, #1
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:295
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <xQueueGenericCreate>:
xQueueGenericCreate():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:299
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	4613      	mov	r3, r2
 800125c:	71fb      	strb	r3, [r7, #7]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:302
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:309
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d02a      	beq.n	80012be <xQueueGenericCreate+0x6e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:311
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 8001268:	2054      	movs	r0, #84	; 0x54
 800126a:	f001 fc7f 	bl	8002b6c <pvPortMalloc>
 800126e:	61b8      	str	r0, [r7, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:312
		if( pxNewQueue != NULL )
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d023      	beq.n	80012be <xQueueGenericCreate+0x6e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:316
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	fb02 f303 	mul.w	r3, r2, r3
 800127e:	3301      	adds	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:318

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f001 fc72 	bl	8002b6c <pvPortMalloc>
 8001288:	4602      	mov	r2, r0
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:319
			if( pxNewQueue->pcHead != NULL )
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d010      	beq.n	80012b8 <xQueueGenericCreate+0x68>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:323
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	63da      	str	r2, [r3, #60]	; 0x3c
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:324
				pxNewQueue->uxItemSize = uxItemSize;
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	641a      	str	r2, [r3, #64]	; 0x40
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:325
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80012a2:	69b8      	ldr	r0, [r7, #24]
 80012a4:	2101      	movs	r1, #1
 80012a6:	f7ff ff7b 	bl	80011a0 <xQueueGenericReset>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:329

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:340
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	61fb      	str	r3, [r7, #28]
 80012b6:	e002      	b.n	80012be <xQueueGenericCreate+0x6e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:345
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 80012b8:	69b8      	ldr	r0, [r7, #24]
 80012ba:	f001 fce9 	bl	8002c90 <vPortFree>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:358
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d102      	bne.n	80012ca <xQueueGenericCreate+0x7a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:358 (discriminator 1)
 80012c4:	f001 fe44 	bl	8002f50 <ulPortSetInterruptMask>
 80012c8:	e7fe      	b.n	80012c8 <xQueueGenericCreate+0x78>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:360

	return xReturn;
 80012ca:	69fb      	ldr	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:361
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <xQueueGenericSend>:
xQueueGenericSend():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:584

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:585
BaseType_t xEntryTimeSet = pdFALSE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:587
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:589

	configASSERT( pxQueue );
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <xQueueGenericSend+0x22>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:589 (discriminator 1)
 80012f0:	f001 fe2e 	bl	8002f50 <ulPortSetInterruptMask>
 80012f4:	e7fe      	b.n	80012f4 <xQueueGenericSend+0x20>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:590
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d103      	bne.n	8001304 <xQueueGenericSend+0x30>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:590 (discriminator 2)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <xQueueGenericSend+0x34>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:590 (discriminator 1)
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <xQueueGenericSend+0x36>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:590 (discriminator 3)
 8001308:	2300      	movs	r3, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:590 (discriminator 4)
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <xQueueGenericSend+0x40>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:590 (discriminator 1)
 800130e:	f001 fe1f 	bl	8002f50 <ulPortSetInterruptMask>
 8001312:	e7fe      	b.n	8001312 <xQueueGenericSend+0x3e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:591
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d103      	bne.n	8001322 <xQueueGenericSend+0x4e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:591 (discriminator 2)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131e:	2b01      	cmp	r3, #1
 8001320:	d101      	bne.n	8001326 <xQueueGenericSend+0x52>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:591 (discriminator 1)
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <xQueueGenericSend+0x54>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:591 (discriminator 3)
 8001326:	2300      	movs	r3, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:591 (discriminator 4)
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <xQueueGenericSend+0x5e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:591 (discriminator 1)
 800132c:	f001 fe10 	bl	8002f50 <ulPortSetInterruptMask>
 8001330:	e7fe      	b.n	8001330 <xQueueGenericSend+0x5c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:594
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001332:	f001 f8d5 	bl	80024e0 <xTaskGetSchedulerState>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <xQueueGenericSend+0x6e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:594 (discriminator 2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <xQueueGenericSend+0x72>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:594 (discriminator 1)
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <xQueueGenericSend+0x74>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:594 (discriminator 3)
 8001346:	2300      	movs	r3, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:594 (discriminator 4)
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <xQueueGenericSend+0x7e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:594 (discriminator 1)
 800134c:	f001 fe00 	bl	8002f50 <ulPortSetInterruptMask>
 8001350:	e7fe      	b.n	8001350 <xQueueGenericSend+0x7c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:604
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001352:	f001 fdd5 	bl	8002f00 <vPortEnterCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:610
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135e:	429a      	cmp	r2, r3
 8001360:	d302      	bcc.n	8001368 <xQueueGenericSend+0x94>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:610 (discriminator 1)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d116      	bne.n	8001396 <xQueueGenericSend+0xc2>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:613
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001368:	69b8      	ldr	r0, [r7, #24]
 800136a:	68b9      	ldr	r1, [r7, #8]
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	f000 f9b9 	bl	80016e4 <prvCopyDataToQueue>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:660
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	2b00      	cmp	r3, #0
 8001378:	d009      	beq.n	800138e <xQueueGenericSend+0xba>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:662
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	3324      	adds	r3, #36	; 0x24
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fe60 	bl	8002044 <xTaskRemoveFromEventList>
 8001384:	4603      	mov	r3, r0
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <xQueueGenericSend+0xba>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:668
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800138a:	f001 fda9 	bl	8002ee0 <vPortYield>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:682
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800138e:	f001 fdc7 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:686

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8001392:	2301      	movs	r3, #1
 8001394:	e059      	b.n	800144a <xQueueGenericSend+0x176>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:690
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d103      	bne.n	80013a4 <xQueueGenericSend+0xd0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:694
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800139c:	f001 fdc0 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:699

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	e052      	b.n	800144a <xQueueGenericSend+0x176>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:701
				}
				else if( xEntryTimeSet == pdFALSE )
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d106      	bne.n	80013b8 <xQueueGenericSend+0xe4>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:705
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80013aa:	f107 0310 	add.w	r3, r7, #16
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fea4 	bl	80020fc <vTaskSetTimeOutState>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:706
					xEntryTimeSet = pdTRUE;
 80013b4:	2301      	movs	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:715
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80013b8:	f001 fdb2 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:720

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80013bc:	f000 fc0c 	bl	8001bd8 <vTaskSuspendAll>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:721
		prvLockQueue( pxQueue );
 80013c0:	f001 fd9e 	bl	8002f00 <vPortEnterCritical>
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d102      	bne.n	80013d4 <xQueueGenericSend+0x100>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:721 (discriminator 1)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	2200      	movs	r2, #0
 80013d2:	645a      	str	r2, [r3, #68]	; 0x44
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:721 (discriminator 2)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d102      	bne.n	80013e4 <xQueueGenericSend+0x110>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:721 (discriminator 1)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2200      	movs	r2, #0
 80013e2:	649a      	str	r2, [r3, #72]	; 0x48
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:721 (discriminator 2)
 80013e4:	f001 fd9c 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:724 (discriminator 2)

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80013e8:	f107 0210 	add.w	r2, r7, #16
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f000 fe9d 	bl	8002130 <xTaskCheckForTimeOut>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d11e      	bne.n	800143a <xQueueGenericSend+0x166>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:726
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80013fc:	69b8      	ldr	r0, [r7, #24]
 80013fe:	f000 fa61 	bl	80018c4 <prvIsQueueFull>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d012      	beq.n	800142e <xQueueGenericSend+0x15a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:729
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	f103 0210 	add.w	r2, r3, #16
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4610      	mov	r0, r2
 8001412:	4619      	mov	r1, r3
 8001414:	f000 fdb8 	bl	8001f88 <vTaskPlaceOnEventList>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:736
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001418:	69b8      	ldr	r0, [r7, #24]
 800141a:	f000 f9f1 	bl	8001800 <prvUnlockQueue>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:743
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800141e:	f000 fbe9 	bl	8001bf4 <xTaskResumeAll>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10f      	bne.n	8001448 <xQueueGenericSend+0x174>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:745
				{
					portYIELD_WITHIN_API();
 8001428:	f001 fd5a 	bl	8002ee0 <vPortYield>
 800142c:	e00c      	b.n	8001448 <xQueueGenericSend+0x174>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:751
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800142e:	69b8      	ldr	r0, [r7, #24]
 8001430:	f000 f9e6 	bl	8001800 <prvUnlockQueue>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:752
				( void ) xTaskResumeAll();
 8001434:	f000 fbde 	bl	8001bf4 <xTaskResumeAll>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:766
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8001438:	e78b      	b.n	8001352 <xQueueGenericSend+0x7e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:758
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800143a:	69b8      	ldr	r0, [r7, #24]
 800143c:	f000 f9e0 	bl	8001800 <prvUnlockQueue>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:759
			( void ) xTaskResumeAll();
 8001440:	f000 fbd8 	bl	8001bf4 <xTaskResumeAll>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:764

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001444:	2300      	movs	r3, #0
 8001446:	e000      	b.n	800144a <xQueueGenericSend+0x176>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:766
		}
	}
 8001448:	e783      	b.n	8001352 <xQueueGenericSend+0x7e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:767
}
 800144a:	4618      	mov	r0, r3
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop

08001454 <xQueueGenericSendFromISR>:
xQueueGenericSendFromISR():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1016

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1019
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1021

	configASSERT( pxQueue );
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d102      	bne.n	8001472 <xQueueGenericSendFromISR+0x1e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1021 (discriminator 1)
 800146c:	f001 fd70 	bl	8002f50 <ulPortSetInterruptMask>
 8001470:	e7fe      	b.n	8001470 <xQueueGenericSendFromISR+0x1c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1022
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d103      	bne.n	8001480 <xQueueGenericSendFromISR+0x2c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1022 (discriminator 2)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <xQueueGenericSendFromISR+0x30>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1022 (discriminator 1)
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <xQueueGenericSendFromISR+0x32>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1022 (discriminator 3)
 8001484:	2300      	movs	r3, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1022 (discriminator 4)
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <xQueueGenericSendFromISR+0x3c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1022 (discriminator 1)
 800148a:	f001 fd61 	bl	8002f50 <ulPortSetInterruptMask>
 800148e:	e7fe      	b.n	800148e <xQueueGenericSendFromISR+0x3a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1023
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d103      	bne.n	800149e <xQueueGenericSendFromISR+0x4a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1023 (discriminator 2)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149a:	2b01      	cmp	r3, #1
 800149c:	d101      	bne.n	80014a2 <xQueueGenericSendFromISR+0x4e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1023 (discriminator 1)
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <xQueueGenericSendFromISR+0x50>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1023 (discriminator 3)
 80014a2:	2300      	movs	r3, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1023 (discriminator 4)
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <xQueueGenericSendFromISR+0x5a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1023 (discriminator 1)
 80014a8:	f001 fd52 	bl	8002f50 <ulPortSetInterruptMask>
 80014ac:	e7fe      	b.n	80014ac <xQueueGenericSendFromISR+0x58>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1039
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80014ae:	f001 fdb9 	bl	8003024 <vPortValidateInterruptPriority>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1046
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80014b2:	f001 fd4d 	bl	8002f50 <ulPortSetInterruptMask>
 80014b6:	6178      	str	r0, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1048
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d302      	bcc.n	80014ca <xQueueGenericSendFromISR+0x76>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1048 (discriminator 1)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d124      	bne.n	8001514 <xQueueGenericSendFromISR+0xc0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1052
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80014ca:	69b8      	ldr	r0, [r7, #24]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	f000 f908 	bl	80016e4 <prvCopyDataToQueue>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1056

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014dc:	d112      	bne.n	8001504 <xQueueGenericSendFromISR+0xb0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1111
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d013      	beq.n	800150e <xQueueGenericSendFromISR+0xba>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1113
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	3324      	adds	r3, #36	; 0x24
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 fdaa 	bl	8002044 <xTaskRemoveFromEventList>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00b      	beq.n	800150e <xQueueGenericSendFromISR+0xba>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1117
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d008      	beq.n	800150e <xQueueGenericSendFromISR+0xba>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1119
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	e004      	b.n	800150e <xQueueGenericSendFromISR+0xba>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1142
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	649a      	str	r2, [r3, #72]	; 0x48
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1145
			}

			xReturn = pdPASS;
 800150e:	2301      	movs	r3, #1
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	e001      	b.n	8001518 <xQueueGenericSendFromISR+0xc4>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1150
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1153
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001518:	6978      	ldr	r0, [r7, #20]
 800151a:	f001 fd23 	bl	8002f64 <vPortClearInterruptMask>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1155

	return xReturn;
 800151e:	69fb      	ldr	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1156
}
 8001520:	4618      	mov	r0, r3
 8001522:	3720      	adds	r7, #32
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <xQueueGenericReceive>:
xQueueGenericReceive():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1160
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1161
BaseType_t xEntryTimeSet = pdFALSE;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1164
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	623b      	str	r3, [r7, #32]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1166

	configASSERT( pxQueue );
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <xQueueGenericReceive+0x22>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1166 (discriminator 1)
 8001544:	f001 fd04 	bl	8002f50 <ulPortSetInterruptMask>
 8001548:	e7fe      	b.n	8001548 <xQueueGenericReceive+0x20>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1167
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d103      	bne.n	8001558 <xQueueGenericReceive+0x30>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1167 (discriminator 2)
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <xQueueGenericReceive+0x34>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1167 (discriminator 1)
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <xQueueGenericReceive+0x36>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1167 (discriminator 3)
 800155c:	2300      	movs	r3, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1167 (discriminator 4)
 800155e:	2b00      	cmp	r3, #0
 8001560:	d102      	bne.n	8001568 <xQueueGenericReceive+0x40>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1167 (discriminator 1)
 8001562:	f001 fcf5 	bl	8002f50 <ulPortSetInterruptMask>
 8001566:	e7fe      	b.n	8001566 <xQueueGenericReceive+0x3e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1170
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001568:	f000 ffba 	bl	80024e0 <xTaskGetSchedulerState>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d102      	bne.n	8001578 <xQueueGenericReceive+0x50>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1170 (discriminator 2)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <xQueueGenericReceive+0x54>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1170 (discriminator 1)
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <xQueueGenericReceive+0x56>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1170 (discriminator 3)
 800157c:	2300      	movs	r3, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1170 (discriminator 4)
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <xQueueGenericReceive+0x60>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1170 (discriminator 1)
 8001582:	f001 fce5 	bl	8002f50 <ulPortSetInterruptMask>
 8001586:	e7fe      	b.n	8001586 <xQueueGenericReceive+0x5e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1180
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001588:	f001 fcba 	bl	8002f00 <vPortEnterCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1184
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001590:	2b00      	cmp	r3, #0
 8001592:	d03b      	beq.n	800160c <xQueueGenericReceive+0xe4>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1188
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1190

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800159a:	6a38      	ldr	r0, [r7, #32]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	f000 f909 	bl	80017b4 <prvCopyDataFromQueue>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1192

				if( xJustPeeking == pdFALSE )
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d11c      	bne.n	80015e2 <xQueueGenericReceive+0xba>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1197
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ac:	1e5a      	subs	r2, r3, #1
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	639a      	str	r2, [r3, #56]	; 0x38
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1201

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d104      	bne.n	80015c4 <xQueueGenericReceive+0x9c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1205
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80015ba:	f000 ff81 	bl	80024c0 <xTaskGetCurrentTaskHandle>
 80015be:	4602      	mov	r2, r0
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1214
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d01b      	beq.n	8001604 <xQueueGenericReceive+0xdc>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1216
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	3310      	adds	r3, #16
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fd37 	bl	8002044 <xTaskRemoveFromEventList>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d113      	bne.n	8001604 <xQueueGenericReceive+0xdc>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1218
						{
							queueYIELD_IF_USING_PREEMPTION();
 80015dc:	f001 fc80 	bl	8002ee0 <vPortYield>
 80015e0:	e010      	b.n	8001604 <xQueueGenericReceive+0xdc>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1236
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	69fa      	ldr	r2, [r7, #28]
 80015e6:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1240

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d009      	beq.n	8001604 <xQueueGenericReceive+0xdc>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1244
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80015f0:	6a3b      	ldr	r3, [r7, #32]
 80015f2:	3324      	adds	r3, #36	; 0x24
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fd25 	bl	8002044 <xTaskRemoveFromEventList>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <xQueueGenericReceive+0xdc>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1247
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8001600:	f001 fc6e 	bl	8002ee0 <vPortYield>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1260
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8001604:	f001 fc8c 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1261
				return pdPASS;
 8001608:	2301      	movs	r3, #1
 800160a:	e066      	b.n	80016da <xQueueGenericReceive+0x1b2>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1265
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d103      	bne.n	800161a <xQueueGenericReceive+0xf2>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1269
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001612:	f001 fc85 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1271
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001616:	2300      	movs	r3, #0
 8001618:	e05f      	b.n	80016da <xQueueGenericReceive+0x1b2>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1273
				}
				else if( xEntryTimeSet == pdFALSE )
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	2b00      	cmp	r3, #0
 800161e:	d106      	bne.n	800162e <xQueueGenericReceive+0x106>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1277
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fd69 	bl	80020fc <vTaskSetTimeOutState>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1278
					xEntryTimeSet = pdTRUE;
 800162a:	2301      	movs	r3, #1
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1287
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800162e:	f001 fc77 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1292

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001632:	f000 fad1 	bl	8001bd8 <vTaskSuspendAll>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1293
		prvLockQueue( pxQueue );
 8001636:	f001 fc63 	bl	8002f00 <vPortEnterCritical>
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001642:	d102      	bne.n	800164a <xQueueGenericReceive+0x122>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1293 (discriminator 1)
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	2200      	movs	r2, #0
 8001648:	645a      	str	r2, [r3, #68]	; 0x44
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1293 (discriminator 2)
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001652:	d102      	bne.n	800165a <xQueueGenericReceive+0x132>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1293 (discriminator 1)
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	2200      	movs	r2, #0
 8001658:	649a      	str	r2, [r3, #72]	; 0x48
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1293 (discriminator 2)
 800165a:	f001 fc61 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1296 (discriminator 2)

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800165e:	f107 0214 	add.w	r2, r7, #20
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f000 fd62 	bl	8002130 <xTaskCheckForTimeOut>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d12b      	bne.n	80016ca <xQueueGenericReceive+0x1a2>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1298
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001672:	6a38      	ldr	r0, [r7, #32]
 8001674:	f000 f910 	bl	8001898 <prvIsQueueEmpty>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01f      	beq.n	80016be <xQueueGenericReceive+0x196>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1304
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d108      	bne.n	8001698 <xQueueGenericReceive+0x170>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1306
					{
						taskENTER_CRITICAL();
 8001686:	f001 fc3b 	bl	8002f00 <vPortEnterCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1308
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4618      	mov	r0, r3
 8001690:	f000 ff44 	bl	800251c <vTaskPriorityInherit>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1310
						}
						taskEXIT_CRITICAL();
 8001694:	f001 fc44 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1319
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f000 fc70 	bl	8001f88 <vTaskPlaceOnEventList>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1320
				prvUnlockQueue( pxQueue );
 80016a8:	6a38      	ldr	r0, [r7, #32]
 80016aa:	f000 f8a9 	bl	8001800 <prvUnlockQueue>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1321
				if( xTaskResumeAll() == pdFALSE )
 80016ae:	f000 faa1 	bl	8001bf4 <xTaskResumeAll>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10f      	bne.n	80016d8 <xQueueGenericReceive+0x1b0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1323
				{
					portYIELD_WITHIN_API();
 80016b8:	f001 fc12 	bl	8002ee0 <vPortYield>
 80016bc:	e00c      	b.n	80016d8 <xQueueGenericReceive+0x1b0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1333
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80016be:	6a38      	ldr	r0, [r7, #32]
 80016c0:	f000 f89e 	bl	8001800 <prvUnlockQueue>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1334
				( void ) xTaskResumeAll();
 80016c4:	f000 fa96 	bl	8001bf4 <xTaskResumeAll>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1344
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 80016c8:	e75e      	b.n	8001588 <xQueueGenericReceive+0x60>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1339
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80016ca:	6a38      	ldr	r0, [r7, #32]
 80016cc:	f000 f898 	bl	8001800 <prvUnlockQueue>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1340
			( void ) xTaskResumeAll();
 80016d0:	f000 fa90 	bl	8001bf4 <xTaskResumeAll>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1342
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 80016d4:	2300      	movs	r3, #0
 80016d6:	e000      	b.n	80016da <xQueueGenericReceive+0x1b2>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1344
		}
	}
 80016d8:	e756      	b.n	8001588 <xQueueGenericReceive+0x60>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1345
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop

080016e4 <prvCopyDataToQueue>:
prvCopyDataToQueue():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1585

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1586
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10c      	bne.n	8001712 <prvCopyDataToQueue+0x2e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1590
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d151      	bne.n	80017a4 <prvCopyDataToQueue+0xc0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1593
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4618      	mov	r0, r3
 8001706:	f000 ff67 	bl	80025d8 <vTaskPriorityDisinherit>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1594
				pxQueue->pxMutexHolder = NULL;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	e048      	b.n	80017a4 <prvCopyDataToQueue+0xc0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1603
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d11a      	bne.n	800174e <prvCopyDataToQueue+0x6a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1605
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	4610      	mov	r0, r2
 8001722:	68b9      	ldr	r1, [r7, #8]
 8001724:	461a      	mov	r2, r3
 8001726:	f001 fcdd 	bl	80030e4 <memcpy>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1606
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	441a      	add	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1607
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	429a      	cmp	r2, r3
 8001742:	d32f      	bcc.n	80017a4 <prvCopyDataToQueue+0xc0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1609
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	e02a      	b.n	80017a4 <prvCopyDataToQueue+0xc0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1618
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4610      	mov	r0, r2
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	461a      	mov	r2, r3
 800175c:	f001 fcc2 	bl	80030e4 <memcpy>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1619
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	425b      	negs	r3, r3
 800176a:	441a      	add	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1620
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d207      	bcs.n	800178c <prvCopyDataToQueue+0xa8>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1622
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	425b      	negs	r3, r3
 8001786:	441a      	add	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1629
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d108      	bne.n	80017a4 <prvCopyDataToQueue+0xc0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1631
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001796:	2b00      	cmp	r3, #0
 8001798:	d004      	beq.n	80017a4 <prvCopyDataToQueue+0xc0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1637
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179e:	1e5a      	subs	r2, r3, #1
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	639a      	str	r2, [r3, #56]	; 0x38
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1650
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	639a      	str	r2, [r3, #56]	; 0x38
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1651
}
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <prvCopyDataFromQueue>:
prvCopyDataFromQueue():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1655
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1656
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d019      	beq.n	80017fa <prvCopyDataFromQueue+0x46>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1658
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	441a      	add	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1659
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d303      	bcc.n	80017e8 <prvCopyDataFromQueue+0x34>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1661
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1667 (discriminator 1)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	4611      	mov	r1, r2
 80017f4:	461a      	mov	r2, r3
 80017f6:	f001 fc75 	bl	80030e4 <memcpy>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1673
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <prvUnlockQueue>:
prvUnlockQueue():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1677
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1684

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001808:	f001 fb7a 	bl	8002f00 <vPortEnterCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1687
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800180c:	e014      	b.n	8001838 <prvUnlockQueue+0x38>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1734
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00a      	beq.n	800182c <prvUnlockQueue+0x2c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1736
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3324      	adds	r3, #36	; 0x24
 800181a:	4618      	mov	r0, r3
 800181c:	f000 fc12 	bl	8002044 <xTaskRemoveFromEventList>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <prvUnlockQueue+0x2e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1740
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8001826:	f000 fcd3 	bl	80021d0 <vTaskMissedYield>
 800182a:	e000      	b.n	800182e <prvUnlockQueue+0x2e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1749
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 800182c:	e008      	b.n	8001840 <prvUnlockQueue+0x40>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1754
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001832:	1e5a      	subs	r2, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	649a      	str	r2, [r3, #72]	; 0x48
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1687 (discriminator 1)
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183c:	2b00      	cmp	r3, #0
 800183e:	dce6      	bgt.n	800180e <prvUnlockQueue+0xe>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1757
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f04f 32ff 	mov.w	r2, #4294967295
 8001846:	649a      	str	r2, [r3, #72]	; 0x48
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1759
	}
	taskEXIT_CRITICAL();
 8001848:	f001 fb6a 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1762

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800184c:	f001 fb58 	bl	8002f00 <vPortEnterCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1764
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001850:	e014      	b.n	800187c <prvUnlockQueue+0x7c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1766
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00f      	beq.n	800187a <prvUnlockQueue+0x7a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1768
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3310      	adds	r3, #16
 800185e:	4618      	mov	r0, r3
 8001860:	f000 fbf0 	bl	8002044 <xTaskRemoveFromEventList>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <prvUnlockQueue+0x6e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1770
				{
					vTaskMissedYield();
 800186a:	f000 fcb1 	bl	80021d0 <vTaskMissedYield>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1777 (discriminator 2)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	1e5a      	subs	r2, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	645a      	str	r2, [r3, #68]	; 0x44
 8001878:	e000      	b.n	800187c <prvUnlockQueue+0x7c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1781
			}
			else
			{
				break;
 800187a:	e003      	b.n	8001884 <prvUnlockQueue+0x84>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1764 (discriminator 1)
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	2b00      	cmp	r3, #0
 8001882:	dce6      	bgt.n	8001852 <prvUnlockQueue+0x52>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1785
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f04f 32ff 	mov.w	r2, #4294967295
 800188a:	645a      	str	r2, [r3, #68]	; 0x44
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1787
	}
	taskEXIT_CRITICAL();
 800188c:	f001 fb48 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1788
}
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop

08001898 <prvIsQueueEmpty>:
prvIsQueueEmpty():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1792
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1795
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80018a0:	f001 fb2e 	bl	8002f00 <vPortEnterCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1797
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d102      	bne.n	80018b2 <prvIsQueueEmpty+0x1a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1799
		{
			xReturn = pdTRUE;
 80018ac:	2301      	movs	r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	e001      	b.n	80018b6 <prvIsQueueEmpty+0x1e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1803
		}
		else
		{
			xReturn = pdFALSE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1806
		}
	}
	taskEXIT_CRITICAL();
 80018b6:	f001 fb33 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1808

	return xReturn;
 80018ba:	68fb      	ldr	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1809
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <prvIsQueueFull>:
prvIsQueueFull():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1831
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1834
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80018cc:	f001 fb18 	bl	8002f00 <vPortEnterCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1836
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d8:	429a      	cmp	r2, r3
 80018da:	d102      	bne.n	80018e2 <prvIsQueueFull+0x1e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1838
		{
			xReturn = pdTRUE;
 80018dc:	2301      	movs	r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	e001      	b.n	80018e6 <prvIsQueueFull+0x22>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1842
		}
		else
		{
			xReturn = pdFALSE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1845
		}
	}
	taskEXIT_CRITICAL();
 80018e6:	f001 fb1b 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1847

	return xReturn;
 80018ea:	68fb      	ldr	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:1848
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <vQueueAddToRegistry>:
vQueueAddToRegistry():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2147
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2152
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	e014      	b.n	800192e <vQueueAddToRegistry+0x3a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2154
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <vQueueAddToRegistry+0x4c>)
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10b      	bne.n	8001928 <vQueueAddToRegistry+0x34>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2157
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <vQueueAddToRegistry+0x4c>)
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	6839      	ldr	r1, [r7, #0]
 8001916:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2158
				xQueueRegistry[ ux ].xHandle = xQueue;
 800191a:	4a09      	ldr	r2, [pc, #36]	; (8001940 <vQueueAddToRegistry+0x4c>)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4413      	add	r3, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2159
				break;
 8001926:	e005      	b.n	8001934 <vQueueAddToRegistry+0x40>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2152
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3301      	adds	r3, #1
 800192c:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2152 (discriminator 1)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b07      	cmp	r3, #7
 8001932:	d9e7      	bls.n	8001904 <vQueueAddToRegistry+0x10>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2166
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20004588 	.word	0x20004588

08001944 <vQueueWaitForMessageRestricted>:
vQueueWaitForMessageRestricted():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2201
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2202
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2218
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001952:	f001 fad5 	bl	8002f00 <vPortEnterCritical>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195e:	d102      	bne.n	8001966 <vQueueWaitForMessageRestricted+0x22>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2218 (discriminator 1)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	645a      	str	r2, [r3, #68]	; 0x44
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2218 (discriminator 2)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800196a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196e:	d102      	bne.n	8001976 <vQueueWaitForMessageRestricted+0x32>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2218 (discriminator 1)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	649a      	str	r2, [r3, #72]	; 0x48
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2218 (discriminator 2)
 8001976:	f001 fad3 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2219 (discriminator 2)
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197e:	2b00      	cmp	r3, #0
 8001980:	d105      	bne.n	800198e <vQueueWaitForMessageRestricted+0x4a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2222
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3324      	adds	r3, #36	; 0x24
 8001986:	4618      	mov	r0, r3
 8001988:	6839      	ldr	r1, [r7, #0]
 800198a:	f000 fb33 	bl	8001ff4 <vTaskPlaceOnEventListRestricted>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2228
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f7ff ff36 	bl	8001800 <prvUnlockQueue>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/queue.c:2229
	}
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop

0800199c <xTaskGenericCreate>:
xTaskGenericCreate():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:496
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af02      	add	r7, sp, #8
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	4613      	mov	r3, r2
 80019aa:	80fb      	strh	r3, [r7, #6]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:500
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d102      	bne.n	80019b8 <xTaskGenericCreate+0x1c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:500 (discriminator 1)
 80019b2:	f001 facd 	bl	8002f50 <ulPortSetInterruptMask>
 80019b6:	e7fe      	b.n	80019b6 <xTaskGenericCreate+0x1a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:501
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 80019b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d902      	bls.n	80019c4 <xTaskGenericCreate+0x28>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:501 (discriminator 1)
 80019be:	f001 fac7 	bl	8002f50 <ulPortSetInterruptMask>
 80019c2:	e7fe      	b.n	80019c2 <xTaskGenericCreate+0x26>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:505

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	4618      	mov	r0, r3
 80019c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019ca:	f000 fd13 	bl	80023f4 <prvAllocateTCBAndStack>
 80019ce:	61b8      	str	r0, [r7, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:507

	if( pxNewTCB != NULL )
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d072      	beq.n	8001abc <xTaskGenericCreate+0x120>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:531
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019e0:	3b01      	subs	r3, #1
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:532
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f023 0307 	bic.w	r3, r3, #7
 80019ee:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:535

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( uint32_t ) pxTopOfStack & ( uint32_t ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <xTaskGenericCreate+0x64>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:535 (discriminator 1)
 80019fa:	f001 faa9 	bl	8002f50 <ulPortSetInterruptMask>
 80019fe:	e7fe      	b.n	80019fe <xTaskGenericCreate+0x62>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:552
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	69b8      	ldr	r0, [r7, #24]
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a0c:	f000 fbfc 	bl	8002208 <prvInitialiseTCBVariables>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:564
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a10:	6978      	ldr	r0, [r7, #20]
 8001a12:	68f9      	ldr	r1, [r7, #12]
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	f001 f99b 	bl	8002d50 <pxPortInitialiseStack>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:568
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8001a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <xTaskGenericCreate+0x90>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:573
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:582
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8001a2c:	f001 fa68 	bl	8002f00 <vPortEnterCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:584
		{
			uxCurrentNumberOfTasks++;
 8001a30:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <xTaskGenericCreate+0x150>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <xTaskGenericCreate+0x150>)
 8001a38:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:585
			if( pxCurrentTCB == NULL )
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <xTaskGenericCreate+0x154>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d109      	bne.n	8001a56 <xTaskGenericCreate+0xba>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:589
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8001a42:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <xTaskGenericCreate+0x154>)
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:591

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001a48:	4b28      	ldr	r3, [pc, #160]	; (8001aec <xTaskGenericCreate+0x150>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d10f      	bne.n	8001a70 <xTaskGenericCreate+0xd4>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:596
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8001a50:	f000 fc22 	bl	8002298 <prvInitialiseTaskLists>
 8001a54:	e00c      	b.n	8001a70 <xTaskGenericCreate+0xd4>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:608
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8001a56:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <xTaskGenericCreate+0x158>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d108      	bne.n	8001a70 <xTaskGenericCreate+0xd4>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:610
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <xTaskGenericCreate+0x154>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d802      	bhi.n	8001a70 <xTaskGenericCreate+0xd4>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:612
					{
						pxCurrentTCB = pxNewTCB;
 8001a6a:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <xTaskGenericCreate+0x154>)
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:625
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8001a70:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <xTaskGenericCreate+0x15c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <xTaskGenericCreate+0x15c>)
 8001a78:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:630

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <xTaskGenericCreate+0x15c>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:635
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <xTaskGenericCreate+0x160>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d903      	bls.n	8001a96 <xTaskGenericCreate+0xfa>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:635 (discriminator 1)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a92:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <xTaskGenericCreate+0x160>)
 8001a94:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:635 (discriminator 2)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <xTaskGenericCreate+0x164>)
 8001aa4:	441a      	add	r2, r3
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff faf1 	bl	8001094 <vListInsertEnd>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:637 (discriminator 2)

			xReturn = pdPASS;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:640 (discriminator 2)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8001ab6:	f001 fa33 	bl	8002f20 <vPortExitCritical>
 8001aba:	e002      	b.n	8001ac2 <xTaskGenericCreate+0x126>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:644
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac0:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:648
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d10b      	bne.n	8001ae0 <xTaskGenericCreate+0x144>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:650
	{
		if( xSchedulerRunning != pdFALSE )
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <xTaskGenericCreate+0x158>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d007      	beq.n	8001ae0 <xTaskGenericCreate+0x144>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:654
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <xTaskGenericCreate+0x154>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d201      	bcs.n	8001ae0 <xTaskGenericCreate+0x144>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:656
			{
				taskYIELD_IF_USING_PREEMPTION();
 8001adc:	f001 fa00 	bl	8002ee0 <vPortYield>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:669
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
 8001ae0:	69fb      	ldr	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:670
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200000f4 	.word	0x200000f4
 8001af0:	2000001c 	.word	0x2000001c
 8001af4:	20000100 	.word	0x20000100
 8001af8:	20000114 	.word	0x20000114
 8001afc:	200000fc 	.word	0x200000fc
 8001b00:	20000020 	.word	0x20000020

08001b04 <vTaskDelay>:
vTaskDelay():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:851
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:853
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:857


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d019      	beq.n	8001b4a <vTaskDelay+0x46>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:859
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <vTaskDelay+0x58>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <vTaskDelay+0x20>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:859 (discriminator 1)
 8001b1e:	f001 fa17 	bl	8002f50 <ulPortSetInterruptMask>
 8001b22:	e7fe      	b.n	8001b22 <vTaskDelay+0x1e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:860
			vTaskSuspendAll();
 8001b24:	f000 f858 	bl	8001bd8 <vTaskSuspendAll>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:874
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <vTaskDelay+0x5c>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4413      	add	r3, r2
 8001b30:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:879

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <vTaskDelay+0x60>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3304      	adds	r3, #4
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fb07 	bl	800114c <uxListRemove>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:890
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001b3e:	68b8      	ldr	r0, [r7, #8]
 8001b40:	f000 fc22 	bl	8002388 <prvAddCurrentTaskToDelayedList>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:892
			}
			xAlreadyYielded = xTaskResumeAll();
 8001b44:	f000 f856 	bl	8001bf4 <xTaskResumeAll>
 8001b48:	60f8      	str	r0, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:901
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <vTaskDelay+0x50>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:903
		{
			portYIELD_WITHIN_API();
 8001b50:	f001 f9c6 	bl	8002ee0 <vPortYield>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:909
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000104 	.word	0x20000104
 8001b60:	200000f8 	.word	0x200000f8
 8001b64:	2000001c 	.word	0x2000001c

08001b68 <vTaskStartScheduler>:
vTaskStartScheduler():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1425

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af04      	add	r7, sp, #16
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1438
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8001b6e:	2300      	movs	r3, #0
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	2300      	movs	r3, #0
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	2300      	movs	r3, #0
 8001b78:	9302      	str	r3, [sp, #8]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	9303      	str	r3, [sp, #12]
 8001b7e:	4812      	ldr	r0, [pc, #72]	; (8001bc8 <vTaskStartScheduler+0x60>)
 8001b80:	4912      	ldr	r1, [pc, #72]	; (8001bcc <vTaskStartScheduler+0x64>)
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	2300      	movs	r3, #0
 8001b86:	f7ff ff09 	bl	800199c <xTaskGenericCreate>
 8001b8a:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1444
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d102      	bne.n	8001b98 <vTaskStartScheduler+0x30>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1446
		{
			xReturn = xTimerCreateTimerTask();
 8001b92:	f000 fd63 	bl	800265c <xTimerCreateTimerTask>
 8001b96:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1455
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d10a      	bne.n	8001bb4 <vTaskStartScheduler+0x4c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1462
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8001b9e:	f001 f9d7 	bl	8002f50 <ulPortSetInterruptMask>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1472
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <vTaskStartScheduler+0x68>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1473
		xTickCount = ( TickType_t ) 0U;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <vTaskStartScheduler+0x6c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1482
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001bae:	f001 f92f 	bl	8002e10 <xPortStartScheduler>
 8001bb2:	e005      	b.n	8001bc0 <vTaskStartScheduler+0x58>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1497
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d102      	bne.n	8001bc0 <vTaskStartScheduler+0x58>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1497 (discriminator 1)
 8001bba:	f001 f9c9 	bl	8002f50 <ulPortSetInterruptMask>
 8001bbe:	e7fe      	b.n	8001bbe <vTaskStartScheduler+0x56>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1499
	}
}
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	080021e9 	.word	0x080021e9
 8001bcc:	08003314 	.word	0x08003314
 8001bd0:	20000100 	.word	0x20000100
 8001bd4:	200000f8 	.word	0x200000f8

08001bd8 <vTaskSuspendAll>:
vTaskSuspendAll():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1514
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1519
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <vTaskSuspendAll+0x18>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <vTaskSuspendAll+0x18>)
 8001be4:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1520
}
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000104 	.word	0x20000104

08001bf4 <xTaskResumeAll>:
xTaskResumeAll():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1552

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1554
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1558

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001bfe:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <xTaskResumeAll+0xec>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <xTaskResumeAll+0x18>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1558 (discriminator 1)
 8001c06:	f001 f9a3 	bl	8002f50 <ulPortSetInterruptMask>
 8001c0a:	e7fe      	b.n	8001c0a <xTaskResumeAll+0x16>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1565
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001c0c:	f001 f978 	bl	8002f00 <vPortEnterCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1567
	{
		--uxSchedulerSuspended;
 8001c10:	4b33      	ldr	r3, [pc, #204]	; (8001ce0 <xTaskResumeAll+0xec>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	1e5a      	subs	r2, r3, #1
 8001c16:	4b32      	ldr	r3, [pc, #200]	; (8001ce0 <xTaskResumeAll+0xec>)
 8001c18:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1569

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c1a:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <xTaskResumeAll+0xec>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d156      	bne.n	8001cd0 <xTaskResumeAll+0xdc>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1571
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001c22:	4b30      	ldr	r3, [pc, #192]	; (8001ce4 <xTaskResumeAll+0xf0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d052      	beq.n	8001cd0 <xTaskResumeAll+0xdc>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1575
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c2a:	e02f      	b.n	8001c8c <xTaskResumeAll+0x98>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1577
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001c2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <xTaskResumeAll+0xf4>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1578
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	3318      	adds	r3, #24
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fa87 	bl	800114c <uxListRemove>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1579
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	3304      	adds	r3, #4
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fa82 	bl	800114c <uxListRemove>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1580
					prvAddTaskToReadyList( pxTCB );
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c4c:	4b27      	ldr	r3, [pc, #156]	; (8001cec <xTaskResumeAll+0xf8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d903      	bls.n	8001c5c <xTaskResumeAll+0x68>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1580 (discriminator 1)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c58:	4b24      	ldr	r3, [pc, #144]	; (8001cec <xTaskResumeAll+0xf8>)
 8001c5a:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1580 (discriminator 2)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4a21      	ldr	r2, [pc, #132]	; (8001cf0 <xTaskResumeAll+0xfc>)
 8001c6a:	441a      	add	r2, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f7ff fa0e 	bl	8001094 <vListInsertEnd>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1584 (discriminator 2)

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <xTaskResumeAll+0x100>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d302      	bcc.n	8001c8c <xTaskResumeAll+0x98>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1586
					{
						xYieldPending = pdTRUE;
 8001c86:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <xTaskResumeAll+0x104>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1575 (discriminator 1)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c8c:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <xTaskResumeAll+0xf4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1cb      	bne.n	8001c2c <xTaskResumeAll+0x38>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1598

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <xTaskResumeAll+0x108>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d011      	beq.n	8001cc0 <xTaskResumeAll+0xcc>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1600
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8001c9c:	e00c      	b.n	8001cb8 <xTaskResumeAll+0xc4>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1602
					{
						if( xTaskIncrementTick() != pdFALSE )
 8001c9e:	f000 f841 	bl	8001d24 <xTaskIncrementTick>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <xTaskResumeAll+0xba>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1604
						{
							xYieldPending = pdTRUE;
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <xTaskResumeAll+0x104>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1610
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8001cae:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <xTaskResumeAll+0x108>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	1e5a      	subs	r2, r3, #1
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <xTaskResumeAll+0x108>)
 8001cb6:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1600 (discriminator 1)
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8001cb8:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <xTaskResumeAll+0x108>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1ee      	bne.n	8001c9e <xTaskResumeAll+0xaa>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1618
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <xTaskResumeAll+0x104>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d103      	bne.n	8001cd0 <xTaskResumeAll+0xdc>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1622
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1625
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001ccc:	f001 f908 	bl	8002ee0 <vPortYield>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1638
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001cd0:	f001 f926 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1640

	return xAlreadyYielded;
 8001cd4:	687b      	ldr	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1641
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000104 	.word	0x20000104
 8001ce4:	200000f4 	.word	0x200000f4
 8001ce8:	200000b4 	.word	0x200000b4
 8001cec:	200000fc 	.word	0x200000fc
 8001cf0:	20000020 	.word	0x20000020
 8001cf4:	2000001c 	.word	0x2000001c
 8001cf8:	2000010c 	.word	0x2000010c
 8001cfc:	20000108 	.word	0x20000108

08001d00 <xTaskGetTickCount>:
xTaskGetTickCount():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1645
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1649
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8001d06:	f001 f8fb 	bl	8002f00 <vPortEnterCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1651
	{
		xTicks = xTickCount;
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <xTaskGetTickCount+0x20>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1653
	}
	taskEXIT_CRITICAL();
 8001d10:	f001 f906 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1655

	return xTicks;
 8001d14:	687b      	ldr	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1656
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200000f8 	.word	0x200000f8

08001d24 <xTaskIncrementTick>:
xTaskIncrementTick():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1818

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1821
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1827

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d2e:	4b4e      	ldr	r3, [pc, #312]	; (8001e68 <xTaskIncrementTick+0x144>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f040 8087 	bne.w	8001e46 <xTaskIncrementTick+0x122>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1831
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8001d38:	4b4c      	ldr	r3, [pc, #304]	; (8001e6c <xTaskIncrementTick+0x148>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	4b4b      	ldr	r3, [pc, #300]	; (8001e6c <xTaskIncrementTick+0x148>)
 8001d40:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1836

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8001d42:	4b4a      	ldr	r3, [pc, #296]	; (8001e6c <xTaskIncrementTick+0x148>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1838

			if( xConstTickCount == ( TickType_t ) 0U )
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d118      	bne.n	8001d80 <xTaskIncrementTick+0x5c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1840
			{
				taskSWITCH_DELAYED_LISTS();
 8001d4e:	4b48      	ldr	r3, [pc, #288]	; (8001e70 <xTaskIncrementTick+0x14c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <xTaskIncrementTick+0x3a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1840 (discriminator 1)
 8001d58:	f001 f8fa 	bl	8002f50 <ulPortSetInterruptMask>
 8001d5c:	e7fe      	b.n	8001d5c <xTaskIncrementTick+0x38>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1840 (discriminator 2)
 8001d5e:	4b44      	ldr	r3, [pc, #272]	; (8001e70 <xTaskIncrementTick+0x14c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <xTaskIncrementTick+0x150>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b41      	ldr	r3, [pc, #260]	; (8001e70 <xTaskIncrementTick+0x14c>)
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <xTaskIncrementTick+0x150>)
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <xTaskIncrementTick+0x154>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <xTaskIncrementTick+0x154>)
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	f000 fb7c 	bl	8002478 <prvResetNextTaskUnblockTime>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1851

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8001d80:	4b3e      	ldr	r3, [pc, #248]	; (8001e7c <xTaskIncrementTick+0x158>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d34e      	bcc.n	8001e28 <xTaskIncrementTick+0x104>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1855
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d8a:	4b39      	ldr	r3, [pc, #228]	; (8001e70 <xTaskIncrementTick+0x14c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <xTaskIncrementTick+0x74>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1855 (discriminator 1)
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <xTaskIncrementTick+0x76>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1855 (discriminator 2)
 8001d98:	2300      	movs	r3, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1855 (discriminator 3)
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d004      	beq.n	8001da8 <xTaskIncrementTick+0x84>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1862
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8001d9e:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <xTaskIncrementTick+0x158>)
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1863
						break;
 8001da6:	e03f      	b.n	8001e28 <xTaskIncrementTick+0x104>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1871
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001da8:	4b31      	ldr	r3, [pc, #196]	; (8001e70 <xTaskIncrementTick+0x14c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1872
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1874

						if( xConstTickCount < xItemValue )
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d203      	bcs.n	8001dc8 <xTaskIncrementTick+0xa4>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1881
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8001dc0:	4b2e      	ldr	r3, [pc, #184]	; (8001e7c <xTaskIncrementTick+0x158>)
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1882
							break;
 8001dc6:	e02f      	b.n	8001e28 <xTaskIncrementTick+0x104>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1890
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	3304      	adds	r3, #4
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff f9bd 	bl	800114c <uxListRemove>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1894

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d004      	beq.n	8001de4 <xTaskIncrementTick+0xc0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1896
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	3318      	adds	r3, #24
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f9b4 	bl	800114c <uxListRemove>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1905
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de8:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <xTaskIncrementTick+0x15c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d903      	bls.n	8001df8 <xTaskIncrementTick+0xd4>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1905 (discriminator 1)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df4:	4b22      	ldr	r3, [pc, #136]	; (8001e80 <xTaskIncrementTick+0x15c>)
 8001df6:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1905 (discriminator 2)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4a1f      	ldr	r2, [pc, #124]	; (8001e84 <xTaskIncrementTick+0x160>)
 8001e06:	441a      	add	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7ff f940 	bl	8001094 <vListInsertEnd>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1915 (discriminator 2)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <xTaskIncrementTick+0x164>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d301      	bcc.n	8001e26 <xTaskIncrementTick+0x102>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1917
							{
								xSwitchRequired = pdTRUE;
 8001e22:	2301      	movs	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1926
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 8001e26:	e7b0      	b.n	8001d8a <xTaskIncrementTick+0x66>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1935
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <xTaskIncrementTick+0x164>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e2e:	4915      	ldr	r1, [pc, #84]	; (8001e84 <xTaskIncrementTick+0x160>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d907      	bls.n	8001e50 <xTaskIncrementTick+0x12c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1937
			{
				xSwitchRequired = pdTRUE;
 8001e40:	2301      	movs	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	e004      	b.n	8001e50 <xTaskIncrementTick+0x12c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1963
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <xTaskIncrementTick+0x168>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <xTaskIncrementTick+0x168>)
 8001e4e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1976
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <xTaskIncrementTick+0x16c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <xTaskIncrementTick+0x138>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1978
		{
			xSwitchRequired = pdTRUE;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1987
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001e5c:	697b      	ldr	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:1988
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000104 	.word	0x20000104
 8001e6c:	200000f8 	.word	0x200000f8
 8001e70:	200000ac 	.word	0x200000ac
 8001e74:	200000b0 	.word	0x200000b0
 8001e78:	20000110 	.word	0x20000110
 8001e7c:	20000010 	.word	0x20000010
 8001e80:	200000fc 	.word	0x200000fc
 8001e84:	20000020 	.word	0x20000020
 8001e88:	2000001c 	.word	0x2000001c
 8001e8c:	20000108 	.word	0x20000108
 8001e90:	2000010c 	.word	0x2000010c

08001e94 <vTaskSwitchContext>:
vTaskSwitchContext():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2082

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2083
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e9a:	4b35      	ldr	r3, [pc, #212]	; (8001f70 <vTaskSwitchContext+0xdc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <vTaskSwitchContext+0x16>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2087
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001ea2:	4b34      	ldr	r3, [pc, #208]	; (8001f74 <vTaskSwitchContext+0xe0>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e05e      	b.n	8001f68 <vTaskSwitchContext+0xd4>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2091
	}
	else
	{
		xYieldPending = pdFALSE;
 8001eaa:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <vTaskSwitchContext+0xe0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2121
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8001eb0:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <vTaskSwitchContext+0xe4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <vTaskSwitchContext+0xe4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d808      	bhi.n	8001ed2 <vTaskSwitchContext+0x3e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2121 (discriminator 1)
 8001ec0:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <vTaskSwitchContext+0xe4>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b2c      	ldr	r3, [pc, #176]	; (8001f78 <vTaskSwitchContext+0xe4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3334      	adds	r3, #52	; 0x34
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f7fe fbd1 	bl	8000674 <vApplicationStackOverflowHook>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2122
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8001ed2:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <vTaskSwitchContext+0xe4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	4618      	mov	r0, r3
 8001eda:	4928      	ldr	r1, [pc, #160]	; (8001f7c <vTaskSwitchContext+0xe8>)
 8001edc:	2214      	movs	r2, #20
 8001ede:	f001 f8cd 	bl	800307c <memcmp>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d009      	beq.n	8001efc <vTaskSwitchContext+0x68>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2122 (discriminator 1)
 8001ee8:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <vTaskSwitchContext+0xe4>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <vTaskSwitchContext+0xe4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	3334      	adds	r3, #52	; 0x34
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f7fe fbbd 	bl	8000674 <vApplicationStackOverflowHook>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2124 (discriminator 1)

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001efa:	e00c      	b.n	8001f16 <vTaskSwitchContext+0x82>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2124
 8001efc:	e00b      	b.n	8001f16 <vTaskSwitchContext+0x82>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2124 (discriminator 2)
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <vTaskSwitchContext+0xec>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d102      	bne.n	8001f0c <vTaskSwitchContext+0x78>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2124 (discriminator 1)
 8001f06:	f001 f823 	bl	8002f50 <ulPortSetInterruptMask>
 8001f0a:	e7fe      	b.n	8001f0a <vTaskSwitchContext+0x76>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2124 (discriminator 2)
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <vTaskSwitchContext+0xec>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	1e5a      	subs	r2, r3, #1
 8001f12:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <vTaskSwitchContext+0xec>)
 8001f14:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2124 (discriminator 1)
 8001f16:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <vTaskSwitchContext+0xec>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	491a      	ldr	r1, [pc, #104]	; (8001f84 <vTaskSwitchContext+0xf0>)
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0e8      	beq.n	8001efe <vTaskSwitchContext+0x6a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2124 (discriminator 3)
 8001f2c:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <vTaskSwitchContext+0xec>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <vTaskSwitchContext+0xf0>)
 8001f3a:	4413      	add	r3, r2
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3308      	adds	r3, #8
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d104      	bne.n	8001f5e <vTaskSwitchContext+0xca>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2124 (discriminator 1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2124 (discriminator 2)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <vTaskSwitchContext+0xe4>)
 8001f66:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2136
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000104 	.word	0x20000104
 8001f74:	2000010c 	.word	0x2000010c
 8001f78:	2000001c 	.word	0x2000001c
 8001f7c:	0800331c 	.word	0x0800331c
 8001f80:	200000fc 	.word	0x200000fc
 8001f84:	20000020 	.word	0x20000020

08001f88 <vTaskPlaceOnEventList>:
vTaskPlaceOnEventList():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2140
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2143
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <vTaskPlaceOnEventList+0x16>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2143 (discriminator 1)
 8001f98:	f000 ffda 	bl	8002f50 <ulPortSetInterruptMask>
 8001f9c:	e7fe      	b.n	8001f9c <vTaskPlaceOnEventList+0x14>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2151
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <vTaskPlaceOnEventList+0x60>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3318      	adds	r3, #24
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f7ff f898 	bl	80010dc <vListInsert>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2156

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <vTaskPlaceOnEventList+0x60>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff f8ca 	bl	800114c <uxListRemove>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2169
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbe:	d107      	bne.n	8001fd0 <vTaskPlaceOnEventList+0x48>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2174
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <vTaskPlaceOnEventList+0x60>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	4809      	ldr	r0, [pc, #36]	; (8001fec <vTaskPlaceOnEventList+0x64>)
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f7ff f863 	bl	8001094 <vListInsertEnd>
 8001fce:	e007      	b.n	8001fe0 <vTaskPlaceOnEventList+0x58>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2180
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <vTaskPlaceOnEventList+0x68>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2181
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f9d4 	bl	8002388 <prvAddCurrentTaskToDelayedList>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2192
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	2000001c 	.word	0x2000001c
 8001fec:	200000e0 	.word	0x200000e0
 8001ff0:	200000f8 	.word	0x200000f8

08001ff4 <vTaskPlaceOnEventListRestricted>:
vTaskPlaceOnEventListRestricted():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2256
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2259
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d102      	bne.n	800200a <vTaskPlaceOnEventListRestricted+0x16>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2259 (discriminator 1)
 8002004:	f000 ffa4 	bl	8002f50 <ulPortSetInterruptMask>
 8002008:	e7fe      	b.n	8002008 <vTaskPlaceOnEventListRestricted+0x14>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2271

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <vTaskPlaceOnEventListRestricted+0x48>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3318      	adds	r3, #24
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	4619      	mov	r1, r3
 8002014:	f7ff f83e 	bl	8001094 <vListInsertEnd>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2276

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <vTaskPlaceOnEventListRestricted+0x48>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3304      	adds	r3, #4
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f894 	bl	800114c <uxListRemove>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2289
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <vTaskPlaceOnEventListRestricted+0x4c>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	4413      	add	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2292

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f9aa 	bl	8002388 <prvAddCurrentTaskToDelayedList>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2293
	}
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	2000001c 	.word	0x2000001c
 8002040:	200000f8 	.word	0x200000f8

08002044 <xTaskRemoveFromEventList>:
xTaskRemoveFromEventList():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2299

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2316
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2317
	configASSERT( pxUnblockedTCB );
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d102      	bne.n	8002060 <xTaskRemoveFromEventList+0x1c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2317 (discriminator 1)
 800205a:	f000 ff79 	bl	8002f50 <ulPortSetInterruptMask>
 800205e:	e7fe      	b.n	800205e <xTaskRemoveFromEventList+0x1a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2318
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	3318      	adds	r3, #24
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff f871 	bl	800114c <uxListRemove>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2320

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <xTaskRemoveFromEventList+0xa0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d11d      	bne.n	80020ae <xTaskRemoveFromEventList+0x6a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2322
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	3304      	adds	r3, #4
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff f868 	bl	800114c <uxListRemove>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2323
		prvAddTaskToReadyList( pxUnblockedTCB );
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <xTaskRemoveFromEventList+0xa4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d903      	bls.n	8002090 <xTaskRemoveFromEventList+0x4c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2323 (discriminator 1)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <xTaskRemoveFromEventList+0xa4>)
 800208e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2323 (discriminator 2)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4a13      	ldr	r2, [pc, #76]	; (80020ec <xTaskRemoveFromEventList+0xa8>)
 800209e:	441a      	add	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	3304      	adds	r3, #4
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	f7fe fff4 	bl	8001094 <vListInsertEnd>
 80020ac:	e005      	b.n	80020ba <xTaskRemoveFromEventList+0x76>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2329
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	3318      	adds	r3, #24
 80020b2:	480f      	ldr	r0, [pc, #60]	; (80020f0 <xTaskRemoveFromEventList+0xac>)
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7fe ffed 	bl	8001094 <vListInsertEnd>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2332
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <xTaskRemoveFromEventList+0xb0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d905      	bls.n	80020d4 <xTaskRemoveFromEventList+0x90>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2338
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 80020c8:	2301      	movs	r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2342

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <xTaskRemoveFromEventList+0xb4>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e001      	b.n	80020d8 <xTaskRemoveFromEventList+0x94>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2346
	}
	else
	{
		xReturn = pdFALSE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2349
	}

	return xReturn;
 80020d8:	68fb      	ldr	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2350
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000104 	.word	0x20000104
 80020e8:	200000fc 	.word	0x200000fc
 80020ec:	20000020 	.word	0x20000020
 80020f0:	200000b4 	.word	0x200000b4
 80020f4:	2000001c 	.word	0x2000001c
 80020f8:	2000010c 	.word	0x2000010c

080020fc <vTaskSetTimeOutState>:
vTaskSetTimeOutState():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2404
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2405
	configASSERT( pxTimeOut );
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d102      	bne.n	8002110 <vTaskSetTimeOutState+0x14>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2405 (discriminator 1)
 800210a:	f000 ff21 	bl	8002f50 <ulPortSetInterruptMask>
 800210e:	e7fe      	b.n	800210e <vTaskSetTimeOutState+0x12>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2406
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <vTaskSetTimeOutState+0x2c>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2407
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <vTaskSetTimeOutState+0x30>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2408
}
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000110 	.word	0x20000110
 800212c:	200000f8 	.word	0x200000f8

08002130 <xTaskCheckForTimeOut>:
xTaskCheckForTimeOut():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2412
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2415
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d102      	bne.n	8002146 <xTaskCheckForTimeOut+0x16>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2415 (discriminator 1)
 8002140:	f000 ff06 	bl	8002f50 <ulPortSetInterruptMask>
 8002144:	e7fe      	b.n	8002144 <xTaskCheckForTimeOut+0x14>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2416
	configASSERT( pxTicksToWait );
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <xTaskCheckForTimeOut+0x22>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2416 (discriminator 1)
 800214c:	f000 ff00 	bl	8002f50 <ulPortSetInterruptMask>
 8002150:	e7fe      	b.n	8002150 <xTaskCheckForTimeOut+0x20>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2418

	taskENTER_CRITICAL();
 8002152:	f000 fed5 	bl	8002f00 <vPortEnterCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2421
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002156:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <xTaskCheckForTimeOut+0x98>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2427

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d102      	bne.n	800216c <xTaskCheckForTimeOut+0x3c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2429
			{
				xReturn = pdFALSE;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	e026      	b.n	80021ba <xTaskCheckForTimeOut+0x8a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2434
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b16      	ldr	r3, [pc, #88]	; (80021cc <xTaskCheckForTimeOut+0x9c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d007      	beq.n	8002188 <xTaskCheckForTimeOut+0x58>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2434 (discriminator 1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	429a      	cmp	r2, r3
 8002180:	d802      	bhi.n	8002188 <xTaskCheckForTimeOut+0x58>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2440
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8002182:	2301      	movs	r3, #1
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	e018      	b.n	80021ba <xTaskCheckForTimeOut+0x8a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2442
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	1ad2      	subs	r2, r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d20e      	bcs.n	80021b6 <xTaskCheckForTimeOut+0x86>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2445
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	1acb      	subs	r3, r1, r3
 80021a4:	441a      	add	r2, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2446
			vTaskSetTimeOutState( pxTimeOut );
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffa6 	bl	80020fc <vTaskSetTimeOutState>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2447
			xReturn = pdFALSE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	e001      	b.n	80021ba <xTaskCheckForTimeOut+0x8a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2451
		}
		else
		{
			xReturn = pdTRUE;
 80021b6:	2301      	movs	r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2454
		}
	}
	taskEXIT_CRITICAL();
 80021ba:	f000 feb1 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2456

	return xReturn;
 80021be:	68fb      	ldr	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2457
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200000f8 	.word	0x200000f8
 80021cc:	20000110 	.word	0x20000110

080021d0 <vTaskMissedYield>:
vTaskMissedYield():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2461
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2462
	xYieldPending = pdTRUE;
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <vTaskMissedYield+0x14>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2463
}
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	2000010c 	.word	0x2000010c

080021e8 <prvIdleTask>:
prvIdleTask():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2516
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2523
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 80021f0:	f000 f890 	bl	8002314 <prvCheckTasksWaitingTermination>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2546

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <prvIdleTask+0x1c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d901      	bls.n	8002200 <prvIdleTask+0x18>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2548
			{
				taskYIELD();
 80021fc:	f000 fe70 	bl	8002ee0 <vPortYield>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2614
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8002200:	e7f6      	b.n	80021f0 <prvIdleTask+0x8>
 8002202:	bf00      	nop
 8002204:	20000020 	.word	0x20000020

08002208 <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2663
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2667
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	e012      	b.n	8002242 <prvInitialiseTCBVariables+0x3a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2669
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	4413      	add	r3, r2
 8002222:	781a      	ldrb	r2, [r3, #0]
 8002224:	68f9      	ldr	r1, [r7, #12]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	440b      	add	r3, r1
 800222a:	3330      	adds	r3, #48	; 0x30
 800222c:	711a      	strb	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2674

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	4413      	add	r3, r2
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d100      	bne.n	800223c <prvInitialiseTCBVariables+0x34>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2676
		{
			break;
 800223a:	e005      	b.n	8002248 <prvInitialiseTCBVariables+0x40>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2667
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	3301      	adds	r3, #1
 8002240:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2667 (discriminator 1)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b09      	cmp	r3, #9
 8002246:	d9e9      	bls.n	800221c <prvInitialiseTCBVariables+0x14>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2686
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2690

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b04      	cmp	r3, #4
 8002254:	d901      	bls.n	800225a <prvInitialiseTCBVariables+0x52>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2692
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002256:	2304      	movs	r3, #4
 8002258:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2699
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2702
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	649a      	str	r2, [r3, #72]	; 0x48
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2706
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3304      	adds	r3, #4
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe ff06 	bl	800107c <vListInitialiseItem>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2707
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3318      	adds	r3, #24
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe ff01 	bl	800107c <vListInitialiseItem>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2711

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	611a      	str	r2, [r3, #16]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2714

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f1c3 0205 	rsb	r2, r3, #5
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	619a      	str	r2, [r3, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2715
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	625a      	str	r2, [r3, #36]	; 0x24
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2752
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop

08002298 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2771

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2774
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800229e:	2300      	movs	r3, #0
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	e00c      	b.n	80022be <prvInitialiseTaskLists+0x26>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2776 (discriminator 2)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4a11      	ldr	r2, [pc, #68]	; (80022f4 <prvInitialiseTaskLists+0x5c>)
 80022b0:	4413      	add	r3, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fec2 	bl	800103c <vListInitialise>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2774 (discriminator 2)

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3301      	adds	r3, #1
 80022bc:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2774 (discriminator 1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d9ef      	bls.n	80022a4 <prvInitialiseTaskLists+0xc>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2779
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80022c4:	480c      	ldr	r0, [pc, #48]	; (80022f8 <prvInitialiseTaskLists+0x60>)
 80022c6:	f7fe feb9 	bl	800103c <vListInitialise>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2780
	vListInitialise( &xDelayedTaskList2 );
 80022ca:	480c      	ldr	r0, [pc, #48]	; (80022fc <prvInitialiseTaskLists+0x64>)
 80022cc:	f7fe feb6 	bl	800103c <vListInitialise>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2781
	vListInitialise( &xPendingReadyList );
 80022d0:	480b      	ldr	r0, [pc, #44]	; (8002300 <prvInitialiseTaskLists+0x68>)
 80022d2:	f7fe feb3 	bl	800103c <vListInitialise>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2785

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80022d6:	480b      	ldr	r0, [pc, #44]	; (8002304 <prvInitialiseTaskLists+0x6c>)
 80022d8:	f7fe feb0 	bl	800103c <vListInitialise>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2791
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80022dc:	480a      	ldr	r0, [pc, #40]	; (8002308 <prvInitialiseTaskLists+0x70>)
 80022de:	f7fe fead 	bl	800103c <vListInitialise>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2797
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <prvInitialiseTaskLists+0x74>)
 80022e4:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <prvInitialiseTaskLists+0x60>)
 80022e6:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2798
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <prvInitialiseTaskLists+0x78>)
 80022ea:	4a04      	ldr	r2, [pc, #16]	; (80022fc <prvInitialiseTaskLists+0x64>)
 80022ec:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2799
}
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000020 	.word	0x20000020
 80022f8:	20000084 	.word	0x20000084
 80022fc:	20000098 	.word	0x20000098
 8002300:	200000b4 	.word	0x200000b4
 8002304:	200000c8 	.word	0x200000c8
 8002308:	200000e0 	.word	0x200000e0
 800230c:	200000ac 	.word	0x200000ac
 8002310:	200000b0 	.word	0x200000b0

08002314 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2803
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2810
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800231a:	e028      	b.n	800236e <prvCheckTasksWaitingTermination+0x5a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2812
		{
			vTaskSuspendAll();
 800231c:	f7ff fc5c 	bl	8001bd8 <vTaskSuspendAll>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2813
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002320:	4b16      	ldr	r3, [pc, #88]	; (800237c <prvCheckTasksWaitingTermination+0x68>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	bf14      	ite	ne
 8002328:	2300      	movne	r3, #0
 800232a:	2301      	moveq	r3, #1
 800232c:	b2db      	uxtb	r3, r3
 800232e:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2814
			( void ) xTaskResumeAll();
 8002330:	f7ff fc60 	bl	8001bf4 <xTaskResumeAll>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2816

			if( xListIsEmpty == pdFALSE )
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d119      	bne.n	800236e <prvCheckTasksWaitingTermination+0x5a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2820
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800233a:	f000 fde1 	bl	8002f00 <vPortEnterCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2822
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800233e:	4b0f      	ldr	r3, [pc, #60]	; (800237c <prvCheckTasksWaitingTermination+0x68>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2823
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	3304      	adds	r3, #4
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe fefe 	bl	800114c <uxListRemove>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2824
					--uxCurrentNumberOfTasks;
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <prvCheckTasksWaitingTermination+0x6c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	1e5a      	subs	r2, r3, #1
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <prvCheckTasksWaitingTermination+0x6c>)
 8002358:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2825
					--uxTasksDeleted;
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <prvCheckTasksWaitingTermination+0x70>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	1e5a      	subs	r2, r3, #1
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <prvCheckTasksWaitingTermination+0x70>)
 8002362:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2827
				}
				taskEXIT_CRITICAL();
 8002364:	f000 fddc 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2829

				prvDeleteTCB( pxTCB );
 8002368:	6838      	ldr	r0, [r7, #0]
 800236a:	f000 f875 	bl	8002458 <prvDeleteTCB>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2810 (discriminator 1)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <prvCheckTasksWaitingTermination+0x70>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1d2      	bne.n	800231c <prvCheckTasksWaitingTermination+0x8>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2838
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200000c8 	.word	0x200000c8
 8002380:	200000f4 	.word	0x200000f4
 8002384:	200000dc 	.word	0x200000dc

08002388 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2842
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2844
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <prvAddCurrentTaskToDelayedList+0x58>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2846

	if( xTimeToWake < xTickCount )
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <prvAddCurrentTaskToDelayedList+0x5c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d209      	bcs.n	80023b6 <prvAddCurrentTaskToDelayedList+0x2e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2849
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <prvAddCurrentTaskToDelayedList+0x60>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <prvAddCurrentTaskToDelayedList+0x58>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3304      	adds	r3, #4
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	f7fe fe94 	bl	80010dc <vListInsert>
 80023b4:	e010      	b.n	80023d8 <prvAddCurrentTaskToDelayedList+0x50>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2854
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <prvAddCurrentTaskToDelayedList+0x64>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <prvAddCurrentTaskToDelayedList+0x58>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	3304      	adds	r3, #4
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f7fe fe8a 	bl	80010dc <vListInsert>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2859

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <prvAddCurrentTaskToDelayedList+0x68>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d202      	bcs.n	80023d8 <prvAddCurrentTaskToDelayedList+0x50>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2861
		{
			xNextTaskUnblockTime = xTimeToWake;
 80023d2:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <prvAddCurrentTaskToDelayedList+0x68>)
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2868
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	2000001c 	.word	0x2000001c
 80023e4:	200000f8 	.word	0x200000f8
 80023e8:	200000b0 	.word	0x200000b0
 80023ec:	200000ac 	.word	0x200000ac
 80023f0:	20000010 	.word	0x20000010

080023f4 <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2872
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	6039      	str	r1, [r7, #0]
 80023fe:	80fb      	strh	r3, [r7, #6]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2877
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002400:	204c      	movs	r0, #76	; 0x4c
 8002402:	f000 fbb3 	bl	8002b6c <pvPortMalloc>
 8002406:	60f8      	str	r0, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2879

	if( pxNewTCB != NULL )
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d01f      	beq.n	800244e <prvAllocateTCBAndStack+0x5a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2884
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d106      	bne.n	8002422 <prvAllocateTCBAndStack+0x2e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2884 (discriminator 1)
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fba7 	bl	8002b6c <pvPortMalloc>
 800241e:	4603      	mov	r3, r0
 8002420:	e000      	b.n	8002424 <prvAllocateTCBAndStack+0x30>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2884 (discriminator 2)
 8002422:	683b      	ldr	r3, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2884 (discriminator 3)
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	6313      	str	r3, [r2, #48]	; 0x30
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2886 (discriminator 3)

		if( pxNewTCB->pxStack == NULL )
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	2b00      	cmp	r3, #0
 800242e:	d105      	bne.n	800243c <prvAllocateTCBAndStack+0x48>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2889
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fc2d 	bl	8002c90 <vPortFree>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2890
			pxNewTCB = NULL;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	e008      	b.n	800244e <prvAllocateTCBAndStack+0x5a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2898
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4610      	mov	r0, r2
 8002446:	21a5      	movs	r1, #165	; 0xa5
 8002448:	461a      	mov	r2, r3
 800244a:	f000 fee5 	bl	8003218 <memset>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2904
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
 800244e:	68fb      	ldr	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:2905
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <prvDeleteTCB>:
prvDeleteTCB():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3029
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3037
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	4618      	mov	r0, r3
 8002466:	f000 fc13 	bl	8002c90 <vPortFree>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3038
		vPortFree( pxTCB );
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fc10 	bl	8002c90 <vPortFree>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3039
	}
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop

08002478 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3045

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3048
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <prvResetNextTaskUnblockTime+0x40>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <prvResetNextTaskUnblockTime+0x14>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3048 (discriminator 1)
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <prvResetNextTaskUnblockTime+0x16>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3048 (discriminator 2)
 800248c:	2300      	movs	r3, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3048 (discriminator 3)
 800248e:	2b00      	cmp	r3, #0
 8002490:	d004      	beq.n	800249c <prvResetNextTaskUnblockTime+0x24>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3055
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <prvResetNextTaskUnblockTime+0x44>)
 8002494:	f04f 32ff 	mov.w	r2, #4294967295
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e008      	b.n	80024ae <prvResetNextTaskUnblockTime+0x36>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3063
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <prvResetNextTaskUnblockTime+0x40>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3064
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <prvResetNextTaskUnblockTime+0x44>)
 80024ac:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3066
	}
}
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	200000ac 	.word	0x200000ac
 80024bc:	20000010 	.word	0x20000010

080024c0 <xTaskGetCurrentTaskHandle>:
xTaskGetCurrentTaskHandle():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3072
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3078
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <xTaskGetCurrentTaskHandle+0x1c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3080

		return xReturn;
 80024cc:	687b      	ldr	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3081
	}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	2000001c 	.word	0x2000001c

080024e0 <xTaskGetSchedulerState>:
xTaskGetSchedulerState():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3089
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3092
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <xTaskGetSchedulerState+0x34>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <xTaskGetSchedulerState+0x14>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3094
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80024ee:	2301      	movs	r3, #1
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	e008      	b.n	8002506 <xTaskGetSchedulerState+0x26>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3098
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024f4:	4b08      	ldr	r3, [pc, #32]	; (8002518 <xTaskGetSchedulerState+0x38>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <xTaskGetSchedulerState+0x22>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3100
			{
				xReturn = taskSCHEDULER_RUNNING;
 80024fc:	2302      	movs	r3, #2
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	e001      	b.n	8002506 <xTaskGetSchedulerState+0x26>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3104
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3108
			}
		}

		return xReturn;
 8002506:	687b      	ldr	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3109
	}
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	20000100 	.word	0x20000100
 8002518:	20000104 	.word	0x20000104

0800251c <vTaskPriorityInherit>:
vTaskPriorityInherit():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3117
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3118
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3122

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d04a      	beq.n	80025c4 <vTaskPriorityInherit+0xa8>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3124
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002532:	4b26      	ldr	r3, [pc, #152]	; (80025cc <vTaskPriorityInherit+0xb0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	429a      	cmp	r2, r3
 800253a:	d243      	bcs.n	80025c4 <vTaskPriorityInherit+0xa8>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3129
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	db06      	blt.n	8002552 <vTaskPriorityInherit+0x36>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3131
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002544:	4b21      	ldr	r3, [pc, #132]	; (80025cc <vTaskPriorityInherit+0xb0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	f1c3 0205 	rsb	r2, r3, #5
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	619a      	str	r2, [r3, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3140
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6959      	ldr	r1, [r3, #20]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4a1b      	ldr	r2, [pc, #108]	; (80025d0 <vTaskPriorityInherit+0xb4>)
 8002564:	4413      	add	r3, r2
 8002566:	4299      	cmp	r1, r3
 8002568:	d101      	bne.n	800256e <vTaskPriorityInherit+0x52>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3140 (discriminator 1)
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <vTaskPriorityInherit+0x54>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3140 (discriminator 2)
 800256e:	2300      	movs	r3, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3140 (discriminator 3)
 8002570:	2b00      	cmp	r3, #0
 8002572:	d022      	beq.n	80025ba <vTaskPriorityInherit+0x9e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3142
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3304      	adds	r3, #4
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe fde7 	bl	800114c <uxListRemove>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3152
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <vTaskPriorityInherit+0xb0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3153
					prvAddTaskToReadyList( pxTCB );
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258c:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <vTaskPriorityInherit+0xb8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d903      	bls.n	800259c <vTaskPriorityInherit+0x80>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3153 (discriminator 1)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002598:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <vTaskPriorityInherit+0xb8>)
 800259a:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3153 (discriminator 2)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <vTaskPriorityInherit+0xb4>)
 80025aa:	441a      	add	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3304      	adds	r3, #4
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	f7fe fd6e 	bl	8001094 <vListInsertEnd>
 80025b8:	e004      	b.n	80025c4 <vTaskPriorityInherit+0xa8>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3158
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80025ba:	4b04      	ldr	r3, [pc, #16]	; (80025cc <vTaskPriorityInherit+0xb0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	62da      	str	r2, [r3, #44]	; 0x2c
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3172
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	2000001c 	.word	0x2000001c
 80025d0:	20000020 	.word	0x20000020
 80025d4:	200000fc 	.word	0x200000fc

080025d8 <vTaskPriorityDisinherit>:
vTaskPriorityDisinherit():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3180
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3181
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3183

		if( pxMutexHolder != NULL )
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d030      	beq.n	800264c <vTaskPriorityDisinherit+0x74>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3185
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d02a      	beq.n	800264c <vTaskPriorityDisinherit+0x74>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3189
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	3304      	adds	r3, #4
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fda6 	bl	800114c <uxListRemove>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3201
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	62da      	str	r2, [r3, #44]	; 0x2c
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3205

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	db05      	blt.n	800261c <vTaskPriorityDisinherit+0x44>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3207
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	f1c3 0205 	rsb	r2, r3, #5
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	619a      	str	r2, [r3, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3213
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <vTaskPriorityDisinherit+0x7c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d903      	bls.n	8002630 <vTaskPriorityDisinherit+0x58>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3213 (discriminator 1)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <vTaskPriorityDisinherit+0x7c>)
 800262e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3213 (discriminator 2)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4a06      	ldr	r2, [pc, #24]	; (8002658 <vTaskPriorityDisinherit+0x80>)
 800263e:	441a      	add	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	3304      	adds	r3, #4
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	f7fe fd24 	bl	8001094 <vListInsertEnd>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/tasks.c:3224
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200000fc 	.word	0x200000fc
 8002658:	20000020 	.word	0x20000020

0800265c <xTimerCreateTimerTask>:
xTimerCreateTimerTask():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:230
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af04      	add	r7, sp, #16
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:231
BaseType_t xReturn = pdFAIL;
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:237

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002666:	f000 fa45 	bl	8002af4 <prvCheckForValidListAndQueue>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:239

	if( xTimerQueue != NULL )
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <xTimerCreateTimerTask+0x4c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00f      	beq.n	8002692 <xTimerCreateTimerTask+0x36>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:250
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8002672:	2302      	movs	r3, #2
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2300      	movs	r3, #0
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	2300      	movs	r3, #0
 800267c:	9302      	str	r3, [sp, #8]
 800267e:	2300      	movs	r3, #0
 8002680:	9303      	str	r3, [sp, #12]
 8002682:	480a      	ldr	r0, [pc, #40]	; (80026ac <xTimerCreateTimerTask+0x50>)
 8002684:	490a      	ldr	r1, [pc, #40]	; (80026b0 <xTimerCreateTimerTask+0x54>)
 8002686:	f44f 7280 	mov.w	r2, #256	; 0x100
 800268a:	2300      	movs	r3, #0
 800268c:	f7ff f986 	bl	800199c <xTaskGenericCreate>
 8002690:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:259
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <xTimerCreateTimerTask+0x42>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:259 (discriminator 1)
 8002698:	f000 fc5a 	bl	8002f50 <ulPortSetInterruptMask>
 800269c:	e7fe      	b.n	800269c <xTimerCreateTimerTask+0x40>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:260
	return xReturn;
 800269e:	687b      	ldr	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:261
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000148 	.word	0x20000148
 80026ac:	080027b1 	.word	0x080027b1
 80026b0:	08003330 	.word	0x08003330

080026b4 <xTimerGenericCommand>:
xTimerGenericCommand():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:306
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xBlockTime )
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:307
BaseType_t xReturn = pdFAIL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:312
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <xTimerGenericCommand+0x88>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d030      	beq.n	8002730 <xTimerGenericCommand+0x7c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:315
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:316
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:317
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:319

		if( pxHigherPriorityTaskWoken == NULL )
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d11c      	bne.n	800271a <xTimerGenericCommand+0x66>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:321
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80026e0:	f7ff fefe 	bl	80024e0 <xTaskGetSchedulerState>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d10b      	bne.n	8002702 <xTimerGenericCommand+0x4e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:323
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <xTimerGenericCommand+0x88>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	f107 0310 	add.w	r3, r7, #16
 80026f2:	4610      	mov	r0, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026f8:	2300      	movs	r3, #0
 80026fa:	f7fe fdeb 	bl	80012d4 <xQueueGenericSend>
 80026fe:	61f8      	str	r0, [r7, #28]
 8002700:	e016      	b.n	8002730 <xTimerGenericCommand+0x7c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:327
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002702:	4b0e      	ldr	r3, [pc, #56]	; (800273c <xTimerGenericCommand+0x88>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	f107 0310 	add.w	r3, r7, #16
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	2200      	movs	r2, #0
 8002710:	2300      	movs	r3, #0
 8002712:	f7fe fddf 	bl	80012d4 <xQueueGenericSend>
 8002716:	61f8      	str	r0, [r7, #28]
 8002718:	e00a      	b.n	8002730 <xTimerGenericCommand+0x7c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:332
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <xTimerGenericCommand+0x88>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	f107 0310 	add.w	r3, r7, #16
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	2300      	movs	r3, #0
 800272a:	f7fe fe93 	bl	8001454 <xQueueGenericSendFromISR>
 800272e:	61f8      	str	r0, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:342
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002730:	69fb      	ldr	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:343
}
 8002732:	4618      	mov	r0, r3
 8002734:	3720      	adds	r7, #32
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000148 	.word	0x20000148

08002740 <prvProcessExpiredTimer>:
prvProcessExpiredTimer():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:360

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af02      	add	r7, sp, #8
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:362
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800274a:	4b18      	ldr	r3, [pc, #96]	; (80027ac <prvProcessExpiredTimer+0x6c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:366

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3304      	adds	r3, #4
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe fcf7 	bl	800114c <uxListRemove>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:371
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d11b      	bne.n	800279e <prvProcessExpiredTimer+0x5e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:376
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	4619      	mov	r1, r3
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f000 f8a7 	bl	80028c8 <prvInsertTimerInActiveList>
 800277a:	4603      	mov	r3, r0
 800277c:	2b01      	cmp	r3, #1
 800277e:	d10e      	bne.n	800279e <prvProcessExpiredTimer+0x5e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:380
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8002780:	2300      	movs	r3, #0
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	2100      	movs	r1, #0
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	2300      	movs	r3, #0
 800278c:	f7ff ff92 	bl	80026b4 <xTimerGenericCommand>
 8002790:	60b8      	str	r0, [r7, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:381
			configASSERT( xResult );
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <prvProcessExpiredTimer+0x5e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:381 (discriminator 1)
 8002798:	f000 fbda 	bl	8002f50 <ulPortSetInterruptMask>
 800279c:	e7fe      	b.n	800279c <prvProcessExpiredTimer+0x5c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:395
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	4798      	blx	r3
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:396
}
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000140 	.word	0x20000140

080027b0 <prvTimerTask>:
prvTimerTask():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:400
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:411 (discriminator 1)

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80027b8:	f107 0308 	add.w	r3, r7, #8
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 f83f 	bl	8002840 <prvGetNextExpireTime>
 80027c2:	60f8      	str	r0, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:415 (discriminator 1)

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	4619      	mov	r1, r3
 80027ca:	f000 f803 	bl	80027d4 <prvProcessTimerOrBlockTask>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:418 (discriminator 1)

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80027ce:	f000 f8bd 	bl	800294c <prvProcessReceivedCommands>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:419 (discriminator 1)
	}
 80027d2:	e7f1      	b.n	80027b8 <prvTimerTask+0x8>

080027d4 <prvProcessTimerOrBlockTask>:
prvProcessTimerOrBlockTask():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:424
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:428
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80027de:	f7ff f9fb 	bl	8001bd8 <vTaskSuspendAll>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:435
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80027e2:	f107 0308 	add.w	r3, r7, #8
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f84e 	bl	8002888 <prvSampleTimeNow>
 80027ec:	60f8      	str	r0, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:436
		if( xTimerListsWereSwitched == pdFALSE )
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d11e      	bne.n	8002832 <prvProcessTimerOrBlockTask+0x5e>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:439
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10a      	bne.n	8002810 <prvProcessTimerOrBlockTask+0x3c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:439 (discriminator 1)
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d806      	bhi.n	8002810 <prvProcessTimerOrBlockTask+0x3c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:441
			{
				( void ) xTaskResumeAll();
 8002802:	f7ff f9f7 	bl	8001bf4 <xTaskResumeAll>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:442
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	68f9      	ldr	r1, [r7, #12]
 800280a:	f7ff ff99 	bl	8002740 <prvProcessExpiredTimer>
 800280e:	e012      	b.n	8002836 <prvProcessTimerOrBlockTask+0x62>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:452
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <prvProcessTimerOrBlockTask+0x68>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1acb      	subs	r3, r1, r3
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	f7ff f891 	bl	8001944 <vQueueWaitForMessageRestricted>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:454

				if( xTaskResumeAll() == pdFALSE )
 8002822:	f7ff f9e7 	bl	8001bf4 <xTaskResumeAll>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d104      	bne.n	8002836 <prvProcessTimerOrBlockTask+0x62>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:460
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 800282c:	f000 fb58 	bl	8002ee0 <vPortYield>
 8002830:	e001      	b.n	8002836 <prvProcessTimerOrBlockTask+0x62>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:470
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8002832:	f7ff f9df 	bl	8001bf4 <xTaskResumeAll>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:473
		}
	}
}
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000148 	.word	0x20000148

08002840 <prvGetNextExpireTime>:
prvGetNextExpireTime():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:477
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:487
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002848:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <prvGetNextExpireTime+0x44>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	bf14      	ite	ne
 8002852:	2300      	movne	r3, #0
 8002854:	2301      	moveq	r3, #1
 8002856:	b2db      	uxtb	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:488
	if( *pxListWasEmpty == pdFALSE )
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d105      	bne.n	8002872 <prvGetNextExpireTime+0x32>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:490
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <prvGetNextExpireTime+0x44>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e001      	b.n	8002876 <prvGetNextExpireTime+0x36>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:495
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:498
	}

	return xNextExpireTime;
 8002876:	68fb      	ldr	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:499
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	20000140 	.word	0x20000140

08002888 <prvSampleTimeNow>:
prvSampleTimeNow():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:503
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:507
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002890:	f7ff fa36 	bl	8001d00 <xTaskGetTickCount>
 8002894:	60f8      	str	r0, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:509

	if( xTimeNow < xLastTime )
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <prvSampleTimeNow+0x3c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	429a      	cmp	r2, r3
 800289e:	d205      	bcs.n	80028ac <prvSampleTimeNow+0x24>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:511
	{
		prvSwitchTimerLists();
 80028a0:	f000 f8d0 	bl	8002a44 <prvSwitchTimerLists>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:512
		*pxTimerListsWereSwitched = pdTRUE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	e002      	b.n	80028b2 <prvSampleTimeNow+0x2a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:516
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:519
	}

	xLastTime = xTimeNow;
 80028b2:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <prvSampleTimeNow+0x3c>)
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:521

	return xTimeNow;
 80028b8:	68fb      	ldr	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:522
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	2000014c 	.word	0x2000014c

080028c8 <prvInsertTimerInActiveList>:
prvInsertTimerInActiveList():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:526
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:527
BaseType_t xProcessTimerNow = pdFALSE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:529

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:530
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	611a      	str	r2, [r3, #16]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:532

	if( xNextExpiryTime <= xTimeNow )
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d812      	bhi.n	8002914 <prvInsertTimerInActiveList+0x4c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:536
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	1ad2      	subs	r2, r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d302      	bcc.n	8002902 <prvInsertTimerInActiveList+0x3a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:540
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80028fc:	2301      	movs	r3, #1
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	e01b      	b.n	800293a <prvInsertTimerInActiveList+0x72>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:544
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <prvInsertTimerInActiveList+0x7c>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	3304      	adds	r3, #4
 800290a:	4610      	mov	r0, r2
 800290c:	4619      	mov	r1, r3
 800290e:	f7fe fbe5 	bl	80010dc <vListInsert>
 8002912:	e012      	b.n	800293a <prvInsertTimerInActiveList+0x72>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:549
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d206      	bcs.n	800292a <prvInsertTimerInActiveList+0x62>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:549 (discriminator 1)
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d302      	bcc.n	800292a <prvInsertTimerInActiveList+0x62>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:554
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002924:	2301      	movs	r3, #1
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	e007      	b.n	800293a <prvInsertTimerInActiveList+0x72>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:558
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800292a:	4b07      	ldr	r3, [pc, #28]	; (8002948 <prvInsertTimerInActiveList+0x80>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3304      	adds	r3, #4
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	f7fe fbd1 	bl	80010dc <vListInsert>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:562
		}
	}

	return xProcessTimerNow;
 800293a:	697b      	ldr	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:563
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20000144 	.word	0x20000144
 8002948:	20000140 	.word	0x20000140

0800294c <prvProcessReceivedCommands>:
prvProcessReceivedCommands():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:567
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	; 0x28
 8002950:	af02      	add	r7, sp, #8
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:573
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002952:	e064      	b.n	8002a1e <prvProcessReceivedCommands+0xd2>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:595
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* INCLUDE_xTimerPendFunctionCallFromISR */

		if( xMessage.xMessageID != tmrCOMMAND_EXECUTE_CALLBACK )
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295a:	d060      	beq.n	8002a1e <prvProcessReceivedCommands+0xd2>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:599
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:601

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d004      	beq.n	8002972 <prvProcessReceivedCommands+0x26>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:604
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	3304      	adds	r3, #4
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe fbed 	bl	800114c <uxListRemove>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:619
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff87 	bl	8002888 <prvSampleTimeNow>
 800297a:	61b8      	str	r0, [r7, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:621

			switch( xMessage.xMessageID )
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d84c      	bhi.n	8002a1c <prvProcessReceivedCommands+0xd0>
 8002982:	a201      	add	r2, pc, #4	; (adr r2, 8002988 <prvProcessReceivedCommands+0x3c>)
 8002984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002988:	08002999 	.word	0x08002999
 800298c:	08002a1d 	.word	0x08002a1d
 8002990:	080029eb 	.word	0x080029eb
 8002994:	08002a15 	.word	0x08002a15
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:625
			{
				case tmrCOMMAND_START :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	441a      	add	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	69f8      	ldr	r0, [r7, #28]
 80029a4:	4611      	mov	r1, r2
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	f7ff ff8e 	bl	80028c8 <prvInsertTimerInActiveList>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d11a      	bne.n	80029e8 <prvProcessReceivedCommands+0x9c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:629
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	69f8      	ldr	r0, [r7, #28]
 80029b8:	4798      	blx	r3
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:632
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d112      	bne.n	80029e8 <prvProcessReceivedCommands+0x9c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:634
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	4413      	add	r3, r2
 80029ca:	2200      	movs	r2, #0
 80029cc:	9200      	str	r2, [sp, #0]
 80029ce:	69f8      	ldr	r0, [r7, #28]
 80029d0:	2100      	movs	r1, #0
 80029d2:	461a      	mov	r2, r3
 80029d4:	2300      	movs	r3, #0
 80029d6:	f7ff fe6d 	bl	80026b4 <xTimerGenericCommand>
 80029da:	6178      	str	r0, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:635
							configASSERT( xResult );
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d102      	bne.n	80029e8 <prvProcessReceivedCommands+0x9c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:635 (discriminator 1)
 80029e2:	f000 fab5 	bl	8002f50 <ulPortSetInterruptMask>
 80029e6:	e7fe      	b.n	80029e6 <prvProcessReceivedCommands+0x9a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:647
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 80029e8:	e019      	b.n	8002a1e <prvProcessReceivedCommands+0xd2>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:655
					/* The timer has already been removed from the active list.
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	619a      	str	r2, [r3, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:656
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d102      	bne.n	80029fe <prvProcessReceivedCommands+0xb2>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:656 (discriminator 1)
 80029f8:	f000 faaa 	bl	8002f50 <ulPortSetInterruptMask>
 80029fc:	e7fe      	b.n	80029fc <prvProcessReceivedCommands+0xb0>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:664
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	4413      	add	r3, r2
 8002a06:	69f8      	ldr	r0, [r7, #28]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	f7ff ff5b 	bl	80028c8 <prvInsertTimerInActiveList>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:665
					break;
 8002a12:	e004      	b.n	8002a1e <prvProcessReceivedCommands+0xd2>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:670

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
 8002a14:	69f8      	ldr	r0, [r7, #28]
 8002a16:	f000 f93b 	bl	8002c90 <vPortFree>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:671
					break;
 8002a1a:	e000      	b.n	8002a1e <prvProcessReceivedCommands+0xd2>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:675

				default	:
					/* Don't expect to get here. */
					break;
 8002a1c:	bf00      	nop
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:573 (discriminator 1)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <prvProcessReceivedCommands+0xf4>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	f107 0308 	add.w	r3, r7, #8
 8002a26:	4610      	mov	r0, r2
 8002a28:	4619      	mov	r1, r3
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f7fe fd7b 	bl	8001528 <xQueueGenericReceive>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d18d      	bne.n	8002954 <prvProcessReceivedCommands+0x8>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:679
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000148 	.word	0x20000148

08002a44 <prvSwitchTimerLists>:
prvSwitchTimerLists():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:683
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af02      	add	r7, sp, #8
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:693

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002a4a:	e03d      	b.n	8002ac8 <prvSwitchTimerLists+0x84>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:695
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a4c:	4b27      	ldr	r3, [pc, #156]	; (8002aec <prvSwitchTimerLists+0xa8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:698

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a56:	4b25      	ldr	r3, [pc, #148]	; (8002aec <prvSwitchTimerLists+0xa8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:699
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	3304      	adds	r3, #4
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe fb71 	bl	800114c <uxListRemove>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:705
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	6938      	ldr	r0, [r7, #16]
 8002a70:	4798      	blx	r3
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:707

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d126      	bne.n	8002ac8 <prvSwitchTimerLists+0x84>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:715
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	699a      	ldr	r2, [r3, #24]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	4413      	add	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:716
			if( xReloadTime > xNextExpireTime )
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d90e      	bls.n	8002aaa <prvSwitchTimerLists+0x66>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:718
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:719
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	611a      	str	r2, [r3, #16]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:720
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002a98:	4b14      	ldr	r3, [pc, #80]	; (8002aec <prvSwitchTimerLists+0xa8>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f7fe fb1a 	bl	80010dc <vListInsert>
 8002aa8:	e00e      	b.n	8002ac8 <prvSwitchTimerLists+0x84>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:724
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8002aaa:	2300      	movs	r3, #0
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	6938      	ldr	r0, [r7, #16]
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f7ff fdfd 	bl	80026b4 <xTimerGenericCommand>
 8002aba:	60b8      	str	r0, [r7, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:725
				configASSERT( xResult );
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d102      	bne.n	8002ac8 <prvSwitchTimerLists+0x84>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:725 (discriminator 1)
 8002ac2:	f000 fa45 	bl	8002f50 <ulPortSetInterruptMask>
 8002ac6:	e7fe      	b.n	8002ac6 <prvSwitchTimerLists+0x82>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:693 (discriminator 1)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ac8:	4b08      	ldr	r3, [pc, #32]	; (8002aec <prvSwitchTimerLists+0xa8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1bc      	bne.n	8002a4c <prvSwitchTimerLists+0x8>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:735
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <prvSwitchTimerLists+0xa8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:736
	pxCurrentTimerList = pxOverflowTimerList;
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <prvSwitchTimerLists+0xac>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <prvSwitchTimerLists+0xa8>)
 8002ade:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:737
	pxOverflowTimerList = pxTemp;
 8002ae0:	4b03      	ldr	r3, [pc, #12]	; (8002af0 <prvSwitchTimerLists+0xac>)
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:738
}
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000140 	.word	0x20000140
 8002af0:	20000144 	.word	0x20000144

08002af4 <prvCheckForValidListAndQueue>:
prvCheckForValidListAndQueue():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:742
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:746
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002af8:	f000 fa02 	bl	8002f00 <vPortEnterCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:748
	{
		if( xTimerQueue == NULL )
 8002afc:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <prvCheckForValidListAndQueue+0x60>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d124      	bne.n	8002b4e <prvCheckForValidListAndQueue+0x5a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:750
		{
			vListInitialise( &xActiveTimerList1 );
 8002b04:	4814      	ldr	r0, [pc, #80]	; (8002b58 <prvCheckForValidListAndQueue+0x64>)
 8002b06:	f7fe fa99 	bl	800103c <vListInitialise>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:751
			vListInitialise( &xActiveTimerList2 );
 8002b0a:	4814      	ldr	r0, [pc, #80]	; (8002b5c <prvCheckForValidListAndQueue+0x68>)
 8002b0c:	f7fe fa96 	bl	800103c <vListInitialise>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:752
			pxCurrentTimerList = &xActiveTimerList1;
 8002b10:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <prvCheckForValidListAndQueue+0x6c>)
 8002b12:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <prvCheckForValidListAndQueue+0x64>)
 8002b14:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:753
			pxOverflowTimerList = &xActiveTimerList2;
 8002b16:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <prvCheckForValidListAndQueue+0x70>)
 8002b18:	4a10      	ldr	r2, [pc, #64]	; (8002b5c <prvCheckForValidListAndQueue+0x68>)
 8002b1a:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:754
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002b1c:	200a      	movs	r0, #10
 8002b1e:	210c      	movs	r1, #12
 8002b20:	2200      	movs	r2, #0
 8002b22:	f7fe fb95 	bl	8001250 <xQueueGenericCreate>
 8002b26:	4602      	mov	r2, r0
 8002b28:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <prvCheckForValidListAndQueue+0x60>)
 8002b2a:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:755
			configASSERT( xTimerQueue );
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <prvCheckForValidListAndQueue+0x60>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d102      	bne.n	8002b3a <prvCheckForValidListAndQueue+0x46>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:755 (discriminator 1)
 8002b34:	f000 fa0c 	bl	8002f50 <ulPortSetInterruptMask>
 8002b38:	e7fe      	b.n	8002b38 <prvCheckForValidListAndQueue+0x44>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:759

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <prvCheckForValidListAndQueue+0x60>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <prvCheckForValidListAndQueue+0x5a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:761
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002b42:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <prvCheckForValidListAndQueue+0x60>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	4907      	ldr	r1, [pc, #28]	; (8002b68 <prvCheckForValidListAndQueue+0x74>)
 8002b4a:	f7fe fed3 	bl	80018f4 <vQueueAddToRegistry>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:775
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b4e:	f000 f9e7 	bl	8002f20 <vPortExitCritical>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/src/timers.c:776
}
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000148 	.word	0x20000148
 8002b58:	20000118 	.word	0x20000118
 8002b5c:	2000012c 	.word	0x2000012c
 8002b60:	20000140 	.word	0x20000140
 8002b64:	20000144 	.word	0x20000144
 8002b68:	08003338 	.word	0x08003338

08002b6c <pvPortMalloc>:
pvPortMalloc():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:146
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:149
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:151

	vTaskSuspendAll();
 8002b78:	f7ff f82e 	bl	8001bd8 <vTaskSuspendAll>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:155
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8002b7c:	4b40      	ldr	r3, [pc, #256]	; (8002c80 <pvPortMalloc+0x114>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d104      	bne.n	8002b8e <pvPortMalloc+0x22>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:157
		{
			prvHeapInit();
 8002b84:	f000 f8bc 	bl	8002d00 <prvHeapInit>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:158
			xHeapHasBeenInitialised = pdTRUE;
 8002b88:	4b3d      	ldr	r3, [pc, #244]	; (8002c80 <pvPortMalloc+0x114>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:163
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00d      	beq.n	8002bb0 <pvPortMalloc+0x44>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:165
		{
			xWantedSize += heapSTRUCT_SIZE;
 8002b94:	2308      	movs	r3, #8
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:168

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d004      	beq.n	8002bb0 <pvPortMalloc+0x44>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:171
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f023 0307 	bic.w	r3, r3, #7
 8002bac:	3308      	adds	r3, #8
 8002bae:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:175
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d057      	beq.n	8002c66 <pvPortMalloc+0xfa>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:175 (discriminator 1)
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	f244 33f7 	movw	r3, #17399	; 0x43f7
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d852      	bhi.n	8002c66 <pvPortMalloc+0xfa>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:179
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8002bc0:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <pvPortMalloc+0x118>)
 8002bc2:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:180
			pxBlock = xStart.pxNextFreeBlock;
 8002bc4:	4b2f      	ldr	r3, [pc, #188]	; (8002c84 <pvPortMalloc+0x118>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:181
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002bca:	e004      	b.n	8002bd6 <pvPortMalloc+0x6a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:183
			{
				pxPreviousBlock = pxBlock;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:184
				pxBlock = pxBlock->pxNextFreeBlock;
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:181 (discriminator 1)
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d203      	bcs.n	8002be8 <pvPortMalloc+0x7c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:181 (discriminator 2)
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f1      	bne.n	8002bcc <pvPortMalloc+0x60>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:188
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <pvPortMalloc+0x11c>)
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d03a      	beq.n	8002c66 <pvPortMalloc+0xfa>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:192
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	2308      	movs	r3, #8
 8002bf6:	4413      	add	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:196

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:199

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	1ad2      	subs	r2, r2, r3
 8002c0a:	2308      	movs	r3, #8
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d922      	bls.n	8002c58 <pvPortMalloc+0xec>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:204
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4413      	add	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:208

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	1ad2      	subs	r2, r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:209
					pxBlock->xBlockSize = xWantedSize;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:212

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <pvPortMalloc+0x118>)
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	e002      	b.n	8002c3e <pvPortMalloc+0xd2>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:212 (discriminator 2)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:212 (discriminator 1)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d3f6      	bcc.n	8002c38 <pvPortMalloc+0xcc>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:212 (discriminator 3)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:215
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <pvPortMalloc+0x120>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	1ad2      	subs	r2, r2, r3
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <pvPortMalloc+0x120>)
 8002c64:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:221
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	xTaskResumeAll();
 8002c66:	f7fe ffc5 	bl	8001bf4 <xTaskResumeAll>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:225

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <pvPortMalloc+0x108>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:228
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8002c70:	f7fd fd08 	bl	8000684 <vApplicationMallocFailedHook>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:233
		}
	}
	#endif

	return pvReturn;
 8002c74:	697b      	ldr	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:234
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20004560 	.word	0x20004560
 8002c84:	20004550 	.word	0x20004550
 8002c88:	20004558 	.word	0x20004558
 8002c8c:	20000014 	.word	0x20000014

08002c90 <vPortFree>:
vPortFree():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:238
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:239
uint8_t *puc = ( uint8_t * ) pv;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:242
BlockLink_t *pxLink;

	if( pv != NULL )
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d027      	beq.n	8002cf2 <vPortFree+0x62>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:246
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	425b      	negs	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4413      	add	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:250

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:252

		vTaskSuspendAll();
 8002cb0:	f7fe ff92 	bl	8001bd8 <vTaskSuspendAll>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:255
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <vPortFree+0x68>)
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	e002      	b.n	8002cc6 <vPortFree+0x36>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:255 (discriminator 2)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:255 (discriminator 1)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d3f6      	bcc.n	8002cc0 <vPortFree+0x30>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:255 (discriminator 3)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:256 (discriminator 3)
			xFreeBytesRemaining += pxLink->xBlockSize;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <vPortFree+0x6c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	441a      	add	r2, r3
 8002cea:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <vPortFree+0x6c>)
 8002cec:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:259 (discriminator 3)
			traceFREE( pv, pxLink->xBlockSize );
		}
		xTaskResumeAll();
 8002cee:	f7fe ff81 	bl	8001bf4 <xTaskResumeAll>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:261
	}
}
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20004550 	.word	0x20004550
 8002cfc:	20000014 	.word	0x20000014

08002d00 <prvHeapInit>:
prvHeapInit():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:277
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:282
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <prvHeapInit+0x44>)
 8002d08:	f023 0307 	bic.w	r3, r3, #7
 8002d0c:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:286

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <prvHeapInit+0x48>)
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:287
	xStart.xBlockSize = ( size_t ) 0;
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <prvHeapInit+0x48>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:290

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8002d1a:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <prvHeapInit+0x4c>)
 8002d1c:	f244 32f8 	movw	r2, #17400	; 0x43f8
 8002d20:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:291
	xEnd.pxNextFreeBlock = NULL;
 8002d22:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <prvHeapInit+0x4c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:295

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:296
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f244 32f8 	movw	r2, #17400	; 0x43f8
 8002d32:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:297
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <prvHeapInit+0x4c>)
 8002d38:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/heap_2.c:298
}
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	20000158 	.word	0x20000158
 8002d48:	20004550 	.word	0x20004550
 8002d4c:	20004558 	.word	0x20004558

08002d50 <pxPortInitialiseStack>:
pxPortInitialiseStack():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:214

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:220
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3b04      	subs	r3, #4
 8002d60:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:222

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d68:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:223
	pxTopOfStack--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3b04      	subs	r3, #4
 8002d6e:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:224
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:225
	pxTopOfStack--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3b04      	subs	r3, #4
 8002d7a:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:226
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d7c:	4a0c      	ldr	r2, [pc, #48]	; (8002db0 <pxPortInitialiseStack+0x60>)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:229

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	3b14      	subs	r3, #20
 8002d86:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:230
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:234

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3b04      	subs	r3, #4
 8002d92:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:235
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f06f 0202 	mvn.w	r2, #2
 8002d9a:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:237

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3b20      	subs	r3, #32
 8002da0:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:239

	return pxTopOfStack;
 8002da2:	68fb      	ldr	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:240
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	08002db5 	.word	0x08002db5

08002db4 <prvTaskExitError>:
prvTaskExitError():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:244
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:251
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <prvTaskExitError+0x1c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d002      	beq.n	8002dc8 <prvTaskExitError+0x14>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:251 (discriminator 1)
 8002dc2:	f000 f8c5 	bl	8002f50 <ulPortSetInterruptMask>
 8002dc6:	e7fe      	b.n	8002dc6 <prvTaskExitError+0x12>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:252
	portDISABLE_INTERRUPTS();
 8002dc8:	f000 f8c2 	bl	8002f50 <ulPortSetInterruptMask>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:253 (discriminator 1)
	for( ;; );
 8002dcc:	e7fe      	b.n	8002dcc <prvTaskExitError+0x18>
 8002dce:	bf00      	nop
 8002dd0:	20000018 	.word	0x20000018

08002dd4 <SVC_Handler>:
SVC_Handler():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:259
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <pxCurrentTCBConst2>)
 8002dd6:	6819      	ldr	r1, [r3, #0]
 8002dd8:	6808      	ldr	r0, [r1, #0]
 8002dda:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dde:	f380 8809 	msr	PSP, r0
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	f04f 0000 	mov.w	r0, #0
 8002dea:	f380 8811 	msr	BASEPRI, r0
 8002dee:	4770      	bx	lr

08002df0 <pxCurrentTCBConst2>:
 8002df0:	2000001c 	.word	0x2000001c

08002df4 <prvPortStartFirstTask>:
prvPortStartFirstTask():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:278
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002df4:	4805      	ldr	r0, [pc, #20]	; (8002e0c <prvPortStartFirstTask+0x18>)
 8002df6:	6800      	ldr	r0, [r0, #0]
 8002df8:	6800      	ldr	r0, [r0, #0]
 8002dfa:	f380 8808 	msr	MSP, r0
 8002dfe:	b662      	cpsie	i
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	df00      	svc	0
 8002e0a:	bf00      	nop
$d():
 8002e0c:	e000ed08 	.word	0xe000ed08

08002e10 <xPortStartScheduler>:
xPortStartScheduler():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:296

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:304
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e16:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <xPortStartScheduler+0xb8>)
 8002e18:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:313
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:317

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	22ff      	movs	r2, #255	; 0xff
 8002e26:	701a      	strb	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:320

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	71fb      	strb	r3, [r7, #7]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:323

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <xPortStartScheduler+0xbc>)
 8002e3c:	701a      	strb	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:327

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e3e:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <xPortStartScheduler+0xc0>)
 8002e40:	2207      	movs	r2, #7
 8002e42:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:328
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e44:	e009      	b.n	8002e5a <xPortStartScheduler+0x4a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:330
		{
			ulMaxPRIGROUPValue--;
 8002e46:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <xPortStartScheduler+0xc0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	1e5a      	subs	r2, r3, #1
 8002e4c:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <xPortStartScheduler+0xc0>)
 8002e4e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:331
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	71fb      	strb	r3, [r7, #7]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:328 (discriminator 1)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	b25b      	sxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	dbef      	blt.n	8002e46 <xPortStartScheduler+0x36>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:336
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e66:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <xPortStartScheduler+0xc0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	021a      	lsls	r2, r3, #8
 8002e6c:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <xPortStartScheduler+0xc0>)
 8002e6e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:337
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e70:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <xPortStartScheduler+0xc0>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e78:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <xPortStartScheduler+0xc0>)
 8002e7a:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:341

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	701a      	strb	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:346
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002e84:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <xPortStartScheduler+0xc4>)
 8002e86:	4a13      	ldr	r2, [pc, #76]	; (8002ed4 <xPortStartScheduler+0xc4>)
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002e8e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:347
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002e90:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <xPortStartScheduler+0xc4>)
 8002e92:	4a10      	ldr	r2, [pc, #64]	; (8002ed4 <xPortStartScheduler+0xc4>)
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002e9a:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:351

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002e9c:	f000 f8a6 	bl	8002fec <vPortSetupTimerInterrupt>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:354

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002ea0:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <xPortStartScheduler+0xc8>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:357

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002ea6:	f000 f8b3 	bl	8003010 <vPortEnableVFP>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:360

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <xPortStartScheduler+0xcc>)
 8002eac:	4a0b      	ldr	r2, [pc, #44]	; (8002edc <xPortStartScheduler+0xcc>)
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8002eb4:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:363

	/* Start the first task. */
	prvPortStartFirstTask();
 8002eb6:	f7ff ff9d 	bl	8002df4 <prvPortStartFirstTask>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:369

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8002eba:	f7ff ff7b 	bl	8002db4 <prvTaskExitError>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:372

	/* Should not get here! */
	return 0;
 8002ebe:	2300      	movs	r3, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:373
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	e000e400 	.word	0xe000e400
 8002ecc:	20004564 	.word	0x20004564
 8002ed0:	20004568 	.word	0x20004568
 8002ed4:	e000ed20 	.word	0xe000ed20
 8002ed8:	20000018 	.word	0x20000018
 8002edc:	e000ef34 	.word	0xe000ef34

08002ee0 <vPortYield>:
vPortYield():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:385
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:387
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <vPortYield+0x1c>)
 8002ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eea:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:391

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8002eec:	f3bf 8f4f 	dsb	sy
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:392
	__asm volatile( "isb" );
 8002ef0:	f3bf 8f6f 	isb	sy
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:393
}
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000ed04 	.word	0xe000ed04

08002f00 <vPortEnterCritical>:
vPortEnterCritical():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:397
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:398
	portDISABLE_INTERRUPTS();
 8002f04:	f000 f824 	bl	8002f50 <ulPortSetInterruptMask>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:399
	uxCriticalNesting++;
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <vPortEnterCritical+0x1c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <vPortEnterCritical+0x1c>)
 8002f10:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:400
	__asm volatile( "dsb" );
 8002f12:	f3bf 8f4f 	dsb	sy
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:401
	__asm volatile( "isb" );
 8002f16:	f3bf 8f6f 	isb	sy
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:402
}
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000018 	.word	0x20000018

08002f20 <vPortExitCritical>:
vPortExitCritical():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:406
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:407
	configASSERT( uxCriticalNesting );
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <vPortExitCritical+0x2c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <vPortExitCritical+0x12>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:407 (discriminator 1)
 8002f2c:	f000 f810 	bl	8002f50 <ulPortSetInterruptMask>
 8002f30:	e7fe      	b.n	8002f30 <vPortExitCritical+0x10>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:408
	uxCriticalNesting--;
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <vPortExitCritical+0x2c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	1e5a      	subs	r2, r3, #1
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <vPortExitCritical+0x2c>)
 8002f3a:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:409
	if( uxCriticalNesting == 0 )
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <vPortExitCritical+0x2c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d102      	bne.n	8002f4a <vPortExitCritical+0x2a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:411
	{
		portENABLE_INTERRUPTS();
 8002f44:	2000      	movs	r0, #0
 8002f46:	f000 f80d 	bl	8002f64 <vPortClearInterruptMask>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:413
	}
}
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000018 	.word	0x20000018

08002f50 <ulPortSetInterruptMask>:
ulPortSetInterruptMask():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:418
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8002f50:	f3ef 8011 	mrs	r0, BASEPRI
 8002f54:	f04f 0150 	mov.w	r1, #80	; 0x50
 8002f58:	f381 8811 	msr	BASEPRI, r1
 8002f5c:	4770      	bx	lr
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:429
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 8002f5e:	2300      	movs	r3, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:430
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	bf00      	nop

08002f64 <vPortClearInterruptMask>:
vPortClearInterruptMask():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:435
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
 8002f64:	f380 8811 	msr	BASEPRI, r0
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop

08002f6c <PendSV_Handler>:
PendSV_Handler():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:451

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002f6c:	f3ef 8009 	mrs	r0, PSP
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <pxCurrentTCBConst>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	f01e 0f10 	tst.w	lr, #16
 8002f7c:	bf08      	it	eq
 8002f7e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f82:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f86:	6010      	str	r0, [r2, #0]
 8002f88:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002f8c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f90:	f380 8811 	msr	BASEPRI, r0
 8002f94:	f7fe ff7e 	bl	8001e94 <vTaskSwitchContext>
 8002f98:	f04f 0000 	mov.w	r0, #0
 8002f9c:	f380 8811 	msr	BASEPRI, r0
 8002fa0:	bc08      	pop	{r3}
 8002fa2:	6819      	ldr	r1, [r3, #0]
 8002fa4:	6808      	ldr	r0, [r1, #0]
 8002fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002faa:	f01e 0f10 	tst.w	lr, #16
 8002fae:	bf08      	it	eq
 8002fb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002fb4:	f380 8809 	msr	PSP, r0
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop

08002fc0 <pxCurrentTCBConst>:
 8002fc0:	2000001c 	.word	0x2000001c

08002fc4 <SysTick_Handler>:
SysTick_Handler():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:504
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:509
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8002fc8:	f7ff ffc2 	bl	8002f50 <ulPortSetInterruptMask>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:512
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002fcc:	f7fe feaa 	bl	8001d24 <xTaskIncrementTick>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <SysTick_Handler+0x1a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:516
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <SysTick_Handler+0x24>)
 8002fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fdc:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:519
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f7ff ffc0 	bl	8002f64 <vPortClearInterruptMask>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:520
}
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	e000ed04 	.word	0xe000ed04

08002fec <vPortSetupTimerInterrupt>:
vPortSetupTimerInterrupt():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:680
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:691
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <vPortSetupTimerInterrupt+0x18>)
 8002ff2:	4a05      	ldr	r2, [pc, #20]	; (8003008 <vPortSetupTimerInterrupt+0x1c>)
 8002ff4:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:692
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <vPortSetupTimerInterrupt+0x20>)
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:693
}
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000e014 	.word	0xe000e014
 8003008:	0002903f 	.word	0x0002903f
 800300c:	e000e010 	.word	0xe000e010

08003010 <vPortEnableVFP>:
vPortEnableVFP():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:699
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003010:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003020 <vPortEnableVFP+0x10>
 8003014:	6801      	ldr	r1, [r0, #0]
 8003016:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800301a:	6001      	str	r1, [r0, #0]
 800301c:	4770      	bx	lr
$d():
 800301e:	0000      	.short	0x0000
 8003020:	e000ed88 	.word	0xe000ed88

08003024 <vPortValidateInterruptPriority>:
vPortValidateInterruptPriority():
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:714
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:719
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800302a:	f3ef 8305 	mrs	r3, IPSR
 800302e:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:722

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b0f      	cmp	r3, #15
 8003034:	d90c      	bls.n	8003050 <vPortValidateInterruptPriority+0x2c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:725
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003036:	4a0d      	ldr	r2, [pc, #52]	; (800306c <vPortValidateInterruptPriority+0x48>)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4413      	add	r3, r2
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:750
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <vPortValidateInterruptPriority+0x4c>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	429a      	cmp	r2, r3
 8003048:	d202      	bcs.n	8003050 <vPortValidateInterruptPriority+0x2c>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:750 (discriminator 1)
 800304a:	f7ff ff81 	bl	8002f50 <ulPortSetInterruptMask>
 800304e:	e7fe      	b.n	800304e <vPortValidateInterruptPriority+0x2a>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:766
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <vPortValidateInterruptPriority+0x50>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003058:	4b07      	ldr	r3, [pc, #28]	; (8003078 <vPortValidateInterruptPriority+0x54>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d902      	bls.n	8003066 <vPortValidateInterruptPriority+0x42>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:766 (discriminator 1)
 8003060:	f7ff ff76 	bl	8002f50 <ulPortSetInterruptMask>
 8003064:	e7fe      	b.n	8003064 <vPortValidateInterruptPriority+0x40>
/home/chansak/workspace/RTOS_v8/Debug/../libs/FreeRTOS/portable/port.c:767
	}
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	e000e3f0 	.word	0xe000e3f0
 8003070:	20004564 	.word	0x20004564
 8003074:	e000ed0c 	.word	0xe000ed0c
 8003078:	20004568 	.word	0x20004568

0800307c <memcmp>:
memcmp():
 800307c:	2a03      	cmp	r2, #3
 800307e:	b470      	push	{r4, r5, r6}
 8003080:	d928      	bls.n	80030d4 <memcmp+0x58>
 8003082:	ea40 0301 	orr.w	r3, r0, r1
 8003086:	079b      	lsls	r3, r3, #30
 8003088:	d013      	beq.n	80030b2 <memcmp+0x36>
 800308a:	7805      	ldrb	r5, [r0, #0]
 800308c:	780c      	ldrb	r4, [r1, #0]
 800308e:	42a5      	cmp	r5, r4
 8003090:	d124      	bne.n	80030dc <memcmp+0x60>
 8003092:	3a01      	subs	r2, #1
 8003094:	2300      	movs	r3, #0
 8003096:	e005      	b.n	80030a4 <memcmp+0x28>
 8003098:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800309c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80030a0:	42a5      	cmp	r5, r4
 80030a2:	d11b      	bne.n	80030dc <memcmp+0x60>
 80030a4:	4293      	cmp	r3, r2
 80030a6:	f103 0301 	add.w	r3, r3, #1
 80030aa:	d1f5      	bne.n	8003098 <memcmp+0x1c>
 80030ac:	2000      	movs	r0, #0
 80030ae:	bc70      	pop	{r4, r5, r6}
 80030b0:	4770      	bx	lr
 80030b2:	460c      	mov	r4, r1
 80030b4:	4603      	mov	r3, r0
 80030b6:	6825      	ldr	r5, [r4, #0]
 80030b8:	681e      	ldr	r6, [r3, #0]
 80030ba:	42ae      	cmp	r6, r5
 80030bc:	4621      	mov	r1, r4
 80030be:	4618      	mov	r0, r3
 80030c0:	f104 0404 	add.w	r4, r4, #4
 80030c4:	f103 0304 	add.w	r3, r3, #4
 80030c8:	d104      	bne.n	80030d4 <memcmp+0x58>
 80030ca:	3a04      	subs	r2, #4
 80030cc:	2a03      	cmp	r2, #3
 80030ce:	4618      	mov	r0, r3
 80030d0:	4621      	mov	r1, r4
 80030d2:	d8f0      	bhi.n	80030b6 <memcmp+0x3a>
 80030d4:	2a00      	cmp	r2, #0
 80030d6:	d1d8      	bne.n	800308a <memcmp+0xe>
 80030d8:	4610      	mov	r0, r2
 80030da:	e7e8      	b.n	80030ae <memcmp+0x32>
 80030dc:	1b28      	subs	r0, r5, r4
 80030de:	bc70      	pop	{r4, r5, r6}
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop

080030e4 <memcpy>:
memcpy():
 80030e4:	4684      	mov	ip, r0
 80030e6:	ea41 0300 	orr.w	r3, r1, r0
 80030ea:	f013 0303 	ands.w	r3, r3, #3
 80030ee:	d16d      	bne.n	80031cc <memcpy+0xe8>
 80030f0:	3a40      	subs	r2, #64	; 0x40
 80030f2:	d341      	bcc.n	8003178 <memcpy+0x94>
 80030f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80030f8:	f840 3b04 	str.w	r3, [r0], #4
 80030fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8003100:	f840 3b04 	str.w	r3, [r0], #4
 8003104:	f851 3b04 	ldr.w	r3, [r1], #4
 8003108:	f840 3b04 	str.w	r3, [r0], #4
 800310c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003110:	f840 3b04 	str.w	r3, [r0], #4
 8003114:	f851 3b04 	ldr.w	r3, [r1], #4
 8003118:	f840 3b04 	str.w	r3, [r0], #4
 800311c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003120:	f840 3b04 	str.w	r3, [r0], #4
 8003124:	f851 3b04 	ldr.w	r3, [r1], #4
 8003128:	f840 3b04 	str.w	r3, [r0], #4
 800312c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003130:	f840 3b04 	str.w	r3, [r0], #4
 8003134:	f851 3b04 	ldr.w	r3, [r1], #4
 8003138:	f840 3b04 	str.w	r3, [r0], #4
 800313c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003140:	f840 3b04 	str.w	r3, [r0], #4
 8003144:	f851 3b04 	ldr.w	r3, [r1], #4
 8003148:	f840 3b04 	str.w	r3, [r0], #4
 800314c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003150:	f840 3b04 	str.w	r3, [r0], #4
 8003154:	f851 3b04 	ldr.w	r3, [r1], #4
 8003158:	f840 3b04 	str.w	r3, [r0], #4
 800315c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003160:	f840 3b04 	str.w	r3, [r0], #4
 8003164:	f851 3b04 	ldr.w	r3, [r1], #4
 8003168:	f840 3b04 	str.w	r3, [r0], #4
 800316c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003170:	f840 3b04 	str.w	r3, [r0], #4
 8003174:	3a40      	subs	r2, #64	; 0x40
 8003176:	d2bd      	bcs.n	80030f4 <memcpy+0x10>
 8003178:	3230      	adds	r2, #48	; 0x30
 800317a:	d311      	bcc.n	80031a0 <memcpy+0xbc>
 800317c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003180:	f840 3b04 	str.w	r3, [r0], #4
 8003184:	f851 3b04 	ldr.w	r3, [r1], #4
 8003188:	f840 3b04 	str.w	r3, [r0], #4
 800318c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003190:	f840 3b04 	str.w	r3, [r0], #4
 8003194:	f851 3b04 	ldr.w	r3, [r1], #4
 8003198:	f840 3b04 	str.w	r3, [r0], #4
 800319c:	3a10      	subs	r2, #16
 800319e:	d2ed      	bcs.n	800317c <memcpy+0x98>
 80031a0:	320c      	adds	r2, #12
 80031a2:	d305      	bcc.n	80031b0 <memcpy+0xcc>
 80031a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80031a8:	f840 3b04 	str.w	r3, [r0], #4
 80031ac:	3a04      	subs	r2, #4
 80031ae:	d2f9      	bcs.n	80031a4 <memcpy+0xc0>
 80031b0:	3204      	adds	r2, #4
 80031b2:	d008      	beq.n	80031c6 <memcpy+0xe2>
 80031b4:	07d2      	lsls	r2, r2, #31
 80031b6:	bf1c      	itt	ne
 80031b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80031bc:	f800 3b01 	strbne.w	r3, [r0], #1
 80031c0:	d301      	bcc.n	80031c6 <memcpy+0xe2>
 80031c2:	880b      	ldrh	r3, [r1, #0]
 80031c4:	8003      	strh	r3, [r0, #0]
 80031c6:	4660      	mov	r0, ip
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	2a08      	cmp	r2, #8
 80031ce:	d313      	bcc.n	80031f8 <memcpy+0x114>
 80031d0:	078b      	lsls	r3, r1, #30
 80031d2:	d08d      	beq.n	80030f0 <memcpy+0xc>
 80031d4:	f010 0303 	ands.w	r3, r0, #3
 80031d8:	d08a      	beq.n	80030f0 <memcpy+0xc>
 80031da:	f1c3 0304 	rsb	r3, r3, #4
 80031de:	1ad2      	subs	r2, r2, r3
 80031e0:	07db      	lsls	r3, r3, #31
 80031e2:	bf1c      	itt	ne
 80031e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80031e8:	f800 3b01 	strbne.w	r3, [r0], #1
 80031ec:	d380      	bcc.n	80030f0 <memcpy+0xc>
 80031ee:	f831 3b02 	ldrh.w	r3, [r1], #2
 80031f2:	f820 3b02 	strh.w	r3, [r0], #2
 80031f6:	e77b      	b.n	80030f0 <memcpy+0xc>
 80031f8:	3a04      	subs	r2, #4
 80031fa:	d3d9      	bcc.n	80031b0 <memcpy+0xcc>
 80031fc:	3a01      	subs	r2, #1
 80031fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003202:	f800 3b01 	strb.w	r3, [r0], #1
 8003206:	d2f9      	bcs.n	80031fc <memcpy+0x118>
 8003208:	780b      	ldrb	r3, [r1, #0]
 800320a:	7003      	strb	r3, [r0, #0]
 800320c:	784b      	ldrb	r3, [r1, #1]
 800320e:	7043      	strb	r3, [r0, #1]
 8003210:	788b      	ldrb	r3, [r1, #2]
 8003212:	7083      	strb	r3, [r0, #2]
 8003214:	4660      	mov	r0, ip
 8003216:	4770      	bx	lr

08003218 <memset>:
memset():
 8003218:	b4f0      	push	{r4, r5, r6, r7}
 800321a:	0784      	lsls	r4, r0, #30
 800321c:	d043      	beq.n	80032a6 <memset+0x8e>
 800321e:	1e54      	subs	r4, r2, #1
 8003220:	2a00      	cmp	r2, #0
 8003222:	d03e      	beq.n	80032a2 <memset+0x8a>
 8003224:	b2cd      	uxtb	r5, r1
 8003226:	4603      	mov	r3, r0
 8003228:	e003      	b.n	8003232 <memset+0x1a>
 800322a:	1e62      	subs	r2, r4, #1
 800322c:	2c00      	cmp	r4, #0
 800322e:	d038      	beq.n	80032a2 <memset+0x8a>
 8003230:	4614      	mov	r4, r2
 8003232:	f803 5b01 	strb.w	r5, [r3], #1
 8003236:	079a      	lsls	r2, r3, #30
 8003238:	d1f7      	bne.n	800322a <memset+0x12>
 800323a:	2c03      	cmp	r4, #3
 800323c:	d92a      	bls.n	8003294 <memset+0x7c>
 800323e:	b2cd      	uxtb	r5, r1
 8003240:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003244:	2c0f      	cmp	r4, #15
 8003246:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800324a:	d915      	bls.n	8003278 <memset+0x60>
 800324c:	f1a4 0710 	sub.w	r7, r4, #16
 8003250:	093f      	lsrs	r7, r7, #4
 8003252:	f103 0610 	add.w	r6, r3, #16
 8003256:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800325a:	461a      	mov	r2, r3
 800325c:	6015      	str	r5, [r2, #0]
 800325e:	6055      	str	r5, [r2, #4]
 8003260:	6095      	str	r5, [r2, #8]
 8003262:	60d5      	str	r5, [r2, #12]
 8003264:	3210      	adds	r2, #16
 8003266:	42b2      	cmp	r2, r6
 8003268:	d1f8      	bne.n	800325c <memset+0x44>
 800326a:	f004 040f 	and.w	r4, r4, #15
 800326e:	3701      	adds	r7, #1
 8003270:	2c03      	cmp	r4, #3
 8003272:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8003276:	d90d      	bls.n	8003294 <memset+0x7c>
 8003278:	461e      	mov	r6, r3
 800327a:	4622      	mov	r2, r4
 800327c:	3a04      	subs	r2, #4
 800327e:	2a03      	cmp	r2, #3
 8003280:	f846 5b04 	str.w	r5, [r6], #4
 8003284:	d8fa      	bhi.n	800327c <memset+0x64>
 8003286:	1f22      	subs	r2, r4, #4
 8003288:	f022 0203 	bic.w	r2, r2, #3
 800328c:	3204      	adds	r2, #4
 800328e:	4413      	add	r3, r2
 8003290:	f004 0403 	and.w	r4, r4, #3
 8003294:	b12c      	cbz	r4, 80032a2 <memset+0x8a>
 8003296:	b2c9      	uxtb	r1, r1
 8003298:	441c      	add	r4, r3
 800329a:	f803 1b01 	strb.w	r1, [r3], #1
 800329e:	42a3      	cmp	r3, r4
 80032a0:	d1fb      	bne.n	800329a <memset+0x82>
 80032a2:	bcf0      	pop	{r4, r5, r6, r7}
 80032a4:	4770      	bx	lr
 80032a6:	4614      	mov	r4, r2
 80032a8:	4603      	mov	r3, r0
 80032aa:	e7c6      	b.n	800323a <memset+0x22>
$d():
 80032ac:	75657571 	.word	0x75657571
 80032b0:	74692065 	.word	0x74692065
 80032b4:	77207327 	.word	0x77207327
 80032b8:	216b726f 	.word	0x216b726f
 80032bc:	00000a0d 	.word	0x00000a0d
 80032c0:	65480a0d 	.word	0x65480a0d
 80032c4:	206f6c6c 	.word	0x206f6c6c
 80032c8:	6c726f57 	.word	0x6c726f57
 80032cc:	0a0d2164 	.word	0x0a0d2164
 80032d0:	00000000 	.word	0x00000000
 80032d4:	6b736154 	.word	0x6b736154
 80032d8:	00003120 	.word	0x00003120
 80032dc:	6b736154 	.word	0x6b736154
 80032e0:	00003220 	.word	0x00003220
 80032e4:	6b736154 	.word	0x6b736154
 80032e8:	00003320 	.word	0x00003320
 80032ec:	6b736154 	.word	0x6b736154
 80032f0:	00003420 	.word	0x00003420
 80032f4:	6b736154 	.word	0x6b736154
 80032f8:	00003520 	.word	0x00003520
 80032fc:	6b736154 	.word	0x6b736154
 8003300:	00003620 	.word	0x00003620
 8003304:	6b736154 	.word	0x6b736154
 8003308:	65724320 	.word	0x65724320
 800330c:	64657461 	.word	0x64657461
 8003310:	00000a0d 	.word	0x00000a0d
 8003314:	454c4449 	.word	0x454c4449
 8003318:	00000000 	.word	0x00000000

0800331c <ucExpectedStackBytes.5294>:
 800331c:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 800332c:	a5a5a5a5 20726d54 00637653 51726d54     ....Tmr Svc.TmrQ
 800333c:	00000000                                ....
