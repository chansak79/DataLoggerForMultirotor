
Project_v2.0.elf:     file format elf32-littlearm
Project_v2.0.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000189

Program Header:
0x70000001 off    0x00011594 vaddr 0x08009594 paddr 0x08009594 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00008000 vaddr 0x08000000 paddr 0x08000000 align 2**15
         filesz 0x0000959c memsz 0x0000959c flags rwx
    LOAD off    0x00018000 vaddr 0x20000000 paddr 0x0800959c align 2**15
         filesz 0x00000894 memsz 0x000059bc flags rw-
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector   00000280  08000000  08000000  00008000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 ._inits       00000008  08000280  08000280  00008280  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .text         0000930c  08000288  08000288  00008288  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  08009594  08009594  00011594  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000894  20000000  0800959c  00018000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00005028  20000894  08009e30  00018894  2**2  ALLOC
  6 ._check_stack 00000100  200058bc  0800ee58  00018894  2**0  ALLOC
  7 .comment      00000070  00000000  00000000  00018894  2**0  CONTENTS, READONLY
  8 .ARM.attributes 00000035  00000000  00000000  00018904  2**0  CONTENTS, READONLY
  9 .debug_aranges 00000f58  00000000  00000000  00018939  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000ad93  00000000  00000000  00019891  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ec8  00000000  00000000  00024624  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007652  00000000  00000000  000264ec  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003890  00000000  00000000  0002db40  2**2  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006b22f  00000000  00000000  000313d0  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df8  00000000  00000000  0009c5ff  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000136d8  00000000  00000000  0009d3f7  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000280 l    d  ._inits	00000000 ._inits
08000288 l    d  .text	00000000 .text
08009594 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
20000894 l    d  .bss	00000000 .bss
200058bc l    d  ._check_stack	00000000 ._check_stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 vectors_stm32f4xx.c
00000000 l    df *ABS*	00000000 startup_cm.c
00000000 l    df *ABS*	00000000 startup_stm32f4xx.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 myFunction.c
00000000 l    df *ABS*	00000000 _sbrk.c
20001268 l     O .bss	00000004 current_heap_end.4287
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
08001664 l     F .text	000000f4 SetSysClock
00000000 l    df *ABS*	00000000 misc.c
00000000 l    df *ABS*	00000000 stm32f4xx_adc.c
00000000 l    df *ABS*	00000000 stm32f4xx_dma.c
00000000 l    df *ABS*	00000000 stm32f4xx_exti.c
00000000 l    df *ABS*	00000000 stm32f4xx_gpio.c
00000000 l    df *ABS*	00000000 stm32f4xx_rcc.c
20000000 l     O .data	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 stm32f4xx_syscfg.c
00000000 l    df *ABS*	00000000 stm32f4xx_tim.c
00000000 l    df *ABS*	00000000 stm32f4xx_usart.c
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 queue.c
08002cf8 l     F .text	000000d0 prvCopyDataToQueue
08002ed8 l     F .text	00000030 prvIsQueueFull
08002e14 l     F .text	00000096 prvUnlockQueue
08002dc8 l     F .text	0000004c prvCopyDataFromQueue
08002eac l     F .text	0000002c prvIsQueueEmpty
00000000 l    df *ABS*	00000000 tasks.c
20001270 l     O .bss	00000064 pxReadyTasksLists
200012d4 l     O .bss	00000014 xDelayedTaskList1
200012e8 l     O .bss	00000014 xDelayedTaskList2
200012fc l     O .bss	00000004 pxDelayedTaskList
20001300 l     O .bss	00000004 pxOverflowDelayedTaskList
20001304 l     O .bss	00000014 xPendingReadyList
20001318 l     O .bss	00000014 xTasksWaitingTermination
2000132c l     O .bss	00000004 uxTasksDeleted
20001330 l     O .bss	00000014 xSuspendedTaskList
20001344 l     O .bss	00000004 uxCurrentNumberOfTasks
20001348 l     O .bss	00000004 xTickCount
2000134c l     O .bss	00000004 uxTopReadyPriority
20001350 l     O .bss	00000004 xSchedulerRunning
20001354 l     O .bss	00000004 uxSchedulerSuspended
20001358 l     O .bss	00000004 uxPendedTicks
2000135c l     O .bss	00000004 xYieldPending
20001360 l     O .bss	00000004 xNumOfOverflows
20001364 l     O .bss	00000004 uxTaskNumber
20000010 l     O .data	00000004 xNextTaskUnblockTime
08003b2c l     F .text	00000064 prvAllocateTCBAndStack
08003940 l     F .text	0000008e prvInitialiseTCBVariables
080039d0 l     F .text	0000007c prvInitialiseTaskLists
08003bb0 l     F .text	00000048 prvResetNextTaskUnblockTime
08003ac0 l     F .text	0000006c prvAddCurrentTaskToDelayedList
08003920 l     F .text	00000020 prvIdleTask
080093ec l     O .text	00000014 ucExpectedStackBytes.5294
08003a4c l     F .text	00000074 prvCheckTasksWaitingTermination
08003b90 l     F .text	0000001e prvDeleteTCB
00000000 l    df *ABS*	00000000 timers.c
20001368 l     O .bss	00000014 xActiveTimerList1
2000137c l     O .bss	00000014 xActiveTimerList2
20001390 l     O .bss	00000004 pxCurrentTimerList
20001394 l     O .bss	00000004 pxOverflowTimerList
20001398 l     O .bss	00000004 xTimerQueue
0800422c l     F .text	00000078 prvCheckForValidListAndQueue
08003ee8 l     F .text	00000024 prvTimerTask
08003e78 l     F .text	00000070 prvProcessExpiredTimer
08004000 l     F .text	00000084 prvInsertTimerInActiveList
08003f78 l     F .text	00000048 prvGetNextExpireTime
08003f0c l     F .text	0000006c prvProcessTimerOrBlockTask
08004084 l     F .text	000000f8 prvProcessReceivedCommands
08003fc0 l     F .text	00000040 prvSampleTimeNow
0800417c l     F .text	000000b0 prvSwitchTimerLists
2000139c l     O .bss	00000004 xLastTime.5133
00000000 l    df *ABS*	00000000 heap_2.c
200013a0 l     O .bss	00004400 ucHeap
200057a0 l     O .bss	00000008 xStart
200057a8 l     O .bss	00000008 xEnd
20000014 l     O .data	00000004 xFreeBytesRemaining
08004438 l     F .text	00000050 prvHeapInit
200057b0 l     O .bss	00000004 xHeapHasBeenInitialised.4908
00000000 l    df *ABS*	00000000 port.c
20000018 l     O .data	00000004 uxCriticalNesting
200057b4 l     O .bss	00000001 ucMaxSysCallPriority
200057b8 l     O .bss	00000004 ulMaxPRIGROUPValue
080044ec l     F .text	00000020 prvTaskExitError
08004528 l       .text	00000000 pxCurrentTCBConst2
0800452c l     F .text	00000018 prvPortStartFirstTask
08004748 l     F .text	0000000e vPortEnableVFP
080046f8 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
08009414 l     O .text	00000010 zeroes.6763
08009468 l     O .text	00000010 blanks.6762
00000000 l    df *ABS*	00000000 dtoa.c
08005f40 l     F .text	00000130 quorem
00000000 l    df *ABS*	00000000 locale.c
2000044c l     O .data	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
08009588 l     O .text	0000000c p05.5269
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 impure.c
20000020 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 _Main_Stack_Size
0800959c l       .ARM.exidx	00000000 __exidx_end
0800959c l       .data	00000000 _etext
2001fc00 l       *ABS*	00000000 __Main_Stack_Limit
08000288 l       ._inits	00000000 __fini_array_end
08009594 l       .text	00000000 __exidx_start
00000400 l       *ABS*	00000000 __Main_Stack_Size
00000100 l       *ABS*	00000000 _Minimum_Stack_Size
200058bc l       ._check_stack	00000000 _end_noinit
08000288 l       ._inits	00000000 __fini_array_start
08000288 l       ._inits	00000000 __init_array_end
08000288 l       ._inits	00000000 __preinit_array_end
20020000 l       *ABS*	00000000 __stack
08000288 l       ._inits	00000000 __init_array_start
08000280 l       ._inits	00000000 __preinit_array_start
08000230  w    F .isr_vector	00000006 RTC_Alarm_IRQHandler
08000230  w    F .isr_vector	00000006 HASH_RNG_IRQHandler
08000d84 g     F .text	00000074 EXTI2_IRQHandler
08000230  w    F .isr_vector	00000006 TIM8_CC_IRQHandler
08008bec g     F .text	00000012 .hidden __aeabi_dcmple
200057f0 g     O .bss	00000004 usQueue
08008cd4 g     F .text	00000030 .hidden __gnu_uldivmod_helper
08008b28 g     F .text	0000007a .hidden __cmpdf2
08000268  w    F .isr_vector	00000006 DebugMon_Handler
08001c08 g     F .text	00000036 DMA_Cmd
08001f14 g     F .text	0000008c GPIO_PinAFConfig
08008b28 g     F .text	0000007a .hidden __eqdf2
08000280 g     O ._inits	00000004 p_system_init
08008d08 g     F .text	00000296 .hidden __divdi3
20000000 g       .data	00000000 __data_start__
08004658 g     F .text	00000030 vPortExitCritical
08008698 g     F .text	0000005a .hidden __floatdidf
2001fc00 g       *ABS*	00000000 _Heap_Limit
08000230  w    F .isr_vector	00000006 TIM1_CC_IRQHandler
08000230  w    F .isr_vector	00000006 DMA2_Stream5_IRQHandler
200057f4 g     O .bss	00000004 xUS_2
08000240  w    F .isr_vector	00000006 HardFault_Handler
08002f58 g     F .text	00000056 vQueueWaitForMessageRestricted
08004688 g     F .text	00000012 ulPortSetInterruptMask
08000230  w    F .isr_vector	00000006 DMA1_Stream5_IRQHandler
08007474 g     F .text	00000002 __malloc_unlock
08001aec g     F .text	00000036 ADC_DMACmd
080046fc g     F .text	00000028 SysTick_Handler
08001758 g     F .text	000000bc NVIC_Init
08000230  w    F .isr_vector	00000006 PVD_IRQHandler
08000230  w    F .isr_vector	00000006 SDIO_IRQHandler
08007ef8 g     F .text	000000c0 memmove
08000230  w    F .isr_vector	00000006 TAMP_STAMP_IRQHandler
0800959c g       .data	00000000 _sidata
080011c4 g     F .text	000000ac USART_init
080046a4 g     F .text	00000058 PendSV_Handler
08002a68 g     F .text	000000d4 xQueueGenericSendFromISR
08000238  w    F .isr_vector	00000006 NMI_Handler
08007478 g     F .text	0000004c _Balloc
080001cc g     F .isr_vector	00000048 system_init
08000230  w    F .isr_vector	00000006 CAN2_RX1_IRQHandler
08000df8 g     F .text	00000074 EXTI3_IRQHandler
08008b18 g     F .text	0000008a .hidden __gtdf2
080047b4 g     F .text	0000000c __errno
200058bc g       ._check_stack	00000000 _Heap_Begin
2000126c g     O .bss	00000004 pxCurrentTCB
08000230  w    F .isr_vector	00000006 TIM8_TRG_COM_TIM14_IRQHandler
08000230  w    F .isr_vector	00000006 TIM1_UP_TIM10_IRQHandler
080018bc g     F .text	00000050 ADC_CommonInit
200058b8 g     O .bss	00000004 errno
08000888 g     F .text	00000094 vTaskROS_recorder
20000894 g       .bss	00000000 _sbss
200057f8 g     O .bss	00000004 xUS_1
08008bb4 g     F .text	00000010 .hidden __aeabi_cdcmple
08000214 g     F .isr_vector	00000018 fpu_init
08001b5c g     F .text	000000ac DMA_Init
08000230  w    F .isr_vector	00000006 TIM8_UP_TIM13_IRQHandler
08000230  w    F .isr_vector	00000006 I2C3_ER_IRQHandler
0800317c g     F .text	00000124 vTaskPrioritySet
200057fc g     O .bss	00000004 adcQueue
08004548 g     F .text	000000d0 xPortStartScheduler
08004828 g     F .text	00000134 memcpy
080036c0 g     F .text	0000006c vTaskPlaceOnEventList
08008ba4 g     F .text	00000020 .hidden __aeabi_cdrcmple
0800190c g     F .text	00000036 ADC_Cmd
08002fb0 g     F .text	00000168 xTaskGenericCreate
08004a40 g     F .text	00001500 _svfprintf_r
08008628 g     F .text	00000022 .hidden __floatsidf
08004724  w    F .text	00000024 vPortSetupTimerInterrupt
200008b4 g     O .bss	00000001 usFlag1
08008b20 g     F .text	00000082 .hidden __ltdf2
08000c9c g     F .text	00000074 EXTI0_IRQHandler
08000230  w    F .isr_vector	00000006 I2C2_EV_IRQHandler
08008c78 g     F .text	00000000 .hidden __aeabi_uldivmod
080022f8 g     F .text	0000003e TIM_Cmd
200058bc g       ._check_stack	00000000 _noinit
08000230  w    F .isr_vector	00000006 DMA1_Stream2_IRQHandler
08000230  w    F .isr_vector	00000006 CAN1_RX0_IRQHandler
080043c8 g     F .text	00000070 vPortFree
08000230  w    F .isr_vector	00000006 FPU_IRQHandler
08007a8c g     F .text	00000050 __fpclassifyd
08000230  w    F .isr_vector	00000006 OTG_HS_WKUP_IRQHandler
0800475c g     F .text	00000058 vPortValidateInterruptPriority
08009498 g     O .text	000000c8 __mprec_tens
08001ef0 g     F .text	00000022 GPIO_ToggleBits
08000258  w    F .isr_vector	00000006 UsageFault_Handler
0800216c g     F .text	0000003c RCC_APB2PeriphClockCmd
080026a8 g     F .text	00000046 vListInsertEnd
08000230  w    F .isr_vector	00000006 CAN2_SCE_IRQHandler
200057c4 g     O .bss	00000004 __malloc_top_pad
08000230  w    F .isr_vector	00000006 DMA2_Stream2_IRQHandler
08001d6c g     F .text	0000011a GPIO_Init
20000894 g       .bss	00000000 __bss_start__
08008608 g     F .text	0000001e .hidden __aeabi_ui2d
08006ea0 g     F .text	00000008 _localeconv_r
0800760c g     F .text	00000012 __i2b
20000000 g       .data	00000000 _sdata
08000230  w    F .isr_vector	00000006 SPI1_IRQHandler
080024ac g     F .text	0000003e USART_Cmd
08008384 g     F .text	00000000 .hidden __aeabi_drsub
08007adc g     F .text	00000024 _sbrk_r
08000230  w    F .isr_vector	00000006 TIM6_DAC_IRQHandler
08002690 g     F .text	00000018 vListInitialiseItem
08000230  w    F .isr_vector	00000006 TIM1_BRK_TIM9_IRQHandler
08000230  w    F .isr_vector	00000006 DCMI_IRQHandler
08008bd8 g     F .text	00000012 .hidden __aeabi_dcmplt
08000230  w    F .isr_vector	00000006 CAN2_RX0_IRQHandler
20005878 g     O .bss	00000040 xQueueRegistry
0800469c g     F .text	00000006 vPortClearInterruptMask
200057c0 g     O .bss	00000004 __malloc_max_sbrked_mem
08001270 g     F .text	000001d0 EXTI_init
0800864c g     F .text	0000003a .hidden __extendsfdf2
08008948 g     F .text	000001d0 .hidden __aeabi_ddiv
08002130 g     F .text	0000003c RCC_APB1PeriphClockCmd
08008390 g     F .text	00000276 .hidden __adddf3
080086f4 g     F .text	00000254 .hidden __aeabi_dmul
08000230  w    F .isr_vector	00000006 DMA2_Stream3_IRQHandler
08000f34 g     F .text	00000046 USART_puts
08007fb8 g     F .text	000003cc _realloc_r
08001548 g     F .text	0000006c __libc_init_array
20000958 g     O .bss	00000140 ros_data
08008fa0 g     F .text	00000282 .hidden __udivdi3
08001944 g     F .text	00000186 ADC_RegularChannelConfig
08009560 g     O .text	00000028 __mprec_bigtens
08008608 g     F .text	0000001e .hidden __floatunsidf
080014e0 g     F .text	00000068 _sbrk
080078b4 g     F .text	00000046 __mcmp
080042a4 g     F .text	00000124 pvPortMalloc
200008a4 g     O .bss	00000010 roundLastTime
08000230  w    F .isr_vector	00000006 USART6_IRQHandler
08002650 g     F .text	0000003e vListInitialise
08000230  w    F .isr_vector	00000006 USART3_IRQHandler
08001d50 g     F .text	0000001c EXTI_ClearITPendingBit
08003438 g     F .text	00000024 xTaskGetTickCount
080028e8 g     F .text	0000017e xQueueGenericSend
08000230  w    F .isr_vector	00000006 CRYP_IRQHandler
080015b4 g     F .text	0000003c __libc_fini_array
200058bc g       .bss	00000000 _ebss
080025a0 g     F .text	000000ae USART_GetITStatus
08000188  w    F .isr_vector	00000044 Reset_Handler
08007570 g     F .text	00000040 __hi0bits
08000230  w    F .isr_vector	00000006 CAN1_RX1_IRQHandler
08008c28 g     F .text	0000004e .hidden __fixdfsi
08000804 g     F .text	00000084 vTaskROS
08000230  w    F .isr_vector	00000006 UART5_IRQHandler
08000230  w    F .isr_vector	00000006 DMA2_Stream0_IRQHandler
20005800 g     O .bss	00000004 rosQueue
0800377c g     F .text	000000b8 xTaskRemoveFromEventList
08000f28 g     F .text	0000000a vApplicationMallocFailedHook
08001e88 g     F .text	0000001c GPIO_SetBits
08000230  w    F .isr_vector	00000006 TIM4_IRQHandler
08008390 g     F .text	00000276 .hidden __aeabi_dadd
08008b20 g     F .text	00000082 .hidden __ledf2
08001ec0 g     F .text	0000002e GPIO_WriteBit
0800775c g     F .text	0000009c __pow5mult
08008688 g     F .text	0000006a .hidden __aeabi_ul2d
080006e4 g     F .text	00000084 vTaskADC
08000230  w    F .isr_vector	00000006 I2C1_EV_IRQHandler
08000230  w    F .isr_vector	00000006 DMA1_Stream6_IRQHandler
20000894 g       .data	00000000 __data_end__
08001fa0 g     F .text	00000154 RCC_GetClocksFreq
08000f7c g     F .text	00000158 ADC_init
200008b5 g     O .bss	00000001 usFlag2
08008c14 g     F .text	00000012 .hidden __aeabi_dcmpgt
08000230  w    F .isr_vector	00000006 DMA1_Stream1_IRQHandler
08000230  w    F .isr_vector	00000006 UART4_IRQHandler
080073e0 g     F .text	00000090 memchr
08002338 g     F .text	00000174 USART_Init
08003868 g     F .text	000000a0 xTaskCheckForTimeOut
200058bc g       .bss	00000000 __bss_end__
08007d5c g     F .text	0000019c _free_r
08000230  w    F .isr_vector	00000006 TIM3_IRQHandler
08000230  w    F .isr_vector	00000006 RCC_IRQHandler
08008c00 g     F .text	00000012 .hidden __aeabi_dcmpge
08000230  w    F .isr_vector	00000006 TIM8_BRK_TIM12_IRQHandler
08001acc g     F .text	0000001e ADC_SoftwareStartConv
0800838c g     F .text	0000027a .hidden __aeabi_dsub
08000230  w    F .isr_vector	00000006 Default_Handler
20000890 g     O .data	00000004 __malloc_sbrk_base
08003310 g     F .text	0000001c vTaskSuspendAll
08008688 g     F .text	0000006a .hidden __floatundidf
080077f8 g     F .text	000000bc __lshift
0800091c g     F .text	000001bc vTaskSendData
08007b60 g     F .text	00000100 __ssprint_r
08002760 g     F .text	00000054 uxListRemove
08000e6c g     F .text	00000078 EXTI15_10_IRQHandler
08003d10 g     F .text	00000084 vTaskPriorityDisinherit
08000230  w    F .isr_vector	00000006 ADC_IRQHandler
08002510 g     F .text	0000008e USART_ITConfig
08001c40 g     F .text	000000dc EXTI_Init
08007620 g     F .text	0000013c __multiply
08003c54 g     F .text	000000bc vTaskPriorityInherit
200057c8 g     O .bss	00000028 __malloc_current_mallinfo
080079d0 g     F .text	000000ba __d2b
080035cc g     F .text	000000f4 vTaskSwitchContext
08000230  w    F .isr_vector	00000006 DMA1_Stream7_IRQHandler
0800372c g     F .text	00000050 vTaskPlaceOnEventListRestricted
08001ea4 g     F .text	0000001c GPIO_ResetBits
08000230  w    F .isr_vector	00000006 TIM7_IRQHandler
08000230  w    F .isr_vector	00000006 CAN2_TX_IRQHandler
08008628 g     F .text	00000022 .hidden __aeabi_i2d
08000230  w    F .isr_vector	00000006 TIM5_IRQHandler
080047c0 g     F .text	00000066 memcmp
08000230  w    F .isr_vector	00000006 DMA2_Stream7_IRQHandler
200008b8 g     O .bss	000000a0 us_data
08000230  w    F .isr_vector	00000006 I2C3_EV_IRQHandler
08003dec g     F .text	0000008c xTimerGenericCommand
080010d4 g     F .text	000000b0 GPIO_init
08000f18 g     F .text	00000010 vApplicationStackOverflowHook
08008d04  w    F .text	00000002 .hidden __aeabi_ldiv0
08000230  w    F .isr_vector	00000006 EXTI9_5_IRQHandler
08000288 g     F .text	00000020 vTaskBlink
20005804 g     O .bss	00000064 str_buffer
08008948 g     F .text	000001d0 .hidden __divdf3
08001440 g     F .text	00000034 uDelay
08000230  w    F .isr_vector	00000006 RTC_WKUP_IRQHandler
20000484 g     O .data	00000408 __malloc_av_
080086f4 g     F .text	00000254 .hidden __muldf3
08000230  w    F .isr_vector	00000006 ETH_WKUP_IRQHandler
08004618 g     F .text	00000020 vPortYield
08007470 g     F .text	00000002 __malloc_lock
08001184 g     F .text	00000040 Timer_init
08007c60 g     F .text	0000005e _calloc_r
08001d1c g     F .text	00000034 EXTI_GetITStatus
08000230  w    F .isr_vector	00000006 SPI2_IRQHandler
08000230  w    F .isr_vector	00000006 OTG_HS_EP1_IN_IRQHandler
0800495c g     F .text	00000094 memset
08000248  w    F .isr_vector	00000006 MemManage_Handler
08000ad8 g     F .text	000001c4 main
200057bc g     O .bss	00000004 __malloc_max_total_mem
08000230  w    F .isr_vector	00000006 DMA1_Stream0_IRQHandler
20000a98 g     O .bss	000007d0 adc_data
080026f0 g     F .text	00000070 vListInsert
080002a8 g     F .text	000001d4 vTaskUS_1
08000230  w    F .isr_vector	00000006 CAN1_TX_IRQHandler
0800450c g     F .text	00000020 SVC_Handler
20005868 g     O .bss	00000004 roundFlag
08003d94 g     F .text	00000058 xTimerCreateTimerTask
08006070 g     F .text	00000e30 _dtoa_r
08006ea8 g     F .text	00000538 _malloc_r
08008698 g     F .text	0000005a .hidden __aeabi_l2d
08003bf8 g     F .text	00000020 xTaskGetCurrentTaskHandle
08000230  w    F .isr_vector	00000006 EXTI4_IRQHandler
08002864 g     F .text	00000084 xQueueGenericCreate
08007cc0 g     F .text	0000009c _malloc_trim_r
080015fc g     F .text	00000068 SystemInit
08000638 g     F .text	000000ac vTaskUS_recorder
08008b28 g     F .text	0000007a .hidden __nedf2
0800332c g     F .text	0000010c xTaskResumeAll
080049f0 g     F .text	0000004c sprintf
080032a0 g     F .text	00000070 vTaskStartScheduler
2000586c g     O .bss	0000000a ADCValue
0800047c g     F .text	000001bc vTaskUS_2
08000230  w    F .isr_vector	00000006 FSMC_IRQHandler
08000230  w    F .isr_vector	00000006 ETH_IRQHandler
20000448 g     O .data	00000004 _impure_ptr
08000230  w    F .isr_vector	00000006 OTG_HS_EP1_OUT_IRQHandler
08000230  w    F .isr_vector	00000006 WWDG_IRQHandler
08003908 g     F .text	00000018 vTaskMissedYield
08000230  w    F .isr_vector	00000006 TIM2_IRQHandler
08002b3c g     F .text	000001ba xQueueGenericReceive
08002f08 g     F .text	00000050 vQueueAddToRegistry
08000230  w    F .isr_vector	00000006 OTG_FS_WKUP_IRQHandler
0800345c g     F .text	00000170 xTaskIncrementTick
08000230  w    F .isr_vector	00000006 TIM1_TRG_COM_TIM11_IRQHandler
08000230  w    F .isr_vector	00000006 OTG_HS_IRQHandler
08001814 g     F .text	000000a8 ADC_Init
20020000 g       *ABS*	00000000 _estack
080024ec g     F .text	00000022 USART_SendData
08000d10 g     F .text	00000074 EXTI1_IRQHandler
08008bc4 g     F .text	00000012 .hidden __aeabi_dcmpeq
080027b4 g     F .text	000000b0 xQueueGenericReset
20000894 g       .data	00000000 _edata
08000768 g     F .text	0000009c vTaskADC_recorder
08002224 g     F .text	000000d4 TIM_TimeBaseInit
08000230  w    F .isr_vector	00000006 USART2_IRQHandler
080021a8 g     F .text	0000007c SYSCFG_EXTILineConfig
2000088c g     O .data	00000004 __malloc_trim_threshold
08000000 g     O .isr_vector	00000188 g_pfnVectors
080078fc g     F .text	000000d4 __mdiff
08008c28 g     F .text	0000004e .hidden __aeabi_d2iz
08000230  w    F .isr_vector	00000006 I2C2_ER_IRQHandler
08003118 g     F .text	00000064 vTaskDelay
20000894 g     O .bss	00000010 roundTime
08000284 g     O ._inits	00000004 p_fpu_init
08000230  w    F .isr_vector	00000006 DMA2_Stream1_IRQHandler
08003c18 g     F .text	0000003c xTaskGetSchedulerState
08008d04  w    F .text	00000002 .hidden __aeabi_idiv0
08000230  w    F .isr_vector	00000006 CAN1_SCE_IRQHandler
08000230  w    F .isr_vector	00000006 FLASH_IRQHandler
080015f0  w    F .text	0000000a _exit
08000230  w    F .isr_vector	00000006 DMA2_Stream4_IRQHandler
08000250  w    F .isr_vector	00000006 BusFault_Handler
080020f4 g     F .text	0000003c RCC_AHB1PeriphClockCmd
08000ee4 g     F .text	00000034 USART1_IRQHandler
08007b00 g     F .text	0000005e strlen
08004488 g     F .text	00000064 pxPortInitialiseStack
08000230  w    F .isr_vector	00000006 OTG_FS_IRQHandler
08000230  w    F .isr_vector	00000006 SPI3_IRQHandler
08008bb4 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08008b18 g     F .text	0000008a .hidden __gedf2
08000230  w    F .isr_vector	00000006 DMA1_Stream4_IRQHandler
08008ca4 g     F .text	00000030 .hidden __gnu_ldivmod_helper
08000230  w    F .isr_vector	00000006 I2C1_ER_IRQHandler
08003834 g     F .text	00000034 vTaskSetTimeOutState
0800864c g     F .text	0000003a .hidden __aeabi_f2d
08004638 g     F .text	00000020 vPortEnterCritical
08001b24 g     F .text	00000036 ADC_DMARequestAfterLastTransferCmd
0800838c g     F .text	0000027a .hidden __subdf3
080075b0 g     F .text	0000005a __lo0bits
08000230  w    F .isr_vector	00000006 DMA2_Stream6_IRQHandler
08000230  w    F .isr_vector	00000006 DMA1_Stream3_IRQHandler
08001474 g     F .text	0000006c enableExtiROS
080074d8 g     F .text	00000096 __multadd
080074c4 g     F .text	00000012 _Bfree



Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
$d():
 8000000:	00 00 02 20 89 01 00 08 39 02 00 08 41 02 00 08     ... ....9...A...
 8000010:	49 02 00 08 51 02 00 08 59 02 00 08 00 00 00 00     I...Q...Y.......
	...
 800002c:	0d 45 00 08 69 02 00 08 00 00 00 00 a5 46 00 08     .E..i........F..
 800003c:	fd 46 00 08 31 02 00 08 31 02 00 08 31 02 00 08     .F..1...1...1...
 800004c:	31 02 00 08 31 02 00 08 31 02 00 08 9d 0c 00 08     1...1...1.......
 800005c:	11 0d 00 08 85 0d 00 08 f9 0d 00 08 31 02 00 08     ............1...
 800006c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800007c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800008c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800009c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 80000ac:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 80000bc:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 80000cc:	31 02 00 08 31 02 00 08 e5 0e 00 08 31 02 00 08     1...1.......1...
 80000dc:	31 02 00 08 6d 0e 00 08 31 02 00 08 31 02 00 08     1...m...1...1...
 80000ec:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 80000fc:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800010c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800011c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800012c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800013c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800014c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800015c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800016c:	31 02 00 08 31 02 00 08 31 02 00 08 31 02 00 08     1...1...1...1...
 800017c:	31 02 00 08 31 02 00 08 31 02 00 08                 1...1...1...

08000188 <Reset_Handler>:
Reset_Handler():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:217
}

// This is the place where Cortex-M core will go immediately after reset.
void __attribute__ ((section(".after_vectors")))
Reset_Handler(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
 800018e:	4b0d      	ldr	r3, [pc, #52]	; (80001c4 <Reset_Handler+0x3c>)
 8000190:	60bb      	str	r3, [r7, #8]
 8000192:	4b0d      	ldr	r3, [pc, #52]	; (80001c8 <Reset_Handler+0x40>)
 8000194:	607b      	str	r3, [r7, #4]
bss_init():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:118
__attribute__((always_inline))
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 8000196:	68bb      	ldr	r3, [r7, #8]
 8000198:	603b      	str	r3, [r7, #0]
 800019a:	e004      	b.n	80001a6 <Reset_Handler+0x1e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:120
  while (p < section_end)
    *p++ = 0;
 800019c:	683b      	ldr	r3, [r7, #0]
 800019e:	1d1a      	adds	r2, r3, #4
 80001a0:	603a      	str	r2, [r7, #0]
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:119
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 80001a6:	687a      	ldr	r2, [r7, #4]
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	429a      	cmp	r2, r3
 80001ac:	d8f6      	bhi.n	800019c <Reset_Handler+0x14>
Reset_Handler():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:227
  // Zero fill the bss segment
  bss_init(&__bss_start__, &__bss_end__);

  // Call the standard library initialisation (mandatory, SystemInit()
  // and C++ static constructors are called from here).
  __libc_init_array();
 80001ae:	f001 f9cb 	bl	8001548 <__libc_init_array>
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:230

  // Call the main entry point, and save the exit code.
  int r = main();
 80001b2:	f000 fc91 	bl	8000ad8 <main>
 80001b6:	60f8      	str	r0, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:233

  // Run the static destructors.
  __libc_fini_array();
 80001b8:	f001 f9fc 	bl	80015b4 <__libc_fini_array>
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:238

  // On test platforms, like semihosting, this can be used to inform
  // the host on the test result.
  // On embedded platforms, usually reset the processor.
  _exit(r);
 80001bc:	68f8      	ldr	r0, [r7, #12]
 80001be:	f001 fa17 	bl	80015f0 <_exit>
 80001c2:	bf00      	nop
 80001c4:	20000894 	.word	0x20000894
 80001c8:	200058bc 	.word	0x200058bc

080001cc <system_init>:
system_init():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:248

// System initialisation, executed before constructors.
void
__attribute__((section(".after_vectors")))
system_init()
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4b0d      	ldr	r3, [pc, #52]	; (8000208 <system_init+0x3c>)
 80001d4:	60fb      	str	r3, [r7, #12]
 80001d6:	4b0d      	ldr	r3, [pc, #52]	; (800020c <system_init+0x40>)
 80001d8:	60bb      	str	r3, [r7, #8]
 80001da:	4b0d      	ldr	r3, [pc, #52]	; (8000210 <system_init+0x44>)
 80001dc:	607b      	str	r3, [r7, #4]
data_init():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:105
data_init(unsigned int* from, unsigned int* section_begin,
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 80001de:	68bb      	ldr	r3, [r7, #8]
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	e007      	b.n	80001f4 <system_init+0x28>
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:107
  while (p < section_end)
    *p++ = *from++;
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	1d1a      	adds	r2, r3, #4
 80001e8:	603a      	str	r2, [r7, #0]
 80001ea:	68fa      	ldr	r2, [r7, #12]
 80001ec:	1d11      	adds	r1, r2, #4
 80001ee:	60f9      	str	r1, [r7, #12]
 80001f0:	6812      	ldr	r2, [r2, #0]
 80001f2:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:106
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d8f3      	bhi.n	80001e4 <system_init+0x18>
system_init():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:256
  // so we must be sure it is executed somewhere.
  // (for example librdimon)
  data_init(&_sidata, &_sdata, &_edata);

  // Call the CSMSIS system initialisation routine
  SystemInit();
 80001fc:	f001 f9fe 	bl	80015fc <SystemInit>
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:257
}
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	0800959c 	.word	0x0800959c
 800020c:	20000000 	.word	0x20000000
 8000210:	20000894 	.word	0x20000894

08000214 <fpu_init>:
fpu_init():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_stm32f4xx.c:13
#if defined (__VFP_FP__) && !defined (__SOFTFP__)

void
__attribute__((section(".after_vectors")))
fpu_init()
  {
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_stm32f4xx.c:17
    // Code to enable the Cortex-M4 FPU only included
    // if appropriate build options have been selected.
    // Code taken from Section 7.1, Cortex-M4 TRM (DDI0439C)
    asm volatile
 8000218:	f8df 0010 	ldr.w	r0, [pc, #16]	; 800022c <fpu_init+0x18>
 800021c:	6801      	ldr	r1, [r0, #0]
 800021e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000222:	6001      	str	r1, [r0, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_stm32f4xx.c:27
        " STR             R1, [R0]"// Write back the modified value to the CPACR
        : /* out */
        : /* in */
        : /* clobber */
    );
  }
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr
$d():
 800022c:	e000ed88 	.word	0xe000ed88

08000230 <ADC_IRQHandler>:
Default_Handler():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:432
//
//*****************************************************************************

void __attribute__ ((section(".after_vectors")))
Default_Handler(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:435 (discriminator 1)
  while (1)
    {
    }
 8000234:	e7fe      	b.n	8000234 <ADC_IRQHandler+0x4>
RTC_Alarm_IRQHandler():
 8000236:	bf00      	nop

08000238 <NMI_Handler>:
NMI_Handler():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:444
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
void __attribute__ ((section(".after_vectors")))
NMI_Handler(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:447 (discriminator 1)
  while (1)
    {
    }
 800023c:	e7fe      	b.n	800023c <NMI_Handler+0x4>
 800023e:	bf00      	nop

08000240 <HardFault_Handler>:
HardFault_Handler():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:452
}

void __attribute__ ((section(".after_vectors")))
HardFault_Handler(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:455 (discriminator 1)
  while (1)
    {
    }
 8000244:	e7fe      	b.n	8000244 <HardFault_Handler+0x4>
 8000246:	bf00      	nop

08000248 <MemManage_Handler>:
MemManage_Handler():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:460
}

void __attribute__ ((section(".after_vectors")))
MemManage_Handler(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:463 (discriminator 1)
  while (1)
    {
    }
 800024c:	e7fe      	b.n	800024c <MemManage_Handler+0x4>
 800024e:	bf00      	nop

08000250 <BusFault_Handler>:
BusFault_Handler():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:468
}

void __attribute__ ((section(".after_vectors")))
BusFault_Handler(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:471 (discriminator 1)
  while (1)
    {
    }
 8000254:	e7fe      	b.n	8000254 <BusFault_Handler+0x4>
 8000256:	bf00      	nop

08000258 <UsageFault_Handler>:
UsageFault_Handler():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:476
}

void __attribute__ ((section(".after_vectors")))
UsageFault_Handler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:479 (discriminator 1)
  while (1)
    {
    }
 800025c:	e7fe      	b.n	800025c <UsageFault_Handler+0x4>
 800025e:	bf00      	nop
SVC_Handler():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:484
}

void __attribute__ ((section(".after_vectors")))
SVC_Handler(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:487 (discriminator 1)
  while (1)
    {
    }
 8000264:	e7fe      	b.n	8000264 <UsageFault_Handler+0xc>
UsageFault_Handler():
 8000266:	bf00      	nop

08000268 <DebugMon_Handler>:
DebugMon_Handler():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:492
}

void __attribute__ ((section(".after_vectors")))
DebugMon_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:495 (discriminator 1)
  while (1)
    {
    }
 800026c:	e7fe      	b.n	800026c <DebugMon_Handler+0x4>
 800026e:	bf00      	nop
PendSV_Handler():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:500
}

void __attribute__ ((section(".after_vectors")))
PendSV_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:503 (discriminator 1)
  while (1)
    {
    }
 8000274:	e7fe      	b.n	8000274 <DebugMon_Handler+0xc>
DebugMon_Handler():
 8000276:	bf00      	nop
SysTick_Handler():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:508
}

void __attribute__ ((section(".after_vectors")))
SysTick_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/vectors_stm32f4xx.c:511 (discriminator 1)
  while (1)
    {
    }
 800027c:	e7fe      	b.n	800027c <DebugMon_Handler+0x14>
DebugMon_Handler():
 800027e:	bf00      	nop

Disassembly of section .text:

08000288 <vTaskBlink>:
vTaskBlink():
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:83
struct ros_profile ros_data[ROS_BUFFER_SIZE] = {0};
struct adc_profile adc_data[ADC_BUFFER_SIZE] = {0};

//heart beat system
void vTaskBlink (void* pvParameters)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:86 (discriminator 1)
	for (;;)
	{
		vTaskDelay(500);
 8000290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000294:	f002 ff40 	bl	8003118 <vTaskDelay>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:87 (discriminator 1)
		GPIO_ToggleBits(GPIOD, GPIO_Pin_15);
 8000298:	4802      	ldr	r0, [pc, #8]	; (80002a4 <__fini_array_end+0x1c>)
 800029a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800029e:	f001 fe27 	bl	8001ef0 <GPIO_ToggleBits>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:88 (discriminator 1)
	}
 80002a2:	e7f5      	b.n	8000290 <vTaskBlink+0x8>
 80002a4:	40020c00 	.word	0x40020c00

080002a8 <vTaskUS_1>:
vTaskUS_1():
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:93
}

//task ultrasonic signal process #1
void vTaskUS_1 (void* pvParameters)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b08a      	sub	sp, #40	; 0x28
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:96
	/* timer vatriable */
    uint32_t timerState;
    uint32_t currentTime, lastTime = TIM2->CNT;
 80002b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002b6:	623b      	str	r3, [r7, #32]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:100
    /* for calculate distance */
    uint32_t raw, distance;
    /* buffer for send to queue */
    struct us_profile this_us = {1,0,0};
 80002b8:	2301      	movs	r3, #1
 80002ba:	723b      	strb	r3, [r7, #8]
 80002bc:	2300      	movs	r3, #0
 80002be:	727b      	strb	r3, [r7, #9]
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:101
    US_State state = start;
 80002c4:	2300      	movs	r3, #0
 80002c6:	76fb      	strb	r3, [r7, #27]
 80002c8:	e000      	b.n	80002cc <vTaskUS_1+0x24>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:188
			state = start;									//set state to start state
			GPIO_ToggleBits(GPIOD, GPIO_Pin_13);			//toggle heart beat ultrasonic task
			break;
		}

    }
 80002ca:	bf00      	nop
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:105
    struct us_profile this_us = {1,0,0};
    US_State state = start;

    for (;;)
    {
		switch( state )
 80002cc:	7efb      	ldrb	r3, [r7, #27]
 80002ce:	2b04      	cmp	r3, #4
 80002d0:	d8fb      	bhi.n	80002ca <vTaskUS_1+0x22>
 80002d2:	a101      	add	r1, pc, #4	; (adr r1, 80002d8 <vTaskUS_1+0x30>)
 80002d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80002d8:	080002ed 	.word	0x080002ed
 80002dc:	08000337 	.word	0x08000337
 80002e0:	0800035b 	.word	0x0800035b
 80002e4:	080003b7 	.word	0x080003b7
 80002e8:	0800041f 	.word	0x0800041f
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:109
		{
		case start :

			currentTime = TIM2->CNT - lastTime;
 80002ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002f2:	6a3b      	ldr	r3, [r7, #32]
 80002f4:	1ad3      	subs	r3, r2, r3
 80002f6:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:111
			/* process period every 100ms = 10Hz */
			vTaskDelay(100 - (currentTime/1000));
 80002f8:	697a      	ldr	r2, [r7, #20]
 80002fa:	4b59      	ldr	r3, [pc, #356]	; (8000460 <vTaskUS_1+0x1b8>)
 80002fc:	fba3 1302 	umull	r1, r3, r3, r2
 8000300:	099b      	lsrs	r3, r3, #6
 8000302:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000306:	4618      	mov	r0, r3
 8000308:	f002 ff06 	bl	8003118 <vTaskDelay>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:113

			usFlag1 = false;								//set default value
 800030c:	4b55      	ldr	r3, [pc, #340]	; (8000464 <vTaskUS_1+0x1bc>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:114
			vTaskPrioritySet(xUS_1, tskIDLE_PRIORITY);		//set priority task and flag to default
 8000312:	4b55      	ldr	r3, [pc, #340]	; (8000468 <vTaskUS_1+0x1c0>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4618      	mov	r0, r3
 8000318:	2100      	movs	r1, #0
 800031a:	f002 ff2f 	bl	800317c <vTaskPrioritySet>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:115
			state = ping;									//set next state
 800031e:	2301      	movs	r3, #1
 8000320:	76fb      	strb	r3, [r7, #27]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:116
			GPIO_ToggleBits(GPIOD, GPIO_Pin_13);			//toggle heart beat ultrasonic task
 8000322:	4852      	ldr	r0, [pc, #328]	; (800046c <vTaskUS_1+0x1c4>)
 8000324:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000328:	f001 fde2 	bl	8001ef0 <GPIO_ToggleBits>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:118

			lastTime = TIM2->CNT;
 800032c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000332:	623b      	str	r3, [r7, #32]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:120

	    	break;
 8000334:	e092      	b.n	800045c <vTaskUS_1+0x1b4>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:124

		case ping :
			/* start ping signal by pulse 10uSec */
			GPIO_SetBits(GPIOA, GPIO_Pin_6);
 8000336:	484e      	ldr	r0, [pc, #312]	; (8000470 <vTaskUS_1+0x1c8>)
 8000338:	2140      	movs	r1, #64	; 0x40
 800033a:	f001 fda5 	bl	8001e88 <GPIO_SetBits>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:125
			uDelay(10);
 800033e:	200a      	movs	r0, #10
 8000340:	f001 f87e 	bl	8001440 <uDelay>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:126
			GPIO_ResetBits(GPIOA, GPIO_Pin_6);
 8000344:	484a      	ldr	r0, [pc, #296]	; (8000470 <vTaskUS_1+0x1c8>)
 8000346:	2140      	movs	r1, #64	; 0x40
 8000348:	f001 fdac 	bl	8001ea4 <GPIO_ResetBits>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:128

			timerState = TIM2->CNT;
 800034c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000352:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:129
			state = wait_risingEcho;
 8000354:	2302      	movs	r3, #2
 8000356:	76fb      	strb	r3, [r7, #27]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:131

			break;
 8000358:	e080      	b.n	800045c <vTaskUS_1+0x1b4>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:134

		case wait_risingEcho :
			if( TIM2->CNT - timerState > 500 ) 				//check TIMEOUT 500us
 800035a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800035e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000362:	1ad3      	subs	r3, r2, r3
 8000364:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000368:	d910      	bls.n	800038c <vTaskUS_1+0xe4>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:137
			{
				/* case none ack form ultrasonic and set status = 1 */
				this_us.status = 1;
 800036a:	2301      	movs	r3, #1
 800036c:	727b      	strb	r3, [r7, #9]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:138
				this_us.distance = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:139
				xQueueSend(usQueue, &this_us, 0);
 8000372:	4b40      	ldr	r3, [pc, #256]	; (8000474 <vTaskUS_1+0x1cc>)
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	f107 0308 	add.w	r3, r7, #8
 800037a:	4610      	mov	r0, r2
 800037c:	4619      	mov	r1, r3
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	f002 fab1 	bl	80028e8 <xQueueGenericSend>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:140
				state = start;								//set state to start state
 8000386:	2300      	movs	r3, #0
 8000388:	76fb      	strb	r3, [r7, #27]
 800038a:	e013      	b.n	80003b4 <vTaskUS_1+0x10c>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:142
			}
			else if( usFlag1 != false )
 800038c:	4b35      	ldr	r3, [pc, #212]	; (8000464 <vTaskUS_1+0x1bc>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d00f      	beq.n	80003b4 <vTaskUS_1+0x10c>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:145
			{
				/* case received rising ack form ultrasonic and time stamp */
				timerState = TIM2->CNT;
 8000394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800039a:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:147

				vTaskPrioritySet( xUS_1, tskIDLE_PRIORITY );//set priority task and flag to default
 800039c:	4b32      	ldr	r3, [pc, #200]	; (8000468 <vTaskUS_1+0x1c0>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4618      	mov	r0, r3
 80003a2:	2100      	movs	r1, #0
 80003a4:	f002 feea 	bl	800317c <vTaskPrioritySet>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:148
				usFlag1 = false;
 80003a8:	4b2e      	ldr	r3, [pc, #184]	; (8000464 <vTaskUS_1+0x1bc>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	701a      	strb	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:149
				state = wait_fallingEcho;					//set next state
 80003ae:	2303      	movs	r3, #3
 80003b0:	76fb      	strb	r3, [r7, #27]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:151
			}
			break;
 80003b2:	e053      	b.n	800045c <vTaskUS_1+0x1b4>
 80003b4:	e052      	b.n	800045c <vTaskUS_1+0x1b4>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:154

		case wait_fallingEcho :
			if( TIM2->CNT - timerState > 25000 ) 			//check TIMEOUT 25ms
 80003b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003be:	1ad2      	subs	r2, r2, r3
 80003c0:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d913      	bls.n	80003f0 <vTaskUS_1+0x148>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:157
			{
				/* case distance out of range ack signal more than 25ms */
				this_us.status = 2;
 80003c8:	2302      	movs	r3, #2
 80003ca:	727b      	strb	r3, [r7, #9]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:158
				this_us.distance = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:159
				xQueueSend(usQueue, &this_us, 0);
 80003d0:	4b28      	ldr	r3, [pc, #160]	; (8000474 <vTaskUS_1+0x1cc>)
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	f107 0308 	add.w	r3, r7, #8
 80003d8:	4610      	mov	r0, r2
 80003da:	4619      	mov	r1, r3
 80003dc:	2200      	movs	r2, #0
 80003de:	2300      	movs	r3, #0
 80003e0:	f002 fa82 	bl	80028e8 <xQueueGenericSend>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:163

				/* special case
				 * soft lock interrupt */
				usFlag1 = true;
 80003e4:	4b1f      	ldr	r3, [pc, #124]	; (8000464 <vTaskUS_1+0x1bc>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:165

				state = start;								//set state to start state
 80003ea:	2300      	movs	r3, #0
 80003ec:	76fb      	strb	r3, [r7, #27]
 80003ee:	e015      	b.n	800041c <vTaskUS_1+0x174>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:167
			}
			else if( usFlag1 != false )
 80003f0:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <vTaskUS_1+0x1bc>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d011      	beq.n	800041c <vTaskUS_1+0x174>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:170
			{
				/* case success receive signal form ultrasonic  */
				raw = TIM2->CNT - timerState;
 80003f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000400:	1ad3      	subs	r3, r2, r3
 8000402:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:171
				vTaskPrioritySet( xUS_1, tskIDLE_PRIORITY );
 8000404:	4b18      	ldr	r3, [pc, #96]	; (8000468 <vTaskUS_1+0x1c0>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	f002 feb6 	bl	800317c <vTaskPrioritySet>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:172
				usFlag1 = false;
 8000410:	4b14      	ldr	r3, [pc, #80]	; (8000464 <vTaskUS_1+0x1bc>)
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:173
				state = end;								//set next state
 8000416:	2304      	movs	r3, #4
 8000418:	76fb      	strb	r3, [r7, #27]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:175
			}
			break;
 800041a:	e01f      	b.n	800045c <vTaskUS_1+0x1b4>
 800041c:	e01e      	b.n	800045c <vTaskUS_1+0x1b4>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:178
		case end :
			/* calculate distance */
			distance = ((raw * 17) / 100);
 800041e:	69fa      	ldr	r2, [r7, #28]
 8000420:	4613      	mov	r3, r2
 8000422:	011b      	lsls	r3, r3, #4
 8000424:	441a      	add	r2, r3
 8000426:	4b14      	ldr	r3, [pc, #80]	; (8000478 <vTaskUS_1+0x1d0>)
 8000428:	fba3 1302 	umull	r1, r3, r3, r2
 800042c:	095b      	lsrs	r3, r3, #5
 800042e:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:179
			this_us.status = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	727b      	strb	r3, [r7, #9]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:180
			this_us.distance = distance;
 8000434:	693b      	ldr	r3, [r7, #16]
 8000436:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:182

			xQueueSend(usQueue, &this_us, 0);				//send data to queue
 8000438:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <vTaskUS_1+0x1cc>)
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	f107 0308 	add.w	r3, r7, #8
 8000440:	4610      	mov	r0, r2
 8000442:	4619      	mov	r1, r3
 8000444:	2200      	movs	r2, #0
 8000446:	2300      	movs	r3, #0
 8000448:	f002 fa4e 	bl	80028e8 <xQueueGenericSend>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:183
			state = start;									//set state to start state
 800044c:	2300      	movs	r3, #0
 800044e:	76fb      	strb	r3, [r7, #27]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:184
			GPIO_ToggleBits(GPIOD, GPIO_Pin_13);			//toggle heart beat ultrasonic task
 8000450:	4806      	ldr	r0, [pc, #24]	; (800046c <vTaskUS_1+0x1c4>)
 8000452:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000456:	f001 fd4b 	bl	8001ef0 <GPIO_ToggleBits>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:185
			break;
 800045a:	bf00      	nop
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:188
		}

    }
 800045c:	e735      	b.n	80002ca <vTaskUS_1+0x22>
 800045e:	bf00      	nop
 8000460:	10624dd3 	.word	0x10624dd3
 8000464:	200008b4 	.word	0x200008b4
 8000468:	200057f8 	.word	0x200057f8
 800046c:	40020c00 	.word	0x40020c00
 8000470:	40020000 	.word	0x40020000
 8000474:	200057f0 	.word	0x200057f0
 8000478:	51eb851f 	.word	0x51eb851f

0800047c <vTaskUS_2>:
vTaskUS_2():
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:193
}

//task ultrasonic signal process #2
void vTaskUS_2 (void* pvParameters)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b08a      	sub	sp, #40	; 0x28
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:196
	/* timer vatriable */
    uint32_t timerState;
    uint32_t currentTime, lastTime = TIM2->CNT;
 8000484:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800048a:	623b      	str	r3, [r7, #32]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:200
    /* for calculate distance */
    uint32_t raw, distance;
    /* buffer for send to queue */
    struct us_profile this_us = {2,0,0};
 800048c:	2302      	movs	r3, #2
 800048e:	723b      	strb	r3, [r7, #8]
 8000490:	2300      	movs	r3, #0
 8000492:	727b      	strb	r3, [r7, #9]
 8000494:	2300      	movs	r3, #0
 8000496:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:201
    US_State state = start;
 8000498:	2300      	movs	r3, #0
 800049a:	76fb      	strb	r3, [r7, #27]
 800049c:	e000      	b.n	80004a0 <vTaskUS_2+0x24>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:285
			xQueueSend(usQueue, &this_us, 0);				//send data to queue
			state = start;									//set state to start state

			break;
		}
    }
 800049e:	bf00      	nop
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:205
    struct us_profile this_us = {2,0,0};
    US_State state = start;

    for (;;)
    {
		switch( state )
 80004a0:	7efb      	ldrb	r3, [r7, #27]
 80004a2:	2b04      	cmp	r3, #4
 80004a4:	d8fb      	bhi.n	800049e <vTaskUS_2+0x22>
 80004a6:	a101      	add	r1, pc, #4	; (adr r1, 80004ac <vTaskUS_2+0x30>)
 80004a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80004ac:	080004c1 	.word	0x080004c1
 80004b0:	08000501 	.word	0x08000501
 80004b4:	08000525 	.word	0x08000525
 80004b8:	08000581 	.word	0x08000581
 80004bc:	080005e9 	.word	0x080005e9
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:209
		{
		case start :

			currentTime = TIM2->CNT - lastTime;
 80004c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004c6:	6a3b      	ldr	r3, [r7, #32]
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:211
			/* process period every 100ms = 10Hz */
			vTaskDelay(100 - (currentTime / 1000));
 80004cc:	697a      	ldr	r2, [r7, #20]
 80004ce:	4b54      	ldr	r3, [pc, #336]	; (8000620 <vTaskUS_2+0x1a4>)
 80004d0:	fba3 1302 	umull	r1, r3, r3, r2
 80004d4:	099b      	lsrs	r3, r3, #6
 80004d6:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 fe1c 	bl	8003118 <vTaskDelay>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:213

			usFlag2 = false;								//set default value
 80004e0:	4b50      	ldr	r3, [pc, #320]	; (8000624 <vTaskUS_2+0x1a8>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:214
			vTaskPrioritySet(xUS_2, tskIDLE_PRIORITY);		//set priority task and flag to default
 80004e6:	4b50      	ldr	r3, [pc, #320]	; (8000628 <vTaskUS_2+0x1ac>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4618      	mov	r0, r3
 80004ec:	2100      	movs	r1, #0
 80004ee:	f002 fe45 	bl	800317c <vTaskPrioritySet>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:215
			state = ping;									//set next state
 80004f2:	2301      	movs	r3, #1
 80004f4:	76fb      	strb	r3, [r7, #27]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:217

			lastTime = TIM2->CNT;
 80004f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004fc:	623b      	str	r3, [r7, #32]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:219

	    	break;
 80004fe:	e08d      	b.n	800061c <vTaskUS_2+0x1a0>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:223

		case ping :
			/* start ping signal by pulse 10uSec */
			GPIO_SetBits(GPIOA, GPIO_Pin_7);
 8000500:	484a      	ldr	r0, [pc, #296]	; (800062c <vTaskUS_2+0x1b0>)
 8000502:	2180      	movs	r1, #128	; 0x80
 8000504:	f001 fcc0 	bl	8001e88 <GPIO_SetBits>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:224
			uDelay(10);
 8000508:	200a      	movs	r0, #10
 800050a:	f000 ff99 	bl	8001440 <uDelay>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:225
			GPIO_ResetBits(GPIOA, GPIO_Pin_7);
 800050e:	4847      	ldr	r0, [pc, #284]	; (800062c <vTaskUS_2+0x1b0>)
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	f001 fcc7 	bl	8001ea4 <GPIO_ResetBits>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:227

			timerState = TIM2->CNT;
 8000516:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800051a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051c:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:228
			state = wait_risingEcho;						//set next state
 800051e:	2302      	movs	r3, #2
 8000520:	76fb      	strb	r3, [r7, #27]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:230

			break;
 8000522:	e07b      	b.n	800061c <vTaskUS_2+0x1a0>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:233

		case wait_risingEcho :
			if( TIM2->CNT - timerState > 500 ) 				//check TIMEOUT 500us
 8000524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800052a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000532:	d910      	bls.n	8000556 <vTaskUS_2+0xda>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:236
			{
				/* case none ack form ultrasonic and set status = 1 */
				this_us.status = 1;
 8000534:	2301      	movs	r3, #1
 8000536:	727b      	strb	r3, [r7, #9]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:237
				this_us.distance = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:238
				xQueueSend(usQueue, &this_us, 0);
 800053c:	4b3c      	ldr	r3, [pc, #240]	; (8000630 <vTaskUS_2+0x1b4>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	f107 0308 	add.w	r3, r7, #8
 8000544:	4610      	mov	r0, r2
 8000546:	4619      	mov	r1, r3
 8000548:	2200      	movs	r2, #0
 800054a:	2300      	movs	r3, #0
 800054c:	f002 f9cc 	bl	80028e8 <xQueueGenericSend>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:239
				state = start;								//set state to start state
 8000550:	2300      	movs	r3, #0
 8000552:	76fb      	strb	r3, [r7, #27]
 8000554:	e013      	b.n	800057e <vTaskUS_2+0x102>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:241
			}
			else if( usFlag2 != false )
 8000556:	4b33      	ldr	r3, [pc, #204]	; (8000624 <vTaskUS_2+0x1a8>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d00f      	beq.n	800057e <vTaskUS_2+0x102>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:244
			{
				/* case received rising ack form ultrasonic and time stamp */
				timerState = TIM2->CNT;
 800055e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:245
				vTaskPrioritySet( xUS_2, tskIDLE_PRIORITY );//set priority task and flag to default
 8000566:	4b30      	ldr	r3, [pc, #192]	; (8000628 <vTaskUS_2+0x1ac>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f002 fe05 	bl	800317c <vTaskPrioritySet>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:246
				usFlag2 = false;
 8000572:	4b2c      	ldr	r3, [pc, #176]	; (8000624 <vTaskUS_2+0x1a8>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:247
				state = wait_fallingEcho;					//set next state
 8000578:	2303      	movs	r3, #3
 800057a:	76fb      	strb	r3, [r7, #27]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:249
			}
			break;
 800057c:	e04e      	b.n	800061c <vTaskUS_2+0x1a0>
 800057e:	e04d      	b.n	800061c <vTaskUS_2+0x1a0>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:252

		case wait_fallingEcho :
			if( TIM2->CNT - timerState > 25000 ) 			//check TIMEOUT 25ms
 8000580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000588:	1ad2      	subs	r2, r2, r3
 800058a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800058e:	429a      	cmp	r2, r3
 8000590:	d913      	bls.n	80005ba <vTaskUS_2+0x13e>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:255
			{
				/* case distance out of range ack signal more than 25ms */
				this_us.status = 2;
 8000592:	2302      	movs	r3, #2
 8000594:	727b      	strb	r3, [r7, #9]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:256
				this_us.distance = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:257
				xQueueSend(usQueue, &this_us, 0);
 800059a:	4b25      	ldr	r3, [pc, #148]	; (8000630 <vTaskUS_2+0x1b4>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	4610      	mov	r0, r2
 80005a4:	4619      	mov	r1, r3
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	f002 f99d 	bl	80028e8 <xQueueGenericSend>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:261

				/* special case
				 * soft lock interrupt */
				usFlag2 = true;
 80005ae:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <vTaskUS_2+0x1a8>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:263

				state = start;								//set state to start state
 80005b4:	2300      	movs	r3, #0
 80005b6:	76fb      	strb	r3, [r7, #27]
 80005b8:	e015      	b.n	80005e6 <vTaskUS_2+0x16a>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:265
			}
			else if( usFlag2 != false )
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <vTaskUS_2+0x1a8>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d011      	beq.n	80005e6 <vTaskUS_2+0x16a>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:268
			{
				/* case success receive signal form ultrasonic  */
				raw = TIM2->CNT - timerState;
 80005c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	1ad3      	subs	r3, r2, r3
 80005cc:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:269
				vTaskPrioritySet( xUS_2, tskIDLE_PRIORITY );//set priority task and flag to default
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <vTaskUS_2+0x1ac>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4618      	mov	r0, r3
 80005d4:	2100      	movs	r1, #0
 80005d6:	f002 fdd1 	bl	800317c <vTaskPrioritySet>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:270
				usFlag2 = false;
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <vTaskUS_2+0x1a8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:271
				state = end;								//set next state
 80005e0:	2304      	movs	r3, #4
 80005e2:	76fb      	strb	r3, [r7, #27]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:273
			}
			break;
 80005e4:	e01a      	b.n	800061c <vTaskUS_2+0x1a0>
 80005e6:	e019      	b.n	800061c <vTaskUS_2+0x1a0>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:276
		case end :
			/* calculate distance */
			distance = ((raw * 17) / 100);
 80005e8:	69fa      	ldr	r2, [r7, #28]
 80005ea:	4613      	mov	r3, r2
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	441a      	add	r2, r3
 80005f0:	4b10      	ldr	r3, [pc, #64]	; (8000634 <vTaskUS_2+0x1b8>)
 80005f2:	fba3 1302 	umull	r1, r3, r3, r2
 80005f6:	095b      	lsrs	r3, r3, #5
 80005f8:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:277
			this_us.status = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	727b      	strb	r3, [r7, #9]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:278
			this_us.distance = distance;
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:280

			xQueueSend(usQueue, &this_us, 0);				//send data to queue
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <vTaskUS_2+0x1b4>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	4610      	mov	r0, r2
 800060c:	4619      	mov	r1, r3
 800060e:	2200      	movs	r2, #0
 8000610:	2300      	movs	r3, #0
 8000612:	f002 f969 	bl	80028e8 <xQueueGenericSend>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:281
			state = start;									//set state to start state
 8000616:	2300      	movs	r3, #0
 8000618:	76fb      	strb	r3, [r7, #27]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:283

			break;
 800061a:	bf00      	nop
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:285
		}
    }
 800061c:	e73f      	b.n	800049e <vTaskUS_2+0x22>
 800061e:	bf00      	nop
 8000620:	10624dd3 	.word	0x10624dd3
 8000624:	200008b5 	.word	0x200008b5
 8000628:	200057f4 	.word	0x200057f4
 800062c:	40020000 	.word	0x40020000
 8000630:	200057f0 	.word	0x200057f0
 8000634:	51eb851f 	.word	0x51eb851f

08000638 <vTaskUS_recorder>:
vTaskUS_recorder():
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:290
}

//task recorder ultrasonic sensor data
void vTaskUS_recorder (void* pvParameters)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b0b1      	sub	sp, #196	; 0xc4
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:292
	struct us_profile us[US_NUMBER];
	struct us_profile us_buffer[US_BUFFER_SIZE] = {0};
 8000640:	f107 020c 	add.w	r2, r7, #12
 8000644:	23a0      	movs	r3, #160	; 0xa0
 8000646:	4610      	mov	r0, r2
 8000648:	2100      	movs	r1, #0
 800064a:	461a      	mov	r2, r3
 800064c:	f004 f986 	bl	800495c <memset>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:293
	uint8_t i = 0,j = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8000656:	2300      	movs	r3, #0
 8000658:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:297
    for (;;)
    {
    	/* wait data form vTaskUS_(x) */
    	xQueueReceive(usQueue, &us[i], portMAX_DELAY);
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <vTaskUS_recorder+0xa4>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000664:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8000668:	00db      	lsls	r3, r3, #3
 800066a:	440b      	add	r3, r1
 800066c:	4610      	mov	r0, r2
 800066e:	4619      	mov	r1, r3
 8000670:	f04f 32ff 	mov.w	r2, #4294967295
 8000674:	2300      	movs	r3, #0
 8000676:	f002 fa61 	bl	8002b3c <xQueueGenericReceive>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:299
    	/* count data to US_NUMBER */
    	i++;
 800067a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800067e:	3301      	adds	r3, #1
 8000680:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:300
    	if( i == sizeof(us)/sizeof(struct us_profile) )
 8000684:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000688:	2b02      	cmp	r3, #2
 800068a:	d125      	bne.n	80006d8 <vTaskUS_recorder+0xa0>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:302
    	{
    		i = 0;														//reset count value
 800068c:	2300      	movs	r3, #0
 800068e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:303
    		memcpy(&us_buffer[j], us, sizeof(us));						//copy 2 data to internal buffer
 8000692:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8000696:	f107 020c 	add.w	r2, r7, #12
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	4413      	add	r3, r2
 800069e:	461c      	mov	r4, r3
 80006a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:304
    		j += US_NUMBER; 											//count data to US_NUMBER*US_10Hz
 80006aa:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 80006ae:	3302      	adds	r3, #2
 80006b0:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:305
    		if( j >= sizeof(us_buffer)/sizeof(struct us_profile) )
 80006b4:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 80006b8:	2b13      	cmp	r3, #19
 80006ba:	d90d      	bls.n	80006d8 <vTaskUS_recorder+0xa0>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:307
    		{
    			j = 0;													//reset count value
 80006bc:	2300      	movs	r3, #0
 80006be:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:308
    			memcpy(us_data, us_buffer, sizeof(us_buffer));			//copy all data to global buffer
 80006c2:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <vTaskUS_recorder+0xa8>)
 80006c4:	4619      	mov	r1, r3
 80006c6:	f107 020c 	add.w	r2, r7, #12
 80006ca:	23a0      	movs	r3, #160	; 0xa0
 80006cc:	4608      	mov	r0, r1
 80006ce:	4611      	mov	r1, r2
 80006d0:	461a      	mov	r2, r3
 80006d2:	f004 f8a9 	bl	8004828 <memcpy>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:316
    			//sprintf(str_buffer,"-ID : %u , TYPE : %u , DISTANCE :  %u\r\n",us_data[0].id,us_data[0].status,us_data[0].distance);
    			//USART_puts(USART1, str_buffer);
    		}

    	}
    }
 80006d6:	e7c1      	b.n	800065c <vTaskUS_recorder+0x24>
 80006d8:	e7c0      	b.n	800065c <vTaskUS_recorder+0x24>
 80006da:	bf00      	nop
 80006dc:	200057f0 	.word	0x200057f0
 80006e0:	200008b8 	.word	0x200008b8

080006e4 <vTaskADC>:
vTaskADC():
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:321
}

//task measure ADC
void vTaskADC (void* pvParameters)
{
 80006e4:	b5b0      	push	{r4, r5, r7, lr}
 80006e6:	b08e      	sub	sp, #56	; 0x38
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:323
	/* timer vatriable */
    uint32_t currentTime, lastTime = TIM2->CNT;
 80006ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:327
	uint8_t i;

	/* ADC 5CH {id, value} */
    struct adc_profile this_adc[ADC_NUMBER] = { {1,0}, {2,0}, {3,0}, {4,0}, {5,0} };
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <vTaskADC+0x78>)
 80006f6:	f107 0408 	add.w	r4, r7, #8
 80006fa:	461d      	mov	r5, r3
 80006fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000704:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000708:	e884 0003 	stmia.w	r4, {r0, r1}
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:332

	for (;;)
	{

		for (i = 0; i < ADC_NUMBER; i++)
 800070c:	2300      	movs	r3, #0
 800070e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000712:	e011      	b.n	8000738 <vTaskADC+0x54>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:335 (discriminator 2)
		{
			/* ADCValue be DMA */
			this_adc[i].volt = ADCValue[i];
 8000714:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000718:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800071c:	4a10      	ldr	r2, [pc, #64]	; (8000760 <vTaskADC+0x7c>)
 800071e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000728:	440b      	add	r3, r1
 800072a:	f843 2c2c 	str.w	r2, [r3, #-44]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:332 (discriminator 2)
    struct adc_profile this_adc[ADC_NUMBER] = { {1,0}, {2,0}, {3,0}, {4,0}, {5,0} };

	for (;;)
	{

		for (i = 0; i < ADC_NUMBER; i++)
 800072e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000732:	3301      	adds	r3, #1
 8000734:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:332 (discriminator 1)
 8000738:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800073c:	2b04      	cmp	r3, #4
 800073e:	d9e9      	bls.n	8000714 <vTaskADC+0x30>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:342
			/* for testing */
			//sprintf(str_buffer,"ADC CH%d : %d\r\n", i, ADCValue[i]);
			//USART_puts(USART1,str_buffer);
		}
		/* send data to queue */
		xQueueSend(adcQueue, &this_adc, 0);
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <vTaskADC+0x80>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	4610      	mov	r0, r2
 800074a:	4619      	mov	r1, r3
 800074c:	2200      	movs	r2, #0
 800074e:	2300      	movs	r3, #0
 8000750:	f002 f8ca 	bl	80028e8 <xQueueGenericSend>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:344

		vTaskDelay(20);
 8000754:	2014      	movs	r0, #20
 8000756:	f002 fcdf 	bl	8003118 <vTaskDelay>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:345
	}
 800075a:	e7d7      	b.n	800070c <vTaskADC+0x28>
 800075c:	08009224 	.word	0x08009224
 8000760:	2000586c 	.word	0x2000586c
 8000764:	200057fc 	.word	0x200057fc

08000768 <vTaskADC_recorder>:
vTaskADC_recorder():
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:350
}

//task recorder ADC data
void vTaskADC_recorder (void* pvParameters)
{
 8000768:	b5b0      	push	{r4, r5, r7, lr}
 800076a:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 800076e:	af00      	add	r7, sp, #0
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	6018      	str	r0, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:352
	struct adc_profile adc[ADC_NUMBER];
	struct adc_profile adc_buffer[ADC_BUFFER_SIZE] = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	461a      	mov	r2, r3
 800077a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800077e:	4610      	mov	r0, r2
 8000780:	2100      	movs	r1, #0
 8000782:	461a      	mov	r2, r3
 8000784:	f004 f8ea 	bl	800495c <memset>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:353
	uint8_t j = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	f887 3807 	strb.w	r3, [r7, #2055]	; 0x807
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:356
    for (;;)
    {
    	xQueueReceive(adcQueue, &adc, portMAX_DELAY);
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <vTaskADC_recorder+0x94>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8000796:	4610      	mov	r0, r2
 8000798:	4619      	mov	r1, r3
 800079a:	f04f 32ff 	mov.w	r2, #4294967295
 800079e:	2300      	movs	r3, #0
 80007a0:	f002 f9cc 	bl	8002b3c <xQueueGenericReceive>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:358

   		memcpy(&adc_buffer[j], adc, sizeof(adc));
 80007a4:	f897 3807 	ldrb.w	r3, [r7, #2055]	; 0x807
 80007a8:	f107 020c 	add.w	r2, r7, #12
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	4413      	add	r3, r2
 80007b0:	461c      	mov	r4, r3
 80007b2:	f207 75dc 	addw	r5, r7, #2012	; 0x7dc
 80007b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007c2:	e884 0003 	stmia.w	r4, {r0, r1}
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:359
   		j += ADC_NUMBER;											//count data to ADC_BUFFER_SIZE
 80007c6:	f897 3807 	ldrb.w	r3, [r7, #2055]	; 0x807
 80007ca:	3305      	adds	r3, #5
 80007cc:	f887 3807 	strb.w	r3, [r7, #2055]	; 0x807
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:360
   		if( j >= sizeof(adc_buffer)/sizeof(struct adc_profile))
 80007d0:	f897 3807 	ldrb.w	r3, [r7, #2055]	; 0x807
 80007d4:	2bf9      	cmp	r3, #249	; 0xf9
 80007d6:	d90f      	bls.n	80007f8 <vTaskADC_recorder+0x90>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:362
   		{
   			j = 0;													//reset count value
 80007d8:	2300      	movs	r3, #0
 80007da:	f887 3807 	strb.w	r3, [r7, #2055]	; 0x807
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:363
   			memcpy(adc_data, adc_buffer, sizeof(adc_buffer));		//copy internal buffer to global buffer
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <vTaskADC_recorder+0x98>)
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	4611      	mov	r1, r2
 80007e6:	461a      	mov	r2, r3
 80007e8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007ec:	4608      	mov	r0, r1
 80007ee:	4611      	mov	r1, r2
 80007f0:	461a      	mov	r2, r3
 80007f2:	f004 f819 	bl	8004828 <memcpy>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:366

   		}
    }
 80007f6:	e7ca      	b.n	800078e <vTaskADC_recorder+0x26>
 80007f8:	e7c9      	b.n	800078e <vTaskADC_recorder+0x26>
 80007fa:	bf00      	nop
 80007fc:	200057fc 	.word	0x200057fc
 8000800:	20000a98 	.word	0x20000a98

08000804 <vTaskROS>:
vTaskROS():
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:371
}

//task capture PWM
void vTaskROS (void* pvParameters)
{
 8000804:	b5b0      	push	{r4, r5, r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:373
	uint8_t i;
    uint32_t currentTime, lastTime = TIM2->CNT;
 800080c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:375
    /* Reflective 4CH {id, value} */
    struct ros_profile this_ros[ROS_NUMBER] = { {1,0}, {2,0}, {3,0}, {4,0} };
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <vTaskROS+0x78>)
 8000816:	f107 0408 	add.w	r4, r7, #8
 800081a:	461d      	mov	r5, r3
 800081c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000820:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000824:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:379

    for(;;)
	{
		for (i = 0; i < ROS_NUMBER; i++) {
 8000828:	2300      	movs	r3, #0
 800082a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800082e:	e011      	b.n	8000854 <vTaskROS+0x50>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:380 (discriminator 2)
			this_ros[i].speed = roundTime[i];
 8000830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000834:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8000838:	4a11      	ldr	r2, [pc, #68]	; (8000880 <vTaskROS+0x7c>)
 800083a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000844:	440b      	add	r3, r1
 8000846:	f843 2c24 	str.w	r2, [r3, #-36]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:379 (discriminator 2)
    /* Reflective 4CH {id, value} */
    struct ros_profile this_ros[ROS_NUMBER] = { {1,0}, {2,0}, {3,0}, {4,0} };

    for(;;)
	{
		for (i = 0; i < ROS_NUMBER; i++) {
 800084a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800084e:	3301      	adds	r3, #1
 8000850:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:379 (discriminator 1)
 8000854:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000858:	2b03      	cmp	r3, #3
 800085a:	d9e9      	bls.n	8000830 <vTaskROS+0x2c>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:387
			/* for testing */
			//sprintf(str_buffer, "PWM CH%d : %u\r\n", i, (unsigned int) roundTime[i]);
			//USART_puts(USART1, str_buffer);
		}
		//send 4 data to queue
		xQueueSend(rosQueue, &this_ros, 0);
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <vTaskROS+0x80>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	4610      	mov	r0, r2
 8000866:	4619      	mov	r1, r3
 8000868:	2200      	movs	r2, #0
 800086a:	2300      	movs	r3, #0
 800086c:	f002 f83c 	bl	80028e8 <xQueueGenericSend>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:389
		//Enable external interrupt
		enableExtiROS();
 8000870:	f000 fe00 	bl	8001474 <enableExtiROS>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:392

		//frequency 10Hz
		vTaskDelay(100);
 8000874:	2064      	movs	r0, #100	; 0x64
 8000876:	f002 fc4f 	bl	8003118 <vTaskDelay>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:393
	}
 800087a:	e7d5      	b.n	8000828 <vTaskROS+0x24>
 800087c:	0800924c 	.word	0x0800924c
 8000880:	20000894 	.word	0x20000894
 8000884:	20005800 	.word	0x20005800

08000888 <vTaskROS_recorder>:
vTaskROS_recorder():
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:398
}

//task recorder Reflective optical sensor data
void vTaskROS_recorder (void* pvParameters)
{
 8000888:	b5b0      	push	{r4, r5, r7, lr}
 800088a:	b0dc      	sub	sp, #368	; 0x170
 800088c:	af00      	add	r7, sp, #0
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	6018      	str	r0, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:400
	struct ros_profile ros[ROS_NUMBER];
	struct ros_profile ros_buffer[ROS_BUFFER_SIZE] = {0};
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	461a      	mov	r2, r3
 8000898:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800089c:	4610      	mov	r0, r2
 800089e:	2100      	movs	r1, #0
 80008a0:	461a      	mov	r2, r3
 80008a2:	f004 f85b 	bl	800495c <memset>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:401
	uint8_t j = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:405
    for (;;)
    {
    	/* wait data form vTaskROS */
    	xQueueReceive(rosQueue, &ros, portMAX_DELAY);
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <vTaskROS_recorder+0x8c>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80008b4:	4610      	mov	r0, r2
 80008b6:	4619      	mov	r1, r3
 80008b8:	f04f 32ff 	mov.w	r2, #4294967295
 80008bc:	2300      	movs	r3, #0
 80008be:	f002 f93d 	bl	8002b3c <xQueueGenericReceive>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:406
    	memcpy(&ros_buffer[j], ros, sizeof(ros));				//copy 4 data to internal buffer
 80008c2:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80008c6:	f107 020c 	add.w	r2, r7, #12
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	4413      	add	r3, r2
 80008ce:	461c      	mov	r4, r3
 80008d0:	f507 75a6 	add.w	r5, r7, #332	; 0x14c
 80008d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:407
    	j += ROS_NUMBER;										//count data to ROS_BUFFER_SIZE
 80008e0:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80008e4:	3304      	adds	r3, #4
 80008e6:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:408
    	if( j >= sizeof(ros_buffer)/sizeof(struct ros_profile))
 80008ea:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80008ee:	2b27      	cmp	r3, #39	; 0x27
 80008f0:	d90f      	bls.n	8000912 <vTaskROS_recorder+0x8a>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:410
    	{
    		j = 0;												//reset count value
 80008f2:	2300      	movs	r3, #0
 80008f4:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:411
    		memcpy(ros_data, ros_buffer, sizeof(ros_buffer));	//copy internal buffer to global buffer
 80008f8:	4a07      	ldr	r2, [pc, #28]	; (8000918 <vTaskROS_recorder+0x90>)
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	4611      	mov	r1, r2
 8000900:	461a      	mov	r2, r3
 8000902:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000906:	4608      	mov	r0, r1
 8000908:	4611      	mov	r1, r2
 800090a:	461a      	mov	r2, r3
 800090c:	f003 ff8c 	bl	8004828 <memcpy>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:417

    		/* for testing */
			//sprintf(str_buffer,"i %u, s %u\r\n",ros_data[0].id,ros_data[0].speed);
			//USART_puts(USART1, str_buffer);
    	}
    }
 8000910:	e7cc      	b.n	80008ac <vTaskROS_recorder+0x24>
 8000912:	e7cb      	b.n	80008ac <vTaskROS_recorder+0x24>
 8000914:	20005800 	.word	0x20005800
 8000918:	20000958 	.word	0x20000958

0800091c <vTaskSendData>:
vTaskSendData():
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:422
}

//task sender data to computer
void vTaskSendData (void* pvParameters)
{
 800091c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000920:	b08f      	sub	sp, #60	; 0x3c
 8000922:	af08      	add	r7, sp, #32
 8000924:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:423
	uint32_t currentTime, lastTime = TIM2->CNT;
 8000926:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800092a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092c:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:425
	uint16_t i;
	vTaskDelay(2000);
 800092e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000932:	f002 fbf1 	bl	8003118 <vTaskDelay>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:436
		 * us_data
		 * ros_data
		 * adc_data
		 */

    	lastTime = TIM2->CNT;
 8000936:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800093a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800093c:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:438

		USART_puts(USART1, "Ultrasonic Data for 1 Second\r\n");
 800093e:	485a      	ldr	r0, [pc, #360]	; (8000aa8 <vTaskSendData+0x18c>)
 8000940:	495a      	ldr	r1, [pc, #360]	; (8000aac <vTaskSendData+0x190>)
 8000942:	f000 faf7 	bl	8000f34 <USART_puts>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:439
		for(i = 0; i < (sizeof(us_data)/sizeof(struct us_profile)); i++ )
 8000946:	2300      	movs	r3, #0
 8000948:	82fb      	strh	r3, [r7, #22]
 800094a:	e01c      	b.n	8000986 <vTaskSendData+0x6a>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:441 (discriminator 2)
		{
			sprintf(str_buffer,"i %u, s %u, d %u\r\n",us_data[i].id,us_data[i].status,us_data[i].distance);
 800094c:	8afa      	ldrh	r2, [r7, #22]
 800094e:	4b58      	ldr	r3, [pc, #352]	; (8000ab0 <vTaskSendData+0x194>)
 8000950:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8000954:	461a      	mov	r2, r3
 8000956:	8afb      	ldrh	r3, [r7, #22]
 8000958:	4955      	ldr	r1, [pc, #340]	; (8000ab0 <vTaskSendData+0x194>)
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	440b      	add	r3, r1
 800095e:	785b      	ldrb	r3, [r3, #1]
 8000960:	461c      	mov	r4, r3
 8000962:	8afb      	ldrh	r3, [r7, #22]
 8000964:	4952      	ldr	r1, [pc, #328]	; (8000ab0 <vTaskSendData+0x194>)
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	440b      	add	r3, r1
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	4851      	ldr	r0, [pc, #324]	; (8000ab4 <vTaskSendData+0x198>)
 8000970:	4951      	ldr	r1, [pc, #324]	; (8000ab8 <vTaskSendData+0x19c>)
 8000972:	4623      	mov	r3, r4
 8000974:	f004 f83c 	bl	80049f0 <sprintf>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:442 (discriminator 2)
			USART_puts(USART1, str_buffer);
 8000978:	484b      	ldr	r0, [pc, #300]	; (8000aa8 <vTaskSendData+0x18c>)
 800097a:	494e      	ldr	r1, [pc, #312]	; (8000ab4 <vTaskSendData+0x198>)
 800097c:	f000 fada 	bl	8000f34 <USART_puts>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:439 (discriminator 2)
		 */

    	lastTime = TIM2->CNT;

		USART_puts(USART1, "Ultrasonic Data for 1 Second\r\n");
		for(i = 0; i < (sizeof(us_data)/sizeof(struct us_profile)); i++ )
 8000980:	8afb      	ldrh	r3, [r7, #22]
 8000982:	3301      	adds	r3, #1
 8000984:	82fb      	strh	r3, [r7, #22]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:439 (discriminator 1)
 8000986:	8afb      	ldrh	r3, [r7, #22]
 8000988:	2b13      	cmp	r3, #19
 800098a:	d9df      	bls.n	800094c <vTaskSendData+0x30>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:445
		{
			sprintf(str_buffer,"i %u, s %u, d %u\r\n",us_data[i].id,us_data[i].status,us_data[i].distance);
			USART_puts(USART1, str_buffer);
		}

		USART_puts(USART1, "ADC Data for 1 Second\r\n");
 800098c:	4846      	ldr	r0, [pc, #280]	; (8000aa8 <vTaskSendData+0x18c>)
 800098e:	494b      	ldr	r1, [pc, #300]	; (8000abc <vTaskSendData+0x1a0>)
 8000990:	f000 fad0 	bl	8000f34 <USART_puts>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:446
		for(i = 0; i < (sizeof(adc_data)/sizeof(struct adc_profile)); i+=5 )
 8000994:	2300      	movs	r3, #0
 8000996:	82fb      	strh	r3, [r7, #22]
 8000998:	e052      	b.n	8000a40 <vTaskSendData+0x124>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:449 (discriminator 2)
		{
			sprintf(str_buffer,"i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u\r\n"
														  ,adc_data[i].id,adc_data[i].volt
 800099a:	8afa      	ldrh	r2, [r7, #22]
 800099c:	4b48      	ldr	r3, [pc, #288]	; (8000ac0 <vTaskSendData+0x1a4>)
 800099e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:448 (discriminator 2)
		}

		USART_puts(USART1, "ADC Data for 1 Second\r\n");
		for(i = 0; i < (sizeof(adc_data)/sizeof(struct adc_profile)); i+=5 )
		{
			sprintf(str_buffer,"i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u\r\n"
 80009a2:	461a      	mov	r2, r3
 80009a4:	8afb      	ldrh	r3, [r7, #22]
 80009a6:	4946      	ldr	r1, [pc, #280]	; (8000ac0 <vTaskSendData+0x1a4>)
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	440b      	add	r3, r1
 80009ac:	685c      	ldr	r4, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:450 (discriminator 2)
														  ,adc_data[i].id,adc_data[i].volt
			                                              ,adc_data[i+1].id,adc_data[i+1].volt
 80009ae:	8afb      	ldrh	r3, [r7, #22]
 80009b0:	1c59      	adds	r1, r3, #1
 80009b2:	4b43      	ldr	r3, [pc, #268]	; (8000ac0 <vTaskSendData+0x1a4>)
 80009b4:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:448 (discriminator 2)
		}

		USART_puts(USART1, "ADC Data for 1 Second\r\n");
		for(i = 0; i < (sizeof(adc_data)/sizeof(struct adc_profile)); i+=5 )
		{
			sprintf(str_buffer,"i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u\r\n"
 80009b8:	4698      	mov	r8, r3
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:450 (discriminator 2)
														  ,adc_data[i].id,adc_data[i].volt
			                                              ,adc_data[i+1].id,adc_data[i+1].volt
 80009ba:	8afb      	ldrh	r3, [r7, #22]
 80009bc:	3301      	adds	r3, #1
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:448 (discriminator 2)
		}

		USART_puts(USART1, "ADC Data for 1 Second\r\n");
		for(i = 0; i < (sizeof(adc_data)/sizeof(struct adc_profile)); i+=5 )
		{
			sprintf(str_buffer,"i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u\r\n"
 80009be:	4940      	ldr	r1, [pc, #256]	; (8000ac0 <vTaskSendData+0x1a4>)
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	440b      	add	r3, r1
 80009c4:	f8d3 c004 	ldr.w	ip, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:451 (discriminator 2)
														  ,adc_data[i].id,adc_data[i].volt
			                                              ,adc_data[i+1].id,adc_data[i+1].volt
			             			                      ,adc_data[i+2].id,adc_data[i+2].volt
 80009c8:	8afb      	ldrh	r3, [r7, #22]
 80009ca:	1c99      	adds	r1, r3, #2
 80009cc:	4b3c      	ldr	r3, [pc, #240]	; (8000ac0 <vTaskSendData+0x1a4>)
 80009ce:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:448 (discriminator 2)
		}

		USART_puts(USART1, "ADC Data for 1 Second\r\n");
		for(i = 0; i < (sizeof(adc_data)/sizeof(struct adc_profile)); i+=5 )
		{
			sprintf(str_buffer,"i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u\r\n"
 80009d2:	469e      	mov	lr, r3
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:451 (discriminator 2)
														  ,adc_data[i].id,adc_data[i].volt
			                                              ,adc_data[i+1].id,adc_data[i+1].volt
			             			                      ,adc_data[i+2].id,adc_data[i+2].volt
 80009d4:	8afb      	ldrh	r3, [r7, #22]
 80009d6:	3302      	adds	r3, #2
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:448 (discriminator 2)
		}

		USART_puts(USART1, "ADC Data for 1 Second\r\n");
		for(i = 0; i < (sizeof(adc_data)/sizeof(struct adc_profile)); i+=5 )
		{
			sprintf(str_buffer,"i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u\r\n"
 80009d8:	4939      	ldr	r1, [pc, #228]	; (8000ac0 <vTaskSendData+0x1a4>)
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	440b      	add	r3, r1
 80009de:	685e      	ldr	r6, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:452 (discriminator 2)
														  ,adc_data[i].id,adc_data[i].volt
			                                              ,adc_data[i+1].id,adc_data[i+1].volt
			             			                      ,adc_data[i+2].id,adc_data[i+2].volt
			             			                      ,adc_data[i+3].id,adc_data[i+3].volt
 80009e0:	8afb      	ldrh	r3, [r7, #22]
 80009e2:	1cd9      	adds	r1, r3, #3
 80009e4:	4b36      	ldr	r3, [pc, #216]	; (8000ac0 <vTaskSendData+0x1a4>)
 80009e6:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:448 (discriminator 2)
		}

		USART_puts(USART1, "ADC Data for 1 Second\r\n");
		for(i = 0; i < (sizeof(adc_data)/sizeof(struct adc_profile)); i+=5 )
		{
			sprintf(str_buffer,"i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u\r\n"
 80009ea:	461d      	mov	r5, r3
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:452 (discriminator 2)
														  ,adc_data[i].id,adc_data[i].volt
			                                              ,adc_data[i+1].id,adc_data[i+1].volt
			             			                      ,adc_data[i+2].id,adc_data[i+2].volt
			             			                      ,adc_data[i+3].id,adc_data[i+3].volt
 80009ec:	8afb      	ldrh	r3, [r7, #22]
 80009ee:	3303      	adds	r3, #3
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:448 (discriminator 2)
		}

		USART_puts(USART1, "ADC Data for 1 Second\r\n");
		for(i = 0; i < (sizeof(adc_data)/sizeof(struct adc_profile)); i+=5 )
		{
			sprintf(str_buffer,"i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u\r\n"
 80009f0:	4933      	ldr	r1, [pc, #204]	; (8000ac0 <vTaskSendData+0x1a4>)
 80009f2:	00db      	lsls	r3, r3, #3
 80009f4:	440b      	add	r3, r1
 80009f6:	6858      	ldr	r0, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:453 (discriminator 2)
														  ,adc_data[i].id,adc_data[i].volt
			                                              ,adc_data[i+1].id,adc_data[i+1].volt
			             			                      ,adc_data[i+2].id,adc_data[i+2].volt
			             			                      ,adc_data[i+3].id,adc_data[i+3].volt
			             			             		  ,adc_data[i+4].id,adc_data[i+4].volt
 80009f8:	8afb      	ldrh	r3, [r7, #22]
 80009fa:	1d19      	adds	r1, r3, #4
 80009fc:	4b30      	ldr	r3, [pc, #192]	; (8000ac0 <vTaskSendData+0x1a4>)
 80009fe:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:448 (discriminator 2)
		}

		USART_puts(USART1, "ADC Data for 1 Second\r\n");
		for(i = 0; i < (sizeof(adc_data)/sizeof(struct adc_profile)); i+=5 )
		{
			sprintf(str_buffer,"i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u\r\n"
 8000a02:	4619      	mov	r1, r3
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:453 (discriminator 2)
														  ,adc_data[i].id,adc_data[i].volt
			                                              ,adc_data[i+1].id,adc_data[i+1].volt
			             			                      ,adc_data[i+2].id,adc_data[i+2].volt
			             			                      ,adc_data[i+3].id,adc_data[i+3].volt
			             			             		  ,adc_data[i+4].id,adc_data[i+4].volt
 8000a04:	8afb      	ldrh	r3, [r7, #22]
 8000a06:	3304      	adds	r3, #4
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:448 (discriminator 2)
		}

		USART_puts(USART1, "ADC Data for 1 Second\r\n");
		for(i = 0; i < (sizeof(adc_data)/sizeof(struct adc_profile)); i+=5 )
		{
			sprintf(str_buffer,"i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u, i %u, v %u\r\n"
 8000a08:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8000ac0 <vTaskSendData+0x1a4>
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	444b      	add	r3, r9
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f8cd 8000 	str.w	r8, [sp]
 8000a16:	f8cd c004 	str.w	ip, [sp, #4]
 8000a1a:	f8cd e008 	str.w	lr, [sp, #8]
 8000a1e:	9603      	str	r6, [sp, #12]
 8000a20:	9504      	str	r5, [sp, #16]
 8000a22:	9005      	str	r0, [sp, #20]
 8000a24:	9106      	str	r1, [sp, #24]
 8000a26:	9307      	str	r3, [sp, #28]
 8000a28:	4822      	ldr	r0, [pc, #136]	; (8000ab4 <vTaskSendData+0x198>)
 8000a2a:	4926      	ldr	r1, [pc, #152]	; (8000ac4 <vTaskSendData+0x1a8>)
 8000a2c:	4623      	mov	r3, r4
 8000a2e:	f003 ffdf 	bl	80049f0 <sprintf>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:455 (discriminator 2)
			                                              ,adc_data[i+1].id,adc_data[i+1].volt
			             			                      ,adc_data[i+2].id,adc_data[i+2].volt
			             			                      ,adc_data[i+3].id,adc_data[i+3].volt
			             			             		  ,adc_data[i+4].id,adc_data[i+4].volt
			);
			USART_puts(USART1, str_buffer);
 8000a32:	481d      	ldr	r0, [pc, #116]	; (8000aa8 <vTaskSendData+0x18c>)
 8000a34:	491f      	ldr	r1, [pc, #124]	; (8000ab4 <vTaskSendData+0x198>)
 8000a36:	f000 fa7d 	bl	8000f34 <USART_puts>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:446 (discriminator 2)
			sprintf(str_buffer,"i %u, s %u, d %u\r\n",us_data[i].id,us_data[i].status,us_data[i].distance);
			USART_puts(USART1, str_buffer);
		}

		USART_puts(USART1, "ADC Data for 1 Second\r\n");
		for(i = 0; i < (sizeof(adc_data)/sizeof(struct adc_profile)); i+=5 )
 8000a3a:	8afb      	ldrh	r3, [r7, #22]
 8000a3c:	3305      	adds	r3, #5
 8000a3e:	82fb      	strh	r3, [r7, #22]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:446 (discriminator 1)
 8000a40:	8afb      	ldrh	r3, [r7, #22]
 8000a42:	2bf9      	cmp	r3, #249	; 0xf9
 8000a44:	d9a9      	bls.n	800099a <vTaskSendData+0x7e>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:458
			             			             		  ,adc_data[i+4].id,adc_data[i+4].volt
			);
			USART_puts(USART1, str_buffer);
		}

		USART_puts(USART1, "Reflective Optical Data for 1 Second\r\n");
 8000a46:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <vTaskSendData+0x18c>)
 8000a48:	491f      	ldr	r1, [pc, #124]	; (8000ac8 <vTaskSendData+0x1ac>)
 8000a4a:	f000 fa73 	bl	8000f34 <USART_puts>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:459
		for(i = 0; i < (sizeof(ros_data)/sizeof(struct ros_profile)); i++ )
 8000a4e:	2300      	movs	r3, #0
 8000a50:	82fb      	strh	r3, [r7, #22]
 8000a52:	e014      	b.n	8000a7e <vTaskSendData+0x162>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:461 (discriminator 2)
		{
			sprintf(str_buffer,"i %u, s %u\r\n",ros_data[i].id,ros_data[i].speed);
 8000a54:	8afa      	ldrh	r2, [r7, #22]
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <vTaskSendData+0x1b0>)
 8000a58:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	8afb      	ldrh	r3, [r7, #22]
 8000a60:	491a      	ldr	r1, [pc, #104]	; (8000acc <vTaskSendData+0x1b0>)
 8000a62:	00db      	lsls	r3, r3, #3
 8000a64:	440b      	add	r3, r1
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4812      	ldr	r0, [pc, #72]	; (8000ab4 <vTaskSendData+0x198>)
 8000a6a:	4919      	ldr	r1, [pc, #100]	; (8000ad0 <vTaskSendData+0x1b4>)
 8000a6c:	f003 ffc0 	bl	80049f0 <sprintf>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:462 (discriminator 2)
			USART_puts(USART1, str_buffer);
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <vTaskSendData+0x18c>)
 8000a72:	4910      	ldr	r1, [pc, #64]	; (8000ab4 <vTaskSendData+0x198>)
 8000a74:	f000 fa5e 	bl	8000f34 <USART_puts>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:459 (discriminator 2)
			);
			USART_puts(USART1, str_buffer);
		}

		USART_puts(USART1, "Reflective Optical Data for 1 Second\r\n");
		for(i = 0; i < (sizeof(ros_data)/sizeof(struct ros_profile)); i++ )
 8000a78:	8afb      	ldrh	r3, [r7, #22]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	82fb      	strh	r3, [r7, #22]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:459 (discriminator 1)
 8000a7e:	8afb      	ldrh	r3, [r7, #22]
 8000a80:	2b27      	cmp	r3, #39	; 0x27
 8000a82:	d9e7      	bls.n	8000a54 <vTaskSendData+0x138>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:465
		{
			sprintf(str_buffer,"i %u, s %u\r\n",ros_data[i].id,ros_data[i].speed);
			USART_puts(USART1, str_buffer);
		}

		currentTime = TIM2->CNT - lastTime;
 8000a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:471

		/* for testing */
		//sprintf(str_buffer,"%d %d\r\n",1000 - (currentTime/1000),(currentTime/1000));
		//USART_puts(USART1, str_buffer);

		vTaskDelay(1000 - (currentTime/1000));
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <vTaskSendData+0x1b8>)
 8000a94:	fba3 1302 	umull	r1, r3, r3, r2
 8000a98:	099b      	lsrs	r3, r3, #6
 8000a9a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f002 fb3a 	bl	8003118 <vTaskDelay>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:473

    }
 8000aa4:	e747      	b.n	8000936 <vTaskSendData+0x1a>
 8000aa6:	bf00      	nop
 8000aa8:	40011000 	.word	0x40011000
 8000aac:	0800926c 	.word	0x0800926c
 8000ab0:	200008b8 	.word	0x200008b8
 8000ab4:	20005804 	.word	0x20005804
 8000ab8:	0800928c 	.word	0x0800928c
 8000abc:	080092a0 	.word	0x080092a0
 8000ac0:	20000a98 	.word	0x20000a98
 8000ac4:	080092b8 	.word	0x080092b8
 8000ac8:	080092f8 	.word	0x080092f8
 8000acc:	20000958 	.word	0x20000958
 8000ad0:	08009320 	.word	0x08009320
 8000ad4:	10624dd3 	.word	0x10624dd3

08000ad8 <main>:
main():
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:477
}

int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af04      	add	r7, sp, #16
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:479

	GPIO_init();
 8000ade:	f000 faf9 	bl	80010d4 <GPIO_init>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:480
	USART_init();
 8000ae2:	f000 fb6f 	bl	80011c4 <USART_init>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:481
	Timer_init();
 8000ae6:	f000 fb4d 	bl	8001184 <Timer_init>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:482
	EXTI_init();
 8000aea:	f000 fbc1 	bl	8001270 <EXTI_init>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:483
	ADC_init();
 8000aee:	f000 fa45 	bl	8000f7c <ADC_init>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:485

	USART_puts(USART1, "Project v2.0 Started.\r\n");
 8000af2:	4851      	ldr	r0, [pc, #324]	; (8000c38 <main+0x160>)
 8000af4:	4951      	ldr	r1, [pc, #324]	; (8000c3c <main+0x164>)
 8000af6:	f000 fa1d 	bl	8000f34 <USART_puts>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:487

	usQueue  = xQueueCreate( 10, sizeof(struct us_profile ));
 8000afa:	200a      	movs	r0, #10
 8000afc:	2108      	movs	r1, #8
 8000afe:	2200      	movs	r2, #0
 8000b00:	f001 feb0 	bl	8002864 <xQueueGenericCreate>
 8000b04:	4602      	mov	r2, r0
 8000b06:	4b4e      	ldr	r3, [pc, #312]	; (8000c40 <main+0x168>)
 8000b08:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:488
	rosQueue = xQueueCreate( 20, sizeof(struct ros_profile)*ROS_NUMBER);
 8000b0a:	2014      	movs	r0, #20
 8000b0c:	2120      	movs	r1, #32
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f001 fea8 	bl	8002864 <xQueueGenericCreate>
 8000b14:	4602      	mov	r2, r0
 8000b16:	4b4b      	ldr	r3, [pc, #300]	; (8000c44 <main+0x16c>)
 8000b18:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:489
	adcQueue = xQueueCreate( 25, sizeof(struct adc_profile)*ADC_NUMBER);
 8000b1a:	2019      	movs	r0, #25
 8000b1c:	2128      	movs	r1, #40	; 0x28
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f001 fea0 	bl	8002864 <xQueueGenericCreate>
 8000b24:	4602      	mov	r2, r0
 8000b26:	4b48      	ldr	r3, [pc, #288]	; (8000c48 <main+0x170>)
 8000b28:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:491

	xTaskCreate(vTaskBlink, 		"Heartbeat", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2300      	movs	r3, #0
 8000b30:	9301      	str	r3, [sp, #4]
 8000b32:	2300      	movs	r3, #0
 8000b34:	9302      	str	r3, [sp, #8]
 8000b36:	2300      	movs	r3, #0
 8000b38:	9303      	str	r3, [sp, #12]
 8000b3a:	4844      	ldr	r0, [pc, #272]	; (8000c4c <main+0x174>)
 8000b3c:	4944      	ldr	r1, [pc, #272]	; (8000c50 <main+0x178>)
 8000b3e:	2280      	movs	r2, #128	; 0x80
 8000b40:	2300      	movs	r3, #0
 8000b42:	f002 fa35 	bl	8002fb0 <xTaskGenericCreate>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:492
	xTaskCreate(vTaskUS_1, 			"Ultrasonic#1", configMINIMAL_STACK_SIZE, NULL, 1, &xUS_1);
 8000b46:	2301      	movs	r3, #1
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	4b42      	ldr	r3, [pc, #264]	; (8000c54 <main+0x17c>)
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	2300      	movs	r3, #0
 8000b50:	9302      	str	r3, [sp, #8]
 8000b52:	2300      	movs	r3, #0
 8000b54:	9303      	str	r3, [sp, #12]
 8000b56:	4840      	ldr	r0, [pc, #256]	; (8000c58 <main+0x180>)
 8000b58:	4940      	ldr	r1, [pc, #256]	; (8000c5c <main+0x184>)
 8000b5a:	2280      	movs	r2, #128	; 0x80
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f002 fa27 	bl	8002fb0 <xTaskGenericCreate>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:493
	xTaskCreate(vTaskUS_2, 			"Ultrasonic#2", configMINIMAL_STACK_SIZE, NULL, 1, &xUS_2);
 8000b62:	2301      	movs	r3, #1
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	4b3e      	ldr	r3, [pc, #248]	; (8000c60 <main+0x188>)
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	9302      	str	r3, [sp, #8]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9303      	str	r3, [sp, #12]
 8000b72:	483c      	ldr	r0, [pc, #240]	; (8000c64 <main+0x18c>)
 8000b74:	493c      	ldr	r1, [pc, #240]	; (8000c68 <main+0x190>)
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f002 fa19 	bl	8002fb0 <xTaskGenericCreate>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:494
	xTaskCreate(vTaskUS_recorder, 	"Ultrasonic recorder", configMINIMAL_STACK_SIZE+128, NULL, 1, NULL);
 8000b7e:	2301      	movs	r3, #1
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2300      	movs	r3, #0
 8000b84:	9301      	str	r3, [sp, #4]
 8000b86:	2300      	movs	r3, #0
 8000b88:	9302      	str	r3, [sp, #8]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	9303      	str	r3, [sp, #12]
 8000b8e:	4837      	ldr	r0, [pc, #220]	; (8000c6c <main+0x194>)
 8000b90:	4937      	ldr	r1, [pc, #220]	; (8000c70 <main+0x198>)
 8000b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b96:	2300      	movs	r3, #0
 8000b98:	f002 fa0a 	bl	8002fb0 <xTaskGenericCreate>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:495
	xTaskCreate(vTaskADC, 			"ADC", configMINIMAL_STACK_SIZE+512, NULL, 1, NULL);
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	9301      	str	r3, [sp, #4]
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	9302      	str	r3, [sp, #8]
 8000ba8:	2300      	movs	r3, #0
 8000baa:	9303      	str	r3, [sp, #12]
 8000bac:	4831      	ldr	r0, [pc, #196]	; (8000c74 <main+0x19c>)
 8000bae:	4932      	ldr	r1, [pc, #200]	; (8000c78 <main+0x1a0>)
 8000bb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f002 f9fb 	bl	8002fb0 <xTaskGenericCreate>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:496
	xTaskCreate(vTaskADC_recorder, 	"ADC recorder", configMINIMAL_STACK_SIZE+512, NULL, 1, NULL);
 8000bba:	2301      	movs	r3, #1
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	9301      	str	r3, [sp, #4]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	9302      	str	r3, [sp, #8]
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	9303      	str	r3, [sp, #12]
 8000bca:	482c      	ldr	r0, [pc, #176]	; (8000c7c <main+0x1a4>)
 8000bcc:	492c      	ldr	r1, [pc, #176]	; (8000c80 <main+0x1a8>)
 8000bce:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f002 f9ec 	bl	8002fb0 <xTaskGenericCreate>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:497
	xTaskCreate(vTaskROS, 			"Reflective optical sensor", configMINIMAL_STACK_SIZE+128, NULL, 1, NULL);
 8000bd8:	2301      	movs	r3, #1
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	2300      	movs	r3, #0
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	2300      	movs	r3, #0
 8000be2:	9302      	str	r3, [sp, #8]
 8000be4:	2300      	movs	r3, #0
 8000be6:	9303      	str	r3, [sp, #12]
 8000be8:	4826      	ldr	r0, [pc, #152]	; (8000c84 <main+0x1ac>)
 8000bea:	4927      	ldr	r1, [pc, #156]	; (8000c88 <main+0x1b0>)
 8000bec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f002 f9dd 	bl	8002fb0 <xTaskGenericCreate>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:498
	xTaskCreate(vTaskROS_recorder, 	"Reflective optical recorder", configMINIMAL_STACK_SIZE+128, NULL, 1, NULL);
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	9301      	str	r3, [sp, #4]
 8000bfe:	2300      	movs	r3, #0
 8000c00:	9302      	str	r3, [sp, #8]
 8000c02:	2300      	movs	r3, #0
 8000c04:	9303      	str	r3, [sp, #12]
 8000c06:	4821      	ldr	r0, [pc, #132]	; (8000c8c <main+0x1b4>)
 8000c08:	4921      	ldr	r1, [pc, #132]	; (8000c90 <main+0x1b8>)
 8000c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f002 f9ce 	bl	8002fb0 <xTaskGenericCreate>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:499
	xTaskCreate(vTaskSendData, 		"Send all data", configMINIMAL_STACK_SIZE+512, NULL, 1, NULL);
 8000c14:	2301      	movs	r3, #1
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9301      	str	r3, [sp, #4]
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	9302      	str	r3, [sp, #8]
 8000c20:	2300      	movs	r3, #0
 8000c22:	9303      	str	r3, [sp, #12]
 8000c24:	481b      	ldr	r0, [pc, #108]	; (8000c94 <main+0x1bc>)
 8000c26:	491c      	ldr	r1, [pc, #112]	; (8000c98 <main+0x1c0>)
 8000c28:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f002 f9bf 	bl	8002fb0 <xTaskGenericCreate>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:501

	vTaskStartScheduler();
 8000c32:	f002 fb35 	bl	80032a0 <vTaskStartScheduler>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:503 (discriminator 1)

	for(;;);
 8000c36:	e7fe      	b.n	8000c36 <main+0x15e>
 8000c38:	40011000 	.word	0x40011000
 8000c3c:	08009330 	.word	0x08009330
 8000c40:	200057f0 	.word	0x200057f0
 8000c44:	20005800 	.word	0x20005800
 8000c48:	200057fc 	.word	0x200057fc
 8000c4c:	08000289 	.word	0x08000289
 8000c50:	08009348 	.word	0x08009348
 8000c54:	200057f8 	.word	0x200057f8
 8000c58:	080002a9 	.word	0x080002a9
 8000c5c:	08009354 	.word	0x08009354
 8000c60:	200057f4 	.word	0x200057f4
 8000c64:	0800047d 	.word	0x0800047d
 8000c68:	08009364 	.word	0x08009364
 8000c6c:	08000639 	.word	0x08000639
 8000c70:	08009374 	.word	0x08009374
 8000c74:	080006e5 	.word	0x080006e5
 8000c78:	08009388 	.word	0x08009388
 8000c7c:	08000769 	.word	0x08000769
 8000c80:	0800938c 	.word	0x0800938c
 8000c84:	08000805 	.word	0x08000805
 8000c88:	0800939c 	.word	0x0800939c
 8000c8c:	08000889 	.word	0x08000889
 8000c90:	080093b8 	.word	0x080093b8
 8000c94:	0800091d 	.word	0x0800091d
 8000c98:	080093d4 	.word	0x080093d4

08000c9c <EXTI0_IRQHandler>:
EXTI0_IRQHandler():
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:508

	return 0;
}

void EXTI0_IRQHandler(void) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:509
	if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f001 f83a 	bl	8001d1c <EXTI_GetITStatus>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d026      	beq.n	8000cfc <EXTI0_IRQHandler+0x60>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:512
		/* Toggle LED */
		//GPIO_ToggleBits(GPIOD, GPIO_Pin_12 |GPIO_Pin_13);
		if (roundFlag[0] == 0) {
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <EXTI0_IRQHandler+0x68>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d108      	bne.n	8000cc8 <EXTI0_IRQHandler+0x2c>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:513
			roundFlag[0] = 1;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <EXTI0_IRQHandler+0x68>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:515

			roundLastTime[0] = TIM2->CNT;
 8000cbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <EXTI0_IRQHandler+0x6c>)
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	e016      	b.n	8000cf6 <EXTI0_IRQHandler+0x5a>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:517
		} else {
			roundFlag[0] = 0;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <EXTI0_IRQHandler+0x68>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:519

			roundTime[0] = TIM2->CNT - roundLastTime[0];
 8000cce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <EXTI0_IRQHandler+0x6c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	1ad2      	subs	r2, r2, r3
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <EXTI0_IRQHandler+0x70>)
 8000cdc:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:522

			EXTI_InitTypeDef EXTI_InitStructure;
			EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:523
			EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:524
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8000ce6:	2308      	movs	r3, #8
 8000ce8:	717b      	strb	r3, [r7, #5]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:525
			EXTI_InitStructure.EXTI_LineCmd = DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	71bb      	strb	r3, [r7, #6]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:526
			EXTI_Init(&EXTI_InitStructure);
 8000cee:	463b      	mov	r3, r7
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 ffa5 	bl	8001c40 <EXTI_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:530
		}

		/* Clear the EXTI line 0 pending bit */
		EXTI_ClearITPendingBit(EXTI_Line0);
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f001 f82a 	bl	8001d50 <EXTI_ClearITPendingBit>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:532
	}
}
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20005868 	.word	0x20005868
 8000d08:	200008a4 	.word	0x200008a4
 8000d0c:	20000894 	.word	0x20000894

08000d10 <EXTI1_IRQHandler>:
EXTI1_IRQHandler():
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:534

void EXTI1_IRQHandler(void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:535
	if (EXTI_GetITStatus(EXTI_Line1) != RESET) {
 8000d16:	2002      	movs	r0, #2
 8000d18:	f001 f800 	bl	8001d1c <EXTI_GetITStatus>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d026      	beq.n	8000d70 <EXTI1_IRQHandler+0x60>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:536
		if (roundFlag[1] == 0) {
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <EXTI1_IRQHandler+0x68>)
 8000d24:	785b      	ldrb	r3, [r3, #1]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d108      	bne.n	8000d3c <EXTI1_IRQHandler+0x2c>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:537
			roundFlag[1] = 1;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <EXTI1_IRQHandler+0x68>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	705a      	strb	r2, [r3, #1]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:539

			roundLastTime[1] = TIM2->CNT;
 8000d30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <EXTI1_IRQHandler+0x6c>)
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	e016      	b.n	8000d6a <EXTI1_IRQHandler+0x5a>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:541
		} else {
			roundFlag[1] = 0;
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <EXTI1_IRQHandler+0x68>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	705a      	strb	r2, [r3, #1]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:543

			roundTime[1] = TIM2->CNT - roundLastTime[1];
 8000d42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <EXTI1_IRQHandler+0x6c>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	1ad2      	subs	r2, r2, r3
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <EXTI1_IRQHandler+0x70>)
 8000d50:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:546

			EXTI_InitTypeDef EXTI_InitStructure;
			EXTI_InitStructure.EXTI_Line = EXTI_Line1;
 8000d52:	2302      	movs	r3, #2
 8000d54:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:547
			EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000d56:	2300      	movs	r3, #0
 8000d58:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:548
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8000d5a:	2308      	movs	r3, #8
 8000d5c:	717b      	strb	r3, [r7, #5]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:549
			EXTI_InitStructure.EXTI_LineCmd = DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71bb      	strb	r3, [r7, #6]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:550
			EXTI_Init(&EXTI_InitStructure);
 8000d62:	463b      	mov	r3, r7
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 ff6b 	bl	8001c40 <EXTI_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:554
		}

		/* Clear the EXTI line 0 pending bit */
		EXTI_ClearITPendingBit(EXTI_Line1);
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f000 fff0 	bl	8001d50 <EXTI_ClearITPendingBit>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:556
	}
}
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20005868 	.word	0x20005868
 8000d7c:	200008a4 	.word	0x200008a4
 8000d80:	20000894 	.word	0x20000894

08000d84 <EXTI2_IRQHandler>:
EXTI2_IRQHandler():
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:558

void EXTI2_IRQHandler(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:559
	if (EXTI_GetITStatus(EXTI_Line2) != RESET) {
 8000d8a:	2004      	movs	r0, #4
 8000d8c:	f000 ffc6 	bl	8001d1c <EXTI_GetITStatus>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d026      	beq.n	8000de4 <EXTI2_IRQHandler+0x60>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:560
		if (roundFlag[2] == 0) {
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <EXTI2_IRQHandler+0x68>)
 8000d98:	789b      	ldrb	r3, [r3, #2]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d108      	bne.n	8000db0 <EXTI2_IRQHandler+0x2c>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:561
			roundFlag[2] = 1;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <EXTI2_IRQHandler+0x68>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	709a      	strb	r2, [r3, #2]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:563

			roundLastTime[2] = TIM2->CNT;
 8000da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <EXTI2_IRQHandler+0x6c>)
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	e016      	b.n	8000dde <EXTI2_IRQHandler+0x5a>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:565
		} else {
			roundFlag[2] = 0;
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <EXTI2_IRQHandler+0x68>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	709a      	strb	r2, [r3, #2]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:567

			roundTime[2] = TIM2->CNT - roundLastTime[2];
 8000db6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <EXTI2_IRQHandler+0x6c>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	1ad2      	subs	r2, r2, r3
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <EXTI2_IRQHandler+0x70>)
 8000dc4:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:570

			EXTI_InitTypeDef EXTI_InitStructure;
			EXTI_InitStructure.EXTI_Line = EXTI_Line2;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:571
			EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:572
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8000dce:	2308      	movs	r3, #8
 8000dd0:	717b      	strb	r3, [r7, #5]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:573
			EXTI_InitStructure.EXTI_LineCmd = DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	71bb      	strb	r3, [r7, #6]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:574
			EXTI_Init(&EXTI_InitStructure);
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 ff31 	bl	8001c40 <EXTI_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:578
		}

		/* Clear the EXTI line 0 pending bit */
		EXTI_ClearITPendingBit(EXTI_Line2);
 8000dde:	2004      	movs	r0, #4
 8000de0:	f000 ffb6 	bl	8001d50 <EXTI_ClearITPendingBit>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:580
	}
}
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20005868 	.word	0x20005868
 8000df0:	200008a4 	.word	0x200008a4
 8000df4:	20000894 	.word	0x20000894

08000df8 <EXTI3_IRQHandler>:
EXTI3_IRQHandler():
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:582

void EXTI3_IRQHandler(void) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:583
	if (EXTI_GetITStatus(EXTI_Line3) != RESET) {
 8000dfe:	2008      	movs	r0, #8
 8000e00:	f000 ff8c 	bl	8001d1c <EXTI_GetITStatus>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d026      	beq.n	8000e58 <EXTI3_IRQHandler+0x60>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:584
		if (roundFlag[3] == 0) {
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <EXTI3_IRQHandler+0x68>)
 8000e0c:	78db      	ldrb	r3, [r3, #3]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d108      	bne.n	8000e24 <EXTI3_IRQHandler+0x2c>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:585
			roundFlag[3] = 1;
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <EXTI3_IRQHandler+0x68>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	70da      	strb	r2, [r3, #3]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:587

			roundLastTime[3] = TIM2->CNT;
 8000e18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <EXTI3_IRQHandler+0x6c>)
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	e016      	b.n	8000e52 <EXTI3_IRQHandler+0x5a>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:589
		} else {
			roundFlag[3] = 0;
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <EXTI3_IRQHandler+0x68>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	70da      	strb	r2, [r3, #3]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:591

			roundTime[3] = TIM2->CNT - roundLastTime[3];
 8000e2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <EXTI3_IRQHandler+0x6c>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	1ad2      	subs	r2, r2, r3
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <EXTI3_IRQHandler+0x70>)
 8000e38:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:594

			EXTI_InitTypeDef EXTI_InitStructure;
			EXTI_InitStructure.EXTI_Line = EXTI_Line3;
 8000e3a:	2308      	movs	r3, #8
 8000e3c:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:595
			EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:596
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8000e42:	2308      	movs	r3, #8
 8000e44:	717b      	strb	r3, [r7, #5]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:597
			EXTI_InitStructure.EXTI_LineCmd = DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	71bb      	strb	r3, [r7, #6]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:598
			EXTI_Init(&EXTI_InitStructure);
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 fef7 	bl	8001c40 <EXTI_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:602
		}

		/* Clear the EXTI line 0 pending bit */
		EXTI_ClearITPendingBit(EXTI_Line3);
 8000e52:	2008      	movs	r0, #8
 8000e54:	f000 ff7c 	bl	8001d50 <EXTI_ClearITPendingBit>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:604
	}
}
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20005868 	.word	0x20005868
 8000e64:	200008a4 	.word	0x200008a4
 8000e68:	20000894 	.word	0x20000894

08000e6c <EXTI15_10_IRQHandler>:
EXTI15_10_IRQHandler():
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:607

void EXTI15_10_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:608
  if(EXTI_GetITStatus(EXTI_Line10) != RESET)
 8000e70:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e74:	f000 ff52 	bl	8001d1c <EXTI_GetITStatus>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d011      	beq.n	8000ea2 <EXTI15_10_IRQHandler+0x36>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:611
  {
	  /* Clear the EXTI line 0 pending bit */
	  EXTI_ClearITPendingBit(EXTI_Line10);
 8000e7e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e82:	f000 ff65 	bl	8001d50 <EXTI_ClearITPendingBit>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:612
	  if( usFlag1 == false ){
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <EXTI15_10_IRQHandler+0x68>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d121      	bne.n	8000ed2 <EXTI15_10_IRQHandler+0x66>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:613
		  vTaskPrioritySet( xUS_1, tskIDLE_PRIORITY + 1 );
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <EXTI15_10_IRQHandler+0x6c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	2101      	movs	r1, #1
 8000e96:	f002 f971 	bl	800317c <vTaskPrioritySet>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:614
		  usFlag1 = true;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <EXTI15_10_IRQHandler+0x68>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	e017      	b.n	8000ed2 <EXTI15_10_IRQHandler+0x66>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:618
	  }
  }

  else if(EXTI_GetITStatus(EXTI_Line15) != RESET)
 8000ea2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ea6:	f000 ff39 	bl	8001d1c <EXTI_GetITStatus>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d010      	beq.n	8000ed2 <EXTI15_10_IRQHandler+0x66>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:621
  {
	  /* Clear the EXTI line 15 pending bit */
	  EXTI_ClearITPendingBit(EXTI_Line15);
 8000eb0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000eb4:	f000 ff4c 	bl	8001d50 <EXTI_ClearITPendingBit>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:622
	  if( usFlag2 == false ){
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <EXTI15_10_IRQHandler+0x70>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d108      	bne.n	8000ed2 <EXTI15_10_IRQHandler+0x66>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:623
		  vTaskPrioritySet( xUS_2, tskIDLE_PRIORITY + 1 );
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <EXTI15_10_IRQHandler+0x74>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	f002 f958 	bl	800317c <vTaskPrioritySet>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:624
		  usFlag2 = true;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <EXTI15_10_IRQHandler+0x70>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:627
	 }
  }
}
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200008b4 	.word	0x200008b4
 8000ed8:	200057f8 	.word	0x200057f8
 8000edc:	200008b5 	.word	0x200008b5
 8000ee0:	200057f4 	.word	0x200057f4

08000ee4 <USART1_IRQHandler>:
USART1_IRQHandler():
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:629

void USART1_IRQHandler(void){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:631

  if( USART_GetITStatus(USART1, USART_IT_RXNE) )
 8000eea:	480a      	ldr	r0, [pc, #40]	; (8000f14 <USART1_IRQHandler+0x30>)
 8000eec:	f240 5125 	movw	r1, #1317	; 0x525
 8000ef0:	f001 fb56 	bl	80025a0 <USART_GetITStatus>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d009      	beq.n	8000f0e <USART1_IRQHandler+0x2a>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:633
  {
    char c = USART1->DR;
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <USART1_IRQHandler+0x30>)
 8000efc:	889b      	ldrh	r3, [r3, #4]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	71fb      	strb	r3, [r7, #7]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:634
    USART_puts(USART1, &c);
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	4803      	ldr	r0, [pc, #12]	; (8000f14 <USART1_IRQHandler+0x30>)
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f000 f813 	bl	8000f34 <USART_puts>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:636
  }
}
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40011000 	.word	0x40011000

08000f18 <vApplicationStackOverflowHook>:
vApplicationStackOverflowHook():
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:638

void vApplicationStackOverflowHook(xTaskHandle pxTask, signed char *pcTaskName) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:639
	taskDISABLE_INTERRUPTS();
 8000f22:	f003 fbb1 	bl	8004688 <ulPortSetInterruptMask>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:640 (discriminator 1)
	for(;;);
 8000f26:	e7fe      	b.n	8000f26 <vApplicationStackOverflowHook+0xe>

08000f28 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:642
}
void vApplicationMallocFailedHook(void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:643
	taskDISABLE_INTERRUPTS();
 8000f2c:	f003 fbac 	bl	8004688 <ulPortSetInterruptMask>
/home/chansak/workspace/Project_v2.0/Debug/../src/main.c:644 (discriminator 1)
	for(;;);
 8000f30:	e7fe      	b.n	8000f30 <vApplicationMallocFailedHook+0x8>
 8000f32:	bf00      	nop

08000f34 <USART_puts>:
USART_puts():
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:21
#include <stdint.h>

uint16_t ADCValue[5];

void USART_puts(USART_TypeDef* USARTx, volatile char *c)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:22
  while(*c){
 8000f3e:	e014      	b.n	8000f6a <USART_puts+0x36>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:24
    // wait until data register is empty
    while( !(USARTx->SR & 0x00000040) );
 8000f40:	bf00      	nop
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:24 (discriminator 1)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0f8      	beq.n	8000f42 <USART_puts+0xe>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:25
    USART_SendData(USARTx, *c);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	b25b      	sxtb	r3, r3
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f001 fac5 	bl	80024ec <USART_SendData>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:26
    *c++;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	1c5a      	adds	r2, r3, #1
 8000f66:	603a      	str	r2, [r7, #0]
 8000f68:	781b      	ldrb	r3, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:22 (discriminator 1)

uint16_t ADCValue[5];

void USART_puts(USART_TypeDef* USARTx, volatile char *c)
{
  while(*c){
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1e5      	bne.n	8000f40 <USART_puts+0xc>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:28
    // wait until data register is empty
    while( !(USARTx->SR & 0x00000040) );
    USART_SendData(USARTx, *c);
    *c++;
  }
}
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop

08000f7c <ADC_init>:
ADC_init():
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:31

void ADC_init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b09c      	sub	sp, #112	; 0x70
 8000f80:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:32
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,  ENABLE);
 8000f82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f86:	2101      	movs	r1, #1
 8000f88:	f001 f8f0 	bl	800216c <RCC_APB2PeriphClockCmd>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:33
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2,  ENABLE);
 8000f8c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000f90:	2101      	movs	r1, #1
 8000f92:	f001 f8af 	bl	80020f4 <RCC_AHB1PeriphClockCmd>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:34
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000f96:	2001      	movs	r0, #1
 8000f98:	2101      	movs	r1, #1
 8000f9a:	f001 f8ab 	bl	80020f4 <RCC_AHB1PeriphClockCmd>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:37

  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
 8000f9e:	233e      	movs	r3, #62	; 0x3e
 8000fa0:	66bb      	str	r3, [r7, #104]	; 0x68
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:38
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AN;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:39
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:40
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:41
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000fb4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000fb8:	4841      	ldr	r0, [pc, #260]	; (80010c0 <ADC_init+0x144>)
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f000 fed6 	bl	8001d6c <GPIO_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:47

  ADC_InitTypeDef        ADC_InitStructure;
  ADC_CommonInitTypeDef  ADC_CommonInitStructure;
  DMA_InitTypeDef        DMA_InitStructure;

  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	653b      	str	r3, [r7, #80]	; 0x50
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:48
  ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:49
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:50
  ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	65bb      	str	r3, [r7, #88]	; 0x58
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:51
  ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:52
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	663b      	str	r3, [r7, #96]	; 0x60
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:53
  ADC_InitStructure.ADC_NbrOfConversion = 5;
 8000fdc:	2305      	movs	r3, #5
 8000fde:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:54
  ADC_Init(ADC1, &ADC_InitStructure);
 8000fe2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fe6:	4837      	ldr	r0, [pc, #220]	; (80010c4 <ADC_init+0x148>)
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f000 fc13 	bl	8001814 <ADC_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:56

  ADC_CommonInitStructure.ADC_Mode              = ADC_Mode_Independent;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	643b      	str	r3, [r7, #64]	; 0x40
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:57
  ADC_CommonInitStructure.ADC_Prescaler         = ADC_Prescaler_Div2;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	647b      	str	r3, [r7, #68]	; 0x44
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:58
  ADC_CommonInitStructure.ADC_DMAAccessMode     = ADC_DMAAccessMode_Disabled;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	64bb      	str	r3, [r7, #72]	; 0x48
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:59
  ADC_CommonInitStructure.ADC_TwoSamplingDelay  = ADC_TwoSamplingDelay_5Cycles;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:60
  ADC_CommonInit(&ADC_CommonInitStructure);
 8000ffe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fc5a 	bl	80018bc <ADC_CommonInit>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:62

  ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_3Cycles);
 8001008:	482e      	ldr	r0, [pc, #184]	; (80010c4 <ADC_init+0x148>)
 800100a:	2101      	movs	r1, #1
 800100c:	2201      	movs	r2, #1
 800100e:	2300      	movs	r3, #0
 8001010:	f000 fc98 	bl	8001944 <ADC_RegularChannelConfig>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:63
  ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 2, ADC_SampleTime_3Cycles);
 8001014:	482b      	ldr	r0, [pc, #172]	; (80010c4 <ADC_init+0x148>)
 8001016:	2102      	movs	r1, #2
 8001018:	2202      	movs	r2, #2
 800101a:	2300      	movs	r3, #0
 800101c:	f000 fc92 	bl	8001944 <ADC_RegularChannelConfig>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:64
  ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 3, ADC_SampleTime_3Cycles);
 8001020:	4828      	ldr	r0, [pc, #160]	; (80010c4 <ADC_init+0x148>)
 8001022:	2103      	movs	r1, #3
 8001024:	2203      	movs	r2, #3
 8001026:	2300      	movs	r3, #0
 8001028:	f000 fc8c 	bl	8001944 <ADC_RegularChannelConfig>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:65
  ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 4, ADC_SampleTime_3Cycles);
 800102c:	4825      	ldr	r0, [pc, #148]	; (80010c4 <ADC_init+0x148>)
 800102e:	2104      	movs	r1, #4
 8001030:	2204      	movs	r2, #4
 8001032:	2300      	movs	r3, #0
 8001034:	f000 fc86 	bl	8001944 <ADC_RegularChannelConfig>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:66
  ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 5, ADC_SampleTime_3Cycles);
 8001038:	4822      	ldr	r0, [pc, #136]	; (80010c4 <ADC_init+0x148>)
 800103a:	2105      	movs	r1, #5
 800103c:	2205      	movs	r2, #5
 800103e:	2300      	movs	r3, #0
 8001040:	f000 fc80 	bl	8001944 <ADC_RegularChannelConfig>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:68

  DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:69
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADCValue[0];
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <ADC_init+0x14c>)
 800104a:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:70
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <ADC_init+0x150>)
 800104e:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:71
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:72
  DMA_InitStructure.DMA_BufferSize = 5;
 8001054:	2305      	movs	r3, #5
 8001056:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:73
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:74
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800105c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001060:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:75
  DMA_InitStructure.DMA_PeripheralDataSize =  DMA_PeripheralDataSize_HalfWord;
 8001062:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001066:	623b      	str	r3, [r7, #32]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:76
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8001068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:77
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 800106e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:78
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8001074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:79
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 800107a:	2304      	movs	r3, #4
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:80
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 800107e:	2301      	movs	r3, #1
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:81
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001082:	2300      	movs	r3, #0
 8001084:	63bb      	str	r3, [r7, #56]	; 0x38
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:82
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001086:	2300      	movs	r3, #0
 8001088:	63fb      	str	r3, [r7, #60]	; 0x3c
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:83
  DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4810      	ldr	r0, [pc, #64]	; (80010d0 <ADC_init+0x154>)
 800108e:	4619      	mov	r1, r3
 8001090:	f000 fd64 	bl	8001b5c <DMA_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:85

  DMA_Cmd(DMA2_Stream4, ENABLE);
 8001094:	480e      	ldr	r0, [pc, #56]	; (80010d0 <ADC_init+0x154>)
 8001096:	2101      	movs	r1, #1
 8001098:	f000 fdb6 	bl	8001c08 <DMA_Cmd>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:86
  ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
 800109c:	4809      	ldr	r0, [pc, #36]	; (80010c4 <ADC_init+0x148>)
 800109e:	2101      	movs	r1, #1
 80010a0:	f000 fd40 	bl	8001b24 <ADC_DMARequestAfterLastTransferCmd>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:89
  //ADC_MultiModeDMARequestAfterLastTransferCmd(ENABLE);

  ADC_DMACmd(ADC1, ENABLE);
 80010a4:	4807      	ldr	r0, [pc, #28]	; (80010c4 <ADC_init+0x148>)
 80010a6:	2101      	movs	r1, #1
 80010a8:	f000 fd20 	bl	8001aec <ADC_DMACmd>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:91

  ADC_Cmd(ADC1, ENABLE);
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <ADC_init+0x148>)
 80010ae:	2101      	movs	r1, #1
 80010b0:	f000 fc2c 	bl	800190c <ADC_Cmd>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:93

  ADC_SoftwareStartConv(ADC1);
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <ADC_init+0x148>)
 80010b6:	f000 fd09 	bl	8001acc <ADC_SoftwareStartConv>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:94
}
 80010ba:	3770      	adds	r7, #112	; 0x70
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40020000 	.word	0x40020000
 80010c4:	40012000 	.word	0x40012000
 80010c8:	2000586c 	.word	0x2000586c
 80010cc:	4001204c 	.word	0x4001204c
 80010d0:	40026470 	.word	0x40026470

080010d4 <GPIO_init>:
GPIO_init():
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:96

void GPIO_init(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:97
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80010da:	2008      	movs	r0, #8
 80010dc:	2101      	movs	r1, #1
 80010de:	f001 f809 	bl	80020f4 <RCC_AHB1PeriphClockCmd>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:99
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 80010e2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80010e6:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:100
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80010e8:	2301      	movs	r3, #1
 80010ea:	733b      	strb	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:101
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73bb      	strb	r3, [r7, #14]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:102
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80010f0:	2303      	movs	r3, #3
 80010f2:	737b      	strb	r3, [r7, #13]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:103
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	73fb      	strb	r3, [r7, #15]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:104
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	481f      	ldr	r0, [pc, #124]	; (800117c <GPIO_init+0xa8>)
 80010fe:	4619      	mov	r1, r3
 8001100:	f000 fe34 	bl	8001d6c <GPIO_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:106

	GPIO_WriteBit(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15, Bit_RESET);
 8001104:	481d      	ldr	r0, [pc, #116]	; (800117c <GPIO_init+0xa8>)
 8001106:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800110a:	2200      	movs	r2, #0
 800110c:	f000 fed8 	bl	8001ec0 <GPIO_WriteBit>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:110

	GPIO_InitTypeDef GPIO;	// GPIOA 2(trig), 10(echo)

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001110:	2001      	movs	r0, #1
 8001112:	2101      	movs	r1, #1
 8001114:	f000 ffee 	bl	80020f4 <RCC_AHB1PeriphClockCmd>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:111
	GPIO.GPIO_Mode = GPIO_Mode_OUT;
 8001118:	2301      	movs	r3, #1
 800111a:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:112
	GPIO.GPIO_Pin = GPIO_Pin_6;
 800111c:	2340      	movs	r3, #64	; 0x40
 800111e:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:113
    GPIO_Init(GPIOA, &GPIO);
 8001120:	463b      	mov	r3, r7
 8001122:	4817      	ldr	r0, [pc, #92]	; (8001180 <GPIO_init+0xac>)
 8001124:	4619      	mov	r1, r3
 8001126:	f000 fe21 	bl	8001d6c <GPIO_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:114
    GPIO.GPIO_Mode = GPIO_Mode_IN;
 800112a:	2300      	movs	r3, #0
 800112c:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:115
    GPIO.GPIO_Pin = GPIO_Pin_10;
 800112e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001132:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:116
    GPIO_Init(GPIOA, &GPIO);
 8001134:	463b      	mov	r3, r7
 8001136:	4812      	ldr	r0, [pc, #72]	; (8001180 <GPIO_init+0xac>)
 8001138:	4619      	mov	r1, r3
 800113a:	f000 fe17 	bl	8001d6c <GPIO_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:117
    GPIO_ResetBits(GPIOA, GPIO_Pin_6);
 800113e:	4810      	ldr	r0, [pc, #64]	; (8001180 <GPIO_init+0xac>)
 8001140:	2140      	movs	r1, #64	; 0x40
 8001142:	f000 feaf 	bl	8001ea4 <GPIO_ResetBits>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:119

	GPIO.GPIO_Mode = GPIO_Mode_OUT;
 8001146:	2301      	movs	r3, #1
 8001148:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:120
	GPIO.GPIO_Pin = GPIO_Pin_7;
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:121
    GPIO_Init(GPIOA, &GPIO);
 800114e:	463b      	mov	r3, r7
 8001150:	480b      	ldr	r0, [pc, #44]	; (8001180 <GPIO_init+0xac>)
 8001152:	4619      	mov	r1, r3
 8001154:	f000 fe0a 	bl	8001d6c <GPIO_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:122
    GPIO.GPIO_Mode = GPIO_Mode_IN;
 8001158:	2300      	movs	r3, #0
 800115a:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:123
    GPIO.GPIO_Pin = GPIO_Pin_15;
 800115c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001160:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:124
    GPIO_Init(GPIOA, &GPIO);
 8001162:	463b      	mov	r3, r7
 8001164:	4806      	ldr	r0, [pc, #24]	; (8001180 <GPIO_init+0xac>)
 8001166:	4619      	mov	r1, r3
 8001168:	f000 fe00 	bl	8001d6c <GPIO_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:125
    GPIO_ResetBits(GPIOA, GPIO_Pin_7);
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <GPIO_init+0xac>)
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	f000 fe98 	bl	8001ea4 <GPIO_ResetBits>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:126
}
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40020c00 	.word	0x40020c00
 8001180:	40020000 	.word	0x40020000

08001184 <Timer_init>:
Timer_init():
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:129

void Timer_init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:130
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800118a:	2001      	movs	r0, #1
 800118c:	2101      	movs	r1, #1
 800118e:	f000 ffcf 	bl	8002130 <RCC_APB1PeriphClockCmd>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:133

  TIM_TimeBaseInitTypeDef timerInitStructure;
  timerInitStructure.TIM_Prescaler = 84 - 1;               // Timer Clock 84MHz
 8001192:	2353      	movs	r3, #83	; 0x53
 8001194:	80bb      	strh	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:134
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	81bb      	strh	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:135
  timerInitStructure.TIM_Period = 0xFFFFFFFF - 1;
 800119a:	f06f 0301 	mvn.w	r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:136
  timerInitStructure.TIM_RepetitionCounter = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73bb      	strb	r3, [r7, #14]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:137
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80011a4:	2300      	movs	r3, #0
 80011a6:	80fb      	strh	r3, [r7, #6]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:138
  TIM_TimeBaseInit(TIM2, &timerInitStructure);
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80011ae:	4619      	mov	r1, r3
 80011b0:	f001 f838 	bl	8002224 <TIM_TimeBaseInit>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:139
  TIM_Cmd(TIM2, ENABLE);
 80011b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80011b8:	2101      	movs	r1, #1
 80011ba:	f001 f89d 	bl	80022f8 <TIM_Cmd>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:140
}
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <USART_init>:
USART_init():
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:143

void USART_init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:144
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80011ca:	2002      	movs	r0, #2
 80011cc:	2101      	movs	r1, #1
 80011ce:	f000 ff91 	bl	80020f4 <RCC_AHB1PeriphClockCmd>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:145
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80011d2:	2010      	movs	r0, #16
 80011d4:	2101      	movs	r1, #1
 80011d6:	f000 ffc9 	bl	800216c <RCC_APB2PeriphClockCmd>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:148

  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 80011da:	23c0      	movs	r3, #192	; 0xc0
 80011dc:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:149
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80011de:	2302      	movs	r3, #2
 80011e0:	773b      	strb	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:150
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	77fb      	strb	r3, [r7, #31]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:151
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80011e6:	2300      	movs	r3, #0
 80011e8:	77bb      	strb	r3, [r7, #30]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:152
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80011ea:	2302      	movs	r3, #2
 80011ec:	777b      	strb	r3, [r7, #29]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:153
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 80011ee:	f107 0318 	add.w	r3, r7, #24
 80011f2:	481d      	ldr	r0, [pc, #116]	; (8001268 <USART_init+0xa4>)
 80011f4:	4619      	mov	r1, r3
 80011f6:	f000 fdb9 	bl	8001d6c <GPIO_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:154
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
 80011fa:	481b      	ldr	r0, [pc, #108]	; (8001268 <USART_init+0xa4>)
 80011fc:	2106      	movs	r1, #6
 80011fe:	2207      	movs	r2, #7
 8001200:	f000 fe88 	bl	8001f14 <GPIO_PinAFConfig>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:155
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 8001204:	4818      	ldr	r0, [pc, #96]	; (8001268 <USART_init+0xa4>)
 8001206:	2107      	movs	r1, #7
 8001208:	2207      	movs	r2, #7
 800120a:	f000 fe83 	bl	8001f14 <GPIO_PinAFConfig>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:158

  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_BaudRate              = 921600; // MAX 921600
 800120e:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8001212:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:159
  USART_InitStructure.USART_WordLength            = USART_WordLength_8b;
 8001214:	2300      	movs	r3, #0
 8001216:	81bb      	strh	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:160
  USART_InitStructure.USART_StopBits              = USART_StopBits_1;
 8001218:	2300      	movs	r3, #0
 800121a:	81fb      	strh	r3, [r7, #14]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:161
  USART_InitStructure.USART_Parity                = USART_Parity_No;
 800121c:	2300      	movs	r3, #0
 800121e:	823b      	strh	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:162
  USART_InitStructure.USART_HardwareFlowControl   = USART_HardwareFlowControl_None;
 8001220:	2300      	movs	r3, #0
 8001222:	82bb      	strh	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:163
  USART_InitStructure.USART_Mode                  = USART_Mode_Tx | USART_Mode_Rx;
 8001224:	230c      	movs	r3, #12
 8001226:	827b      	strh	r3, [r7, #18]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:164
  USART_Init(USART1, &USART_InitStructure);
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	480f      	ldr	r0, [pc, #60]	; (800126c <USART_init+0xa8>)
 800122e:	4619      	mov	r1, r3
 8001230:	f001 f882 	bl	8002338 <USART_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:165
  USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <USART_init+0xa8>)
 8001236:	f240 5125 	movw	r1, #1317	; 0x525
 800123a:	2201      	movs	r2, #1
 800123c:	f001 f968 	bl	8002510 <USART_ITConfig>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:168

  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8001240:	2325      	movs	r3, #37	; 0x25
 8001242:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:169
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	717b      	strb	r3, [r7, #5]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:170
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	71bb      	strb	r3, [r7, #6]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:171
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800124c:	2301      	movs	r3, #1
 800124e:	71fb      	strb	r3, [r7, #7]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:172
  NVIC_Init(&NVIC_InitStructure);
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fa80 	bl	8001758 <NVIC_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:175

    /* Enable USART1 */
  USART_Cmd(USART1, ENABLE);
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <USART_init+0xa8>)
 800125a:	2101      	movs	r1, #1
 800125c:	f001 f926 	bl	80024ac <USART_Cmd>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:176
}
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40020400 	.word	0x40020400
 800126c:	40011000 	.word	0x40011000

08001270 <EXTI_init>:
EXTI_init():
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:179

void EXTI_init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:184
	EXTI_InitTypeDef   EXTI_InitStructure;
	GPIO_InitTypeDef   GPIO_InitStructure;
	NVIC_InitTypeDef   NVIC_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,  ENABLE);
 8001276:	2001      	movs	r0, #1
 8001278:	2101      	movs	r1, #1
 800127a:	f000 ff3b 	bl	80020f4 <RCC_AHB1PeriphClockCmd>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:185
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800127e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001282:	2101      	movs	r1, #1
 8001284:	f000 ff72 	bl	800216c <RCC_APB2PeriphClockCmd>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:187

	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_10;
 8001288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128c:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:188
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;
 800128e:	2300      	movs	r3, #0
 8001290:	733b      	strb	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:189
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8001292:	2301      	movs	r3, #1
 8001294:	73fb      	strb	r3, [r7, #15]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:190
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001296:	2303      	movs	r3, #3
 8001298:	737b      	strb	r3, [r7, #13]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:191
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	4866      	ldr	r0, [pc, #408]	; (8001438 <EXTI_init+0x1c8>)
 80012a0:	4619      	mov	r1, r3
 80012a2:	f000 fd63 	bl	8001d6c <GPIO_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:192
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource10);
 80012a6:	2000      	movs	r0, #0
 80012a8:	210a      	movs	r1, #10
 80012aa:	f000 ff7d 	bl	80021a8 <SYSCFG_EXTILineConfig>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:194

	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_15;
 80012ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012b2:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:195
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;
 80012b4:	2300      	movs	r3, #0
 80012b6:	733b      	strb	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:196
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:197
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80012bc:	2303      	movs	r3, #3
 80012be:	737b      	strb	r3, [r7, #13]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:198
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	485c      	ldr	r0, [pc, #368]	; (8001438 <EXTI_init+0x1c8>)
 80012c6:	4619      	mov	r1, r3
 80012c8:	f000 fd50 	bl	8001d6c <GPIO_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:199
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource15);
 80012cc:	2000      	movs	r0, #0
 80012ce:	210f      	movs	r1, #15
 80012d0:	f000 ff6a 	bl	80021a8 <SYSCFG_EXTILineConfig>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:201

	EXTI_InitStructure.EXTI_Line = EXTI_Line10;
 80012d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d8:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:202
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80012da:	2300      	movs	r3, #0
 80012dc:	753b      	strb	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:203
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 80012de:	2310      	movs	r3, #16
 80012e0:	757b      	strb	r3, [r7, #21]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:204
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80012e2:	2301      	movs	r3, #1
 80012e4:	75bb      	strb	r3, [r7, #22]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:205
	EXTI_Init(&EXTI_InitStructure);
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fca8 	bl	8001c40 <EXTI_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:207

	EXTI_InitStructure.EXTI_Line = EXTI_Line15;
 80012f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012f4:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:208
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80012f6:	2300      	movs	r3, #0
 80012f8:	753b      	strb	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:209
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 80012fa:	2310      	movs	r3, #16
 80012fc:	757b      	strb	r3, [r7, #21]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:210
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80012fe:	2301      	movs	r3, #1
 8001300:	75bb      	strb	r3, [r7, #22]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:211
	EXTI_Init(&EXTI_InitStructure);
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fc9a 	bl	8001c40 <EXTI_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:213

	NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
 800130c:	2328      	movs	r3, #40	; 0x28
 800130e:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:214
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8001310:	230f      	movs	r3, #15
 8001312:	717b      	strb	r3, [r7, #5]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:215
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8001314:	230f      	movs	r3, #15
 8001316:	71bb      	strb	r3, [r7, #6]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:216
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001318:	2301      	movs	r3, #1
 800131a:	71fb      	strb	r3, [r7, #7]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:217
	NVIC_Init(&NVIC_InitStructure);
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fa1a 	bl	8001758 <NVIC_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:221


	/* optical sensor */
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
 8001324:	230f      	movs	r3, #15
 8001326:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:222
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;
 8001328:	2300      	movs	r3, #0
 800132a:	733b      	strb	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:223
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 800132c:	2301      	movs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:224
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001330:	2303      	movs	r3, #3
 8001332:	737b      	strb	r3, [r7, #13]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:225
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4840      	ldr	r0, [pc, #256]	; (800143c <EXTI_init+0x1cc>)
 800133a:	4619      	mov	r1, r3
 800133c:	f000 fd16 	bl	8001d6c <GPIO_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:226
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource0);
 8001340:	2001      	movs	r0, #1
 8001342:	2100      	movs	r1, #0
 8001344:	f000 ff30 	bl	80021a8 <SYSCFG_EXTILineConfig>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:227
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource1);
 8001348:	2001      	movs	r0, #1
 800134a:	2101      	movs	r1, #1
 800134c:	f000 ff2c 	bl	80021a8 <SYSCFG_EXTILineConfig>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:228
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource2);
 8001350:	2001      	movs	r0, #1
 8001352:	2102      	movs	r1, #2
 8001354:	f000 ff28 	bl	80021a8 <SYSCFG_EXTILineConfig>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:229
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource3);
 8001358:	2001      	movs	r0, #1
 800135a:	2103      	movs	r1, #3
 800135c:	f000 ff24 	bl	80021a8 <SYSCFG_EXTILineConfig>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:231

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,  ENABLE);
 8001360:	2002      	movs	r0, #2
 8001362:	2101      	movs	r1, #1
 8001364:	f000 fec6 	bl	80020f4 <RCC_AHB1PeriphClockCmd>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:233

	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 8001368:	2301      	movs	r3, #1
 800136a:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:234
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800136c:	2300      	movs	r3, #0
 800136e:	753b      	strb	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:235
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8001370:	2308      	movs	r3, #8
 8001372:	757b      	strb	r3, [r7, #21]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:236
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001374:	2301      	movs	r3, #1
 8001376:	75bb      	strb	r3, [r7, #22]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:237
	EXTI_Init(&EXTI_InitStructure);
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fc5f 	bl	8001c40 <EXTI_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:239

	EXTI_InitStructure.EXTI_Line = EXTI_Line1;
 8001382:	2302      	movs	r3, #2
 8001384:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:240
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001386:	2300      	movs	r3, #0
 8001388:	753b      	strb	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:241
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 800138a:	2308      	movs	r3, #8
 800138c:	757b      	strb	r3, [r7, #21]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:242
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800138e:	2301      	movs	r3, #1
 8001390:	75bb      	strb	r3, [r7, #22]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:243
	EXTI_Init(&EXTI_InitStructure);
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	4618      	mov	r0, r3
 8001398:	f000 fc52 	bl	8001c40 <EXTI_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:245

	EXTI_InitStructure.EXTI_Line = EXTI_Line2;
 800139c:	2304      	movs	r3, #4
 800139e:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:246
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80013a0:	2300      	movs	r3, #0
 80013a2:	753b      	strb	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:247
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 80013a4:	2308      	movs	r3, #8
 80013a6:	757b      	strb	r3, [r7, #21]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:248
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80013a8:	2301      	movs	r3, #1
 80013aa:	75bb      	strb	r3, [r7, #22]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:249
	EXTI_Init(&EXTI_InitStructure);
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fc45 	bl	8001c40 <EXTI_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:251

	EXTI_InitStructure.EXTI_Line = EXTI_Line3;
 80013b6:	2308      	movs	r3, #8
 80013b8:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:252
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80013ba:	2300      	movs	r3, #0
 80013bc:	753b      	strb	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:253
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 80013be:	2308      	movs	r3, #8
 80013c0:	757b      	strb	r3, [r7, #21]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:254
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80013c2:	2301      	movs	r3, #1
 80013c4:	75bb      	strb	r3, [r7, #22]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:255
	EXTI_Init(&EXTI_InitStructure);
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fc38 	bl	8001c40 <EXTI_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:257

	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 80013d0:	2306      	movs	r3, #6
 80013d2:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:258
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80013d4:	230f      	movs	r3, #15
 80013d6:	717b      	strb	r3, [r7, #5]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:259
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 80013d8:	230f      	movs	r3, #15
 80013da:	71bb      	strb	r3, [r7, #6]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:260
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80013dc:	2301      	movs	r3, #1
 80013de:	71fb      	strb	r3, [r7, #7]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:261
	NVIC_Init(&NVIC_InitStructure);
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f9b8 	bl	8001758 <NVIC_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:263

	NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
 80013e8:	2307      	movs	r3, #7
 80013ea:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:264
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80013ec:	230f      	movs	r3, #15
 80013ee:	717b      	strb	r3, [r7, #5]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:265
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 80013f0:	230f      	movs	r3, #15
 80013f2:	71bb      	strb	r3, [r7, #6]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:266
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80013f4:	2301      	movs	r3, #1
 80013f6:	71fb      	strb	r3, [r7, #7]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:267
	NVIC_Init(&NVIC_InitStructure);
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f9ac 	bl	8001758 <NVIC_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:269

	NVIC_InitStructure.NVIC_IRQChannel = EXTI2_IRQn;
 8001400:	2308      	movs	r3, #8
 8001402:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:270
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8001404:	230f      	movs	r3, #15
 8001406:	717b      	strb	r3, [r7, #5]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:271
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8001408:	230f      	movs	r3, #15
 800140a:	71bb      	strb	r3, [r7, #6]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:272
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800140c:	2301      	movs	r3, #1
 800140e:	71fb      	strb	r3, [r7, #7]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:273
	NVIC_Init(&NVIC_InitStructure);
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f9a0 	bl	8001758 <NVIC_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:275

	NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQn;
 8001418:	2309      	movs	r3, #9
 800141a:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:276
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 800141c:	230f      	movs	r3, #15
 800141e:	717b      	strb	r3, [r7, #5]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:277
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8001420:	230f      	movs	r3, #15
 8001422:	71bb      	strb	r3, [r7, #6]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:278
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001424:	2301      	movs	r3, #1
 8001426:	71fb      	strb	r3, [r7, #7]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:279
	NVIC_Init(&NVIC_InitStructure);
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f994 	bl	8001758 <NVIC_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:280
}
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400

08001440 <uDelay>:
uDelay():
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:283

void uDelay(uint32_t uS)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:285
    uint32_t timerValue;
    uint32_t lastTime = TIM2->CNT;
 8001448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:288
    while(1)
    {
    	timerValue = TIM2->CNT;
 8001450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:289
    	if( timerValue - lastTime > uS )
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	1ad2      	subs	r2, r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	429a      	cmp	r2, r3
 8001462:	d900      	bls.n	8001466 <uDelay+0x26>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:291
    	{
    		break;
 8001464:	e000      	b.n	8001468 <uDelay+0x28>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:293
    	}
    }
 8001466:	e7f3      	b.n	8001450 <uDelay+0x10>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:294
    return;
 8001468:	bf00      	nop
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:295
}
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <enableExtiROS>:
enableExtiROS():
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:298

void enableExtiROS(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:301
	EXTI_InitTypeDef EXTI_InitStructure;

	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 800147a:	2301      	movs	r3, #1
 800147c:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:302
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800147e:	2300      	movs	r3, #0
 8001480:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:303
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8001482:	2308      	movs	r3, #8
 8001484:	717b      	strb	r3, [r7, #5]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:304
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001486:	2301      	movs	r3, #1
 8001488:	71bb      	strb	r3, [r7, #6]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:305
	EXTI_Init(&EXTI_InitStructure);
 800148a:	463b      	mov	r3, r7
 800148c:	4618      	mov	r0, r3
 800148e:	f000 fbd7 	bl	8001c40 <EXTI_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:307

	EXTI_InitStructure.EXTI_Line = EXTI_Line1;
 8001492:	2302      	movs	r3, #2
 8001494:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:308
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001496:	2300      	movs	r3, #0
 8001498:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:309
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 800149a:	2308      	movs	r3, #8
 800149c:	717b      	strb	r3, [r7, #5]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:310
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800149e:	2301      	movs	r3, #1
 80014a0:	71bb      	strb	r3, [r7, #6]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:311
	EXTI_Init(&EXTI_InitStructure);
 80014a2:	463b      	mov	r3, r7
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fbcb 	bl	8001c40 <EXTI_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:313

	EXTI_InitStructure.EXTI_Line = EXTI_Line2;
 80014aa:	2304      	movs	r3, #4
 80014ac:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:314
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80014ae:	2300      	movs	r3, #0
 80014b0:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:315
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 80014b2:	2308      	movs	r3, #8
 80014b4:	717b      	strb	r3, [r7, #5]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:316
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80014b6:	2301      	movs	r3, #1
 80014b8:	71bb      	strb	r3, [r7, #6]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:317
	EXTI_Init(&EXTI_InitStructure);
 80014ba:	463b      	mov	r3, r7
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fbbf 	bl	8001c40 <EXTI_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:319

	EXTI_InitStructure.EXTI_Line = EXTI_Line3;
 80014c2:	2308      	movs	r3, #8
 80014c4:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:320
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80014c6:	2300      	movs	r3, #0
 80014c8:	713b      	strb	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:321
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 80014ca:	2308      	movs	r3, #8
 80014cc:	717b      	strb	r3, [r7, #5]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:322
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80014ce:	2301      	movs	r3, #1
 80014d0:	71bb      	strb	r3, [r7, #6]
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:323
	EXTI_Init(&EXTI_InitStructure);
 80014d2:	463b      	mov	r3, r7
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fbb3 	bl	8001c40 <EXTI_Init>
/home/chansak/workspace/Project_v2.0/Debug/../src/myFunction.c:324
}
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_sbrk>:
_sbrk():
/home/chansak/workspace/Project_v2.0/Debug/../libs/misc/src/_sbrk.c:11
#include <sys/types.h>
#include <errno.h>

caddr_t
_sbrk(int incr)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/misc/src/_sbrk.c:17
  extern char _Heap_Begin; /* Defined by the linker. */
  extern char _Heap_Limit; /* Defined by the linker. */
  static char* current_heap_end;
  char* current_block_address;

  if (current_heap_end == 0)
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <_sbrk+0x5c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d102      	bne.n	80014f6 <_sbrk+0x16>
/home/chansak/workspace/Project_v2.0/Debug/../libs/misc/src/_sbrk.c:18
    current_heap_end = &_Heap_Begin;
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <_sbrk+0x5c>)
 80014f2:	4a13      	ldr	r2, [pc, #76]	; (8001540 <_sbrk+0x60>)
 80014f4:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/misc/src/_sbrk.c:20

  current_block_address = current_heap_end;
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <_sbrk+0x5c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/misc/src/_sbrk.c:26

  // Need to align heap to word boundary, else will get
  // hard faults on Cortex-M0. So we assume that heap starts on
  // word boundary, hence make sure we always add a multiple of
  // 4 to it.
  incr = (incr + 3) & (~3); // align value to 4
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3303      	adds	r3, #3
 8001500:	f023 0303 	bic.w	r3, r3, #3
 8001504:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/misc/src/_sbrk.c:27
  if (current_heap_end + incr > &_Heap_Limit)
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <_sbrk+0x5c>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	441a      	add	r2, r3
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <_sbrk+0x64>)
 8001510:	429a      	cmp	r2, r3
 8001512:	d907      	bls.n	8001524 <_sbrk+0x44>
/home/chansak/workspace/Project_v2.0/Debug/../libs/misc/src/_sbrk.c:39
      _write (1, "_sbrk: Heap and stack collision\n", 32);

      abort ();
#else
      // Heap has overflowed
      errno = ENOMEM;
 8001514:	f003 f94e 	bl	80047b4 <__errno>
 8001518:	4603      	mov	r3, r0
 800151a:	220c      	movs	r2, #12
 800151c:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/misc/src/_sbrk.c:40
      return (caddr_t) - 1;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	e006      	b.n	8001532 <_sbrk+0x52>
/home/chansak/workspace/Project_v2.0/Debug/../libs/misc/src/_sbrk.c:44
#endif
    }

  current_heap_end += incr;
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <_sbrk+0x5c>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	441a      	add	r2, r3
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <_sbrk+0x5c>)
 800152e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/misc/src/_sbrk.c:46

  return (caddr_t) current_block_address;
 8001530:	68fb      	ldr	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/misc/src/_sbrk.c:47
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20001268 	.word	0x20001268
 8001540:	200058bc 	.word	0x200058bc
 8001544:	2001fc00 	.word	0x2001fc00

08001548 <__libc_init_array>:
__libc_init_array():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:179
(*__fini_array_end[])(void) __attribute__((weak));

// Iterate over all the preinit/init routines.
inline void
__libc_init_array(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:183
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
 800154e:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <__libc_init_array+0x5c>)
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <__libc_init_array+0x60>)
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	109b      	asrs	r3, r3, #2
 8001556:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:184
  for (i = 0; i < count; i++)
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	e007      	b.n	800156e <__libc_init_array+0x26>
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:185 (discriminator 2)
    __preinit_array_start[i]();
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <__libc_init_array+0x60>)
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001566:	4798      	blx	r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:184 (discriminator 2)
{
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3301      	adds	r3, #1
 800156c:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:184 (discriminator 1)
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d3f3      	bcc.n	800155e <__libc_init_array+0x16>
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:192
  // If you need to run the code in the .init section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
 8001576:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <__libc_init_array+0x64>)
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <__libc_init_array+0x68>)
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	109b      	asrs	r3, r3, #2
 800157e:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:193
  for (i = 0; i < count; i++)
 8001580:	2300      	movs	r3, #0
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	e007      	b.n	8001596 <__libc_init_array+0x4e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:194 (discriminator 2)
    __init_array_start[i]();
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <__libc_init_array+0x68>)
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800158e:	4798      	blx	r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:193 (discriminator 2)
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
  for (i = 0; i < count; i++)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3301      	adds	r3, #1
 8001594:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:193 (discriminator 1)
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d3f3      	bcc.n	8001586 <__libc_init_array+0x3e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:195
    __init_array_start[i]();
}
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	08000288 	.word	0x08000288
 80015a8:	08000280 	.word	0x08000280
 80015ac:	08000288 	.word	0x08000288
 80015b0:	08000288 	.word	0x08000288

080015b4 <__libc_fini_array>:
__libc_fini_array():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:200

// Run all the cleanup routines.
inline void
__libc_fini_array(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:204
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <__libc_fini_array+0x34>)
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <__libc_fini_array+0x38>)
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	109b      	asrs	r3, r3, #2
 80015c2:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:205
  for (i = count; i > 0; i--)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	e008      	b.n	80015dc <__libc_fini_array+0x28>
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:206 (discriminator 2)
    __fini_array_start[i - 1]();
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	1e5a      	subs	r2, r3, #1
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <__libc_fini_array+0x38>)
 80015d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d4:	4798      	blx	r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:205 (discriminator 2)
{
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
  for (i = count; i > 0; i--)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3b01      	subs	r3, #1
 80015da:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:205 (discriminator 1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f3      	bne.n	80015ca <__libc_fini_array+0x16>
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_cm.c:212

  // If you need to run the code in the .fini section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_fini();
}
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	08000288 	.word	0x08000288
 80015ec:	08000288 	.word	0x08000288

080015f0 <_exit>:
_exit():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_stm32f4xx.c:44
// You can redefine it in the application, if more functionality
// is required
void
__attribute__((weak))
_exit(int r)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/startup_stm32f4xx.c:47 (discriminator 1)
#if defined(DEBUG)
  while(1)
  ;
 80015f8:	e7fe      	b.n	80015f8 <_exit+0x8>
 80015fa:	bf00      	nop

080015fc <SystemInit>:
SystemInit():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:344
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:347
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <SystemInit+0x5c>)
 8001602:	4a15      	ldr	r2, [pc, #84]	; (8001658 <SystemInit+0x5c>)
 8001604:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8001608:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800160c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:351
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <SystemInit+0x60>)
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <SystemInit+0x60>)
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	f042 0201 	orr.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:354

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <SystemInit+0x60>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:357

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001622:	4a0e      	ldr	r2, [pc, #56]	; (800165c <SystemInit+0x60>)
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <SystemInit+0x60>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800162c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:360

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <SystemInit+0x60>)
 8001634:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <SystemInit+0x64>)
 8001636:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:363

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <SystemInit+0x60>)
 800163a:	4a08      	ldr	r2, [pc, #32]	; (800165c <SystemInit+0x60>)
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001642:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:366

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <SystemInit+0x60>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:374
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800164a:	f000 f80b 	bl	8001664 <SetSysClock>
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:380

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800164e:	4b02      	ldr	r3, [pc, #8]	; (8001658 <SystemInit+0x5c>)
 8001650:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001654:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:382
#endif
}
 8001656:	bd80      	pop	{r7, pc}
 8001658:	e000ed00 	.word	0xe000ed00
 800165c:	40023800 	.word	0x40023800
 8001660:	24003010 	.word	0x24003010

08001664 <SetSysClock>:
SetSysClock():
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:477
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:481
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:484
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001672:	4b35      	ldr	r3, [pc, #212]	; (8001748 <SetSysClock+0xe4>)
 8001674:	4a34      	ldr	r2, [pc, #208]	; (8001748 <SetSysClock+0xe4>)
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800167c:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:489 (discriminator 1)
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800167e:	4b32      	ldr	r3, [pc, #200]	; (8001748 <SetSysClock+0xe4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:490 (discriminator 1)
    StartUpCounter++;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3301      	adds	r3, #1
 800168c:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:491 (discriminator 1)
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d103      	bne.n	800169c <SetSysClock+0x38>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800169a:	d1f0      	bne.n	800167e <SetSysClock+0x1a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:493

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800169c:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <SetSysClock+0xe4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d002      	beq.n	80016ae <SetSysClock+0x4a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:495
  {
    HSEStatus = (uint32_t)0x01;
 80016a8:	2301      	movs	r3, #1
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	e001      	b.n	80016b2 <SetSysClock+0x4e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:499
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80016ae:	2300      	movs	r3, #0
 80016b0:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:502
  }

  if (HSEStatus == (uint32_t)0x01)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d142      	bne.n	800173e <SetSysClock+0xda>
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:505
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80016b8:	4b23      	ldr	r3, [pc, #140]	; (8001748 <SetSysClock+0xe4>)
 80016ba:	4a23      	ldr	r2, [pc, #140]	; (8001748 <SetSysClock+0xe4>)
 80016bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016c2:	641a      	str	r2, [r3, #64]	; 0x40
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:506
    PWR->CR |= PWR_CR_VOS;
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <SetSysClock+0xe8>)
 80016c6:	4a21      	ldr	r2, [pc, #132]	; (800174c <SetSysClock+0xe8>)
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80016ce:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:509

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80016d0:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <SetSysClock+0xe4>)
 80016d2:	4a1d      	ldr	r2, [pc, #116]	; (8001748 <SetSysClock+0xe4>)
 80016d4:	6892      	ldr	r2, [r2, #8]
 80016d6:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:513

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <SetSysClock+0xe4>)
 80016da:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <SetSysClock+0xe4>)
 80016dc:	6892      	ldr	r2, [r2, #8]
 80016de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016e2:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:516
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <SetSysClock+0xe4>)
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <SetSysClock+0xe4>)
 80016e8:	6892      	ldr	r2, [r2, #8]
 80016ea:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80016ee:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:528
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <SetSysClock+0xe4>)
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <SetSysClock+0xec>)
 80016f4:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:532
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <SetSysClock+0xe4>)
 80016f8:	4a13      	ldr	r2, [pc, #76]	; (8001748 <SetSysClock+0xe4>)
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001700:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:535

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001702:	bf00      	nop
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:535 (discriminator 1)
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <SetSysClock+0xe4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f9      	beq.n	8001704 <SetSysClock+0xa0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:555
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <SetSysClock+0xf0>)
 8001712:	f240 7205 	movw	r2, #1797	; 0x705
 8001716:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:564
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <SetSysClock+0xe4>)
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <SetSysClock+0xe4>)
 800171c:	6892      	ldr	r2, [r2, #8]
 800171e:	f022 0203 	bic.w	r2, r2, #3
 8001722:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:565
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <SetSysClock+0xe4>)
 8001726:	4a08      	ldr	r2, [pc, #32]	; (8001748 <SetSysClock+0xe4>)
 8001728:	6892      	ldr	r2, [r2, #8]
 800172a:	f042 0202 	orr.w	r2, r2, #2
 800172e:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:568

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001730:	bf00      	nop
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:568 (discriminator 1)
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <SetSysClock+0xe4>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	2b08      	cmp	r3, #8
 800173c:	d1f9      	bne.n	8001732 <SetSysClock+0xce>
/home/chansak/workspace/Project_v2.0/Debug/../libs/cmsis/src/system_stm32f4xx.c:577
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	40023800 	.word	0x40023800
 800174c:	40007000 	.word	0x40007000
 8001750:	07405408 	.word	0x07405408
 8001754:	40023c00 	.word	0x40023c00

08001758 <NVIC_Init>:
NVIC_Init():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/misc.c:137
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/misc.c:138
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	2300      	movs	r3, #0
 8001766:	73bb      	strb	r3, [r7, #14]
 8001768:	230f      	movs	r3, #15
 800176a:	737b      	strb	r3, [r7, #13]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/misc.c:145
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	78db      	ldrb	r3, [r3, #3]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d037      	beq.n	80017e4 <NVIC_Init+0x8c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/misc.c:148
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001774:	4b25      	ldr	r3, [pc, #148]	; (800180c <NVIC_Init+0xb4>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	43db      	mvns	r3, r3
 800177a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	73fb      	strb	r3, [r7, #15]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/misc.c:149
    tmppre = (0x4 - tmppriority);
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	f1c3 0304 	rsb	r3, r3, #4
 8001788:	73bb      	strb	r3, [r7, #14]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/misc.c:150
    tmpsub = tmpsub >> tmppriority;
 800178a:	7b7a      	ldrb	r2, [r7, #13]
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	fa42 f303 	asr.w	r3, r2, r3
 8001792:	737b      	strb	r3, [r7, #13]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/misc.c:152

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	785b      	ldrb	r3, [r3, #1]
 8001798:	461a      	mov	r2, r3
 800179a:	7bbb      	ldrb	r3, [r7, #14]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	73fb      	strb	r3, [r7, #15]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/misc.c:153
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	789a      	ldrb	r2, [r3, #2]
 80017a6:	7b7b      	ldrb	r3, [r7, #13]
 80017a8:	4013      	ands	r3, r2
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	73fb      	strb	r3, [r7, #15]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/misc.c:155
        
    tmppriority = tmppriority << 0x04;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	73fb      	strb	r3, [r7, #15]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/misc.c:157
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80017b8:	4a15      	ldr	r2, [pc, #84]	; (8001810 <NVIC_Init+0xb8>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/misc.c:160
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <NVIC_Init+0xb8>)
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	7812      	ldrb	r2, [r2, #0]
 80017cc:	0952      	lsrs	r2, r2, #5
 80017ce:	b2d2      	uxtb	r2, r2
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/misc.c:161
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	7809      	ldrb	r1, [r1, #0]
 80017d4:	f001 011f 	and.w	r1, r1, #31
 80017d8:	2001      	movs	r0, #1
 80017da:	fa00 f101 	lsl.w	r1, r0, r1
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/misc.c:160
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80017de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80017e2:	e00e      	b.n	8001802 <NVIC_Init+0xaa>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/misc.c:166
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <NVIC_Init+0xb8>)
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	7812      	ldrb	r2, [r2, #0]
 80017ea:	0952      	lsrs	r2, r2, #5
 80017ec:	b2d2      	uxtb	r2, r2
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/misc.c:167
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	7809      	ldrb	r1, [r1, #0]
 80017f2:	f001 011f 	and.w	r1, r1, #31
 80017f6:	2001      	movs	r0, #1
 80017f8:	fa00 f101 	lsl.w	r1, r0, r1
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/misc.c:166
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80017fc:	3220      	adds	r2, #32
 80017fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/misc.c:169
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00
 8001810:	e000e100 	.word	0xe000e100

08001814 <ADC_Init>:
ADC_Init():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:236
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:237
  uint32_t tmpreg1 = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:238
  uint8_t tmpreg2 = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	72fb      	strb	r3, [r7, #11]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:251
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:254
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001832:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001836:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:259
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	791b      	ldrb	r3, [r3, #4]
 800183c:	021a      	lsls	r2, r3, #8
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:260
                                   ADC_InitStruct->ADC_Resolution);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:259
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8001842:	4313      	orrs	r3, r2
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4313      	orrs	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:262
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:265
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:268
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <ADC_Init+0xa4>)
 800185a:	4013      	ands	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:276
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	691a      	ldr	r2, [r3, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:277
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:276
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001866:	431a      	orrs	r2, r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:278
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:277
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800186c:	431a      	orrs	r2, r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:279
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	795b      	ldrb	r3, [r3, #5]
 8001872:	005b      	lsls	r3, r3, #1
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:276
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001874:	4313      	orrs	r3, r2
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4313      	orrs	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:282
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:285
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:288
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800188e:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:292
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	7d1b      	ldrb	r3, [r3, #20]
 8001894:	3b01      	subs	r3, #1
 8001896:	b2da      	uxtb	r2, r3
 8001898:	7afb      	ldrb	r3, [r7, #11]
 800189a:	4313      	orrs	r3, r2
 800189c:	72fb      	strb	r3, [r7, #11]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:293
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800189e:	7afb      	ldrb	r3, [r7, #11]
 80018a0:	051b      	lsls	r3, r3, #20
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:296
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	62da      	str	r2, [r3, #44]	; 0x2c
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:297
}
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	c0fff7fd 	.word	0xc0fff7fd

080018bc <ADC_CommonInit>:
ADC_CommonInit():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:342
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:343
  uint32_t tmpreg1 = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:351
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <ADC_CommonInit+0x48>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:354
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <ADC_CommonInit+0x4c>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:362
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681a      	ldr	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:363
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:362
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80018de:	431a      	orrs	r2, r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:364
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:363
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80018e4:	431a      	orrs	r2, r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:365
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:362
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80018ea:	4313      	orrs	r3, r2
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:368
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <ADC_CommonInit+0x48>)
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:369
}
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40012300 	.word	0x40012300
 8001908:	fffc30e0 	.word	0xfffc30e0

0800190c <ADC_Cmd>:
ADC_Cmd():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:400
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:404
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d006      	beq.n	800192c <ADC_Cmd+0x20>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:407
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f043 0201 	orr.w	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	e005      	b.n	8001938 <ADC_Cmd+0x2c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:412
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 0201 	bic.w	r2, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:414
  }
}
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop

08001944 <ADC_RegularChannelConfig>:
ADC_RegularChannelConfig():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:716
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	70f9      	strb	r1, [r7, #3]
 800194e:	70ba      	strb	r2, [r7, #2]
 8001950:	707b      	strb	r3, [r7, #1]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:717
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:725
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	2b09      	cmp	r3, #9
 800195e:	d923      	bls.n	80019a8 <ADC_RegularChannelConfig+0x64>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:728
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:731
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	f1a3 020a 	sub.w	r2, r3, #10
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	2207      	movs	r2, #7
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:734
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	43db      	mvns	r3, r3
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	4013      	ands	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:737
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8001984:	7879      	ldrb	r1, [r7, #1]
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	f1a3 020a 	sub.w	r2, r3, #10
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:740
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	4313      	orrs	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:743
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	e01e      	b.n	80019e6 <ADC_RegularChannelConfig+0xa2>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:748
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:751
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	2207      	movs	r2, #7
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:754
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:757
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80019c8:	7879      	ldrb	r1, [r7, #1]
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:760
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	4313      	orrs	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:763
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	611a      	str	r2, [r3, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:766
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80019e6:	78bb      	ldrb	r3, [r7, #2]
 80019e8:	2b06      	cmp	r3, #6
 80019ea:	d821      	bhi.n	8001a30 <ADC_RegularChannelConfig+0xec>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:769
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f0:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:772
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80019f2:	78bb      	ldrb	r3, [r7, #2]
 80019f4:	1e5a      	subs	r2, r3, #1
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	221f      	movs	r2, #31
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:775
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:778
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8001a0e:	78f9      	ldrb	r1, [r7, #3]
 8001a10:	78bb      	ldrb	r3, [r7, #2]
 8001a12:	1e5a      	subs	r2, r3, #1
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:781
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:784
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a2e:	e047      	b.n	8001ac0 <ADC_RegularChannelConfig+0x17c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:787
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8001a30:	78bb      	ldrb	r3, [r7, #2]
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	d821      	bhi.n	8001a7a <ADC_RegularChannelConfig+0x136>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:790
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:793
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8001a3c:	78bb      	ldrb	r3, [r7, #2]
 8001a3e:	1fda      	subs	r2, r3, #7
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	221f      	movs	r2, #31
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:796
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:799
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8001a58:	78f9      	ldrb	r1, [r7, #3]
 8001a5a:	78bb      	ldrb	r3, [r7, #2]
 8001a5c:	1fda      	subs	r2, r3, #7
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:802
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:805
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	631a      	str	r2, [r3, #48]	; 0x30
 8001a78:	e022      	b.n	8001ac0 <ADC_RegularChannelConfig+0x17c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:811
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:814
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8001a80:	78bb      	ldrb	r3, [r7, #2]
 8001a82:	f1a3 020d 	sub.w	r2, r3, #13
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	221f      	movs	r2, #31
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:817
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:820
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8001a9e:	78f9      	ldrb	r1, [r7, #3]
 8001aa0:	78bb      	ldrb	r3, [r7, #2]
 8001aa2:	f1a3 020d 	sub.w	r2, r3, #13
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:823
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:826
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	62da      	str	r2, [r3, #44]	; 0x2c
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:828
  }
}
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop

08001acc <ADC_SoftwareStartConv>:
ADC_SoftwareStartConv():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:836
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:841
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:842
}
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop

08001aec <ADC_DMACmd>:
ADC_DMACmd():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:1053
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:1057
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d006      	beq.n	8001b0c <ADC_DMACmd+0x20>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:1060
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	e005      	b.n	8001b18 <ADC_DMACmd+0x2c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:1065
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:1067
  }
}
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop

08001b24 <ADC_DMARequestAfterLastTransferCmd>:
ADC_DMARequestAfterLastTransferCmd():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:1077
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:1081
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d006      	beq.n	8001b44 <ADC_DMARequestAfterLastTransferCmd+0x20>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:1084
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	e005      	b.n	8001b50 <ADC_DMARequestAfterLastTransferCmd+0x2c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:1089
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_adc.c:1091
  }
}
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop

08001b5c <DMA_Init>:
DMA_Init():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:320
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:321
  uint32_t tmpreg = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:341
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:344

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <DMA_Init+0xa8>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:360
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	431a      	orrs	r2, r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:361
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:360
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001b86:	431a      	orrs	r2, r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:361
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	431a      	orrs	r2, r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:362
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	69db      	ldr	r3, [r3, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:361
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001b92:	431a      	orrs	r2, r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:362
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	431a      	orrs	r2, r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:363
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:362
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001b9e:	431a      	orrs	r2, r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:363
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	431a      	orrs	r2, r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:364
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:363
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001baa:	431a      	orrs	r2, r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:364
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb0:	4313      	orrs	r3, r2
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:360
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:367
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:371

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:374

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f023 0307 	bic.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:379

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:382

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	615a      	str	r2, [r3, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:386

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:390

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:394

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:395
}
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	f01c803f 	.word	0xf01c803f

08001c08 <DMA_Cmd>:
DMA_Cmd():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:479
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:484
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d006      	beq.n	8001c28 <DMA_Cmd+0x20>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:487
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f043 0201 	orr.w	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	e005      	b.n	8001c34 <DMA_Cmd+0x2c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:492
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 0201 	bic.w	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_dma.c:494
  }
}
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop

08001c40 <EXTI_Init>:
EXTI_Init():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:127
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:128
  uint32_t tmp = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:136
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8001c4c:	4b32      	ldr	r3, [pc, #200]	; (8001d18 <EXTI_Init+0xd8>)
 8001c4e:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:138
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	799b      	ldrb	r3, [r3, #6]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d04d      	beq.n	8001cf4 <EXTI_Init+0xb4>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:141
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001c58:	4b2f      	ldr	r3, [pc, #188]	; (8001d18 <EXTI_Init+0xd8>)
 8001c5a:	4a2f      	ldr	r2, [pc, #188]	; (8001d18 <EXTI_Init+0xd8>)
 8001c5c:	6811      	ldr	r1, [r2, #0]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	43d2      	mvns	r2, r2
 8001c64:	400a      	ands	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:142
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001c68:	4b2b      	ldr	r3, [pc, #172]	; (8001d18 <EXTI_Init+0xd8>)
 8001c6a:	4a2b      	ldr	r2, [pc, #172]	; (8001d18 <EXTI_Init+0xd8>)
 8001c6c:	6851      	ldr	r1, [r2, #4]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	43d2      	mvns	r2, r2
 8001c74:	400a      	ands	r2, r1
 8001c76:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:144
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	791b      	ldrb	r3, [r3, #4]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:146

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	6811      	ldr	r1, [r2, #0]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:149

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001c90:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <EXTI_Init+0xd8>)
 8001c92:	4a21      	ldr	r2, [pc, #132]	; (8001d18 <EXTI_Init+0xd8>)
 8001c94:	6891      	ldr	r1, [r2, #8]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	43d2      	mvns	r2, r2
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:150
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <EXTI_Init+0xd8>)
 8001ca2:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <EXTI_Init+0xd8>)
 8001ca4:	68d1      	ldr	r1, [r2, #12]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	43d2      	mvns	r2, r2
 8001cac:	400a      	ands	r2, r1
 8001cae:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:153
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	795b      	ldrb	r3, [r3, #5]
 8001cb4:	2b10      	cmp	r3, #16
 8001cb6:	d10e      	bne.n	8001cd6 <EXTI_Init+0x96>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:156
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8001cb8:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <EXTI_Init+0xd8>)
 8001cba:	4a17      	ldr	r2, [pc, #92]	; (8001d18 <EXTI_Init+0xd8>)
 8001cbc:	6891      	ldr	r1, [r2, #8]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:157
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001cc6:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <EXTI_Init+0xd8>)
 8001cc8:	4a13      	ldr	r2, [pc, #76]	; (8001d18 <EXTI_Init+0xd8>)
 8001cca:	68d1      	ldr	r1, [r2, #12]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	60da      	str	r2, [r3, #12]
 8001cd4:	e01b      	b.n	8001d0e <EXTI_Init+0xce>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:161
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <EXTI_Init+0xd8>)
 8001cd8:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:162
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	795b      	ldrb	r3, [r3, #5]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:164

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	6811      	ldr	r1, [r2, #0]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e00c      	b.n	8001d0e <EXTI_Init+0xce>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:169
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	791b      	ldrb	r3, [r3, #4]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:172

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	6811      	ldr	r1, [r2, #0]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	43d2      	mvns	r2, r2
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:174
  }
}
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	40013c00 	.word	0x40013c00

08001d1c <EXTI_GetITStatus>:
EXTI_GetITStatus():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:265
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:266
  FlagStatus bitstatus = RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:270
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <EXTI_GetITStatus+0x30>)
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <EXTI_GetITStatus+0x1e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:272
  {
    bitstatus = SET;
 8001d34:	2301      	movs	r3, #1
 8001d36:	73fb      	strb	r3, [r7, #15]
 8001d38:	e001      	b.n	8001d3e <EXTI_GetITStatus+0x22>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:276
  }
  else
  {
    bitstatus = RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73fb      	strb	r3, [r7, #15]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:278
  }
  return bitstatus;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:280
  
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	40013c00 	.word	0x40013c00

08001d50 <EXTI_ClearITPendingBit>:
EXTI_ClearITPendingBit():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:289
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:293
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <EXTI_ClearITPendingBit+0x18>)
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	615a      	str	r2, [r3, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_exti.c:294
}
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	40013c00 	.word	0x40013c00

08001d6c <GPIO_Init>:
GPIO_Init():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:203
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:204
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:214
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	e076      	b.n	8001e76 <GPIO_Init+0x10a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:216
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:218
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:220

    if (currentpin == pos)
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d165      	bne.n	8001e70 <GPIO_Init+0x104>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:222
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	2103      	movs	r1, #3
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	401a      	ands	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:223
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	791b      	ldrb	r3, [r3, #4]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:225

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	791b      	ldrb	r3, [r3, #4]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d003      	beq.n	8001de2 <GPIO_Init+0x76>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:225 (discriminator 1)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	791b      	ldrb	r3, [r3, #4]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d12e      	bne.n	8001e40 <GPIO_Init+0xd4>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:231
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2103      	movs	r1, #3
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	401a      	ands	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:232
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	795b      	ldrb	r3, [r3, #5]
 8001e00:	4619      	mov	r1, r3
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:238

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2101      	movs	r1, #1
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	401a      	ands	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:239
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	799b      	ldrb	r3, [r3, #6]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:243
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2103      	movs	r1, #3
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	401a      	ands	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:244
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	79db      	ldrb	r3, [r3, #7]
 8001e60:	4619      	mov	r1, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:214
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	3301      	adds	r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:214 (discriminator 1)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b0f      	cmp	r3, #15
 8001e7a:	d985      	bls.n	8001d88 <GPIO_Init+0x1c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:247
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop

08001e88 <GPIO_SetBits>:
GPIO_SetBits():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:413
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:418
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	831a      	strh	r2, [r3, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:419
}
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <GPIO_ResetBits>:
GPIO_ResetBits():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:434
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	807b      	strh	r3, [r7, #2]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:439
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	835a      	strh	r2, [r3, #26]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:440
}
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <GPIO_WriteBit>:
GPIO_WriteBit():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:456
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	460a      	mov	r2, r1
 8001ecc:	807a      	strh	r2, [r7, #2]
 8001ece:	707b      	strb	r3, [r7, #1]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:462
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001ed0:	787b      	ldrb	r3, [r7, #1]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <GPIO_WriteBit+0x1e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:464
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	887a      	ldrh	r2, [r7, #2]
 8001eda:	831a      	strh	r2, [r3, #24]
 8001edc:	e002      	b.n	8001ee4 <GPIO_WriteBit+0x24>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:468
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	887a      	ldrh	r2, [r7, #2]
 8001ee2:	835a      	strh	r2, [r3, #26]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:470
  }
}
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop

08001ef0 <GPIO_ToggleBits>:
GPIO_ToggleBits():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:497
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:501
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	887b      	ldrh	r3, [r7, #2]
 8001f02:	405a      	eors	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	615a      	str	r2, [r3, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:502
}
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop

08001f14 <GPIO_PinAFConfig>:
GPIO_PinAFConfig():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:580
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	460a      	mov	r2, r1
 8001f20:	807a      	strh	r2, [r7, #2]
 8001f22:	707b      	strb	r3, [r7, #1]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:581
  uint32_t temp = 0x00;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:582
  uint32_t temp_2 = 0x00;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:589
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001f2c:	787a      	ldrb	r2, [r7, #1]
 8001f2e:	887b      	ldrh	r3, [r7, #2]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:590
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	08db      	lsrs	r3, r3, #3
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	887b      	ldrh	r3, [r7, #2]
 8001f46:	08db      	lsrs	r3, r3, #3
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3108      	adds	r1, #8
 8001f50:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001f54:	887b      	ldrh	r3, [r7, #2]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	200f      	movs	r0, #15
 8001f5e:	fa00 f303 	lsl.w	r3, r0, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	4019      	ands	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:591
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	08db      	lsrs	r3, r3, #3
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:592
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001f84:	887b      	ldrh	r3, [r7, #2]
 8001f86:	08db      	lsrs	r3, r3, #3
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3208      	adds	r2, #8
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_gpio.c:593
}
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <RCC_GetClocksFreq>:
RCC_GetClocksFreq():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1032
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1033
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1036

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001fc0:	4b48      	ldr	r3, [pc, #288]	; (80020e4 <RCC_GetClocksFreq+0x144>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 030c 	and.w	r3, r3, #12
 8001fc8:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1038

  switch (tmp)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d007      	beq.n	8001fe0 <RCC_GetClocksFreq+0x40>
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d009      	beq.n	8001fe8 <RCC_GetClocksFreq+0x48>
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d13f      	bne.n	8002058 <RCC_GetClocksFreq+0xb8>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1041
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a43      	ldr	r2, [pc, #268]	; (80020e8 <RCC_GetClocksFreq+0x148>)
 8001fdc:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1042
      break;
 8001fde:	e03f      	b.n	8002060 <RCC_GetClocksFreq+0xc0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1044
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a42      	ldr	r2, [pc, #264]	; (80020ec <RCC_GetClocksFreq+0x14c>)
 8001fe4:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1045
      break;
 8001fe6:	e03b      	b.n	8002060 <RCC_GetClocksFreq+0xc0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1051
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001fe8:	4b3e      	ldr	r3, [pc, #248]	; (80020e4 <RCC_GetClocksFreq+0x144>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff0:	0d9b      	lsrs	r3, r3, #22
 8001ff2:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1052
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff4:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <RCC_GetClocksFreq+0x144>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ffc:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1054
      
      if (pllsource != 0)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00d      	beq.n	8002020 <RCC_GetClocksFreq+0x80>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1057
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002004:	4a39      	ldr	r2, [pc, #228]	; (80020ec <RCC_GetClocksFreq+0x14c>)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	fbb2 f2f3 	udiv	r2, r2, r3
 800200c:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <RCC_GetClocksFreq+0x144>)
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002014:	400b      	ands	r3, r1
 8002016:	099b      	lsrs	r3, r3, #6
 8002018:	fb03 f302 	mul.w	r3, r3, r2
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	e00c      	b.n	800203a <RCC_GetClocksFreq+0x9a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1062
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002020:	4a31      	ldr	r2, [pc, #196]	; (80020e8 <RCC_GetClocksFreq+0x148>)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	fbb2 f2f3 	udiv	r2, r2, r3
 8002028:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <RCC_GetClocksFreq+0x144>)
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002030:	400b      	ands	r3, r1
 8002032:	099b      	lsrs	r3, r3, #6
 8002034:	fb03 f302 	mul.w	r3, r3, r2
 8002038:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1065
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800203a:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <RCC_GetClocksFreq+0x144>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002042:	0c1b      	lsrs	r3, r3, #16
 8002044:	3301      	adds	r3, #1
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1066
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1067
      break;
 8002056:	e003      	b.n	8002060 <RCC_GetClocksFreq+0xc0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1069
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a23      	ldr	r2, [pc, #140]	; (80020e8 <RCC_GetClocksFreq+0x148>)
 800205c:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1070
      break;
 800205e:	bf00      	nop
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1075
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8002060:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <RCC_GetClocksFreq+0x144>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002068:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1076
  tmp = tmp >> 4;
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1077
  presc = APBAHBPrescTable[tmp];
 8002070:	4a1f      	ldr	r2, [pc, #124]	; (80020f0 <RCC_GetClocksFreq+0x150>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	4413      	add	r3, r2
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1079
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	40da      	lsrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1082

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8002088:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <RCC_GetClocksFreq+0x144>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002090:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1083
  tmp = tmp >> 10;
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	0a9b      	lsrs	r3, r3, #10
 8002096:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1084
  presc = APBAHBPrescTable[tmp];
 8002098:	4a15      	ldr	r2, [pc, #84]	; (80020f0 <RCC_GetClocksFreq+0x150>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4413      	add	r3, r2
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1086
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	40da      	lsrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1089

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <RCC_GetClocksFreq+0x144>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80020b8:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1090
  tmp = tmp >> 13;
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	0b5b      	lsrs	r3, r3, #13
 80020be:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1091
  presc = APBAHBPrescTable[tmp];
 80020c0:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <RCC_GetClocksFreq+0x150>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	4413      	add	r3, r2
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1093
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	40da      	lsrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1094
}
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800
 80020e8:	00f42400 	.word	0x00f42400
 80020ec:	007a1200 	.word	0x007a1200
 80020f0:	20000000 	.word	0x20000000

080020f4 <RCC_AHB1PeriphClockCmd>:
RCC_AHB1PeriphClockCmd():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1461
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1466
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d006      	beq.n	8002114 <RCC_AHB1PeriphClockCmd+0x20>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1468
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <RCC_AHB1PeriphClockCmd+0x38>)
 8002108:	4a08      	ldr	r2, [pc, #32]	; (800212c <RCC_AHB1PeriphClockCmd+0x38>)
 800210a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	430a      	orrs	r2, r1
 8002110:	631a      	str	r2, [r3, #48]	; 0x30
 8002112:	e006      	b.n	8002122 <RCC_AHB1PeriphClockCmd+0x2e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1472
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <RCC_AHB1PeriphClockCmd+0x38>)
 8002116:	4a05      	ldr	r2, [pc, #20]	; (800212c <RCC_AHB1PeriphClockCmd+0x38>)
 8002118:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	43d2      	mvns	r2, r2
 800211e:	400a      	ands	r2, r1
 8002120:	631a      	str	r2, [r3, #48]	; 0x30
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1474
  }
}
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	40023800 	.word	0x40023800

08002130 <RCC_APB1PeriphClockCmd>:
RCC_APB1PeriphClockCmd():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1573
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1578
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d006      	beq.n	8002150 <RCC_APB1PeriphClockCmd+0x20>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1580
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <RCC_APB1PeriphClockCmd+0x38>)
 8002144:	4a08      	ldr	r2, [pc, #32]	; (8002168 <RCC_APB1PeriphClockCmd+0x38>)
 8002146:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	430a      	orrs	r2, r1
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
 800214e:	e006      	b.n	800215e <RCC_APB1PeriphClockCmd+0x2e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1584
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <RCC_APB1PeriphClockCmd+0x38>)
 8002152:	4a05      	ldr	r2, [pc, #20]	; (8002168 <RCC_APB1PeriphClockCmd+0x38>)
 8002154:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	43d2      	mvns	r2, r2
 800215a:	400a      	ands	r2, r1
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1586
  }
}
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40023800 	.word	0x40023800

0800216c <RCC_APB2PeriphClockCmd>:
RCC_APB2PeriphClockCmd():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1618
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1623
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d006      	beq.n	800218c <RCC_APB2PeriphClockCmd+0x20>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1625
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <RCC_APB2PeriphClockCmd+0x38>)
 8002180:	4a08      	ldr	r2, [pc, #32]	; (80021a4 <RCC_APB2PeriphClockCmd+0x38>)
 8002182:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	430a      	orrs	r2, r1
 8002188:	645a      	str	r2, [r3, #68]	; 0x44
 800218a:	e006      	b.n	800219a <RCC_APB2PeriphClockCmd+0x2e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1629
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <RCC_APB2PeriphClockCmd+0x38>)
 800218e:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <RCC_APB2PeriphClockCmd+0x38>)
 8002190:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	43d2      	mvns	r2, r2
 8002196:	400a      	ands	r2, r1
 8002198:	645a      	str	r2, [r3, #68]	; 0x44
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_rcc.c:1631
  }
}
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	40023800 	.word	0x40023800

080021a8 <SYSCFG_EXTILineConfig>:
SYSCFG_EXTILineConfig():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_syscfg.c:163
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80021a8:	b490      	push	{r4, r7}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	71fa      	strb	r2, [r7, #7]
 80021b4:	71bb      	strb	r3, [r7, #6]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_syscfg.c:164
  uint32_t tmp = 0x00;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_syscfg.c:170

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80021ba:	79bb      	ldrb	r3, [r7, #6]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_syscfg.c:171
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <SYSCFG_EXTILineConfig+0x78>)
 80021cc:	79ba      	ldrb	r2, [r7, #6]
 80021ce:	0892      	lsrs	r2, r2, #2
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	4913      	ldr	r1, [pc, #76]	; (8002220 <SYSCFG_EXTILineConfig+0x78>)
 80021d4:	79b8      	ldrb	r0, [r7, #6]
 80021d6:	0880      	lsrs	r0, r0, #2
 80021d8:	b2c0      	uxtb	r0, r0
 80021da:	3002      	adds	r0, #2
 80021dc:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80021e0:	68f9      	ldr	r1, [r7, #12]
 80021e2:	43c9      	mvns	r1, r1
 80021e4:	4001      	ands	r1, r0
 80021e6:	3202      	adds	r2, #2
 80021e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_syscfg.c:172
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <SYSCFG_EXTILineConfig+0x78>)
 80021ee:	79ba      	ldrb	r2, [r7, #6]
 80021f0:	0892      	lsrs	r2, r2, #2
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	490a      	ldr	r1, [pc, #40]	; (8002220 <SYSCFG_EXTILineConfig+0x78>)
 80021f6:	79b8      	ldrb	r0, [r7, #6]
 80021f8:	0880      	lsrs	r0, r0, #2
 80021fa:	b2c0      	uxtb	r0, r0
 80021fc:	3002      	adds	r0, #2
 80021fe:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8002202:	79fc      	ldrb	r4, [r7, #7]
 8002204:	79b9      	ldrb	r1, [r7, #6]
 8002206:	f001 0103 	and.w	r1, r1, #3
 800220a:	0089      	lsls	r1, r1, #2
 800220c:	fa04 f101 	lsl.w	r1, r4, r1
 8002210:	4301      	orrs	r1, r0
 8002212:	3202      	adds	r2, #2
 8002214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_syscfg.c:173
}
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bc90      	pop	{r4, r7}
 800221e:	4770      	bx	lr
 8002220:	40013800 	.word	0x40013800

08002224 <TIM_TimeBaseInit>:
TIM_TimeBaseInit():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:289
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:290
  uint16_t tmpcr1 = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	81fb      	strh	r3, [r7, #14]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:297
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	81fb      	strh	r3, [r7, #14]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:299

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4b28      	ldr	r3, [pc, #160]	; (80022dc <TIM_TimeBaseInit+0xb8>)
 800223c:	429a      	cmp	r2, r3
 800223e:	d013      	beq.n	8002268 <TIM_TimeBaseInit+0x44>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:299 (discriminator 1)
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <TIM_TimeBaseInit+0xbc>)
 8002244:	429a      	cmp	r2, r3
 8002246:	d00f      	beq.n	8002268 <TIM_TimeBaseInit+0x44>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224e:	d00b      	beq.n	8002268 <TIM_TimeBaseInit+0x44>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:300
     (TIMx == TIM2) || (TIMx == TIM3)||
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <TIM_TimeBaseInit+0xc0>)
 8002254:	429a      	cmp	r2, r3
 8002256:	d007      	beq.n	8002268 <TIM_TimeBaseInit+0x44>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:300 (discriminator 1)
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <TIM_TimeBaseInit+0xc4>)
 800225c:	429a      	cmp	r2, r3
 800225e:	d003      	beq.n	8002268 <TIM_TimeBaseInit+0x44>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:301
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	4b22      	ldr	r3, [pc, #136]	; (80022ec <TIM_TimeBaseInit+0xc8>)
 8002264:	429a      	cmp	r2, r3
 8002266:	d108      	bne.n	800227a <TIM_TimeBaseInit+0x56>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:304
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002268:	89fb      	ldrh	r3, [r7, #14]
 800226a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226e:	81fb      	strh	r3, [r7, #14]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:305
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	885a      	ldrh	r2, [r3, #2]
 8002274:	89fb      	ldrh	r3, [r7, #14]
 8002276:	4313      	orrs	r3, r2
 8002278:	81fb      	strh	r3, [r7, #14]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:308
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <TIM_TimeBaseInit+0xcc>)
 800227e:	429a      	cmp	r2, r3
 8002280:	d00c      	beq.n	800229c <TIM_TimeBaseInit+0x78>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:308 (discriminator 1)
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <TIM_TimeBaseInit+0xd0>)
 8002286:	429a      	cmp	r2, r3
 8002288:	d008      	beq.n	800229c <TIM_TimeBaseInit+0x78>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:311
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800228a:	89fb      	ldrh	r3, [r7, #14]
 800228c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002290:	81fb      	strh	r3, [r7, #14]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:312
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	891a      	ldrh	r2, [r3, #8]
 8002296:	89fb      	ldrh	r3, [r7, #14]
 8002298:	4313      	orrs	r3, r2
 800229a:	81fb      	strh	r3, [r7, #14]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:315
  }

  TIMx->CR1 = tmpcr1;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	89fa      	ldrh	r2, [r7, #14]
 80022a0:	801a      	strh	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:318

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	62da      	str	r2, [r3, #44]	; 0x2c
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:321
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	881a      	ldrh	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	851a      	strh	r2, [r3, #40]	; 0x28
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:323
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <TIM_TimeBaseInit+0xb8>)
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d003      	beq.n	80022c2 <TIM_TimeBaseInit+0x9e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:323 (discriminator 1)
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <TIM_TimeBaseInit+0xbc>)
 80022be:	429a      	cmp	r2, r3
 80022c0:	d104      	bne.n	80022cc <TIM_TimeBaseInit+0xa8>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:326
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	7a9b      	ldrb	r3, [r3, #10]
 80022c6:	461a      	mov	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	861a      	strh	r2, [r3, #48]	; 0x30
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:331
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	829a      	strh	r2, [r3, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:332
}
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	40010000 	.word	0x40010000
 80022e0:	40010400 	.word	0x40010400
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40000800 	.word	0x40000800
 80022ec:	40000c00 	.word	0x40000c00
 80022f0:	40001000 	.word	0x40001000
 80022f4:	40001400 	.word	0x40001400

080022f8 <TIM_Cmd>:
TIM_Cmd():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:593
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:598
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d008      	beq.n	800231c <TIM_Cmd+0x24>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:601
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	801a      	strh	r2, [r3, #0]
 800231a:	e007      	b.n	800232c <TIM_Cmd+0x34>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:606
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	b29b      	uxth	r3, r3
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	801a      	strh	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_tim.c:608
  }
}
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop

08002338 <USART_Init>:
USART_Init():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:247
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:248
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
 8002346:	2300      	movs	r3, #0
 8002348:	623b      	str	r3, [r7, #32]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:249
  uint32_t integerdivider = 0x00;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:250
  uint32_t fractionaldivider = 0x00;
 800234e:	2300      	movs	r3, #0
 8002350:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:269
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	8a1b      	ldrh	r3, [r3, #16]
 8002356:	b29b      	uxth	r3, r3
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:272

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:276

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	88db      	ldrh	r3, [r3, #6]
 8002366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002368:	4313      	orrs	r3, r2
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:279
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	b29a      	uxth	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	821a      	strh	r2, [r3, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:282

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	899b      	ldrh	r3, [r3, #12]
 8002378:	b29b      	uxth	r3, r3
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:285

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002382:	f023 030c 	bic.w	r3, r3, #12
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:291

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	889a      	ldrh	r2, [r3, #4]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	891b      	ldrh	r3, [r3, #8]
 8002390:	4313      	orrs	r3, r2
 8002392:	b29a      	uxth	r2, r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:292
            USART_InitStruct->USART_Mode;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	895b      	ldrh	r3, [r3, #10]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:291

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002398:	4313      	orrs	r3, r2
 800239a:	b29b      	uxth	r3, r3
 800239c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239e:	4313      	orrs	r3, r2
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:295
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	819a      	strh	r2, [r3, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:298

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	8a9b      	ldrh	r3, [r3, #20]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:301

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:305

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	899b      	ldrh	r3, [r3, #12]
 80023be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c0:	4313      	orrs	r3, r2
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:308

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	829a      	strh	r2, [r3, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:312

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80023cc:	f107 0308 	add.w	r3, r7, #8
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fde5 	bl	8001fa0 <RCC_GetClocksFreq>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:314

  if ((USARTx == USART1) || (USARTx == USART6))
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <USART_Init+0x168>)
 80023da:	429a      	cmp	r2, r3
 80023dc:	d003      	beq.n	80023e6 <USART_Init+0xae>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:314 (discriminator 1)
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	4b30      	ldr	r3, [pc, #192]	; (80024a4 <USART_Init+0x16c>)
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d102      	bne.n	80023ec <USART_Init+0xb4>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:316
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	623b      	str	r3, [r7, #32]
 80023ea:	e001      	b.n	80023f0 <USART_Init+0xb8>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:320
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	623b      	str	r3, [r7, #32]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:324
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	899b      	ldrh	r3, [r3, #12]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	b21b      	sxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	da0c      	bge.n	8002418 <USART_Init+0xe0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:327
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80023fe:	6a3a      	ldr	r2, [r7, #32]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	009a      	lsls	r2, r3, #2
 8002408:	441a      	add	r2, r3
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	fbb2 f3f3 	udiv	r3, r2, r3
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	e00b      	b.n	8002430 <USART_Init+0xf8>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:332
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002418:	6a3a      	ldr	r2, [r7, #32]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	009a      	lsls	r2, r3, #2
 8002422:	441a      	add	r2, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	fbb2 f3f3 	udiv	r3, r2, r3
 800242e:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:334
  }
  tmpreg = (integerdivider / 100) << 4;
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <USART_Init+0x170>)
 8002434:	fba3 1302 	umull	r1, r3, r3, r2
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:337

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	2264      	movs	r2, #100	; 0x64
 8002444:	fb02 f303 	mul.w	r3, r2, r3
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:340

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	899b      	ldrh	r3, [r3, #12]
 8002452:	b29b      	uxth	r3, r3
 8002454:	b29b      	uxth	r3, r3
 8002456:	b21b      	sxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	da0d      	bge.n	8002478 <USART_Init+0x140>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:342
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002464:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <USART_Init+0x170>)
 8002466:	fba3 1302 	umull	r1, r3, r3, r2
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002472:	4313      	orrs	r3, r2
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
 8002476:	e00c      	b.n	8002492 <USART_Init+0x15a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:346
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <USART_Init+0x170>)
 8002482:	fba3 1302 	umull	r1, r3, r3, r2
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248e:	4313      	orrs	r3, r2
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:350
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	b29a      	uxth	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	811a      	strh	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:351
}
 800249a:	3728      	adds	r7, #40	; 0x28
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40011000 	.word	0x40011000
 80024a4:	40011400 	.word	0x40011400
 80024a8:	51eb851f 	.word	0x51eb851f

080024ac <USART_Cmd>:
USART_Cmd():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:428
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:433
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d008      	beq.n	80024d0 <USART_Cmd+0x24>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:436
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	899b      	ldrh	r3, [r3, #12]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	819a      	strh	r2, [r3, #12]
 80024ce:	e007      	b.n	80024e0 <USART_Cmd+0x34>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:441
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	899b      	ldrh	r3, [r3, #12]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024da:	b29a      	uxth	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	819a      	strh	r2, [r3, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:443
  }
}
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop

080024ec <USART_SendData>:
USART_SendData():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:558
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	807b      	strh	r3, [r7, #2]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:564
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024fe:	b29a      	uxth	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	809a      	strh	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:565
}
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop

08002510 <USART_ITConfig>:
USART_ITConfig():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1232
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	460a      	mov	r2, r1
 800251c:	807a      	strh	r2, [r7, #2]
 800251e:	707b      	strb	r3, [r7, #1]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1233
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1234
  uint32_t usartxbase = 0x00;
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1246
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1249

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002534:	887b      	ldrh	r3, [r7, #2]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	095b      	lsrs	r3, r3, #5
 800253a:	b2db      	uxtb	r3, r3
 800253c:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1252

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800253e:	887b      	ldrh	r3, [r7, #2]
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1253
  itmask = (((uint32_t)0x01) << itpos);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2201      	movs	r2, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1255
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d103      	bne.n	800255e <USART_ITConfig+0x4e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1257
  {
    usartxbase += 0x0C;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	330c      	adds	r3, #12
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	e009      	b.n	8002572 <USART_ITConfig+0x62>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1259
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b02      	cmp	r3, #2
 8002562:	d103      	bne.n	800256c <USART_ITConfig+0x5c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1261
  {
    usartxbase += 0x10;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	3310      	adds	r3, #16
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	e002      	b.n	8002572 <USART_ITConfig+0x62>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1265
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	3314      	adds	r3, #20
 8002570:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1267
  }
  if (NewState != DISABLE)
 8002572:	787b      	ldrb	r3, [r7, #1]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d006      	beq.n	8002586 <USART_ITConfig+0x76>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1269
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	6811      	ldr	r1, [r2, #0]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e006      	b.n	8002594 <USART_ITConfig+0x84>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1273
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	6811      	ldr	r1, [r2, #0]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	43d2      	mvns	r2, r2
 8002590:	400a      	ands	r2, r1
 8002592:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1275
  }
}
 8002594:	371c      	adds	r7, #28
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop

080025a0 <USART_GetITStatus>:
USART_GetITStatus():
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1379
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	807b      	strh	r3, [r7, #2]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1380
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	2300      	movs	r3, #0
 80025b6:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1381
  ITStatus bitstatus = RESET;
 80025b8:	2300      	movs	r3, #0
 80025ba:	74fb      	strb	r3, [r7, #19]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1393
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80025bc:	887b      	ldrh	r3, [r7, #2]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1395
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1396
  itmask = (uint32_t)0x01 << itmask;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2201      	movs	r2, #1
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1398
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d106      	bne.n	80025ec <USART_GetITStatus+0x4c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1400
  {
    itmask &= USARTx->CR1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	899b      	ldrh	r3, [r3, #12]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4013      	ands	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	e00f      	b.n	800260c <USART_GetITStatus+0x6c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1402
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d106      	bne.n	8002600 <USART_GetITStatus+0x60>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1404
  {
    itmask &= USARTx->CR2;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	8a1b      	ldrh	r3, [r3, #16]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	4013      	ands	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	e005      	b.n	800260c <USART_GetITStatus+0x6c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1408
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	8a9b      	ldrh	r3, [r3, #20]
 8002604:	b29b      	uxth	r3, r3
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4013      	ands	r3, r2
 800260a:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1411
  }
  
  bitpos = USART_IT >> 0x08;
 800260c:	887b      	ldrh	r3, [r7, #2]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	b29b      	uxth	r3, r3
 8002612:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1412
  bitpos = (uint32_t)0x01 << bitpos;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1413
  bitpos &= USARTx->SR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	b29b      	uxth	r3, r3
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4013      	ands	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1414
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <USART_GetITStatus+0x9c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1414 (discriminator 1)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <USART_GetITStatus+0x9c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1416
  {
    bitstatus = SET;
 8002636:	2301      	movs	r3, #1
 8002638:	74fb      	strb	r3, [r7, #19]
 800263a:	e001      	b.n	8002640 <USART_GetITStatus+0xa0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1420
  }
  else
  {
    bitstatus = RESET;
 800263c:	2300      	movs	r3, #0
 800263e:	74fb      	strb	r3, [r7, #19]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1423
  }
  
  return bitstatus;  
 8002640:	7cfb      	ldrb	r3, [r7, #19]
/home/chansak/workspace/Project_v2.0/Debug/../libs/StdPeriph/src/stm32f4xx_usart.c:1424
}
 8002642:	4618      	mov	r0, r3
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop

08002650 <vListInitialise>:
vListInitialise():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:76
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:80
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f103 0208 	add.w	r2, r3, #8
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:84

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f04f 32ff 	mov.w	r2, #4294967295
 8002668:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:88

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f103 0208 	add.w	r2, r3, #8
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:89
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f103 0208 	add.w	r2, r3, #8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	611a      	str	r2, [r3, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:91

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:92
}
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop

08002690 <vListInitialiseItem>:
vListInitialiseItem():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:96
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:98
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:99
}
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <vListInsertEnd>:
vListInsertEnd():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:103
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:104
ListItem_t * const pxIndex = pxList->pxIndex;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:109

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:110
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:111
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:112
	pxIndex->pxPrevious = pxNewListItem;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:115

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	611a      	str	r2, [r3, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:117

	( pxList->uxNumberOfItems )++;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:118
}
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop

080026f0 <vListInsert>:
vListInsert():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:122
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:124
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:135
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002706:	d103      	bne.n	8002710 <vListInsert+0x20>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:137
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	e00c      	b.n	800272a <vListInsert+0x3a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:159
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3308      	adds	r3, #8
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	e002      	b.n	800271e <vListInsert+0x2e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:159 (discriminator 2)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:159 (discriminator 1)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	429a      	cmp	r2, r3
 8002728:	d9f6      	bls.n	8002718 <vListInsert+0x28>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:166
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:167
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:168
	pxNewListItem->pxPrevious = pxIterator;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:169
	pxIterator->pxNext = pxNewListItem;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:173

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	611a      	str	r2, [r3, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:175

	( pxList->uxNumberOfItems )++;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:176
}
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <uxListRemove>:
uxListRemove():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:180
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:183
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:185

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6892      	ldr	r2, [r2, #8]
 8002776:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:186
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6852      	ldr	r2, [r2, #4]
 8002780:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:189

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	429a      	cmp	r2, r3
 800278a:	d103      	bne.n	8002794 <uxListRemove+0x34>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:191
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:198
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:199
	( pxList->uxNumberOfItems )--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	1e5a      	subs	r2, r3, #1
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:201

	return pxList->uxNumberOfItems;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/list.c:202
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <xQueueGenericReset>:
xQueueGenericReset():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:246
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:247
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:249

	configASSERT( pxQueue );
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d102      	bne.n	80027ce <xQueueGenericReset+0x1a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:249 (discriminator 1)
 80027c8:	f001 ff5e 	bl	8004688 <ulPortSetInterruptMask>
 80027cc:	e7fe      	b.n	80027cc <xQueueGenericReset+0x18>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:251

	taskENTER_CRITICAL();
 80027ce:	f001 ff33 	bl	8004638 <vPortEnterCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:253
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	68f9      	ldr	r1, [r7, #12]
 80027dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	441a      	add	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:254
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	639a      	str	r2, [r3, #56]	; 0x38
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:255
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:256
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	3b01      	subs	r3, #1
 8002800:	68f9      	ldr	r1, [r7, #12]
 8002802:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	441a      	add	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:257
		pxQueue->xRxLock = queueUNLOCKED;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f04f 32ff 	mov.w	r2, #4294967295
 8002814:	645a      	str	r2, [r3, #68]	; 0x44
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:258
		pxQueue->xTxLock = queueUNLOCKED;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f04f 32ff 	mov.w	r2, #4294967295
 800281c:	649a      	str	r2, [r3, #72]	; 0x48
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:260

		if( xNewQueue == pdFALSE )
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10e      	bne.n	8002842 <xQueueGenericReset+0x8e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:267
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d014      	beq.n	8002856 <xQueueGenericReset+0xa2>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:269
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	3310      	adds	r3, #16
 8002830:	4618      	mov	r0, r3
 8002832:	f000 ffa3 	bl	800377c <xTaskRemoveFromEventList>
 8002836:	4603      	mov	r3, r0
 8002838:	2b01      	cmp	r3, #1
 800283a:	d10c      	bne.n	8002856 <xQueueGenericReset+0xa2>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:271
				{
					queueYIELD_IF_USING_PREEMPTION();
 800283c:	f001 feec 	bl	8004618 <vPortYield>
 8002840:	e009      	b.n	8002856 <xQueueGenericReset+0xa2>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:286
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	3310      	adds	r3, #16
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff02 	bl	8002650 <vListInitialise>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:287
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3324      	adds	r3, #36	; 0x24
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fefd 	bl	8002650 <vListInitialise>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:290
		}
	}
	taskEXIT_CRITICAL();
 8002856:	f001 feff 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:294

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800285a:	2301      	movs	r3, #1
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:295
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <xQueueGenericCreate>:
xQueueGenericCreate():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:299
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	4613      	mov	r3, r2
 8002870:	71fb      	strb	r3, [r7, #7]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:302
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:309
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d02a      	beq.n	80028d2 <xQueueGenericCreate+0x6e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:311
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 800287c:	2054      	movs	r0, #84	; 0x54
 800287e:	f001 fd11 	bl	80042a4 <pvPortMalloc>
 8002882:	61b8      	str	r0, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:312
		if( pxNewQueue != NULL )
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d023      	beq.n	80028d2 <xQueueGenericCreate+0x6e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:316
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	3301      	adds	r3, #1
 8002894:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:318

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
 8002896:	6978      	ldr	r0, [r7, #20]
 8002898:	f001 fd04 	bl	80042a4 <pvPortMalloc>
 800289c:	4602      	mov	r2, r0
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:319
			if( pxNewQueue->pcHead != NULL )
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d010      	beq.n	80028cc <xQueueGenericCreate+0x68>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:323
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	63da      	str	r2, [r3, #60]	; 0x3c
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:324
				pxNewQueue->uxItemSize = uxItemSize;
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:325
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028b6:	69b8      	ldr	r0, [r7, #24]
 80028b8:	2101      	movs	r1, #1
 80028ba:	f7ff ff7b 	bl	80027b4 <xQueueGenericReset>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:329

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	79fa      	ldrb	r2, [r7, #7]
 80028c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:340
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	e002      	b.n	80028d2 <xQueueGenericCreate+0x6e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:345
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 80028cc:	69b8      	ldr	r0, [r7, #24]
 80028ce:	f001 fd7b 	bl	80043c8 <vPortFree>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:358
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d102      	bne.n	80028de <xQueueGenericCreate+0x7a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:358 (discriminator 1)
 80028d8:	f001 fed6 	bl	8004688 <ulPortSetInterruptMask>
 80028dc:	e7fe      	b.n	80028dc <xQueueGenericCreate+0x78>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:360

	return xReturn;
 80028de:	69fb      	ldr	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:361
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3720      	adds	r7, #32
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <xQueueGenericSend>:
xQueueGenericSend():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:584

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b088      	sub	sp, #32
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:585
BaseType_t xEntryTimeSet = pdFALSE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:587
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:589

	configASSERT( pxQueue );
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d102      	bne.n	800290a <xQueueGenericSend+0x22>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:589 (discriminator 1)
 8002904:	f001 fec0 	bl	8004688 <ulPortSetInterruptMask>
 8002908:	e7fe      	b.n	8002908 <xQueueGenericSend+0x20>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:590
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d103      	bne.n	8002918 <xQueueGenericSend+0x30>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:590 (discriminator 2)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <xQueueGenericSend+0x34>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:590 (discriminator 1)
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <xQueueGenericSend+0x36>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:590 (discriminator 3)
 800291c:	2300      	movs	r3, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:590 (discriminator 4)
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <xQueueGenericSend+0x40>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:590 (discriminator 1)
 8002922:	f001 feb1 	bl	8004688 <ulPortSetInterruptMask>
 8002926:	e7fe      	b.n	8002926 <xQueueGenericSend+0x3e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:591
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d103      	bne.n	8002936 <xQueueGenericSend+0x4e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:591 (discriminator 2)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <xQueueGenericSend+0x52>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:591 (discriminator 1)
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <xQueueGenericSend+0x54>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:591 (discriminator 3)
 800293a:	2300      	movs	r3, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:591 (discriminator 4)
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <xQueueGenericSend+0x5e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:591 (discriminator 1)
 8002940:	f001 fea2 	bl	8004688 <ulPortSetInterruptMask>
 8002944:	e7fe      	b.n	8002944 <xQueueGenericSend+0x5c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:594
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002946:	f001 f967 	bl	8003c18 <xTaskGetSchedulerState>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d102      	bne.n	8002956 <xQueueGenericSend+0x6e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:594 (discriminator 2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <xQueueGenericSend+0x72>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:594 (discriminator 1)
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <xQueueGenericSend+0x74>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:594 (discriminator 3)
 800295a:	2300      	movs	r3, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:594 (discriminator 4)
 800295c:	2b00      	cmp	r3, #0
 800295e:	d102      	bne.n	8002966 <xQueueGenericSend+0x7e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:594 (discriminator 1)
 8002960:	f001 fe92 	bl	8004688 <ulPortSetInterruptMask>
 8002964:	e7fe      	b.n	8002964 <xQueueGenericSend+0x7c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:604
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002966:	f001 fe67 	bl	8004638 <vPortEnterCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:610
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002972:	429a      	cmp	r2, r3
 8002974:	d302      	bcc.n	800297c <xQueueGenericSend+0x94>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:610 (discriminator 1)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d116      	bne.n	80029aa <xQueueGenericSend+0xc2>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:613
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800297c:	69b8      	ldr	r0, [r7, #24]
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	f000 f9b9 	bl	8002cf8 <prvCopyDataToQueue>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:660
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <xQueueGenericSend+0xba>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:662
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	3324      	adds	r3, #36	; 0x24
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fef2 	bl	800377c <xTaskRemoveFromEventList>
 8002998:	4603      	mov	r3, r0
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <xQueueGenericSend+0xba>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:668
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800299e:	f001 fe3b 	bl	8004618 <vPortYield>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:682
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80029a2:	f001 fe59 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:686

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e059      	b.n	8002a5e <xQueueGenericSend+0x176>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:690
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d103      	bne.n	80029b8 <xQueueGenericSend+0xd0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:694
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029b0:	f001 fe52 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:699

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	e052      	b.n	8002a5e <xQueueGenericSend+0x176>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:701
				}
				else if( xEntryTimeSet == pdFALSE )
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <xQueueGenericSend+0xe4>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:705
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80029be:	f107 0310 	add.w	r3, r7, #16
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 ff36 	bl	8003834 <vTaskSetTimeOutState>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:706
					xEntryTimeSet = pdTRUE;
 80029c8:	2301      	movs	r3, #1
 80029ca:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:715
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029cc:	f001 fe44 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:720

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029d0:	f000 fc9e 	bl	8003310 <vTaskSuspendAll>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:721
		prvLockQueue( pxQueue );
 80029d4:	f001 fe30 	bl	8004638 <vPortEnterCritical>
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e0:	d102      	bne.n	80029e8 <xQueueGenericSend+0x100>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:721 (discriminator 1)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2200      	movs	r2, #0
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:721 (discriminator 2)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d102      	bne.n	80029f8 <xQueueGenericSend+0x110>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:721 (discriminator 1)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	2200      	movs	r2, #0
 80029f6:	649a      	str	r2, [r3, #72]	; 0x48
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:721 (discriminator 2)
 80029f8:	f001 fe2e 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:724 (discriminator 2)

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029fc:	f107 0210 	add.w	r2, r7, #16
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	f000 ff2f 	bl	8003868 <xTaskCheckForTimeOut>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d11e      	bne.n	8002a4e <xQueueGenericSend+0x166>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:726
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a10:	69b8      	ldr	r0, [r7, #24]
 8002a12:	f000 fa61 	bl	8002ed8 <prvIsQueueFull>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d012      	beq.n	8002a42 <xQueueGenericSend+0x15a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:729
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f103 0210 	add.w	r2, r3, #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	f000 fe4a 	bl	80036c0 <vTaskPlaceOnEventList>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:736
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a2c:	69b8      	ldr	r0, [r7, #24]
 8002a2e:	f000 f9f1 	bl	8002e14 <prvUnlockQueue>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:743
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a32:	f000 fc7b 	bl	800332c <xTaskResumeAll>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10f      	bne.n	8002a5c <xQueueGenericSend+0x174>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:745
				{
					portYIELD_WITHIN_API();
 8002a3c:	f001 fdec 	bl	8004618 <vPortYield>
 8002a40:	e00c      	b.n	8002a5c <xQueueGenericSend+0x174>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:751
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a42:	69b8      	ldr	r0, [r7, #24]
 8002a44:	f000 f9e6 	bl	8002e14 <prvUnlockQueue>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:752
				( void ) xTaskResumeAll();
 8002a48:	f000 fc70 	bl	800332c <xTaskResumeAll>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:766
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8002a4c:	e78b      	b.n	8002966 <xQueueGenericSend+0x7e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:758
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002a4e:	69b8      	ldr	r0, [r7, #24]
 8002a50:	f000 f9e0 	bl	8002e14 <prvUnlockQueue>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:759
			( void ) xTaskResumeAll();
 8002a54:	f000 fc6a 	bl	800332c <xTaskResumeAll>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:764

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	e000      	b.n	8002a5e <xQueueGenericSend+0x176>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:766
		}
	}
 8002a5c:	e783      	b.n	8002966 <xQueueGenericSend+0x7e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:767
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3720      	adds	r7, #32
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop

08002a68 <xQueueGenericSendFromISR>:
xQueueGenericSendFromISR():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1016

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1019
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1021

	configASSERT( pxQueue );
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d102      	bne.n	8002a86 <xQueueGenericSendFromISR+0x1e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1021 (discriminator 1)
 8002a80:	f001 fe02 	bl	8004688 <ulPortSetInterruptMask>
 8002a84:	e7fe      	b.n	8002a84 <xQueueGenericSendFromISR+0x1c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1022
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d103      	bne.n	8002a94 <xQueueGenericSendFromISR+0x2c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1022 (discriminator 2)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <xQueueGenericSendFromISR+0x30>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1022 (discriminator 1)
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <xQueueGenericSendFromISR+0x32>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1022 (discriminator 3)
 8002a98:	2300      	movs	r3, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1022 (discriminator 4)
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d102      	bne.n	8002aa4 <xQueueGenericSendFromISR+0x3c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1022 (discriminator 1)
 8002a9e:	f001 fdf3 	bl	8004688 <ulPortSetInterruptMask>
 8002aa2:	e7fe      	b.n	8002aa2 <xQueueGenericSendFromISR+0x3a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1023
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d103      	bne.n	8002ab2 <xQueueGenericSendFromISR+0x4a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1023 (discriminator 2)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <xQueueGenericSendFromISR+0x4e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1023 (discriminator 1)
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <xQueueGenericSendFromISR+0x50>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1023 (discriminator 3)
 8002ab6:	2300      	movs	r3, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1023 (discriminator 4)
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <xQueueGenericSendFromISR+0x5a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1023 (discriminator 1)
 8002abc:	f001 fde4 	bl	8004688 <ulPortSetInterruptMask>
 8002ac0:	e7fe      	b.n	8002ac0 <xQueueGenericSendFromISR+0x58>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1039
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ac2:	f001 fe4b 	bl	800475c <vPortValidateInterruptPriority>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1046
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ac6:	f001 fddf 	bl	8004688 <ulPortSetInterruptMask>
 8002aca:	6178      	str	r0, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1048
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d302      	bcc.n	8002ade <xQueueGenericSendFromISR+0x76>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1048 (discriminator 1)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d124      	bne.n	8002b28 <xQueueGenericSendFromISR+0xc0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1052
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ade:	69b8      	ldr	r0, [r7, #24]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	f000 f908 	bl	8002cf8 <prvCopyDataToQueue>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1056

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d112      	bne.n	8002b18 <xQueueGenericSendFromISR+0xb0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1111
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d013      	beq.n	8002b22 <xQueueGenericSendFromISR+0xba>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1113
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	3324      	adds	r3, #36	; 0x24
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fe3c 	bl	800377c <xTaskRemoveFromEventList>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <xQueueGenericSendFromISR+0xba>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1117
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <xQueueGenericSendFromISR+0xba>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1119
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e004      	b.n	8002b22 <xQueueGenericSendFromISR+0xba>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1142
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	649a      	str	r2, [r3, #72]	; 0x48
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1145
			}

			xReturn = pdPASS;
 8002b22:	2301      	movs	r3, #1
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	e001      	b.n	8002b2c <xQueueGenericSendFromISR+0xc4>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1150
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1153
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002b2c:	6978      	ldr	r0, [r7, #20]
 8002b2e:	f001 fdb5 	bl	800469c <vPortClearInterruptMask>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1155

	return xReturn;
 8002b32:	69fb      	ldr	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1156
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3720      	adds	r7, #32
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <xQueueGenericReceive>:
xQueueGenericReceive():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1160
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	; 0x28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1161
BaseType_t xEntryTimeSet = pdFALSE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1164
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	623b      	str	r3, [r7, #32]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1166

	configASSERT( pxQueue );
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <xQueueGenericReceive+0x22>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1166 (discriminator 1)
 8002b58:	f001 fd96 	bl	8004688 <ulPortSetInterruptMask>
 8002b5c:	e7fe      	b.n	8002b5c <xQueueGenericReceive+0x20>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1167
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d103      	bne.n	8002b6c <xQueueGenericReceive+0x30>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1167 (discriminator 2)
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <xQueueGenericReceive+0x34>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1167 (discriminator 1)
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <xQueueGenericReceive+0x36>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1167 (discriminator 3)
 8002b70:	2300      	movs	r3, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1167 (discriminator 4)
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d102      	bne.n	8002b7c <xQueueGenericReceive+0x40>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1167 (discriminator 1)
 8002b76:	f001 fd87 	bl	8004688 <ulPortSetInterruptMask>
 8002b7a:	e7fe      	b.n	8002b7a <xQueueGenericReceive+0x3e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1170
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b7c:	f001 f84c 	bl	8003c18 <xTaskGetSchedulerState>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <xQueueGenericReceive+0x50>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1170 (discriminator 2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <xQueueGenericReceive+0x54>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1170 (discriminator 1)
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <xQueueGenericReceive+0x56>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1170 (discriminator 3)
 8002b90:	2300      	movs	r3, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1170 (discriminator 4)
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <xQueueGenericReceive+0x60>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1170 (discriminator 1)
 8002b96:	f001 fd77 	bl	8004688 <ulPortSetInterruptMask>
 8002b9a:	e7fe      	b.n	8002b9a <xQueueGenericReceive+0x5e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1180
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b9c:	f001 fd4c 	bl	8004638 <vPortEnterCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1184
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d03b      	beq.n	8002c20 <xQueueGenericReceive+0xe4>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1188
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1190

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bae:	6a38      	ldr	r0, [r7, #32]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	f000 f909 	bl	8002dc8 <prvCopyDataFromQueue>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1192

				if( xJustPeeking == pdFALSE )
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d11c      	bne.n	8002bf6 <xQueueGenericReceive+0xba>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1197
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc0:	1e5a      	subs	r2, r3, #1
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	639a      	str	r2, [r3, #56]	; 0x38
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1201

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d104      	bne.n	8002bd8 <xQueueGenericReceive+0x9c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1205
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002bce:	f001 f813 	bl	8003bf8 <xTaskGetCurrentTaskHandle>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1214
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01b      	beq.n	8002c18 <xQueueGenericReceive+0xdc>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1216
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	3310      	adds	r3, #16
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 fdc9 	bl	800377c <xTaskRemoveFromEventList>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d113      	bne.n	8002c18 <xQueueGenericReceive+0xdc>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1218
						{
							queueYIELD_IF_USING_PREEMPTION();
 8002bf0:	f001 fd12 	bl	8004618 <vPortYield>
 8002bf4:	e010      	b.n	8002c18 <xQueueGenericReceive+0xdc>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1236
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1240

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d009      	beq.n	8002c18 <xQueueGenericReceive+0xdc>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1244
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	3324      	adds	r3, #36	; 0x24
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fdb7 	bl	800377c <xTaskRemoveFromEventList>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <xQueueGenericReceive+0xdc>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1247
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c14:	f001 fd00 	bl	8004618 <vPortYield>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1260
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8002c18:	f001 fd1e 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1261
				return pdPASS;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e066      	b.n	8002cee <xQueueGenericReceive+0x1b2>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1265
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d103      	bne.n	8002c2e <xQueueGenericReceive+0xf2>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1269
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c26:	f001 fd17 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1271
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e05f      	b.n	8002cee <xQueueGenericReceive+0x1b2>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1273
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d106      	bne.n	8002c42 <xQueueGenericReceive+0x106>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1277
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fdfb 	bl	8003834 <vTaskSetTimeOutState>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1278
					xEntryTimeSet = pdTRUE;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1287
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c42:	f001 fd09 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1292

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c46:	f000 fb63 	bl	8003310 <vTaskSuspendAll>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1293
		prvLockQueue( pxQueue );
 8002c4a:	f001 fcf5 	bl	8004638 <vPortEnterCritical>
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c56:	d102      	bne.n	8002c5e <xQueueGenericReceive+0x122>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1293 (discriminator 1)
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1293 (discriminator 2)
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c66:	d102      	bne.n	8002c6e <xQueueGenericReceive+0x132>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1293 (discriminator 1)
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	649a      	str	r2, [r3, #72]	; 0x48
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1293 (discriminator 2)
 8002c6e:	f001 fcf3 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1296 (discriminator 2)

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c72:	f107 0214 	add.w	r2, r7, #20
 8002c76:	1d3b      	adds	r3, r7, #4
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f000 fdf4 	bl	8003868 <xTaskCheckForTimeOut>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d12b      	bne.n	8002cde <xQueueGenericReceive+0x1a2>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1298
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c86:	6a38      	ldr	r0, [r7, #32]
 8002c88:	f000 f910 	bl	8002eac <prvIsQueueEmpty>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01f      	beq.n	8002cd2 <xQueueGenericReceive+0x196>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1304
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d108      	bne.n	8002cac <xQueueGenericReceive+0x170>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1306
					{
						taskENTER_CRITICAL();
 8002c9a:	f001 fccd 	bl	8004638 <vPortEnterCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1308
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 ffd6 	bl	8003c54 <vTaskPriorityInherit>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1310
						}
						taskEXIT_CRITICAL();
 8002ca8:	f001 fcd6 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1319
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f000 fd02 	bl	80036c0 <vTaskPlaceOnEventList>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1320
				prvUnlockQueue( pxQueue );
 8002cbc:	6a38      	ldr	r0, [r7, #32]
 8002cbe:	f000 f8a9 	bl	8002e14 <prvUnlockQueue>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1321
				if( xTaskResumeAll() == pdFALSE )
 8002cc2:	f000 fb33 	bl	800332c <xTaskResumeAll>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10f      	bne.n	8002cec <xQueueGenericReceive+0x1b0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1323
				{
					portYIELD_WITHIN_API();
 8002ccc:	f001 fca4 	bl	8004618 <vPortYield>
 8002cd0:	e00c      	b.n	8002cec <xQueueGenericReceive+0x1b0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1333
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002cd2:	6a38      	ldr	r0, [r7, #32]
 8002cd4:	f000 f89e 	bl	8002e14 <prvUnlockQueue>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1334
				( void ) xTaskResumeAll();
 8002cd8:	f000 fb28 	bl	800332c <xTaskResumeAll>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1344
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8002cdc:	e75e      	b.n	8002b9c <xQueueGenericReceive+0x60>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1339
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8002cde:	6a38      	ldr	r0, [r7, #32]
 8002ce0:	f000 f898 	bl	8002e14 <prvUnlockQueue>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1340
			( void ) xTaskResumeAll();
 8002ce4:	f000 fb22 	bl	800332c <xTaskResumeAll>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1342
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e000      	b.n	8002cee <xQueueGenericReceive+0x1b2>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1344
		}
	}
 8002cec:	e756      	b.n	8002b9c <xQueueGenericReceive+0x60>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1345
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3728      	adds	r7, #40	; 0x28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop

08002cf8 <prvCopyDataToQueue>:
prvCopyDataToQueue():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1585

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1586
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10c      	bne.n	8002d26 <prvCopyDataToQueue+0x2e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1590
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d151      	bne.n	8002db8 <prvCopyDataToQueue+0xc0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1593
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fff9 	bl	8003d10 <vTaskPriorityDisinherit>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1594
				pxQueue->pxMutexHolder = NULL;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	e048      	b.n	8002db8 <prvCopyDataToQueue+0xc0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1603
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d11a      	bne.n	8002d62 <prvCopyDataToQueue+0x6a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1605
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	4610      	mov	r0, r2
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f001 fd75 	bl	8004828 <memcpy>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1606
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	441a      	add	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	609a      	str	r2, [r3, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1607
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d32f      	bcc.n	8002db8 <prvCopyDataToQueue+0xc0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1609
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	e02a      	b.n	8002db8 <prvCopyDataToQueue+0xc0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1618
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f001 fd5a 	bl	8004828 <memcpy>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1619
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	425b      	negs	r3, r3
 8002d7e:	441a      	add	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1620
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d207      	bcs.n	8002da0 <prvCopyDataToQueue+0xa8>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1622
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	425b      	negs	r3, r3
 8002d9a:	441a      	add	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1629
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d108      	bne.n	8002db8 <prvCopyDataToQueue+0xc0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1631
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d004      	beq.n	8002db8 <prvCopyDataToQueue+0xc0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1637
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	1e5a      	subs	r2, r3, #1
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1650
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	639a      	str	r2, [r3, #56]	; 0x38
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1651
}
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <prvCopyDataFromQueue>:
prvCopyDataFromQueue():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1655
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1656
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d019      	beq.n	8002e0e <prvCopyDataFromQueue+0x46>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1658
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	441a      	add	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1659
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d303      	bcc.n	8002dfc <prvCopyDataFromQueue+0x34>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1661
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	60da      	str	r2, [r3, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1667 (discriminator 1)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	6838      	ldr	r0, [r7, #0]
 8002e06:	4611      	mov	r1, r2
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f001 fd0d 	bl	8004828 <memcpy>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1673
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <prvUnlockQueue>:
prvUnlockQueue():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1677
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1684

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e1c:	f001 fc0c 	bl	8004638 <vPortEnterCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1687
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002e20:	e014      	b.n	8002e4c <prvUnlockQueue+0x38>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1734
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <prvUnlockQueue+0x2c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1736
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3324      	adds	r3, #36	; 0x24
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fca4 	bl	800377c <xTaskRemoveFromEventList>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <prvUnlockQueue+0x2e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1740
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8002e3a:	f000 fd65 	bl	8003908 <vTaskMissedYield>
 8002e3e:	e000      	b.n	8002e42 <prvUnlockQueue+0x2e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1749
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 8002e40:	e008      	b.n	8002e54 <prvUnlockQueue+0x40>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1754
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e46:	1e5a      	subs	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	649a      	str	r2, [r3, #72]	; 0x48
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1687 (discriminator 1)
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	dce6      	bgt.n	8002e22 <prvUnlockQueue+0xe>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1757
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5a:	649a      	str	r2, [r3, #72]	; 0x48
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1759
	}
	taskEXIT_CRITICAL();
 8002e5c:	f001 fbfc 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1762

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e60:	f001 fbea 	bl	8004638 <vPortEnterCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1764
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002e64:	e014      	b.n	8002e90 <prvUnlockQueue+0x7c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1766
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00f      	beq.n	8002e8e <prvUnlockQueue+0x7a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1768
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3310      	adds	r3, #16
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fc82 	bl	800377c <xTaskRemoveFromEventList>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <prvUnlockQueue+0x6e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1770
				{
					vTaskMissedYield();
 8002e7e:	f000 fd43 	bl	8003908 <vTaskMissedYield>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1777 (discriminator 2)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	1e5a      	subs	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	645a      	str	r2, [r3, #68]	; 0x44
 8002e8c:	e000      	b.n	8002e90 <prvUnlockQueue+0x7c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1781
			}
			else
			{
				break;
 8002e8e:	e003      	b.n	8002e98 <prvUnlockQueue+0x84>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1764 (discriminator 1)
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	dce6      	bgt.n	8002e66 <prvUnlockQueue+0x52>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1785
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9e:	645a      	str	r2, [r3, #68]	; 0x44
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1787
	}
	taskEXIT_CRITICAL();
 8002ea0:	f001 fbda 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1788
}
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop

08002eac <prvIsQueueEmpty>:
prvIsQueueEmpty():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1792
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1795
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002eb4:	f001 fbc0 	bl	8004638 <vPortEnterCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1797
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <prvIsQueueEmpty+0x1a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1799
		{
			xReturn = pdTRUE;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	e001      	b.n	8002eca <prvIsQueueEmpty+0x1e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1803
		}
		else
		{
			xReturn = pdFALSE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1806
		}
	}
	taskEXIT_CRITICAL();
 8002eca:	f001 fbc5 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1808

	return xReturn;
 8002ece:	68fb      	ldr	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1809
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <prvIsQueueFull>:
prvIsQueueFull():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1831
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1834
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ee0:	f001 fbaa 	bl	8004638 <vPortEnterCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1836
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d102      	bne.n	8002ef6 <prvIsQueueFull+0x1e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1838
		{
			xReturn = pdTRUE;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	e001      	b.n	8002efa <prvIsQueueFull+0x22>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1842
		}
		else
		{
			xReturn = pdFALSE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1845
		}
	}
	taskEXIT_CRITICAL();
 8002efa:	f001 fbad 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1847

	return xReturn;
 8002efe:	68fb      	ldr	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:1848
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <vQueueAddToRegistry>:
vQueueAddToRegistry():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2147
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2152
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	e014      	b.n	8002f42 <vQueueAddToRegistry+0x3a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2154
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f18:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <vQueueAddToRegistry+0x4c>)
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10b      	bne.n	8002f3c <vQueueAddToRegistry+0x34>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2157
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <vQueueAddToRegistry+0x4c>)
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	6839      	ldr	r1, [r7, #0]
 8002f2a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2158
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002f2e:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <vQueueAddToRegistry+0x4c>)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2159
				break;
 8002f3a:	e005      	b.n	8002f48 <vQueueAddToRegistry+0x40>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2152
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2152 (discriminator 1)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b07      	cmp	r3, #7
 8002f46:	d9e7      	bls.n	8002f18 <vQueueAddToRegistry+0x10>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2166
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20005878 	.word	0x20005878

08002f58 <vQueueWaitForMessageRestricted>:
vQueueWaitForMessageRestricted():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2201
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2202
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2218
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002f66:	f001 fb67 	bl	8004638 <vPortEnterCritical>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f72:	d102      	bne.n	8002f7a <vQueueWaitForMessageRestricted+0x22>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2218 (discriminator 1)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	645a      	str	r2, [r3, #68]	; 0x44
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2218 (discriminator 2)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f82:	d102      	bne.n	8002f8a <vQueueWaitForMessageRestricted+0x32>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2218 (discriminator 1)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	649a      	str	r2, [r3, #72]	; 0x48
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2218 (discriminator 2)
 8002f8a:	f001 fb65 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2219 (discriminator 2)
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d105      	bne.n	8002fa2 <vQueueWaitForMessageRestricted+0x4a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2222
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	3324      	adds	r3, #36	; 0x24
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	6839      	ldr	r1, [r7, #0]
 8002f9e:	f000 fbc5 	bl	800372c <vTaskPlaceOnEventListRestricted>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2228
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f7ff ff36 	bl	8002e14 <prvUnlockQueue>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/queue.c:2229
	}
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop

08002fb0 <xTaskGenericCreate>:
xTaskGenericCreate():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:496
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	; 0x28
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	80fb      	strh	r3, [r7, #6]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:500
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <xTaskGenericCreate+0x1c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:500 (discriminator 1)
 8002fc6:	f001 fb5f 	bl	8004688 <ulPortSetInterruptMask>
 8002fca:	e7fe      	b.n	8002fca <xTaskGenericCreate+0x1a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:501
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 8002fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d902      	bls.n	8002fd8 <xTaskGenericCreate+0x28>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:501 (discriminator 1)
 8002fd2:	f001 fb59 	bl	8004688 <ulPortSetInterruptMask>
 8002fd6:	e7fe      	b.n	8002fd6 <xTaskGenericCreate+0x26>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:505

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fde:	f000 fda5 	bl	8003b2c <prvAllocateTCBAndStack>
 8002fe2:	61b8      	str	r0, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:507

	if( pxNewTCB != NULL )
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d072      	beq.n	80030d0 <xTaskGenericCreate+0x120>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:531
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:532
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f023 0307 	bic.w	r3, r3, #7
 8003002:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:535

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( uint32_t ) pxTopOfStack & ( uint32_t ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <xTaskGenericCreate+0x64>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:535 (discriminator 1)
 800300e:	f001 fb3b 	bl	8004688 <ulPortSetInterruptMask>
 8003012:	e7fe      	b.n	8003012 <xTaskGenericCreate+0x62>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:552
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	69b8      	ldr	r0, [r7, #24]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800301e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003020:	f000 fc8e 	bl	8003940 <prvInitialiseTCBVariables>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:564
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003024:	6978      	ldr	r0, [r7, #20]
 8003026:	68f9      	ldr	r1, [r7, #12]
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	f001 fa2d 	bl	8004488 <pxPortInitialiseStack>
 800302e:	4602      	mov	r2, r0
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:568
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8003034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <xTaskGenericCreate+0x90>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:573
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:582
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8003040:	f001 fafa 	bl	8004638 <vPortEnterCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:584
		{
			uxCurrentNumberOfTasks++;
 8003044:	4b2e      	ldr	r3, [pc, #184]	; (8003100 <xTaskGenericCreate+0x150>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	4b2d      	ldr	r3, [pc, #180]	; (8003100 <xTaskGenericCreate+0x150>)
 800304c:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:585
			if( pxCurrentTCB == NULL )
 800304e:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <xTaskGenericCreate+0x154>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <xTaskGenericCreate+0xba>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:589
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8003056:	4b2b      	ldr	r3, [pc, #172]	; (8003104 <xTaskGenericCreate+0x154>)
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:591

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800305c:	4b28      	ldr	r3, [pc, #160]	; (8003100 <xTaskGenericCreate+0x150>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d10f      	bne.n	8003084 <xTaskGenericCreate+0xd4>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:596
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8003064:	f000 fcb4 	bl	80039d0 <prvInitialiseTaskLists>
 8003068:	e00c      	b.n	8003084 <xTaskGenericCreate+0xd4>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:608
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 800306a:	4b27      	ldr	r3, [pc, #156]	; (8003108 <xTaskGenericCreate+0x158>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d108      	bne.n	8003084 <xTaskGenericCreate+0xd4>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:610
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8003072:	4b24      	ldr	r3, [pc, #144]	; (8003104 <xTaskGenericCreate+0x154>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307a:	429a      	cmp	r2, r3
 800307c:	d802      	bhi.n	8003084 <xTaskGenericCreate+0xd4>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:612
					{
						pxCurrentTCB = pxNewTCB;
 800307e:	4b21      	ldr	r3, [pc, #132]	; (8003104 <xTaskGenericCreate+0x154>)
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:625
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8003084:	4b21      	ldr	r3, [pc, #132]	; (800310c <xTaskGenericCreate+0x15c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	4b20      	ldr	r3, [pc, #128]	; (800310c <xTaskGenericCreate+0x15c>)
 800308c:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:630

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800308e:	4b1f      	ldr	r3, [pc, #124]	; (800310c <xTaskGenericCreate+0x15c>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:635
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309a:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <xTaskGenericCreate+0x160>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d903      	bls.n	80030aa <xTaskGenericCreate+0xfa>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:635 (discriminator 1)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a6:	4b1a      	ldr	r3, [pc, #104]	; (8003110 <xTaskGenericCreate+0x160>)
 80030a8:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:635 (discriminator 2)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4a17      	ldr	r2, [pc, #92]	; (8003114 <xTaskGenericCreate+0x164>)
 80030b8:	441a      	add	r2, r3
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	3304      	adds	r3, #4
 80030be:	4610      	mov	r0, r2
 80030c0:	4619      	mov	r1, r3
 80030c2:	f7ff faf1 	bl	80026a8 <vListInsertEnd>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:637 (discriminator 2)

			xReturn = pdPASS;
 80030c6:	2301      	movs	r3, #1
 80030c8:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:640 (discriminator 2)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80030ca:	f001 fac5 	bl	8004658 <vPortExitCritical>
 80030ce:	e002      	b.n	80030d6 <xTaskGenericCreate+0x126>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:644
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030d0:	f04f 33ff 	mov.w	r3, #4294967295
 80030d4:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:648
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d10b      	bne.n	80030f4 <xTaskGenericCreate+0x144>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:650
	{
		if( xSchedulerRunning != pdFALSE )
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <xTaskGenericCreate+0x158>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d007      	beq.n	80030f4 <xTaskGenericCreate+0x144>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:654
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80030e4:	4b07      	ldr	r3, [pc, #28]	; (8003104 <xTaskGenericCreate+0x154>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d201      	bcs.n	80030f4 <xTaskGenericCreate+0x144>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:656
			{
				taskYIELD_IF_USING_PREEMPTION();
 80030f0:	f001 fa92 	bl	8004618 <vPortYield>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:669
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
 80030f4:	69fb      	ldr	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:670
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3720      	adds	r7, #32
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20001344 	.word	0x20001344
 8003104:	2000126c 	.word	0x2000126c
 8003108:	20001350 	.word	0x20001350
 800310c:	20001364 	.word	0x20001364
 8003110:	2000134c 	.word	0x2000134c
 8003114:	20001270 	.word	0x20001270

08003118 <vTaskDelay>:
vTaskDelay():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:851
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:853
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:857


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d019      	beq.n	800315e <vTaskDelay+0x46>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:859
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <vTaskDelay+0x58>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <vTaskDelay+0x20>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:859 (discriminator 1)
 8003132:	f001 faa9 	bl	8004688 <ulPortSetInterruptMask>
 8003136:	e7fe      	b.n	8003136 <vTaskDelay+0x1e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:860
			vTaskSuspendAll();
 8003138:	f000 f8ea 	bl	8003310 <vTaskSuspendAll>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:874
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800313c:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <vTaskDelay+0x5c>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4413      	add	r3, r2
 8003144:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:879

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <vTaskDelay+0x60>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	3304      	adds	r3, #4
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fb07 	bl	8002760 <uxListRemove>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:890
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003152:	68b8      	ldr	r0, [r7, #8]
 8003154:	f000 fcb4 	bl	8003ac0 <prvAddCurrentTaskToDelayedList>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:892
			}
			xAlreadyYielded = xTaskResumeAll();
 8003158:	f000 f8e8 	bl	800332c <xTaskResumeAll>
 800315c:	60f8      	str	r0, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:901
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <vTaskDelay+0x50>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:903
		{
			portYIELD_WITHIN_API();
 8003164:	f001 fa58 	bl	8004618 <vPortYield>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:909
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20001354 	.word	0x20001354
 8003174:	20001348 	.word	0x20001348
 8003178:	2000126c 	.word	0x2000126c

0800317c <vTaskPrioritySet>:
vTaskPrioritySet():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1009
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1012
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1014

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b04      	cmp	r3, #4
 800318e:	d902      	bls.n	8003196 <vTaskPrioritySet+0x1a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1014 (discriminator 1)
 8003190:	f001 fa7a 	bl	8004688 <ulPortSetInterruptMask>
 8003194:	e7fe      	b.n	8003194 <vTaskPrioritySet+0x18>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1017

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b04      	cmp	r3, #4
 800319a:	d901      	bls.n	80031a0 <vTaskPrioritySet+0x24>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1019
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800319c:	2304      	movs	r3, #4
 800319e:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1026
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80031a0:	f001 fa4a 	bl	8004638 <vPortEnterCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1030
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <vTaskPrioritySet+0x34>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1030 (discriminator 1)
 80031aa:	4b3a      	ldr	r3, [pc, #232]	; (8003294 <vTaskPrioritySet+0x118>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	e000      	b.n	80031b2 <vTaskPrioritySet+0x36>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1030 (discriminator 2)
 80031b0:	687b      	ldr	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1030 (discriminator 3)
 80031b2:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1036 (discriminator 3)

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b8:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1044 (discriminator 3)
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d062      	beq.n	8003288 <vTaskPrioritySet+0x10c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1048
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d90d      	bls.n	80031e6 <vTaskPrioritySet+0x6a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1050
				{
					if( pxTCB != pxCurrentTCB )
 80031ca:	4b32      	ldr	r3, [pc, #200]	; (8003294 <vTaskPrioritySet+0x118>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d00f      	beq.n	80031f4 <vTaskPrioritySet+0x78>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1055
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80031d4:	4b2f      	ldr	r3, [pc, #188]	; (8003294 <vTaskPrioritySet+0x118>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d809      	bhi.n	80031f4 <vTaskPrioritySet+0x78>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1057
						{
							xYieldRequired = pdTRUE;
 80031e0:	2301      	movs	r3, #1
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	e006      	b.n	80031f4 <vTaskPrioritySet+0x78>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1071
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80031e6:	4b2b      	ldr	r3, [pc, #172]	; (8003294 <vTaskPrioritySet+0x118>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d101      	bne.n	80031f4 <vTaskPrioritySet+0x78>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1076
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80031f0:	2301      	movs	r3, #1
 80031f2:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1088
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1094

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	429a      	cmp	r2, r3
 8003204:	d102      	bne.n	800320c <vTaskPrioritySet+0x90>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1096
					{
						pxTCB->uxPriority = uxNewPriority;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	62da      	str	r2, [r3, #44]	; 0x2c
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1104
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	649a      	str	r2, [r3, #72]	; 0x48
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1114
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	db04      	blt.n	8003224 <vTaskPrioritySet+0xa8>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1116
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	f1c3 0205 	rsb	r2, r3, #5
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	619a      	str	r2, [r3, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1127

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	6959      	ldr	r1, [r3, #20]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4a19      	ldr	r2, [pc, #100]	; (8003298 <vTaskPrioritySet+0x11c>)
 8003234:	4413      	add	r3, r2
 8003236:	4299      	cmp	r1, r3
 8003238:	d101      	bne.n	800323e <vTaskPrioritySet+0xc2>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1127 (discriminator 1)
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <vTaskPrioritySet+0xc4>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1127 (discriminator 2)
 800323e:	2300      	movs	r3, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1127 (discriminator 3)
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01c      	beq.n	800327e <vTaskPrioritySet+0x102>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1132
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	3304      	adds	r3, #4
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fa89 	bl	8002760 <uxListRemove>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1143
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <vTaskPrioritySet+0x120>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d903      	bls.n	8003262 <vTaskPrioritySet+0xe6>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1143 (discriminator 1)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325e:	4b0f      	ldr	r3, [pc, #60]	; (800329c <vTaskPrioritySet+0x120>)
 8003260:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1143 (discriminator 2)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <vTaskPrioritySet+0x11c>)
 8003270:	441a      	add	r2, r3
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	3304      	adds	r3, #4
 8003276:	4610      	mov	r0, r2
 8003278:	4619      	mov	r1, r3
 800327a:	f7ff fa15 	bl	80026a8 <vListInsertEnd>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1150
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <vTaskPrioritySet+0x10c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1152
				{
					taskYIELD_IF_USING_PREEMPTION();
 8003284:	f001 f9c8 	bl	8004618 <vPortYield>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1164
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8003288:	f001 f9e6 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1165
	}
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	2000126c 	.word	0x2000126c
 8003298:	20001270 	.word	0x20001270
 800329c:	2000134c 	.word	0x2000134c

080032a0 <vTaskStartScheduler>:
vTaskStartScheduler():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1425

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af04      	add	r7, sp, #16
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1438
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 80032a6:	2300      	movs	r3, #0
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	2300      	movs	r3, #0
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	2300      	movs	r3, #0
 80032b0:	9302      	str	r3, [sp, #8]
 80032b2:	2300      	movs	r3, #0
 80032b4:	9303      	str	r3, [sp, #12]
 80032b6:	4812      	ldr	r0, [pc, #72]	; (8003300 <vTaskStartScheduler+0x60>)
 80032b8:	4912      	ldr	r1, [pc, #72]	; (8003304 <vTaskStartScheduler+0x64>)
 80032ba:	2280      	movs	r2, #128	; 0x80
 80032bc:	2300      	movs	r3, #0
 80032be:	f7ff fe77 	bl	8002fb0 <xTaskGenericCreate>
 80032c2:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1444
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d102      	bne.n	80032d0 <vTaskStartScheduler+0x30>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1446
		{
			xReturn = xTimerCreateTimerTask();
 80032ca:	f000 fd63 	bl	8003d94 <xTimerCreateTimerTask>
 80032ce:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1455
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d10a      	bne.n	80032ec <vTaskStartScheduler+0x4c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1462
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80032d6:	f001 f9d7 	bl	8004688 <ulPortSetInterruptMask>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1472
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 80032da:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <vTaskStartScheduler+0x68>)
 80032dc:	2201      	movs	r2, #1
 80032de:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1473
		xTickCount = ( TickType_t ) 0U;
 80032e0:	4b0a      	ldr	r3, [pc, #40]	; (800330c <vTaskStartScheduler+0x6c>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1482
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80032e6:	f001 f92f 	bl	8004548 <xPortStartScheduler>
 80032ea:	e005      	b.n	80032f8 <vTaskStartScheduler+0x58>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1497
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d102      	bne.n	80032f8 <vTaskStartScheduler+0x58>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1497 (discriminator 1)
 80032f2:	f001 f9c9 	bl	8004688 <ulPortSetInterruptMask>
 80032f6:	e7fe      	b.n	80032f6 <vTaskStartScheduler+0x56>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1499
	}
}
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	08003921 	.word	0x08003921
 8003304:	080093e4 	.word	0x080093e4
 8003308:	20001350 	.word	0x20001350
 800330c:	20001348 	.word	0x20001348

08003310 <vTaskSuspendAll>:
vTaskSuspendAll():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1514
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1519
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <vTaskSuspendAll+0x18>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	4b03      	ldr	r3, [pc, #12]	; (8003328 <vTaskSuspendAll+0x18>)
 800331c:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1520
}
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	20001354 	.word	0x20001354

0800332c <xTaskResumeAll>:
xTaskResumeAll():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1552

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1554
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8003332:	2300      	movs	r3, #0
 8003334:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1558

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003336:	4b38      	ldr	r3, [pc, #224]	; (8003418 <xTaskResumeAll+0xec>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d102      	bne.n	8003344 <xTaskResumeAll+0x18>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1558 (discriminator 1)
 800333e:	f001 f9a3 	bl	8004688 <ulPortSetInterruptMask>
 8003342:	e7fe      	b.n	8003342 <xTaskResumeAll+0x16>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1565
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003344:	f001 f978 	bl	8004638 <vPortEnterCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1567
	{
		--uxSchedulerSuspended;
 8003348:	4b33      	ldr	r3, [pc, #204]	; (8003418 <xTaskResumeAll+0xec>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	1e5a      	subs	r2, r3, #1
 800334e:	4b32      	ldr	r3, [pc, #200]	; (8003418 <xTaskResumeAll+0xec>)
 8003350:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1569

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003352:	4b31      	ldr	r3, [pc, #196]	; (8003418 <xTaskResumeAll+0xec>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d156      	bne.n	8003408 <xTaskResumeAll+0xdc>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1571
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800335a:	4b30      	ldr	r3, [pc, #192]	; (800341c <xTaskResumeAll+0xf0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d052      	beq.n	8003408 <xTaskResumeAll+0xdc>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1575
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003362:	e02f      	b.n	80033c4 <xTaskResumeAll+0x98>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1577
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003364:	4b2e      	ldr	r3, [pc, #184]	; (8003420 <xTaskResumeAll+0xf4>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1578
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	3318      	adds	r3, #24
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff f9f5 	bl	8002760 <uxListRemove>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1579
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	3304      	adds	r3, #4
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff f9f0 	bl	8002760 <uxListRemove>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1580
					prvAddTaskToReadyList( pxTCB );
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003384:	4b27      	ldr	r3, [pc, #156]	; (8003424 <xTaskResumeAll+0xf8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d903      	bls.n	8003394 <xTaskResumeAll+0x68>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1580 (discriminator 1)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003390:	4b24      	ldr	r3, [pc, #144]	; (8003424 <xTaskResumeAll+0xf8>)
 8003392:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1580 (discriminator 2)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4a21      	ldr	r2, [pc, #132]	; (8003428 <xTaskResumeAll+0xfc>)
 80033a2:	441a      	add	r2, r3
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	3304      	adds	r3, #4
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	f7ff f97c 	bl	80026a8 <vListInsertEnd>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1584 (discriminator 2)

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b4:	4b1d      	ldr	r3, [pc, #116]	; (800342c <xTaskResumeAll+0x100>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d302      	bcc.n	80033c4 <xTaskResumeAll+0x98>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1586
					{
						xYieldPending = pdTRUE;
 80033be:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <xTaskResumeAll+0x104>)
 80033c0:	2201      	movs	r2, #1
 80033c2:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1575 (discriminator 1)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033c4:	4b16      	ldr	r3, [pc, #88]	; (8003420 <xTaskResumeAll+0xf4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1cb      	bne.n	8003364 <xTaskResumeAll+0x38>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1598

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 80033cc:	4b19      	ldr	r3, [pc, #100]	; (8003434 <xTaskResumeAll+0x108>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d011      	beq.n	80033f8 <xTaskResumeAll+0xcc>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1600
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 80033d4:	e00c      	b.n	80033f0 <xTaskResumeAll+0xc4>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1602
					{
						if( xTaskIncrementTick() != pdFALSE )
 80033d6:	f000 f841 	bl	800345c <xTaskIncrementTick>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <xTaskResumeAll+0xba>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1604
						{
							xYieldPending = pdTRUE;
 80033e0:	4b13      	ldr	r3, [pc, #76]	; (8003430 <xTaskResumeAll+0x104>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1610
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <xTaskResumeAll+0x108>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	1e5a      	subs	r2, r3, #1
 80033ec:	4b11      	ldr	r3, [pc, #68]	; (8003434 <xTaskResumeAll+0x108>)
 80033ee:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1600 (discriminator 1)
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 80033f0:	4b10      	ldr	r3, [pc, #64]	; (8003434 <xTaskResumeAll+0x108>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1ee      	bne.n	80033d6 <xTaskResumeAll+0xaa>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1618
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 80033f8:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <xTaskResumeAll+0x104>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d103      	bne.n	8003408 <xTaskResumeAll+0xdc>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1622
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003400:	2301      	movs	r3, #1
 8003402:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1625
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003404:	f001 f908 	bl	8004618 <vPortYield>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1638
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003408:	f001 f926 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1640

	return xAlreadyYielded;
 800340c:	687b      	ldr	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1641
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20001354 	.word	0x20001354
 800341c:	20001344 	.word	0x20001344
 8003420:	20001304 	.word	0x20001304
 8003424:	2000134c 	.word	0x2000134c
 8003428:	20001270 	.word	0x20001270
 800342c:	2000126c 	.word	0x2000126c
 8003430:	2000135c 	.word	0x2000135c
 8003434:	20001358 	.word	0x20001358

08003438 <xTaskGetTickCount>:
xTaskGetTickCount():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1645
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1649
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 800343e:	f001 f8fb 	bl	8004638 <vPortEnterCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1651
	{
		xTicks = xTickCount;
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <xTaskGetTickCount+0x20>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1653
	}
	taskEXIT_CRITICAL();
 8003448:	f001 f906 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1655

	return xTicks;
 800344c:	687b      	ldr	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1656
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20001348 	.word	0x20001348

0800345c <xTaskIncrementTick>:
xTaskIncrementTick():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1818

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1821
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1827

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003466:	4b4e      	ldr	r3, [pc, #312]	; (80035a0 <xTaskIncrementTick+0x144>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f040 8087 	bne.w	800357e <xTaskIncrementTick+0x122>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1831
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8003470:	4b4c      	ldr	r3, [pc, #304]	; (80035a4 <xTaskIncrementTick+0x148>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	4b4b      	ldr	r3, [pc, #300]	; (80035a4 <xTaskIncrementTick+0x148>)
 8003478:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1836

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800347a:	4b4a      	ldr	r3, [pc, #296]	; (80035a4 <xTaskIncrementTick+0x148>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1838

			if( xConstTickCount == ( TickType_t ) 0U )
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d118      	bne.n	80034b8 <xTaskIncrementTick+0x5c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1840
			{
				taskSWITCH_DELAYED_LISTS();
 8003486:	4b48      	ldr	r3, [pc, #288]	; (80035a8 <xTaskIncrementTick+0x14c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <xTaskIncrementTick+0x3a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1840 (discriminator 1)
 8003490:	f001 f8fa 	bl	8004688 <ulPortSetInterruptMask>
 8003494:	e7fe      	b.n	8003494 <xTaskIncrementTick+0x38>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1840 (discriminator 2)
 8003496:	4b44      	ldr	r3, [pc, #272]	; (80035a8 <xTaskIncrementTick+0x14c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	4b43      	ldr	r3, [pc, #268]	; (80035ac <xTaskIncrementTick+0x150>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <xTaskIncrementTick+0x14c>)
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	4b41      	ldr	r3, [pc, #260]	; (80035ac <xTaskIncrementTick+0x150>)
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	4b41      	ldr	r3, [pc, #260]	; (80035b0 <xTaskIncrementTick+0x154>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	4b3f      	ldr	r3, [pc, #252]	; (80035b0 <xTaskIncrementTick+0x154>)
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	f000 fb7c 	bl	8003bb0 <prvResetNextTaskUnblockTime>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1851

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 80034b8:	4b3e      	ldr	r3, [pc, #248]	; (80035b4 <xTaskIncrementTick+0x158>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d34e      	bcc.n	8003560 <xTaskIncrementTick+0x104>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1855
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034c2:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <xTaskIncrementTick+0x14c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <xTaskIncrementTick+0x74>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1855 (discriminator 1)
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <xTaskIncrementTick+0x76>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1855 (discriminator 2)
 80034d0:	2300      	movs	r3, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1855 (discriminator 3)
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d004      	beq.n	80034e0 <xTaskIncrementTick+0x84>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1862
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 80034d6:	4b37      	ldr	r3, [pc, #220]	; (80035b4 <xTaskIncrementTick+0x158>)
 80034d8:	f04f 32ff 	mov.w	r2, #4294967295
 80034dc:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1863
						break;
 80034de:	e03f      	b.n	8003560 <xTaskIncrementTick+0x104>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1871
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034e0:	4b31      	ldr	r3, [pc, #196]	; (80035a8 <xTaskIncrementTick+0x14c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1872
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1874

						if( xConstTickCount < xItemValue )
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d203      	bcs.n	8003500 <xTaskIncrementTick+0xa4>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1881
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 80034f8:	4b2e      	ldr	r3, [pc, #184]	; (80035b4 <xTaskIncrementTick+0x158>)
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1882
							break;
 80034fe:	e02f      	b.n	8003560 <xTaskIncrementTick+0x104>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1890
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	3304      	adds	r3, #4
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff f92b 	bl	8002760 <uxListRemove>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1894

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	2b00      	cmp	r3, #0
 8003510:	d004      	beq.n	800351c <xTaskIncrementTick+0xc0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1896
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	3318      	adds	r3, #24
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff f922 	bl	8002760 <uxListRemove>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1905
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003520:	4b25      	ldr	r3, [pc, #148]	; (80035b8 <xTaskIncrementTick+0x15c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d903      	bls.n	8003530 <xTaskIncrementTick+0xd4>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1905 (discriminator 1)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352c:	4b22      	ldr	r3, [pc, #136]	; (80035b8 <xTaskIncrementTick+0x15c>)
 800352e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1905 (discriminator 2)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4a1f      	ldr	r2, [pc, #124]	; (80035bc <xTaskIncrementTick+0x160>)
 800353e:	441a      	add	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	3304      	adds	r3, #4
 8003544:	4610      	mov	r0, r2
 8003546:	4619      	mov	r1, r3
 8003548:	f7ff f8ae 	bl	80026a8 <vListInsertEnd>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1915 (discriminator 2)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003550:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <xTaskIncrementTick+0x164>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	429a      	cmp	r2, r3
 8003558:	d301      	bcc.n	800355e <xTaskIncrementTick+0x102>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1917
							{
								xSwitchRequired = pdTRUE;
 800355a:	2301      	movs	r3, #1
 800355c:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1926
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 800355e:	e7b0      	b.n	80034c2 <xTaskIncrementTick+0x66>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1935
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003560:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <xTaskIncrementTick+0x164>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003566:	4915      	ldr	r1, [pc, #84]	; (80035bc <xTaskIncrementTick+0x160>)
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d907      	bls.n	8003588 <xTaskIncrementTick+0x12c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1937
			{
				xSwitchRequired = pdTRUE;
 8003578:	2301      	movs	r3, #1
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	e004      	b.n	8003588 <xTaskIncrementTick+0x12c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1963
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <xTaskIncrementTick+0x168>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <xTaskIncrementTick+0x168>)
 8003586:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1976
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003588:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <xTaskIncrementTick+0x16c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <xTaskIncrementTick+0x138>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1978
		{
			xSwitchRequired = pdTRUE;
 8003590:	2301      	movs	r3, #1
 8003592:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1987
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003594:	697b      	ldr	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:1988
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20001354 	.word	0x20001354
 80035a4:	20001348 	.word	0x20001348
 80035a8:	200012fc 	.word	0x200012fc
 80035ac:	20001300 	.word	0x20001300
 80035b0:	20001360 	.word	0x20001360
 80035b4:	20000010 	.word	0x20000010
 80035b8:	2000134c 	.word	0x2000134c
 80035bc:	20001270 	.word	0x20001270
 80035c0:	2000126c 	.word	0x2000126c
 80035c4:	20001358 	.word	0x20001358
 80035c8:	2000135c 	.word	0x2000135c

080035cc <vTaskSwitchContext>:
vTaskSwitchContext():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2082

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2083
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035d2:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <vTaskSwitchContext+0xdc>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <vTaskSwitchContext+0x16>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2087
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80035da:	4b34      	ldr	r3, [pc, #208]	; (80036ac <vTaskSwitchContext+0xe0>)
 80035dc:	2201      	movs	r2, #1
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e05e      	b.n	80036a0 <vTaskSwitchContext+0xd4>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2091
	}
	else
	{
		xYieldPending = pdFALSE;
 80035e2:	4b32      	ldr	r3, [pc, #200]	; (80036ac <vTaskSwitchContext+0xe0>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2121
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 80035e8:	4b31      	ldr	r3, [pc, #196]	; (80036b0 <vTaskSwitchContext+0xe4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <vTaskSwitchContext+0xe4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d808      	bhi.n	800360a <vTaskSwitchContext+0x3e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2121 (discriminator 1)
 80035f8:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <vTaskSwitchContext+0xe4>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4b2c      	ldr	r3, [pc, #176]	; (80036b0 <vTaskSwitchContext+0xe4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3334      	adds	r3, #52	; 0x34
 8003602:	4610      	mov	r0, r2
 8003604:	4619      	mov	r1, r3
 8003606:	f7fd fc87 	bl	8000f18 <vApplicationStackOverflowHook>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2122
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800360a:	4b29      	ldr	r3, [pc, #164]	; (80036b0 <vTaskSwitchContext+0xe4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	4618      	mov	r0, r3
 8003612:	4928      	ldr	r1, [pc, #160]	; (80036b4 <vTaskSwitchContext+0xe8>)
 8003614:	2214      	movs	r2, #20
 8003616:	f001 f8d3 	bl	80047c0 <memcmp>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d009      	beq.n	8003634 <vTaskSwitchContext+0x68>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2122 (discriminator 1)
 8003620:	4b23      	ldr	r3, [pc, #140]	; (80036b0 <vTaskSwitchContext+0xe4>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <vTaskSwitchContext+0xe4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3334      	adds	r3, #52	; 0x34
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	f7fd fc73 	bl	8000f18 <vApplicationStackOverflowHook>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2124 (discriminator 1)

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003632:	e00c      	b.n	800364e <vTaskSwitchContext+0x82>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2124
 8003634:	e00b      	b.n	800364e <vTaskSwitchContext+0x82>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2124 (discriminator 2)
 8003636:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <vTaskSwitchContext+0xec>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <vTaskSwitchContext+0x78>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2124 (discriminator 1)
 800363e:	f001 f823 	bl	8004688 <ulPortSetInterruptMask>
 8003642:	e7fe      	b.n	8003642 <vTaskSwitchContext+0x76>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2124 (discriminator 2)
 8003644:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <vTaskSwitchContext+0xec>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	1e5a      	subs	r2, r3, #1
 800364a:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <vTaskSwitchContext+0xec>)
 800364c:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2124 (discriminator 1)
 800364e:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <vTaskSwitchContext+0xec>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	491a      	ldr	r1, [pc, #104]	; (80036bc <vTaskSwitchContext+0xf0>)
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0e8      	beq.n	8003636 <vTaskSwitchContext+0x6a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2124 (discriminator 3)
 8003664:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <vTaskSwitchContext+0xec>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4a12      	ldr	r2, [pc, #72]	; (80036bc <vTaskSwitchContext+0xf0>)
 8003672:	4413      	add	r3, r2
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3308      	adds	r3, #8
 8003688:	429a      	cmp	r2, r3
 800368a:	d104      	bne.n	8003696 <vTaskSwitchContext+0xca>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2124 (discriminator 1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2124 (discriminator 2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <vTaskSwitchContext+0xe4>)
 800369e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2136
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20001354 	.word	0x20001354
 80036ac:	2000135c 	.word	0x2000135c
 80036b0:	2000126c 	.word	0x2000126c
 80036b4:	080093ec 	.word	0x080093ec
 80036b8:	2000134c 	.word	0x2000134c
 80036bc:	20001270 	.word	0x20001270

080036c0 <vTaskPlaceOnEventList>:
vTaskPlaceOnEventList():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2140
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2143
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <vTaskPlaceOnEventList+0x16>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2143 (discriminator 1)
 80036d0:	f000 ffda 	bl	8004688 <ulPortSetInterruptMask>
 80036d4:	e7fe      	b.n	80036d4 <vTaskPlaceOnEventList+0x14>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2151
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036d6:	4b12      	ldr	r3, [pc, #72]	; (8003720 <vTaskPlaceOnEventList+0x60>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3318      	adds	r3, #24
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	4619      	mov	r1, r3
 80036e0:	f7ff f806 	bl	80026f0 <vListInsert>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2156

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80036e4:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <vTaskPlaceOnEventList+0x60>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3304      	adds	r3, #4
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff f838 	bl	8002760 <uxListRemove>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2169
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f6:	d107      	bne.n	8003708 <vTaskPlaceOnEventList+0x48>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2174
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <vTaskPlaceOnEventList+0x60>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3304      	adds	r3, #4
 80036fe:	4809      	ldr	r0, [pc, #36]	; (8003724 <vTaskPlaceOnEventList+0x64>)
 8003700:	4619      	mov	r1, r3
 8003702:	f7fe ffd1 	bl	80026a8 <vListInsertEnd>
 8003706:	e007      	b.n	8003718 <vTaskPlaceOnEventList+0x58>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2180
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8003708:	4b07      	ldr	r3, [pc, #28]	; (8003728 <vTaskPlaceOnEventList+0x68>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	4413      	add	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2181
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f9d4 	bl	8003ac0 <prvAddCurrentTaskToDelayedList>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2192
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	2000126c 	.word	0x2000126c
 8003724:	20001330 	.word	0x20001330
 8003728:	20001348 	.word	0x20001348

0800372c <vTaskPlaceOnEventListRestricted>:
vTaskPlaceOnEventListRestricted():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2256
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2259
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d102      	bne.n	8003742 <vTaskPlaceOnEventListRestricted+0x16>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2259 (discriminator 1)
 800373c:	f000 ffa4 	bl	8004688 <ulPortSetInterruptMask>
 8003740:	e7fe      	b.n	8003740 <vTaskPlaceOnEventListRestricted+0x14>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2271

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003742:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <vTaskPlaceOnEventListRestricted+0x48>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3318      	adds	r3, #24
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4619      	mov	r1, r3
 800374c:	f7fe ffac 	bl	80026a8 <vListInsertEnd>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2276

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <vTaskPlaceOnEventListRestricted+0x48>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3304      	adds	r3, #4
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff f802 	bl	8002760 <uxListRemove>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2289
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 800375c:	4b06      	ldr	r3, [pc, #24]	; (8003778 <vTaskPlaceOnEventListRestricted+0x4c>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	4413      	add	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2292

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f9aa 	bl	8003ac0 <prvAddCurrentTaskToDelayedList>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2293
	}
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	2000126c 	.word	0x2000126c
 8003778:	20001348 	.word	0x20001348

0800377c <xTaskRemoveFromEventList>:
xTaskRemoveFromEventList():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2299

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2316
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2317
	configASSERT( pxUnblockedTCB );
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d102      	bne.n	8003798 <xTaskRemoveFromEventList+0x1c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2317 (discriminator 1)
 8003792:	f000 ff79 	bl	8004688 <ulPortSetInterruptMask>
 8003796:	e7fe      	b.n	8003796 <xTaskRemoveFromEventList+0x1a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2318
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	3318      	adds	r3, #24
 800379c:	4618      	mov	r0, r3
 800379e:	f7fe ffdf 	bl	8002760 <uxListRemove>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2320

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037a2:	4b1e      	ldr	r3, [pc, #120]	; (800381c <xTaskRemoveFromEventList+0xa0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d11d      	bne.n	80037e6 <xTaskRemoveFromEventList+0x6a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2322
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	3304      	adds	r3, #4
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe ffd6 	bl	8002760 <uxListRemove>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2323
		prvAddTaskToReadyList( pxUnblockedTCB );
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b8:	4b19      	ldr	r3, [pc, #100]	; (8003820 <xTaskRemoveFromEventList+0xa4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d903      	bls.n	80037c8 <xTaskRemoveFromEventList+0x4c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2323 (discriminator 1)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c4:	4b16      	ldr	r3, [pc, #88]	; (8003820 <xTaskRemoveFromEventList+0xa4>)
 80037c6:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2323 (discriminator 2)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4a13      	ldr	r2, [pc, #76]	; (8003824 <xTaskRemoveFromEventList+0xa8>)
 80037d6:	441a      	add	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	3304      	adds	r3, #4
 80037dc:	4610      	mov	r0, r2
 80037de:	4619      	mov	r1, r3
 80037e0:	f7fe ff62 	bl	80026a8 <vListInsertEnd>
 80037e4:	e005      	b.n	80037f2 <xTaskRemoveFromEventList+0x76>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2329
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	3318      	adds	r3, #24
 80037ea:	480f      	ldr	r0, [pc, #60]	; (8003828 <xTaskRemoveFromEventList+0xac>)
 80037ec:	4619      	mov	r1, r3
 80037ee:	f7fe ff5b 	bl	80026a8 <vListInsertEnd>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2332
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <xTaskRemoveFromEventList+0xb0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d905      	bls.n	800380c <xTaskRemoveFromEventList+0x90>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2338
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8003800:	2301      	movs	r3, #1
 8003802:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2342

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003804:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <xTaskRemoveFromEventList+0xb4>)
 8003806:	2201      	movs	r2, #1
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e001      	b.n	8003810 <xTaskRemoveFromEventList+0x94>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2346
	}
	else
	{
		xReturn = pdFALSE;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2349
	}

	return xReturn;
 8003810:	68fb      	ldr	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2350
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20001354 	.word	0x20001354
 8003820:	2000134c 	.word	0x2000134c
 8003824:	20001270 	.word	0x20001270
 8003828:	20001304 	.word	0x20001304
 800382c:	2000126c 	.word	0x2000126c
 8003830:	2000135c 	.word	0x2000135c

08003834 <vTaskSetTimeOutState>:
vTaskSetTimeOutState():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2404
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2405
	configASSERT( pxTimeOut );
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d102      	bne.n	8003848 <vTaskSetTimeOutState+0x14>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2405 (discriminator 1)
 8003842:	f000 ff21 	bl	8004688 <ulPortSetInterruptMask>
 8003846:	e7fe      	b.n	8003846 <vTaskSetTimeOutState+0x12>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2406
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <vTaskSetTimeOutState+0x2c>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2407
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <vTaskSetTimeOutState+0x30>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2408
}
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20001360 	.word	0x20001360
 8003864:	20001348 	.word	0x20001348

08003868 <xTaskCheckForTimeOut>:
xTaskCheckForTimeOut():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2412
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2415
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d102      	bne.n	800387e <xTaskCheckForTimeOut+0x16>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2415 (discriminator 1)
 8003878:	f000 ff06 	bl	8004688 <ulPortSetInterruptMask>
 800387c:	e7fe      	b.n	800387c <xTaskCheckForTimeOut+0x14>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2416
	configASSERT( pxTicksToWait );
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <xTaskCheckForTimeOut+0x22>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2416 (discriminator 1)
 8003884:	f000 ff00 	bl	8004688 <ulPortSetInterruptMask>
 8003888:	e7fe      	b.n	8003888 <xTaskCheckForTimeOut+0x20>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2418

	taskENTER_CRITICAL();
 800388a:	f000 fed5 	bl	8004638 <vPortEnterCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2421
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800388e:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <xTaskCheckForTimeOut+0x98>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2427

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d102      	bne.n	80038a4 <xTaskCheckForTimeOut+0x3c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2429
			{
				xReturn = pdFALSE;
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	e026      	b.n	80038f2 <xTaskCheckForTimeOut+0x8a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2434
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4b16      	ldr	r3, [pc, #88]	; (8003904 <xTaskCheckForTimeOut+0x9c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d007      	beq.n	80038c0 <xTaskCheckForTimeOut+0x58>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2434 (discriminator 1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d802      	bhi.n	80038c0 <xTaskCheckForTimeOut+0x58>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2440
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 80038ba:	2301      	movs	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e018      	b.n	80038f2 <xTaskCheckForTimeOut+0x8a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2442
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	1ad2      	subs	r2, r2, r3
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d20e      	bcs.n	80038ee <xTaskCheckForTimeOut+0x86>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2445
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	1acb      	subs	r3, r1, r3
 80038dc:	441a      	add	r2, r3
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2446
			vTaskSetTimeOutState( pxTimeOut );
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff ffa6 	bl	8003834 <vTaskSetTimeOutState>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2447
			xReturn = pdFALSE;
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	e001      	b.n	80038f2 <xTaskCheckForTimeOut+0x8a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2451
		}
		else
		{
			xReturn = pdTRUE;
 80038ee:	2301      	movs	r3, #1
 80038f0:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2454
		}
	}
	taskEXIT_CRITICAL();
 80038f2:	f000 feb1 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2456

	return xReturn;
 80038f6:	68fb      	ldr	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2457
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20001348 	.word	0x20001348
 8003904:	20001360 	.word	0x20001360

08003908 <vTaskMissedYield>:
vTaskMissedYield():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2461
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2462
	xYieldPending = pdTRUE;
 800390c:	4b03      	ldr	r3, [pc, #12]	; (800391c <vTaskMissedYield+0x14>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2463
}
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	2000135c 	.word	0x2000135c

08003920 <prvIdleTask>:
prvIdleTask():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2516
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2523
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8003928:	f000 f890 	bl	8003a4c <prvCheckTasksWaitingTermination>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2546

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <prvIdleTask+0x1c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d901      	bls.n	8003938 <prvIdleTask+0x18>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2548
			{
				taskYIELD();
 8003934:	f000 fe70 	bl	8004618 <vPortYield>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2614
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8003938:	e7f6      	b.n	8003928 <prvIdleTask+0x8>
 800393a:	bf00      	nop
 800393c:	20001270 	.word	0x20001270

08003940 <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2663
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2667
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	e012      	b.n	800397a <prvInitialiseTCBVariables+0x3a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2669
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	4413      	add	r3, r2
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	68f9      	ldr	r1, [r7, #12]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	440b      	add	r3, r1
 8003962:	3330      	adds	r3, #48	; 0x30
 8003964:	711a      	strb	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2674

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	4413      	add	r3, r2
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d100      	bne.n	8003974 <prvInitialiseTCBVariables+0x34>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2676
		{
			break;
 8003972:	e005      	b.n	8003980 <prvInitialiseTCBVariables+0x40>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2667
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	3301      	adds	r3, #1
 8003978:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2667 (discriminator 1)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b09      	cmp	r3, #9
 800397e:	d9e9      	bls.n	8003954 <prvInitialiseTCBVariables+0x14>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2686
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2690

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b04      	cmp	r3, #4
 800398c:	d901      	bls.n	8003992 <prvInitialiseTCBVariables+0x52>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2692
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800398e:	2304      	movs	r3, #4
 8003990:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2699
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	62da      	str	r2, [r3, #44]	; 0x2c
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2702
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	649a      	str	r2, [r3, #72]	; 0x48
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2706
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3304      	adds	r3, #4
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe fe74 	bl	8002690 <vListInitialiseItem>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2707
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	3318      	adds	r3, #24
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fe fe6f 	bl	8002690 <vListInitialiseItem>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2711

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	611a      	str	r2, [r3, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2714

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f1c3 0205 	rsb	r2, r3, #5
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	619a      	str	r2, [r3, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2715
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2752
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop

080039d0 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2771

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2774
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039d6:	2300      	movs	r3, #0
 80039d8:	607b      	str	r3, [r7, #4]
 80039da:	e00c      	b.n	80039f6 <prvInitialiseTaskLists+0x26>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2776 (discriminator 2)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4a11      	ldr	r2, [pc, #68]	; (8003a2c <prvInitialiseTaskLists+0x5c>)
 80039e8:	4413      	add	r3, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe fe30 	bl	8002650 <vListInitialise>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2774 (discriminator 2)

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3301      	adds	r3, #1
 80039f4:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2774 (discriminator 1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d9ef      	bls.n	80039dc <prvInitialiseTaskLists+0xc>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2779
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80039fc:	480c      	ldr	r0, [pc, #48]	; (8003a30 <prvInitialiseTaskLists+0x60>)
 80039fe:	f7fe fe27 	bl	8002650 <vListInitialise>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2780
	vListInitialise( &xDelayedTaskList2 );
 8003a02:	480c      	ldr	r0, [pc, #48]	; (8003a34 <prvInitialiseTaskLists+0x64>)
 8003a04:	f7fe fe24 	bl	8002650 <vListInitialise>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2781
	vListInitialise( &xPendingReadyList );
 8003a08:	480b      	ldr	r0, [pc, #44]	; (8003a38 <prvInitialiseTaskLists+0x68>)
 8003a0a:	f7fe fe21 	bl	8002650 <vListInitialise>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2785

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a0e:	480b      	ldr	r0, [pc, #44]	; (8003a3c <prvInitialiseTaskLists+0x6c>)
 8003a10:	f7fe fe1e 	bl	8002650 <vListInitialise>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2791
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a14:	480a      	ldr	r0, [pc, #40]	; (8003a40 <prvInitialiseTaskLists+0x70>)
 8003a16:	f7fe fe1b 	bl	8002650 <vListInitialise>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2797
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <prvInitialiseTaskLists+0x74>)
 8003a1c:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <prvInitialiseTaskLists+0x60>)
 8003a1e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2798
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a20:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <prvInitialiseTaskLists+0x78>)
 8003a22:	4a04      	ldr	r2, [pc, #16]	; (8003a34 <prvInitialiseTaskLists+0x64>)
 8003a24:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2799
}
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20001270 	.word	0x20001270
 8003a30:	200012d4 	.word	0x200012d4
 8003a34:	200012e8 	.word	0x200012e8
 8003a38:	20001304 	.word	0x20001304
 8003a3c:	20001318 	.word	0x20001318
 8003a40:	20001330 	.word	0x20001330
 8003a44:	200012fc 	.word	0x200012fc
 8003a48:	20001300 	.word	0x20001300

08003a4c <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2803
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2810
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8003a52:	e028      	b.n	8003aa6 <prvCheckTasksWaitingTermination+0x5a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2812
		{
			vTaskSuspendAll();
 8003a54:	f7ff fc5c 	bl	8003310 <vTaskSuspendAll>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2813
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003a58:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <prvCheckTasksWaitingTermination+0x68>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf14      	ite	ne
 8003a60:	2300      	movne	r3, #0
 8003a62:	2301      	moveq	r3, #1
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2814
			( void ) xTaskResumeAll();
 8003a68:	f7ff fc60 	bl	800332c <xTaskResumeAll>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2816

			if( xListIsEmpty == pdFALSE )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d119      	bne.n	8003aa6 <prvCheckTasksWaitingTermination+0x5a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2820
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8003a72:	f000 fde1 	bl	8004638 <vPortEnterCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2822
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a76:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <prvCheckTasksWaitingTermination+0x68>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2823
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	3304      	adds	r3, #4
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe fe6c 	bl	8002760 <uxListRemove>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2824
					--uxCurrentNumberOfTasks;
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <prvCheckTasksWaitingTermination+0x6c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	1e5a      	subs	r2, r3, #1
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <prvCheckTasksWaitingTermination+0x6c>)
 8003a90:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2825
					--uxTasksDeleted;
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <prvCheckTasksWaitingTermination+0x70>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	1e5a      	subs	r2, r3, #1
 8003a98:	4b08      	ldr	r3, [pc, #32]	; (8003abc <prvCheckTasksWaitingTermination+0x70>)
 8003a9a:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2827
				}
				taskEXIT_CRITICAL();
 8003a9c:	f000 fddc 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2829

				prvDeleteTCB( pxTCB );
 8003aa0:	6838      	ldr	r0, [r7, #0]
 8003aa2:	f000 f875 	bl	8003b90 <prvDeleteTCB>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2810 (discriminator 1)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <prvCheckTasksWaitingTermination+0x70>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1d2      	bne.n	8003a54 <prvCheckTasksWaitingTermination+0x8>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2838
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	20001318 	.word	0x20001318
 8003ab8:	20001344 	.word	0x20001344
 8003abc:	2000132c 	.word	0x2000132c

08003ac0 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2842
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2844
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8003ac8:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <prvAddCurrentTaskToDelayedList+0x58>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2846

	if( xTimeToWake < xTickCount )
 8003ad0:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <prvAddCurrentTaskToDelayedList+0x5c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d209      	bcs.n	8003aee <prvAddCurrentTaskToDelayedList+0x2e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2849
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003ada:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <prvAddCurrentTaskToDelayedList+0x60>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <prvAddCurrentTaskToDelayedList+0x58>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f7fe fe02 	bl	80026f0 <vListInsert>
 8003aec:	e010      	b.n	8003b10 <prvAddCurrentTaskToDelayedList+0x50>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2854
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003aee:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <prvAddCurrentTaskToDelayedList+0x64>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <prvAddCurrentTaskToDelayedList+0x58>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4610      	mov	r0, r2
 8003afa:	4619      	mov	r1, r3
 8003afc:	f7fe fdf8 	bl	80026f0 <vListInsert>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2859

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8003b00:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <prvAddCurrentTaskToDelayedList+0x68>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d202      	bcs.n	8003b10 <prvAddCurrentTaskToDelayedList+0x50>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2861
		{
			xNextTaskUnblockTime = xTimeToWake;
 8003b0a:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <prvAddCurrentTaskToDelayedList+0x68>)
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2868
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	2000126c 	.word	0x2000126c
 8003b1c:	20001348 	.word	0x20001348
 8003b20:	20001300 	.word	0x20001300
 8003b24:	200012fc 	.word	0x200012fc
 8003b28:	20000010 	.word	0x20000010

08003b2c <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2872
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	6039      	str	r1, [r7, #0]
 8003b36:	80fb      	strh	r3, [r7, #6]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2877
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8003b38:	204c      	movs	r0, #76	; 0x4c
 8003b3a:	f000 fbb3 	bl	80042a4 <pvPortMalloc>
 8003b3e:	60f8      	str	r0, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2879

	if( pxNewTCB != NULL )
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01f      	beq.n	8003b86 <prvAllocateTCBAndStack+0x5a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2884
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d106      	bne.n	8003b5a <prvAllocateTCBAndStack+0x2e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2884 (discriminator 1)
 8003b4c:	88fb      	ldrh	r3, [r7, #6]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fba7 	bl	80042a4 <pvPortMalloc>
 8003b56:	4603      	mov	r3, r0
 8003b58:	e000      	b.n	8003b5c <prvAllocateTCBAndStack+0x30>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2884 (discriminator 2)
 8003b5a:	683b      	ldr	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2884 (discriminator 3)
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	6313      	str	r3, [r2, #48]	; 0x30
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2886 (discriminator 3)

		if( pxNewTCB->pxStack == NULL )
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d105      	bne.n	8003b74 <prvAllocateTCBAndStack+0x48>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2889
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 fc2d 	bl	80043c8 <vPortFree>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2890
			pxNewTCB = NULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	e008      	b.n	8003b86 <prvAllocateTCBAndStack+0x5a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2898
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	21a5      	movs	r1, #165	; 0xa5
 8003b80:	461a      	mov	r2, r3
 8003b82:	f000 feeb 	bl	800495c <memset>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2904
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
 8003b86:	68fb      	ldr	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:2905
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <prvDeleteTCB>:
prvDeleteTCB():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3029
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3037
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fc13 	bl	80043c8 <vPortFree>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3038
		vPortFree( pxTCB );
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fc10 	bl	80043c8 <vPortFree>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3039
	}
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop

08003bb0 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3045

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3048
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <prvResetNextTaskUnblockTime+0x40>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <prvResetNextTaskUnblockTime+0x14>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3048 (discriminator 1)
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <prvResetNextTaskUnblockTime+0x16>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3048 (discriminator 2)
 8003bc4:	2300      	movs	r3, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3048 (discriminator 3)
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d004      	beq.n	8003bd4 <prvResetNextTaskUnblockTime+0x24>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3055
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <prvResetNextTaskUnblockTime+0x44>)
 8003bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	e008      	b.n	8003be6 <prvResetNextTaskUnblockTime+0x36>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3063
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <prvResetNextTaskUnblockTime+0x40>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3064
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <prvResetNextTaskUnblockTime+0x44>)
 8003be4:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3066
	}
}
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	200012fc 	.word	0x200012fc
 8003bf4:	20000010 	.word	0x20000010

08003bf8 <xTaskGetCurrentTaskHandle>:
xTaskGetCurrentTaskHandle():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3072
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3078
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8003bfe:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <xTaskGetCurrentTaskHandle+0x1c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3080

		return xReturn;
 8003c04:	687b      	ldr	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3081
	}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	2000126c 	.word	0x2000126c

08003c18 <xTaskGetSchedulerState>:
xTaskGetSchedulerState():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3089
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3092
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <xTaskGetSchedulerState+0x34>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d102      	bne.n	8003c2c <xTaskGetSchedulerState+0x14>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3094
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c26:	2301      	movs	r3, #1
 8003c28:	607b      	str	r3, [r7, #4]
 8003c2a:	e008      	b.n	8003c3e <xTaskGetSchedulerState+0x26>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3098
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c2c:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <xTaskGetSchedulerState+0x38>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d102      	bne.n	8003c3a <xTaskGetSchedulerState+0x22>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3100
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c34:	2302      	movs	r3, #2
 8003c36:	607b      	str	r3, [r7, #4]
 8003c38:	e001      	b.n	8003c3e <xTaskGetSchedulerState+0x26>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3104
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3108
			}
		}

		return xReturn;
 8003c3e:	687b      	ldr	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3109
	}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	20001350 	.word	0x20001350
 8003c50:	20001354 	.word	0x20001354

08003c54 <vTaskPriorityInherit>:
vTaskPriorityInherit():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3117
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3118
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3122

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d04a      	beq.n	8003cfc <vTaskPriorityInherit+0xa8>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3124
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6a:	4b26      	ldr	r3, [pc, #152]	; (8003d04 <vTaskPriorityInherit+0xb0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d243      	bcs.n	8003cfc <vTaskPriorityInherit+0xa8>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3129
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	db06      	blt.n	8003c8a <vTaskPriorityInherit+0x36>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3131
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c7c:	4b21      	ldr	r3, [pc, #132]	; (8003d04 <vTaskPriorityInherit+0xb0>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	f1c3 0205 	rsb	r2, r3, #5
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	619a      	str	r2, [r3, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3140
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6959      	ldr	r1, [r3, #20]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <vTaskPriorityInherit+0xb4>)
 8003c9c:	4413      	add	r3, r2
 8003c9e:	4299      	cmp	r1, r3
 8003ca0:	d101      	bne.n	8003ca6 <vTaskPriorityInherit+0x52>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3140 (discriminator 1)
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <vTaskPriorityInherit+0x54>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3140 (discriminator 2)
 8003ca6:	2300      	movs	r3, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3140 (discriminator 3)
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d022      	beq.n	8003cf2 <vTaskPriorityInherit+0x9e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3142
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe fd55 	bl	8002760 <uxListRemove>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3152
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003cb6:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <vTaskPriorityInherit+0xb0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	62da      	str	r2, [r3, #44]	; 0x2c
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3153
					prvAddTaskToReadyList( pxTCB );
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc4:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <vTaskPriorityInherit+0xb8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d903      	bls.n	8003cd4 <vTaskPriorityInherit+0x80>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3153 (discriminator 1)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd0:	4b0e      	ldr	r3, [pc, #56]	; (8003d0c <vTaskPriorityInherit+0xb8>)
 8003cd2:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3153 (discriminator 2)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <vTaskPriorityInherit+0xb4>)
 8003ce2:	441a      	add	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	f7fe fcdc 	bl	80026a8 <vListInsertEnd>
 8003cf0:	e004      	b.n	8003cfc <vTaskPriorityInherit+0xa8>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3158
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003cf2:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <vTaskPriorityInherit+0xb0>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	62da      	str	r2, [r3, #44]	; 0x2c
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3172
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	2000126c 	.word	0x2000126c
 8003d08:	20001270 	.word	0x20001270
 8003d0c:	2000134c 	.word	0x2000134c

08003d10 <vTaskPriorityDisinherit>:
vTaskPriorityDisinherit():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3180
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3181
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3183

		if( pxMutexHolder != NULL )
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d030      	beq.n	8003d84 <vTaskPriorityDisinherit+0x74>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3185
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d02a      	beq.n	8003d84 <vTaskPriorityDisinherit+0x74>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3189
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3304      	adds	r3, #4
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fe fd14 	bl	8002760 <uxListRemove>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3201
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	62da      	str	r2, [r3, #44]	; 0x2c
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3205

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	db05      	blt.n	8003d54 <vTaskPriorityDisinherit+0x44>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3207
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	f1c3 0205 	rsb	r2, r3, #5
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	619a      	str	r2, [r3, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3213
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <vTaskPriorityDisinherit+0x7c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d903      	bls.n	8003d68 <vTaskPriorityDisinherit+0x58>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3213 (discriminator 1)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d64:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <vTaskPriorityDisinherit+0x7c>)
 8003d66:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3213 (discriminator 2)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4a06      	ldr	r2, [pc, #24]	; (8003d90 <vTaskPriorityDisinherit+0x80>)
 8003d76:	441a      	add	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	4619      	mov	r1, r3
 8003d80:	f7fe fc92 	bl	80026a8 <vListInsertEnd>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/tasks.c:3224
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	2000134c 	.word	0x2000134c
 8003d90:	20001270 	.word	0x20001270

08003d94 <xTimerCreateTimerTask>:
xTimerCreateTimerTask():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:230
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af04      	add	r7, sp, #16
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:231
BaseType_t xReturn = pdFAIL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:237

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003d9e:	f000 fa45 	bl	800422c <prvCheckForValidListAndQueue>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:239

	if( xTimerQueue != NULL )
 8003da2:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <xTimerCreateTimerTask+0x4c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00f      	beq.n	8003dca <xTimerCreateTimerTask+0x36>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:250
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8003daa:	2302      	movs	r3, #2
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	2300      	movs	r3, #0
 8003db0:	9301      	str	r3, [sp, #4]
 8003db2:	2300      	movs	r3, #0
 8003db4:	9302      	str	r3, [sp, #8]
 8003db6:	2300      	movs	r3, #0
 8003db8:	9303      	str	r3, [sp, #12]
 8003dba:	480a      	ldr	r0, [pc, #40]	; (8003de4 <xTimerCreateTimerTask+0x50>)
 8003dbc:	490a      	ldr	r1, [pc, #40]	; (8003de8 <xTimerCreateTimerTask+0x54>)
 8003dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f7ff f8f4 	bl	8002fb0 <xTaskGenericCreate>
 8003dc8:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:259
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d102      	bne.n	8003dd6 <xTimerCreateTimerTask+0x42>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:259 (discriminator 1)
 8003dd0:	f000 fc5a 	bl	8004688 <ulPortSetInterruptMask>
 8003dd4:	e7fe      	b.n	8003dd4 <xTimerCreateTimerTask+0x40>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:260
	return xReturn;
 8003dd6:	687b      	ldr	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:261
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20001398 	.word	0x20001398
 8003de4:	08003ee9 	.word	0x08003ee9
 8003de8:	08009400 	.word	0x08009400

08003dec <xTimerGenericCommand>:
xTimerGenericCommand():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:306
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xBlockTime )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:307
BaseType_t xReturn = pdFAIL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:312
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <xTimerGenericCommand+0x88>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d030      	beq.n	8003e68 <xTimerGenericCommand+0x7c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:315
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:316
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:317
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:319

		if( pxHigherPriorityTaskWoken == NULL )
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d11c      	bne.n	8003e52 <xTimerGenericCommand+0x66>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:321
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003e18:	f7ff fefe 	bl	8003c18 <xTaskGetSchedulerState>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d10b      	bne.n	8003e3a <xTimerGenericCommand+0x4e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:323
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 8003e22:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <xTimerGenericCommand+0x88>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	f107 0310 	add.w	r3, r7, #16
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e30:	2300      	movs	r3, #0
 8003e32:	f7fe fd59 	bl	80028e8 <xQueueGenericSend>
 8003e36:	61f8      	str	r0, [r7, #28]
 8003e38:	e016      	b.n	8003e68 <xTimerGenericCommand+0x7c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:327
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e3a:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <xTimerGenericCommand+0x88>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	f107 0310 	add.w	r3, r7, #16
 8003e42:	4610      	mov	r0, r2
 8003e44:	4619      	mov	r1, r3
 8003e46:	2200      	movs	r2, #0
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f7fe fd4d 	bl	80028e8 <xQueueGenericSend>
 8003e4e:	61f8      	str	r0, [r7, #28]
 8003e50:	e00a      	b.n	8003e68 <xTimerGenericCommand+0x7c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:332
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <xTimerGenericCommand+0x88>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	f107 0310 	add.w	r3, r7, #16
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	2300      	movs	r3, #0
 8003e62:	f7fe fe01 	bl	8002a68 <xQueueGenericSendFromISR>
 8003e66:	61f8      	str	r0, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:342
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003e68:	69fb      	ldr	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:343
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3720      	adds	r7, #32
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20001398 	.word	0x20001398

08003e78 <prvProcessExpiredTimer>:
prvProcessExpiredTimer():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:360

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:362
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e82:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <prvProcessExpiredTimer+0x6c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:366

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fe fc65 	bl	8002760 <uxListRemove>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:371
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d11b      	bne.n	8003ed6 <prvProcessExpiredTimer+0x5e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:376
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f000 f8a7 	bl	8004000 <prvInsertTimerInActiveList>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d10e      	bne.n	8003ed6 <prvProcessExpiredTimer+0x5e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:380
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8003eb8:	2300      	movs	r3, #0
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f7ff ff92 	bl	8003dec <xTimerGenericCommand>
 8003ec8:	60b8      	str	r0, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:381
			configASSERT( xResult );
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d102      	bne.n	8003ed6 <prvProcessExpiredTimer+0x5e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:381 (discriminator 1)
 8003ed0:	f000 fbda 	bl	8004688 <ulPortSetInterruptMask>
 8003ed4:	e7fe      	b.n	8003ed4 <prvProcessExpiredTimer+0x5c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:395
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	4798      	blx	r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:396
}
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20001390 	.word	0x20001390

08003ee8 <prvTimerTask>:
prvTimerTask():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:400
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:411 (discriminator 1)

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ef0:	f107 0308 	add.w	r3, r7, #8
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 f83f 	bl	8003f78 <prvGetNextExpireTime>
 8003efa:	60f8      	str	r0, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:415 (discriminator 1)

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	4619      	mov	r1, r3
 8003f02:	f000 f803 	bl	8003f0c <prvProcessTimerOrBlockTask>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:418 (discriminator 1)

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003f06:	f000 f8bd 	bl	8004084 <prvProcessReceivedCommands>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:419 (discriminator 1)
	}
 8003f0a:	e7f1      	b.n	8003ef0 <prvTimerTask+0x8>

08003f0c <prvProcessTimerOrBlockTask>:
prvProcessTimerOrBlockTask():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:424
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:428
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003f16:	f7ff f9fb 	bl	8003310 <vTaskSuspendAll>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:435
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f1a:	f107 0308 	add.w	r3, r7, #8
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 f84e 	bl	8003fc0 <prvSampleTimeNow>
 8003f24:	60f8      	str	r0, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:436
		if( xTimerListsWereSwitched == pdFALSE )
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d11e      	bne.n	8003f6a <prvProcessTimerOrBlockTask+0x5e>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:439
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10a      	bne.n	8003f48 <prvProcessTimerOrBlockTask+0x3c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:439 (discriminator 1)
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d806      	bhi.n	8003f48 <prvProcessTimerOrBlockTask+0x3c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:441
			{
				( void ) xTaskResumeAll();
 8003f3a:	f7ff f9f7 	bl	800332c <xTaskResumeAll>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:442
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	68f9      	ldr	r1, [r7, #12]
 8003f42:	f7ff ff99 	bl	8003e78 <prvProcessExpiredTimer>
 8003f46:	e012      	b.n	8003f6e <prvProcessTimerOrBlockTask+0x62>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:452
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8003f48:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <prvProcessTimerOrBlockTask+0x68>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1acb      	subs	r3, r1, r3
 8003f52:	4610      	mov	r0, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	f7fe ffff 	bl	8002f58 <vQueueWaitForMessageRestricted>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:454

				if( xTaskResumeAll() == pdFALSE )
 8003f5a:	f7ff f9e7 	bl	800332c <xTaskResumeAll>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d104      	bne.n	8003f6e <prvProcessTimerOrBlockTask+0x62>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:460
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8003f64:	f000 fb58 	bl	8004618 <vPortYield>
 8003f68:	e001      	b.n	8003f6e <prvProcessTimerOrBlockTask+0x62>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:470
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8003f6a:	f7ff f9df 	bl	800332c <xTaskResumeAll>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:473
		}
	}
}
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20001398 	.word	0x20001398

08003f78 <prvGetNextExpireTime>:
prvGetNextExpireTime():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:477
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:487
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f80:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <prvGetNextExpireTime+0x44>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf14      	ite	ne
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	2301      	moveq	r3, #1
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:488
	if( *pxListWasEmpty == pdFALSE )
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d105      	bne.n	8003faa <prvGetNextExpireTime+0x32>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:490
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f9e:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <prvGetNextExpireTime+0x44>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	e001      	b.n	8003fae <prvGetNextExpireTime+0x36>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:495
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:498
	}

	return xNextExpireTime;
 8003fae:	68fb      	ldr	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:499
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	20001390 	.word	0x20001390

08003fc0 <prvSampleTimeNow>:
prvSampleTimeNow():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:503
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:507
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003fc8:	f7ff fa36 	bl	8003438 <xTaskGetTickCount>
 8003fcc:	60f8      	str	r0, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:509

	if( xTimeNow < xLastTime )
 8003fce:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <prvSampleTimeNow+0x3c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d205      	bcs.n	8003fe4 <prvSampleTimeNow+0x24>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:511
	{
		prvSwitchTimerLists();
 8003fd8:	f000 f8d0 	bl	800417c <prvSwitchTimerLists>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:512
		*pxTimerListsWereSwitched = pdTRUE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e002      	b.n	8003fea <prvSampleTimeNow+0x2a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:516
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:519
	}

	xLastTime = xTimeNow;
 8003fea:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <prvSampleTimeNow+0x3c>)
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:521

	return xTimeNow;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:522
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	2000139c 	.word	0x2000139c

08004000 <prvInsertTimerInActiveList>:
prvInsertTimerInActiveList():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:526
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:527
BaseType_t xProcessTimerNow = pdFALSE;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:529

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:530
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	611a      	str	r2, [r3, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:532

	if( xNextExpiryTime <= xTimeNow )
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	429a      	cmp	r2, r3
 8004024:	d812      	bhi.n	800404c <prvInsertTimerInActiveList+0x4c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:536
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	1ad2      	subs	r2, r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	429a      	cmp	r2, r3
 8004032:	d302      	bcc.n	800403a <prvInsertTimerInActiveList+0x3a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:540
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	e01b      	b.n	8004072 <prvInsertTimerInActiveList+0x72>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:544
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800403a:	4b10      	ldr	r3, [pc, #64]	; (800407c <prvInsertTimerInActiveList+0x7c>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3304      	adds	r3, #4
 8004042:	4610      	mov	r0, r2
 8004044:	4619      	mov	r1, r3
 8004046:	f7fe fb53 	bl	80026f0 <vListInsert>
 800404a:	e012      	b.n	8004072 <prvInsertTimerInActiveList+0x72>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:549
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d206      	bcs.n	8004062 <prvInsertTimerInActiveList+0x62>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:549 (discriminator 1)
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d302      	bcc.n	8004062 <prvInsertTimerInActiveList+0x62>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:554
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800405c:	2301      	movs	r3, #1
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e007      	b.n	8004072 <prvInsertTimerInActiveList+0x72>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:558
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004062:	4b07      	ldr	r3, [pc, #28]	; (8004080 <prvInsertTimerInActiveList+0x80>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3304      	adds	r3, #4
 800406a:	4610      	mov	r0, r2
 800406c:	4619      	mov	r1, r3
 800406e:	f7fe fb3f 	bl	80026f0 <vListInsert>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:562
		}
	}

	return xProcessTimerNow;
 8004072:	697b      	ldr	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:563
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20001394 	.word	0x20001394
 8004080:	20001390 	.word	0x20001390

08004084 <prvProcessReceivedCommands>:
prvProcessReceivedCommands():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:567
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af02      	add	r7, sp, #8
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:573
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800408a:	e064      	b.n	8004156 <prvProcessReceivedCommands+0xd2>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:595
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* INCLUDE_xTimerPendFunctionCallFromISR */

		if( xMessage.xMessageID != tmrCOMMAND_EXECUTE_CALLBACK )
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	d060      	beq.n	8004156 <prvProcessReceivedCommands+0xd2>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:599
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:601

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d004      	beq.n	80040aa <prvProcessReceivedCommands+0x26>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:604
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe fb5b 	bl	8002760 <uxListRemove>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:619
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040aa:	1d3b      	adds	r3, r7, #4
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff ff87 	bl	8003fc0 <prvSampleTimeNow>
 80040b2:	61b8      	str	r0, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:621

			switch( xMessage.xMessageID )
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d84c      	bhi.n	8004154 <prvProcessReceivedCommands+0xd0>
 80040ba:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <prvProcessReceivedCommands+0x3c>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080040d1 	.word	0x080040d1
 80040c4:	08004155 	.word	0x08004155
 80040c8:	08004123 	.word	0x08004123
 80040cc:	0800414d 	.word	0x0800414d
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:625
			{
				case tmrCOMMAND_START :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	441a      	add	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	69f8      	ldr	r0, [r7, #28]
 80040dc:	4611      	mov	r1, r2
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	f7ff ff8e 	bl	8004000 <prvInsertTimerInActiveList>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d11a      	bne.n	8004120 <prvProcessReceivedCommands+0x9c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:629
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	69f8      	ldr	r0, [r7, #28]
 80040f0:	4798      	blx	r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:632
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d112      	bne.n	8004120 <prvProcessReceivedCommands+0x9c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:634
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	4413      	add	r3, r2
 8004102:	2200      	movs	r2, #0
 8004104:	9200      	str	r2, [sp, #0]
 8004106:	69f8      	ldr	r0, [r7, #28]
 8004108:	2100      	movs	r1, #0
 800410a:	461a      	mov	r2, r3
 800410c:	2300      	movs	r3, #0
 800410e:	f7ff fe6d 	bl	8003dec <xTimerGenericCommand>
 8004112:	6178      	str	r0, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:635
							configASSERT( xResult );
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <prvProcessReceivedCommands+0x9c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:635 (discriminator 1)
 800411a:	f000 fab5 	bl	8004688 <ulPortSetInterruptMask>
 800411e:	e7fe      	b.n	800411e <prvProcessReceivedCommands+0x9a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:647
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8004120:	e019      	b.n	8004156 <prvProcessReceivedCommands+0xd2>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:655
					/* The timer has already been removed from the active list.
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	619a      	str	r2, [r3, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:656
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <prvProcessReceivedCommands+0xb2>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:656 (discriminator 1)
 8004130:	f000 faaa 	bl	8004688 <ulPortSetInterruptMask>
 8004134:	e7fe      	b.n	8004134 <prvProcessReceivedCommands+0xb0>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:664
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	699a      	ldr	r2, [r3, #24]
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	4413      	add	r3, r2
 800413e:	69f8      	ldr	r0, [r7, #28]
 8004140:	4619      	mov	r1, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	f7ff ff5b 	bl	8004000 <prvInsertTimerInActiveList>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:665
					break;
 800414a:	e004      	b.n	8004156 <prvProcessReceivedCommands+0xd2>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:670

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
 800414c:	69f8      	ldr	r0, [r7, #28]
 800414e:	f000 f93b 	bl	80043c8 <vPortFree>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:671
					break;
 8004152:	e000      	b.n	8004156 <prvProcessReceivedCommands+0xd2>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:675

				default	:
					/* Don't expect to get here. */
					break;
 8004154:	bf00      	nop
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:573 (discriminator 1)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004156:	4b08      	ldr	r3, [pc, #32]	; (8004178 <prvProcessReceivedCommands+0xf4>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	f107 0308 	add.w	r3, r7, #8
 800415e:	4610      	mov	r0, r2
 8004160:	4619      	mov	r1, r3
 8004162:	2200      	movs	r2, #0
 8004164:	2300      	movs	r3, #0
 8004166:	f7fe fce9 	bl	8002b3c <xQueueGenericReceive>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d18d      	bne.n	800408c <prvProcessReceivedCommands+0x8>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:679
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20001398 	.word	0x20001398

0800417c <prvSwitchTimerLists>:
prvSwitchTimerLists():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:683
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af02      	add	r7, sp, #8
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:693

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004182:	e03d      	b.n	8004200 <prvSwitchTimerLists+0x84>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:695
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004184:	4b27      	ldr	r3, [pc, #156]	; (8004224 <prvSwitchTimerLists+0xa8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:698

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800418e:	4b25      	ldr	r3, [pc, #148]	; (8004224 <prvSwitchTimerLists+0xa8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:699
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	3304      	adds	r3, #4
 800419c:	4618      	mov	r0, r3
 800419e:	f7fe fadf 	bl	8002760 <uxListRemove>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:705
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	6938      	ldr	r0, [r7, #16]
 80041a8:	4798      	blx	r3
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:707

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d126      	bne.n	8004200 <prvSwitchTimerLists+0x84>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:715
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	4413      	add	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:716
			if( xReloadTime > xNextExpireTime )
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d90e      	bls.n	80041e2 <prvSwitchTimerLists+0x66>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:718
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:719
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	611a      	str	r2, [r3, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:720
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041d0:	4b14      	ldr	r3, [pc, #80]	; (8004224 <prvSwitchTimerLists+0xa8>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	3304      	adds	r3, #4
 80041d8:	4610      	mov	r0, r2
 80041da:	4619      	mov	r1, r3
 80041dc:	f7fe fa88 	bl	80026f0 <vListInsert>
 80041e0:	e00e      	b.n	8004200 <prvSwitchTimerLists+0x84>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:724
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 80041e2:	2300      	movs	r3, #0
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	6938      	ldr	r0, [r7, #16]
 80041e8:	2100      	movs	r1, #0
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	2300      	movs	r3, #0
 80041ee:	f7ff fdfd 	bl	8003dec <xTimerGenericCommand>
 80041f2:	60b8      	str	r0, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:725
				configASSERT( xResult );
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d102      	bne.n	8004200 <prvSwitchTimerLists+0x84>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:725 (discriminator 1)
 80041fa:	f000 fa45 	bl	8004688 <ulPortSetInterruptMask>
 80041fe:	e7fe      	b.n	80041fe <prvSwitchTimerLists+0x82>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:693 (discriminator 1)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004200:	4b08      	ldr	r3, [pc, #32]	; (8004224 <prvSwitchTimerLists+0xa8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1bc      	bne.n	8004184 <prvSwitchTimerLists+0x8>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:735
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800420a:	4b06      	ldr	r3, [pc, #24]	; (8004224 <prvSwitchTimerLists+0xa8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:736
	pxCurrentTimerList = pxOverflowTimerList;
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <prvSwitchTimerLists+0xac>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4b03      	ldr	r3, [pc, #12]	; (8004224 <prvSwitchTimerLists+0xa8>)
 8004216:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:737
	pxOverflowTimerList = pxTemp;
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <prvSwitchTimerLists+0xac>)
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:738
}
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20001390 	.word	0x20001390
 8004228:	20001394 	.word	0x20001394

0800422c <prvCheckForValidListAndQueue>:
prvCheckForValidListAndQueue():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:742
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:746
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004230:	f000 fa02 	bl	8004638 <vPortEnterCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:748
	{
		if( xTimerQueue == NULL )
 8004234:	4b15      	ldr	r3, [pc, #84]	; (800428c <prvCheckForValidListAndQueue+0x60>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d124      	bne.n	8004286 <prvCheckForValidListAndQueue+0x5a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:750
		{
			vListInitialise( &xActiveTimerList1 );
 800423c:	4814      	ldr	r0, [pc, #80]	; (8004290 <prvCheckForValidListAndQueue+0x64>)
 800423e:	f7fe fa07 	bl	8002650 <vListInitialise>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:751
			vListInitialise( &xActiveTimerList2 );
 8004242:	4814      	ldr	r0, [pc, #80]	; (8004294 <prvCheckForValidListAndQueue+0x68>)
 8004244:	f7fe fa04 	bl	8002650 <vListInitialise>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:752
			pxCurrentTimerList = &xActiveTimerList1;
 8004248:	4b13      	ldr	r3, [pc, #76]	; (8004298 <prvCheckForValidListAndQueue+0x6c>)
 800424a:	4a11      	ldr	r2, [pc, #68]	; (8004290 <prvCheckForValidListAndQueue+0x64>)
 800424c:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:753
			pxOverflowTimerList = &xActiveTimerList2;
 800424e:	4b13      	ldr	r3, [pc, #76]	; (800429c <prvCheckForValidListAndQueue+0x70>)
 8004250:	4a10      	ldr	r2, [pc, #64]	; (8004294 <prvCheckForValidListAndQueue+0x68>)
 8004252:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:754
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004254:	200a      	movs	r0, #10
 8004256:	210c      	movs	r1, #12
 8004258:	2200      	movs	r2, #0
 800425a:	f7fe fb03 	bl	8002864 <xQueueGenericCreate>
 800425e:	4602      	mov	r2, r0
 8004260:	4b0a      	ldr	r3, [pc, #40]	; (800428c <prvCheckForValidListAndQueue+0x60>)
 8004262:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:755
			configASSERT( xTimerQueue );
 8004264:	4b09      	ldr	r3, [pc, #36]	; (800428c <prvCheckForValidListAndQueue+0x60>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d102      	bne.n	8004272 <prvCheckForValidListAndQueue+0x46>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:755 (discriminator 1)
 800426c:	f000 fa0c 	bl	8004688 <ulPortSetInterruptMask>
 8004270:	e7fe      	b.n	8004270 <prvCheckForValidListAndQueue+0x44>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:759

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004272:	4b06      	ldr	r3, [pc, #24]	; (800428c <prvCheckForValidListAndQueue+0x60>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d005      	beq.n	8004286 <prvCheckForValidListAndQueue+0x5a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:761
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800427a:	4b04      	ldr	r3, [pc, #16]	; (800428c <prvCheckForValidListAndQueue+0x60>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	4907      	ldr	r1, [pc, #28]	; (80042a0 <prvCheckForValidListAndQueue+0x74>)
 8004282:	f7fe fe41 	bl	8002f08 <vQueueAddToRegistry>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:775
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004286:	f000 f9e7 	bl	8004658 <vPortExitCritical>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/src/timers.c:776
}
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20001398 	.word	0x20001398
 8004290:	20001368 	.word	0x20001368
 8004294:	2000137c 	.word	0x2000137c
 8004298:	20001390 	.word	0x20001390
 800429c:	20001394 	.word	0x20001394
 80042a0:	08009408 	.word	0x08009408

080042a4 <pvPortMalloc>:
pvPortMalloc():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:146
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:149
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:151

	vTaskSuspendAll();
 80042b0:	f7ff f82e 	bl	8003310 <vTaskSuspendAll>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:155
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 80042b4:	4b40      	ldr	r3, [pc, #256]	; (80043b8 <pvPortMalloc+0x114>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d104      	bne.n	80042c6 <pvPortMalloc+0x22>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:157
		{
			prvHeapInit();
 80042bc:	f000 f8bc 	bl	8004438 <prvHeapInit>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:158
			xHeapHasBeenInitialised = pdTRUE;
 80042c0:	4b3d      	ldr	r3, [pc, #244]	; (80043b8 <pvPortMalloc+0x114>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:163
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00d      	beq.n	80042e8 <pvPortMalloc+0x44>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:165
		{
			xWantedSize += heapSTRUCT_SIZE;
 80042cc:	2308      	movs	r3, #8
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	4413      	add	r3, r2
 80042d2:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:168

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d004      	beq.n	80042e8 <pvPortMalloc+0x44>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:171
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f023 0307 	bic.w	r3, r3, #7
 80042e4:	3308      	adds	r3, #8
 80042e6:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:175
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d057      	beq.n	800439e <pvPortMalloc+0xfa>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:175 (discriminator 1)
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	f244 33f7 	movw	r3, #17399	; 0x43f7
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d852      	bhi.n	800439e <pvPortMalloc+0xfa>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:179
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 80042f8:	4b30      	ldr	r3, [pc, #192]	; (80043bc <pvPortMalloc+0x118>)
 80042fa:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:180
			pxBlock = xStart.pxNextFreeBlock;
 80042fc:	4b2f      	ldr	r3, [pc, #188]	; (80043bc <pvPortMalloc+0x118>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:181
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004302:	e004      	b.n	800430e <pvPortMalloc+0x6a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:183
			{
				pxPreviousBlock = pxBlock;
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	61bb      	str	r3, [r7, #24]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:184
				pxBlock = pxBlock->pxNextFreeBlock;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	61fb      	str	r3, [r7, #28]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:181 (discriminator 1)
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	429a      	cmp	r2, r3
 8004316:	d203      	bcs.n	8004320 <pvPortMalloc+0x7c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:181 (discriminator 2)
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f1      	bne.n	8004304 <pvPortMalloc+0x60>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:188
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8004320:	69fa      	ldr	r2, [r7, #28]
 8004322:	4b27      	ldr	r3, [pc, #156]	; (80043c0 <pvPortMalloc+0x11c>)
 8004324:	429a      	cmp	r2, r3
 8004326:	d03a      	beq.n	800439e <pvPortMalloc+0xfa>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:192
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	2308      	movs	r3, #8
 800432e:	4413      	add	r3, r2
 8004330:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:196

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:199

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	1ad2      	subs	r2, r2, r3
 8004342:	2308      	movs	r3, #8
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	429a      	cmp	r2, r3
 8004348:	d922      	bls.n	8004390 <pvPortMalloc+0xec>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:204
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4413      	add	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:208

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	1ad2      	subs	r2, r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:209
					pxBlock->xBlockSize = xWantedSize;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:212

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	60bb      	str	r3, [r7, #8]
 800436a:	4b14      	ldr	r3, [pc, #80]	; (80043bc <pvPortMalloc+0x118>)
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	e002      	b.n	8004376 <pvPortMalloc+0xd2>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:212 (discriminator 2)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:212 (discriminator 1)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	429a      	cmp	r2, r3
 8004380:	d3f6      	bcc.n	8004370 <pvPortMalloc+0xcc>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:212 (discriminator 3)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:215
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004390:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <pvPortMalloc+0x120>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	1ad2      	subs	r2, r2, r3
 800439a:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <pvPortMalloc+0x120>)
 800439c:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:221
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	xTaskResumeAll();
 800439e:	f7fe ffc5 	bl	800332c <xTaskResumeAll>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:225

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <pvPortMalloc+0x108>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:228
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80043a8:	f7fc fdbe 	bl	8000f28 <vApplicationMallocFailedHook>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:233
		}
	}
	#endif

	return pvReturn;
 80043ac:	697b      	ldr	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:234
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	200057b0 	.word	0x200057b0
 80043bc:	200057a0 	.word	0x200057a0
 80043c0:	200057a8 	.word	0x200057a8
 80043c4:	20000014 	.word	0x20000014

080043c8 <vPortFree>:
vPortFree():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:238
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:239
uint8_t *puc = ( uint8_t * ) pv;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:242
BlockLink_t *pxLink;

	if( pv != NULL )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d027      	beq.n	800442a <vPortFree+0x62>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:246
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 80043da:	2308      	movs	r3, #8
 80043dc:	425b      	negs	r3, r3
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4413      	add	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:250

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:252

		vTaskSuspendAll();
 80043e8:	f7fe ff92 	bl	8003310 <vTaskSuspendAll>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:255
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <vPortFree+0x68>)
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	e002      	b.n	80043fe <vPortFree+0x36>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:255 (discriminator 2)
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	617b      	str	r3, [r7, #20]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:255 (discriminator 1)
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	429a      	cmp	r2, r3
 8004408:	d3f6      	bcc.n	80043f8 <vPortFree+0x30>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:255 (discriminator 3)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:256 (discriminator 3)
			xFreeBytesRemaining += pxLink->xBlockSize;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <vPortFree+0x6c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	441a      	add	r2, r3
 8004422:	4b04      	ldr	r3, [pc, #16]	; (8004434 <vPortFree+0x6c>)
 8004424:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:259 (discriminator 3)
			traceFREE( pv, pxLink->xBlockSize );
		}
		xTaskResumeAll();
 8004426:	f7fe ff81 	bl	800332c <xTaskResumeAll>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:261
	}
}
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	200057a0 	.word	0x200057a0
 8004434:	20000014 	.word	0x20000014

08004438 <prvHeapInit>:
prvHeapInit():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:277
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:282
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 800443e:	4b0f      	ldr	r3, [pc, #60]	; (800447c <prvHeapInit+0x44>)
 8004440:	f023 0307 	bic.w	r3, r3, #7
 8004444:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:286

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004446:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <prvHeapInit+0x48>)
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:287
	xStart.xBlockSize = ( size_t ) 0;
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <prvHeapInit+0x48>)
 800444e:	2200      	movs	r2, #0
 8004450:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:290

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <prvHeapInit+0x4c>)
 8004454:	f244 32f8 	movw	r2, #17400	; 0x43f8
 8004458:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:291
	xEnd.pxNextFreeBlock = NULL;
 800445a:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <prvHeapInit+0x4c>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:295

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	603b      	str	r3, [r7, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:296
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	f244 32f8 	movw	r2, #17400	; 0x43f8
 800446a:	605a      	str	r2, [r3, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:297
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	4a05      	ldr	r2, [pc, #20]	; (8004484 <prvHeapInit+0x4c>)
 8004470:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/heap_2.c:298
}
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	200013a8 	.word	0x200013a8
 8004480:	200057a0 	.word	0x200057a0
 8004484:	200057a8 	.word	0x200057a8

08004488 <pxPortInitialiseStack>:
pxPortInitialiseStack():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:214

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:220
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3b04      	subs	r3, #4
 8004498:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:222

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044a0:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:223
	pxTopOfStack--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	3b04      	subs	r3, #4
 80044a6:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:224
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:225
	pxTopOfStack--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3b04      	subs	r3, #4
 80044b2:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:226
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044b4:	4a0c      	ldr	r2, [pc, #48]	; (80044e8 <pxPortInitialiseStack+0x60>)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:229

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	3b14      	subs	r3, #20
 80044be:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:230
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:234

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3b04      	subs	r3, #4
 80044ca:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:235
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f06f 0202 	mvn.w	r2, #2
 80044d2:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:237

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3b20      	subs	r3, #32
 80044d8:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:239

	return pxTopOfStack;
 80044da:	68fb      	ldr	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:240
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	080044ed 	.word	0x080044ed

080044ec <prvTaskExitError>:
prvTaskExitError():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:244
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:251
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80044f0:	4b05      	ldr	r3, [pc, #20]	; (8004508 <prvTaskExitError+0x1c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f8:	d002      	beq.n	8004500 <prvTaskExitError+0x14>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:251 (discriminator 1)
 80044fa:	f000 f8c5 	bl	8004688 <ulPortSetInterruptMask>
 80044fe:	e7fe      	b.n	80044fe <prvTaskExitError+0x12>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:252
	portDISABLE_INTERRUPTS();
 8004500:	f000 f8c2 	bl	8004688 <ulPortSetInterruptMask>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:253 (discriminator 1)
	for( ;; );
 8004504:	e7fe      	b.n	8004504 <prvTaskExitError+0x18>
 8004506:	bf00      	nop
 8004508:	20000018 	.word	0x20000018

0800450c <SVC_Handler>:
SVC_Handler():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:259
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <pxCurrentTCBConst2>)
 800450e:	6819      	ldr	r1, [r3, #0]
 8004510:	6808      	ldr	r0, [r1, #0]
 8004512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004516:	f380 8809 	msr	PSP, r0
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f04f 0000 	mov.w	r0, #0
 8004522:	f380 8811 	msr	BASEPRI, r0
 8004526:	4770      	bx	lr

08004528 <pxCurrentTCBConst2>:
 8004528:	2000126c 	.word	0x2000126c

0800452c <prvPortStartFirstTask>:
prvPortStartFirstTask():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:278
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800452c:	4805      	ldr	r0, [pc, #20]	; (8004544 <prvPortStartFirstTask+0x18>)
 800452e:	6800      	ldr	r0, [r0, #0]
 8004530:	6800      	ldr	r0, [r0, #0]
 8004532:	f380 8808 	msr	MSP, r0
 8004536:	b662      	cpsie	i
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	df00      	svc	0
 8004542:	bf00      	nop
$d():
 8004544:	e000ed08 	.word	0xe000ed08

08004548 <xPortStartScheduler>:
xPortStartScheduler():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:296

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:304
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800454e:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <xPortStartScheduler+0xb8>)
 8004550:	60fb      	str	r3, [r7, #12]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:313
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	b2db      	uxtb	r3, r3
 8004558:	60bb      	str	r3, [r7, #8]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:317

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	22ff      	movs	r2, #255	; 0xff
 800455e:	701a      	strb	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:320

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	71fb      	strb	r3, [r7, #7]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:323

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004570:	b2da      	uxtb	r2, r3
 8004572:	4b24      	ldr	r3, [pc, #144]	; (8004604 <xPortStartScheduler+0xbc>)
 8004574:	701a      	strb	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:327

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004576:	4b24      	ldr	r3, [pc, #144]	; (8004608 <xPortStartScheduler+0xc0>)
 8004578:	2207      	movs	r2, #7
 800457a:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:328
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800457c:	e009      	b.n	8004592 <xPortStartScheduler+0x4a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:330
		{
			ulMaxPRIGROUPValue--;
 800457e:	4b22      	ldr	r3, [pc, #136]	; (8004608 <xPortStartScheduler+0xc0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	1e5a      	subs	r2, r3, #1
 8004584:	4b20      	ldr	r3, [pc, #128]	; (8004608 <xPortStartScheduler+0xc0>)
 8004586:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:331
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	b2db      	uxtb	r3, r3
 8004590:	71fb      	strb	r3, [r7, #7]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:328 (discriminator 1)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	b2db      	uxtb	r3, r3
 8004598:	b25b      	sxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	dbef      	blt.n	800457e <xPortStartScheduler+0x36>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:336
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800459e:	4b1a      	ldr	r3, [pc, #104]	; (8004608 <xPortStartScheduler+0xc0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	021a      	lsls	r2, r3, #8
 80045a4:	4b18      	ldr	r3, [pc, #96]	; (8004608 <xPortStartScheduler+0xc0>)
 80045a6:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:337
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045a8:	4b17      	ldr	r3, [pc, #92]	; (8004608 <xPortStartScheduler+0xc0>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045b0:	4b15      	ldr	r3, [pc, #84]	; (8004608 <xPortStartScheduler+0xc0>)
 80045b2:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:341

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	701a      	strb	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:346
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045bc:	4b13      	ldr	r3, [pc, #76]	; (800460c <xPortStartScheduler+0xc4>)
 80045be:	4a13      	ldr	r2, [pc, #76]	; (800460c <xPortStartScheduler+0xc4>)
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80045c6:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:347
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045c8:	4b10      	ldr	r3, [pc, #64]	; (800460c <xPortStartScheduler+0xc4>)
 80045ca:	4a10      	ldr	r2, [pc, #64]	; (800460c <xPortStartScheduler+0xc4>)
 80045cc:	6812      	ldr	r2, [r2, #0]
 80045ce:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80045d2:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:351

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045d4:	f000 f8a6 	bl	8004724 <vPortSetupTimerInterrupt>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:354

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045d8:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <xPortStartScheduler+0xc8>)
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:357

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045de:	f000 f8b3 	bl	8004748 <vPortEnableVFP>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:360

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045e2:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <xPortStartScheduler+0xcc>)
 80045e4:	4a0b      	ldr	r2, [pc, #44]	; (8004614 <xPortStartScheduler+0xcc>)
 80045e6:	6812      	ldr	r2, [r2, #0]
 80045e8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80045ec:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:363

	/* Start the first task. */
	prvPortStartFirstTask();
 80045ee:	f7ff ff9d 	bl	800452c <prvPortStartFirstTask>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:369

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80045f2:	f7ff ff7b 	bl	80044ec <prvTaskExitError>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:372

	/* Should not get here! */
	return 0;
 80045f6:	2300      	movs	r3, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:373
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	e000e400 	.word	0xe000e400
 8004604:	200057b4 	.word	0x200057b4
 8004608:	200057b8 	.word	0x200057b8
 800460c:	e000ed20 	.word	0xe000ed20
 8004610:	20000018 	.word	0x20000018
 8004614:	e000ef34 	.word	0xe000ef34

08004618 <vPortYield>:
vPortYield():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:385
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:387
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <vPortYield+0x1c>)
 800461e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004622:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:391

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8004624:	f3bf 8f4f 	dsb	sy
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:392
	__asm volatile( "isb" );
 8004628:	f3bf 8f6f 	isb	sy
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:393
}
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	e000ed04 	.word	0xe000ed04

08004638 <vPortEnterCritical>:
vPortEnterCritical():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:397
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:398
	portDISABLE_INTERRUPTS();
 800463c:	f000 f824 	bl	8004688 <ulPortSetInterruptMask>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:399
	uxCriticalNesting++;
 8004640:	4b04      	ldr	r3, [pc, #16]	; (8004654 <vPortEnterCritical+0x1c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	4b03      	ldr	r3, [pc, #12]	; (8004654 <vPortEnterCritical+0x1c>)
 8004648:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:400
	__asm volatile( "dsb" );
 800464a:	f3bf 8f4f 	dsb	sy
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:401
	__asm volatile( "isb" );
 800464e:	f3bf 8f6f 	isb	sy
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:402
}
 8004652:	bd80      	pop	{r7, pc}
 8004654:	20000018 	.word	0x20000018

08004658 <vPortExitCritical>:
vPortExitCritical():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:406
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:407
	configASSERT( uxCriticalNesting );
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <vPortExitCritical+0x2c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d102      	bne.n	800466a <vPortExitCritical+0x12>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:407 (discriminator 1)
 8004664:	f000 f810 	bl	8004688 <ulPortSetInterruptMask>
 8004668:	e7fe      	b.n	8004668 <vPortExitCritical+0x10>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:408
	uxCriticalNesting--;
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <vPortExitCritical+0x2c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	1e5a      	subs	r2, r3, #1
 8004670:	4b04      	ldr	r3, [pc, #16]	; (8004684 <vPortExitCritical+0x2c>)
 8004672:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:409
	if( uxCriticalNesting == 0 )
 8004674:	4b03      	ldr	r3, [pc, #12]	; (8004684 <vPortExitCritical+0x2c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d102      	bne.n	8004682 <vPortExitCritical+0x2a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:411
	{
		portENABLE_INTERRUPTS();
 800467c:	2000      	movs	r0, #0
 800467e:	f000 f80d 	bl	800469c <vPortClearInterruptMask>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:413
	}
}
 8004682:	bd80      	pop	{r7, pc}
 8004684:	20000018 	.word	0x20000018

08004688 <ulPortSetInterruptMask>:
ulPortSetInterruptMask():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:418
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8004688:	f3ef 8011 	mrs	r0, BASEPRI
 800468c:	f04f 0150 	mov.w	r1, #80	; 0x50
 8004690:	f381 8811 	msr	BASEPRI, r1
 8004694:	4770      	bx	lr
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:429
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 8004696:	2300      	movs	r3, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:430
}
 8004698:	4618      	mov	r0, r3
 800469a:	bf00      	nop

0800469c <vPortClearInterruptMask>:
vPortClearInterruptMask():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:435
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
 800469c:	f380 8811 	msr	BASEPRI, r0
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop

080046a4 <PendSV_Handler>:
PendSV_Handler():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:451

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046a4:	f3ef 8009 	mrs	r0, PSP
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	4b12      	ldr	r3, [pc, #72]	; (80046f8 <pxCurrentTCBConst>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	f01e 0f10 	tst.w	lr, #16
 80046b4:	bf08      	it	eq
 80046b6:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046ba:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046be:	6010      	str	r0, [r2, #0]
 80046c0:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80046c4:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046c8:	f380 8811 	msr	BASEPRI, r0
 80046cc:	f7fe ff7e 	bl	80035cc <vTaskSwitchContext>
 80046d0:	f04f 0000 	mov.w	r0, #0
 80046d4:	f380 8811 	msr	BASEPRI, r0
 80046d8:	bc08      	pop	{r3}
 80046da:	6819      	ldr	r1, [r3, #0]
 80046dc:	6808      	ldr	r0, [r1, #0]
 80046de:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e2:	f01e 0f10 	tst.w	lr, #16
 80046e6:	bf08      	it	eq
 80046e8:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046ec:	f380 8809 	msr	PSP, r0
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop

080046f8 <pxCurrentTCBConst>:
 80046f8:	2000126c 	.word	0x2000126c

080046fc <SysTick_Handler>:
SysTick_Handler():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:504
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:509
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8004700:	f7ff ffc2 	bl	8004688 <ulPortSetInterruptMask>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:512
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004704:	f7fe feaa 	bl	800345c <xTaskIncrementTick>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <SysTick_Handler+0x1a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:516
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800470e:	4b04      	ldr	r3, [pc, #16]	; (8004720 <SysTick_Handler+0x24>)
 8004710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004714:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:519
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8004716:	2000      	movs	r0, #0
 8004718:	f7ff ffc0 	bl	800469c <vPortClearInterruptMask>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:520
}
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	e000ed04 	.word	0xe000ed04

08004724 <vPortSetupTimerInterrupt>:
vPortSetupTimerInterrupt():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:680
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:691
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004728:	4b04      	ldr	r3, [pc, #16]	; (800473c <vPortSetupTimerInterrupt+0x18>)
 800472a:	4a05      	ldr	r2, [pc, #20]	; (8004740 <vPortSetupTimerInterrupt+0x1c>)
 800472c:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:692
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800472e:	4b05      	ldr	r3, [pc, #20]	; (8004744 <vPortSetupTimerInterrupt+0x20>)
 8004730:	2207      	movs	r2, #7
 8004732:	601a      	str	r2, [r3, #0]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:693
}
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	e000e014 	.word	0xe000e014
 8004740:	0002903f 	.word	0x0002903f
 8004744:	e000e010 	.word	0xe000e010

08004748 <vPortEnableVFP>:
vPortEnableVFP():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:699
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004748:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004758 <vPortEnableVFP+0x10>
 800474c:	6801      	ldr	r1, [r0, #0]
 800474e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004752:	6001      	str	r1, [r0, #0]
 8004754:	4770      	bx	lr
$d():
 8004756:	0000      	.short	0x0000
 8004758:	e000ed88 	.word	0xe000ed88

0800475c <vPortValidateInterruptPriority>:
vPortValidateInterruptPriority():
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:714
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:719
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004762:	f3ef 8305 	mrs	r3, IPSR
 8004766:	607b      	str	r3, [r7, #4]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:722

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b0f      	cmp	r3, #15
 800476c:	d90c      	bls.n	8004788 <vPortValidateInterruptPriority+0x2c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:725
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800476e:	4a0d      	ldr	r2, [pc, #52]	; (80047a4 <vPortValidateInterruptPriority+0x48>)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4413      	add	r3, r2
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	70fb      	strb	r3, [r7, #3]
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:750
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004778:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <vPortValidateInterruptPriority+0x4c>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	78fa      	ldrb	r2, [r7, #3]
 800477e:	429a      	cmp	r2, r3
 8004780:	d202      	bcs.n	8004788 <vPortValidateInterruptPriority+0x2c>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:750 (discriminator 1)
 8004782:	f7ff ff81 	bl	8004688 <ulPortSetInterruptMask>
 8004786:	e7fe      	b.n	8004786 <vPortValidateInterruptPriority+0x2a>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:766
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004788:	4b08      	ldr	r3, [pc, #32]	; (80047ac <vPortValidateInterruptPriority+0x50>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004790:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <vPortValidateInterruptPriority+0x54>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d902      	bls.n	800479e <vPortValidateInterruptPriority+0x42>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:766 (discriminator 1)
 8004798:	f7ff ff76 	bl	8004688 <ulPortSetInterruptMask>
 800479c:	e7fe      	b.n	800479c <vPortValidateInterruptPriority+0x40>
/home/chansak/workspace/Project_v2.0/Debug/../libs/FreeRTOS/portable/port.c:767
	}
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	e000e3f0 	.word	0xe000e3f0
 80047a8:	200057b4 	.word	0x200057b4
 80047ac:	e000ed0c 	.word	0xe000ed0c
 80047b0:	200057b8 	.word	0x200057b8

080047b4 <__errno>:
__errno():
 80047b4:	4b01      	ldr	r3, [pc, #4]	; (80047bc <__errno+0x8>)
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20000448 	.word	0x20000448

080047c0 <memcmp>:
memcmp():
 80047c0:	2a03      	cmp	r2, #3
 80047c2:	b470      	push	{r4, r5, r6}
 80047c4:	d928      	bls.n	8004818 <memcmp+0x58>
 80047c6:	ea40 0301 	orr.w	r3, r0, r1
 80047ca:	079b      	lsls	r3, r3, #30
 80047cc:	d013      	beq.n	80047f6 <memcmp+0x36>
 80047ce:	7805      	ldrb	r5, [r0, #0]
 80047d0:	780c      	ldrb	r4, [r1, #0]
 80047d2:	42a5      	cmp	r5, r4
 80047d4:	d124      	bne.n	8004820 <memcmp+0x60>
 80047d6:	3a01      	subs	r2, #1
 80047d8:	2300      	movs	r3, #0
 80047da:	e005      	b.n	80047e8 <memcmp+0x28>
 80047dc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80047e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80047e4:	42a5      	cmp	r5, r4
 80047e6:	d11b      	bne.n	8004820 <memcmp+0x60>
 80047e8:	4293      	cmp	r3, r2
 80047ea:	f103 0301 	add.w	r3, r3, #1
 80047ee:	d1f5      	bne.n	80047dc <memcmp+0x1c>
 80047f0:	2000      	movs	r0, #0
 80047f2:	bc70      	pop	{r4, r5, r6}
 80047f4:	4770      	bx	lr
 80047f6:	460c      	mov	r4, r1
 80047f8:	4603      	mov	r3, r0
 80047fa:	6825      	ldr	r5, [r4, #0]
 80047fc:	681e      	ldr	r6, [r3, #0]
 80047fe:	42ae      	cmp	r6, r5
 8004800:	4621      	mov	r1, r4
 8004802:	4618      	mov	r0, r3
 8004804:	f104 0404 	add.w	r4, r4, #4
 8004808:	f103 0304 	add.w	r3, r3, #4
 800480c:	d104      	bne.n	8004818 <memcmp+0x58>
 800480e:	3a04      	subs	r2, #4
 8004810:	2a03      	cmp	r2, #3
 8004812:	4618      	mov	r0, r3
 8004814:	4621      	mov	r1, r4
 8004816:	d8f0      	bhi.n	80047fa <memcmp+0x3a>
 8004818:	2a00      	cmp	r2, #0
 800481a:	d1d8      	bne.n	80047ce <memcmp+0xe>
 800481c:	4610      	mov	r0, r2
 800481e:	e7e8      	b.n	80047f2 <memcmp+0x32>
 8004820:	1b28      	subs	r0, r5, r4
 8004822:	bc70      	pop	{r4, r5, r6}
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop

08004828 <memcpy>:
memcpy():
 8004828:	4684      	mov	ip, r0
 800482a:	ea41 0300 	orr.w	r3, r1, r0
 800482e:	f013 0303 	ands.w	r3, r3, #3
 8004832:	d16d      	bne.n	8004910 <memcpy+0xe8>
 8004834:	3a40      	subs	r2, #64	; 0x40
 8004836:	d341      	bcc.n	80048bc <memcpy+0x94>
 8004838:	f851 3b04 	ldr.w	r3, [r1], #4
 800483c:	f840 3b04 	str.w	r3, [r0], #4
 8004840:	f851 3b04 	ldr.w	r3, [r1], #4
 8004844:	f840 3b04 	str.w	r3, [r0], #4
 8004848:	f851 3b04 	ldr.w	r3, [r1], #4
 800484c:	f840 3b04 	str.w	r3, [r0], #4
 8004850:	f851 3b04 	ldr.w	r3, [r1], #4
 8004854:	f840 3b04 	str.w	r3, [r0], #4
 8004858:	f851 3b04 	ldr.w	r3, [r1], #4
 800485c:	f840 3b04 	str.w	r3, [r0], #4
 8004860:	f851 3b04 	ldr.w	r3, [r1], #4
 8004864:	f840 3b04 	str.w	r3, [r0], #4
 8004868:	f851 3b04 	ldr.w	r3, [r1], #4
 800486c:	f840 3b04 	str.w	r3, [r0], #4
 8004870:	f851 3b04 	ldr.w	r3, [r1], #4
 8004874:	f840 3b04 	str.w	r3, [r0], #4
 8004878:	f851 3b04 	ldr.w	r3, [r1], #4
 800487c:	f840 3b04 	str.w	r3, [r0], #4
 8004880:	f851 3b04 	ldr.w	r3, [r1], #4
 8004884:	f840 3b04 	str.w	r3, [r0], #4
 8004888:	f851 3b04 	ldr.w	r3, [r1], #4
 800488c:	f840 3b04 	str.w	r3, [r0], #4
 8004890:	f851 3b04 	ldr.w	r3, [r1], #4
 8004894:	f840 3b04 	str.w	r3, [r0], #4
 8004898:	f851 3b04 	ldr.w	r3, [r1], #4
 800489c:	f840 3b04 	str.w	r3, [r0], #4
 80048a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80048a4:	f840 3b04 	str.w	r3, [r0], #4
 80048a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80048ac:	f840 3b04 	str.w	r3, [r0], #4
 80048b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80048b4:	f840 3b04 	str.w	r3, [r0], #4
 80048b8:	3a40      	subs	r2, #64	; 0x40
 80048ba:	d2bd      	bcs.n	8004838 <memcpy+0x10>
 80048bc:	3230      	adds	r2, #48	; 0x30
 80048be:	d311      	bcc.n	80048e4 <memcpy+0xbc>
 80048c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80048c4:	f840 3b04 	str.w	r3, [r0], #4
 80048c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80048cc:	f840 3b04 	str.w	r3, [r0], #4
 80048d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80048d4:	f840 3b04 	str.w	r3, [r0], #4
 80048d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80048dc:	f840 3b04 	str.w	r3, [r0], #4
 80048e0:	3a10      	subs	r2, #16
 80048e2:	d2ed      	bcs.n	80048c0 <memcpy+0x98>
 80048e4:	320c      	adds	r2, #12
 80048e6:	d305      	bcc.n	80048f4 <memcpy+0xcc>
 80048e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80048ec:	f840 3b04 	str.w	r3, [r0], #4
 80048f0:	3a04      	subs	r2, #4
 80048f2:	d2f9      	bcs.n	80048e8 <memcpy+0xc0>
 80048f4:	3204      	adds	r2, #4
 80048f6:	d008      	beq.n	800490a <memcpy+0xe2>
 80048f8:	07d2      	lsls	r2, r2, #31
 80048fa:	bf1c      	itt	ne
 80048fc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8004900:	f800 3b01 	strbne.w	r3, [r0], #1
 8004904:	d301      	bcc.n	800490a <memcpy+0xe2>
 8004906:	880b      	ldrh	r3, [r1, #0]
 8004908:	8003      	strh	r3, [r0, #0]
 800490a:	4660      	mov	r0, ip
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	2a08      	cmp	r2, #8
 8004912:	d313      	bcc.n	800493c <memcpy+0x114>
 8004914:	078b      	lsls	r3, r1, #30
 8004916:	d08d      	beq.n	8004834 <memcpy+0xc>
 8004918:	f010 0303 	ands.w	r3, r0, #3
 800491c:	d08a      	beq.n	8004834 <memcpy+0xc>
 800491e:	f1c3 0304 	rsb	r3, r3, #4
 8004922:	1ad2      	subs	r2, r2, r3
 8004924:	07db      	lsls	r3, r3, #31
 8004926:	bf1c      	itt	ne
 8004928:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800492c:	f800 3b01 	strbne.w	r3, [r0], #1
 8004930:	d380      	bcc.n	8004834 <memcpy+0xc>
 8004932:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004936:	f820 3b02 	strh.w	r3, [r0], #2
 800493a:	e77b      	b.n	8004834 <memcpy+0xc>
 800493c:	3a04      	subs	r2, #4
 800493e:	d3d9      	bcc.n	80048f4 <memcpy+0xcc>
 8004940:	3a01      	subs	r2, #1
 8004942:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004946:	f800 3b01 	strb.w	r3, [r0], #1
 800494a:	d2f9      	bcs.n	8004940 <memcpy+0x118>
 800494c:	780b      	ldrb	r3, [r1, #0]
 800494e:	7003      	strb	r3, [r0, #0]
 8004950:	784b      	ldrb	r3, [r1, #1]
 8004952:	7043      	strb	r3, [r0, #1]
 8004954:	788b      	ldrb	r3, [r1, #2]
 8004956:	7083      	strb	r3, [r0, #2]
 8004958:	4660      	mov	r0, ip
 800495a:	4770      	bx	lr

0800495c <memset>:
memset():
 800495c:	b4f0      	push	{r4, r5, r6, r7}
 800495e:	0784      	lsls	r4, r0, #30
 8004960:	d043      	beq.n	80049ea <memset+0x8e>
 8004962:	1e54      	subs	r4, r2, #1
 8004964:	2a00      	cmp	r2, #0
 8004966:	d03e      	beq.n	80049e6 <memset+0x8a>
 8004968:	b2cd      	uxtb	r5, r1
 800496a:	4603      	mov	r3, r0
 800496c:	e003      	b.n	8004976 <memset+0x1a>
 800496e:	1e62      	subs	r2, r4, #1
 8004970:	2c00      	cmp	r4, #0
 8004972:	d038      	beq.n	80049e6 <memset+0x8a>
 8004974:	4614      	mov	r4, r2
 8004976:	f803 5b01 	strb.w	r5, [r3], #1
 800497a:	079a      	lsls	r2, r3, #30
 800497c:	d1f7      	bne.n	800496e <memset+0x12>
 800497e:	2c03      	cmp	r4, #3
 8004980:	d92a      	bls.n	80049d8 <memset+0x7c>
 8004982:	b2cd      	uxtb	r5, r1
 8004984:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004988:	2c0f      	cmp	r4, #15
 800498a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800498e:	d915      	bls.n	80049bc <memset+0x60>
 8004990:	f1a4 0710 	sub.w	r7, r4, #16
 8004994:	093f      	lsrs	r7, r7, #4
 8004996:	f103 0610 	add.w	r6, r3, #16
 800499a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800499e:	461a      	mov	r2, r3
 80049a0:	6015      	str	r5, [r2, #0]
 80049a2:	6055      	str	r5, [r2, #4]
 80049a4:	6095      	str	r5, [r2, #8]
 80049a6:	60d5      	str	r5, [r2, #12]
 80049a8:	3210      	adds	r2, #16
 80049aa:	42b2      	cmp	r2, r6
 80049ac:	d1f8      	bne.n	80049a0 <memset+0x44>
 80049ae:	f004 040f 	and.w	r4, r4, #15
 80049b2:	3701      	adds	r7, #1
 80049b4:	2c03      	cmp	r4, #3
 80049b6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80049ba:	d90d      	bls.n	80049d8 <memset+0x7c>
 80049bc:	461e      	mov	r6, r3
 80049be:	4622      	mov	r2, r4
 80049c0:	3a04      	subs	r2, #4
 80049c2:	2a03      	cmp	r2, #3
 80049c4:	f846 5b04 	str.w	r5, [r6], #4
 80049c8:	d8fa      	bhi.n	80049c0 <memset+0x64>
 80049ca:	1f22      	subs	r2, r4, #4
 80049cc:	f022 0203 	bic.w	r2, r2, #3
 80049d0:	3204      	adds	r2, #4
 80049d2:	4413      	add	r3, r2
 80049d4:	f004 0403 	and.w	r4, r4, #3
 80049d8:	b12c      	cbz	r4, 80049e6 <memset+0x8a>
 80049da:	b2c9      	uxtb	r1, r1
 80049dc:	441c      	add	r4, r3
 80049de:	f803 1b01 	strb.w	r1, [r3], #1
 80049e2:	42a3      	cmp	r3, r4
 80049e4:	d1fb      	bne.n	80049de <memset+0x82>
 80049e6:	bcf0      	pop	{r4, r5, r6, r7}
 80049e8:	4770      	bx	lr
 80049ea:	4614      	mov	r4, r2
 80049ec:	4603      	mov	r3, r0
 80049ee:	e7c6      	b.n	800497e <memset+0x22>

080049f0 <sprintf>:
sprintf():
 80049f0:	b40e      	push	{r1, r2, r3}
 80049f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049f4:	b09c      	sub	sp, #112	; 0x70
 80049f6:	ab21      	add	r3, sp, #132	; 0x84
 80049f8:	490f      	ldr	r1, [pc, #60]	; (8004a38 <sprintf+0x48>)
 80049fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	4605      	mov	r5, r0
 8004a02:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8004a06:	6808      	ldr	r0, [r1, #0]
 8004a08:	9502      	str	r5, [sp, #8]
 8004a0a:	f44f 7702 	mov.w	r7, #520	; 0x208
 8004a0e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8004a12:	a902      	add	r1, sp, #8
 8004a14:	9506      	str	r5, [sp, #24]
 8004a16:	f8ad 7014 	strh.w	r7, [sp, #20]
 8004a1a:	9404      	str	r4, [sp, #16]
 8004a1c:	9407      	str	r4, [sp, #28]
 8004a1e:	f8ad 6016 	strh.w	r6, [sp, #22]
 8004a22:	f000 f80d 	bl	8004a40 <_svfprintf_r>
 8004a26:	9b02      	ldr	r3, [sp, #8]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]
 8004a2c:	b01c      	add	sp, #112	; 0x70
 8004a2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004a32:	b003      	add	sp, #12
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20000448 	.word	0x20000448
$d():
 8004a3c:	00000000 	.word	0x00000000

08004a40 <_svfprintf_r>:
_svfprintf_r():
 8004a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a44:	b0c9      	sub	sp, #292	; 0x124
 8004a46:	4691      	mov	r9, r2
 8004a48:	9310      	str	r3, [sp, #64]	; 0x40
 8004a4a:	910c      	str	r1, [sp, #48]	; 0x30
 8004a4c:	900d      	str	r0, [sp, #52]	; 0x34
 8004a4e:	f002 fa27 	bl	8006ea0 <_localeconv_r>
 8004a52:	6800      	ldr	r0, [r0, #0]
 8004a54:	9015      	str	r0, [sp, #84]	; 0x54
 8004a56:	f003 f853 	bl	8007b00 <strlen>
 8004a5a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004a5c:	9018      	str	r0, [sp, #96]	; 0x60
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	061a      	lsls	r2, r3, #24
 8004a62:	d503      	bpl.n	8004a6c <_svfprintf_r+0x2c>
 8004a64:	6923      	ldr	r3, [r4, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f001 8091 	beq.w	8005b8e <_svfprintf_r+0x114e>
 8004a6c:	ed9f 7b96 	vldr	d7, [pc, #600]	; 8004cc8 <_svfprintf_r+0x288>
 8004a70:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8004a74:	2300      	movs	r3, #0
 8004a76:	ac38      	add	r4, sp, #224	; 0xe0
 8004a78:	9311      	str	r3, [sp, #68]	; 0x44
 8004a7a:	9408      	str	r4, [sp, #32]
 8004a7c:	932d      	str	r3, [sp, #180]	; 0xb4
 8004a7e:	932c      	str	r3, [sp, #176]	; 0xb0
 8004a80:	931a      	str	r3, [sp, #104]	; 0x68
 8004a82:	9319      	str	r3, [sp, #100]	; 0x64
 8004a84:	930e      	str	r3, [sp, #56]	; 0x38
 8004a86:	942b      	str	r4, [sp, #172]	; 0xac
 8004a88:	4626      	mov	r6, r4
 8004a8a:	f899 3000 	ldrb.w	r3, [r9]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 80f8 	beq.w	8004c84 <_svfprintf_r+0x244>
 8004a94:	2b25      	cmp	r3, #37	; 0x25
 8004a96:	f000 80f5 	beq.w	8004c84 <_svfprintf_r+0x244>
 8004a9a:	f109 0201 	add.w	r2, r9, #1
 8004a9e:	e001      	b.n	8004aa4 <_svfprintf_r+0x64>
 8004aa0:	2b25      	cmp	r3, #37	; 0x25
 8004aa2:	d004      	beq.n	8004aae <_svfprintf_r+0x6e>
 8004aa4:	4614      	mov	r4, r2
 8004aa6:	3201      	adds	r2, #1
 8004aa8:	7823      	ldrb	r3, [r4, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f8      	bne.n	8004aa0 <_svfprintf_r+0x60>
 8004aae:	ebc9 0504 	rsb	r5, r9, r4
 8004ab2:	b17d      	cbz	r5, 8004ad4 <_svfprintf_r+0x94>
 8004ab4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8004ab6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8004ab8:	f8c6 9000 	str.w	r9, [r6]
 8004abc:	3301      	adds	r3, #1
 8004abe:	442a      	add	r2, r5
 8004ac0:	2b07      	cmp	r3, #7
 8004ac2:	6075      	str	r5, [r6, #4]
 8004ac4:	922d      	str	r2, [sp, #180]	; 0xb4
 8004ac6:	932c      	str	r3, [sp, #176]	; 0xb0
 8004ac8:	f300 80c2 	bgt.w	8004c50 <_svfprintf_r+0x210>
 8004acc:	3608      	adds	r6, #8
 8004ace:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004ad0:	4428      	add	r0, r5
 8004ad2:	900e      	str	r0, [sp, #56]	; 0x38
 8004ad4:	7823      	ldrb	r3, [r4, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 80c2 	beq.w	8004c60 <_svfprintf_r+0x220>
 8004adc:	2300      	movs	r3, #0
 8004ade:	f894 8001 	ldrb.w	r8, [r4, #1]
 8004ae2:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	930f      	str	r3, [sp, #60]	; 0x3c
 8004aea:	9309      	str	r3, [sp, #36]	; 0x24
 8004aec:	f104 0901 	add.w	r9, r4, #1
 8004af0:	f04f 34ff 	mov.w	r4, #4294967295
 8004af4:	940a      	str	r4, [sp, #40]	; 0x28
 8004af6:	f109 0901 	add.w	r9, r9, #1
 8004afa:	f1a8 0320 	sub.w	r3, r8, #32
 8004afe:	2b58      	cmp	r3, #88	; 0x58
 8004b00:	f200 83cc 	bhi.w	800529c <_svfprintf_r+0x85c>
 8004b04:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004b08:	03ca026f 	.word	0x03ca026f
 8004b0c:	027603ca 	.word	0x027603ca
 8004b10:	03ca03ca 	.word	0x03ca03ca
 8004b14:	03ca03ca 	.word	0x03ca03ca
 8004b18:	03ca03ca 	.word	0x03ca03ca
 8004b1c:	03690319 	.word	0x03690319
 8004b20:	009d03ca 	.word	0x009d03ca
 8004b24:	03ca00c0 	.word	0x03ca00c0
 8004b28:	0284027d 	.word	0x0284027d
 8004b2c:	02840284 	.word	0x02840284
 8004b30:	02840284 	.word	0x02840284
 8004b34:	02840284 	.word	0x02840284
 8004b38:	02840284 	.word	0x02840284
 8004b3c:	03ca03ca 	.word	0x03ca03ca
 8004b40:	03ca03ca 	.word	0x03ca03ca
 8004b44:	03ca03ca 	.word	0x03ca03ca
 8004b48:	03ca03ca 	.word	0x03ca03ca
 8004b4c:	03ca03ca 	.word	0x03ca03ca
 8004b50:	03740295 	.word	0x03740295
 8004b54:	037403ca 	.word	0x037403ca
 8004b58:	03ca03ca 	.word	0x03ca03ca
 8004b5c:	03ca03ca 	.word	0x03ca03ca
 8004b60:	03ca036d 	.word	0x03ca036d
 8004b64:	007803ca 	.word	0x007803ca
 8004b68:	03ca03ca 	.word	0x03ca03ca
 8004b6c:	03ca03ca 	.word	0x03ca03ca
 8004b70:	005903ca 	.word	0x005903ca
 8004b74:	03ca03ca 	.word	0x03ca03ca
 8004b78:	03ca02b4 	.word	0x03ca02b4
 8004b7c:	03ca03ca 	.word	0x03ca03ca
 8004b80:	03ca03ca 	.word	0x03ca03ca
 8004b84:	03ca03ca 	.word	0x03ca03ca
 8004b88:	03ca03ca 	.word	0x03ca03ca
 8004b8c:	033c03ca 	.word	0x033c03ca
 8004b90:	0374034d 	.word	0x0374034d
 8004b94:	03740374 	.word	0x03740374
 8004b98:	034d0304 	.word	0x034d0304
 8004b9c:	03ca03ca 	.word	0x03ca03ca
 8004ba0:	03ca030d 	.word	0x03ca030d
 8004ba4:	007c02ca 	.word	0x007c02ca
 8004ba8:	03aa0326 	.word	0x03aa0326
 8004bac:	02de03ca 	.word	0x02de03ca
 8004bb0:	005f03ca 	.word	0x005f03ca
 8004bb4:	03ca03ca 	.word	0x03ca03ca
 8004bb8:	00e4      	.short	0x00e4
 8004bba:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8004bbe:	f04c 0c10 	orr.w	ip, ip, #16
 8004bc2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8004bc6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004bc8:	06a2      	lsls	r2, r4, #26
 8004bca:	f100 835b 	bmi.w	8005284 <_svfprintf_r+0x844>
 8004bce:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004bd0:	06e3      	lsls	r3, r4, #27
 8004bd2:	f100 85e5 	bmi.w	80057a0 <_svfprintf_r+0xd60>
 8004bd6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8004bda:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8004bde:	f000 85df 	beq.w	80057a0 <_svfprintf_r+0xd60>
 8004be2:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8004be6:	f8bc 4000 	ldrh.w	r4, [ip]
 8004bea:	f10c 0c04 	add.w	ip, ip, #4
 8004bee:	2500      	movs	r5, #0
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8004bf6:	e092      	b.n	8004d1e <_svfprintf_r+0x2de>
 8004bf8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004bfa:	f045 0510 	orr.w	r5, r5, #16
 8004bfe:	9509      	str	r5, [sp, #36]	; 0x24
 8004c00:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8004c04:	f01c 0320 	ands.w	r3, ip, #32
 8004c08:	f040 8331 	bne.w	800526e <_svfprintf_r+0x82e>
 8004c0c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8004c10:	f01c 0210 	ands.w	r2, ip, #16
 8004c14:	f040 85bd 	bne.w	8005792 <_svfprintf_r+0xd52>
 8004c18:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8004c1c:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
 8004c20:	f000 85b7 	beq.w	8005792 <_svfprintf_r+0xd52>
 8004c24:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8004c28:	f8bc 4000 	ldrh.w	r4, [ip]
 8004c2c:	f10c 0c04 	add.w	ip, ip, #4
 8004c30:	4613      	mov	r3, r2
 8004c32:	2500      	movs	r5, #0
 8004c34:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8004c38:	e071      	b.n	8004d1e <_svfprintf_r+0x2de>
 8004c3a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8004c3c:	9310      	str	r3, [sp, #64]	; 0x40
 8004c3e:	4264      	negs	r4, r4
 8004c40:	940f      	str	r4, [sp, #60]	; 0x3c
 8004c42:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004c44:	f045 0504 	orr.w	r5, r5, #4
 8004c48:	9509      	str	r5, [sp, #36]	; 0x24
 8004c4a:	f899 8000 	ldrb.w	r8, [r9]
 8004c4e:	e752      	b.n	8004af6 <_svfprintf_r+0xb6>
 8004c50:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004c52:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c54:	aa2b      	add	r2, sp, #172	; 0xac
 8004c56:	f002 ff83 	bl	8007b60 <__ssprint_r>
 8004c5a:	b940      	cbnz	r0, 8004c6e <_svfprintf_r+0x22e>
 8004c5c:	ae38      	add	r6, sp, #224	; 0xe0
 8004c5e:	e736      	b.n	8004ace <_svfprintf_r+0x8e>
 8004c60:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8004c62:	b123      	cbz	r3, 8004c6e <_svfprintf_r+0x22e>
 8004c64:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004c66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c68:	aa2b      	add	r2, sp, #172	; 0xac
 8004c6a:	f002 ff79 	bl	8007b60 <__ssprint_r>
 8004c6e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004c70:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004c78:	bf18      	it	ne
 8004c7a:	f04f 30ff 	movne.w	r0, #4294967295
 8004c7e:	b049      	add	sp, #292	; 0x124
 8004c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c84:	464c      	mov	r4, r9
 8004c86:	e725      	b.n	8004ad4 <_svfprintf_r+0x94>
 8004c88:	f899 8000 	ldrb.w	r8, [r9]
 8004c8c:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 8004c90:	f109 0001 	add.w	r0, r9, #1
 8004c94:	f001 811d 	beq.w	8005ed2 <_svfprintf_r+0x1492>
 8004c98:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8004c9c:	2b09      	cmp	r3, #9
 8004c9e:	bf98      	it	ls
 8004ca0:	2100      	movls	r1, #0
 8004ca2:	f201 807c 	bhi.w	8005d9e <_svfprintf_r+0x135e>
 8004ca6:	f810 8b01 	ldrb.w	r8, [r0], #1
 8004caa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004cae:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8004cb2:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8004cb6:	2b09      	cmp	r3, #9
 8004cb8:	d9f5      	bls.n	8004ca6 <_svfprintf_r+0x266>
 8004cba:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
 8004cbe:	910a      	str	r1, [sp, #40]	; 0x28
 8004cc0:	4681      	mov	r9, r0
 8004cc2:	e71a      	b.n	8004afa <_svfprintf_r+0xba>
 8004cc4:	f3af 8000 	nop.w
	...
 8004cd0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004cd2:	4ca1      	ldr	r4, [pc, #644]	; (8004f58 <_svfprintf_r+0x518>)
 8004cd4:	941a      	str	r4, [sp, #104]	; 0x68
 8004cd6:	06af      	lsls	r7, r5, #26
 8004cd8:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 8004cdc:	f140 81d0 	bpl.w	8005080 <_svfprintf_r+0x640>
 8004ce0:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8004ce4:	f10c 0307 	add.w	r3, ip, #7
 8004ce8:	f023 0307 	bic.w	r3, r3, #7
 8004cec:	f103 0408 	add.w	r4, r3, #8
 8004cf0:	9410      	str	r4, [sp, #64]	; 0x40
 8004cf2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004cf6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8004cfa:	f01c 0f01 	tst.w	ip, #1
 8004cfe:	f000 8463 	beq.w	80055c8 <_svfprintf_r+0xb88>
 8004d02:	ea54 0005 	orrs.w	r0, r4, r5
 8004d06:	f000 845f 	beq.w	80055c8 <_svfprintf_r+0xb88>
 8004d0a:	2330      	movs	r3, #48	; 0x30
 8004d0c:	f04c 0c02 	orr.w	ip, ip, #2
 8004d10:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8004d14:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
 8004d18:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	f04f 0a00 	mov.w	sl, #0
 8004d22:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 8004d26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	db05      	blt.n	8004d38 <_svfprintf_r+0x2f8>
 8004d2c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8004d30:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
 8004d34:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8004d38:	ea54 0005 	orrs.w	r0, r4, r5
 8004d3c:	f040 82c6 	bne.w	80052cc <_svfprintf_r+0x88c>
 8004d40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004d42:	2900      	cmp	r1, #0
 8004d44:	f040 82c2 	bne.w	80052cc <_svfprintf_r+0x88c>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f040 8439 	bne.w	80055c0 <_svfprintf_r+0xb80>
 8004d4e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8004d52:	f01c 0f01 	tst.w	ip, #1
 8004d56:	f000 8433 	beq.w	80055c0 <_svfprintf_r+0xb80>
 8004d5a:	af48      	add	r7, sp, #288	; 0x120
 8004d5c:	2330      	movs	r3, #48	; 0x30
 8004d5e:	f807 3d41 	strb.w	r3, [r7, #-65]!
 8004d62:	9d08      	ldr	r5, [sp, #32]
 8004d64:	1bec      	subs	r4, r5, r7
 8004d66:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8004d6a:	2500      	movs	r5, #0
 8004d6c:	4564      	cmp	r4, ip
 8004d6e:	bfa8      	it	ge
 8004d70:	46a4      	movge	ip, r4
 8004d72:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8004d76:	9514      	str	r5, [sp, #80]	; 0x50
 8004d78:	f1ba 0f00 	cmp.w	sl, #0
 8004d7c:	d002      	beq.n	8004d84 <_svfprintf_r+0x344>
 8004d7e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004d80:	3501      	adds	r5, #1
 8004d82:	950b      	str	r5, [sp, #44]	; 0x2c
 8004d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d86:	f013 0302 	ands.w	r3, r3, #2
 8004d8a:	9312      	str	r3, [sp, #72]	; 0x48
 8004d8c:	d002      	beq.n	8004d94 <_svfprintf_r+0x354>
 8004d8e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004d90:	3502      	adds	r5, #2
 8004d92:	950b      	str	r5, [sp, #44]	; 0x2c
 8004d94:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8004d98:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
 8004d9c:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8004da0:	f040 8291 	bne.w	80052c6 <_svfprintf_r+0x886>
 8004da4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004da6:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8004daa:	ebcc 0b05 	rsb	fp, ip, r5
 8004dae:	f1bb 0f00 	cmp.w	fp, #0
 8004db2:	f340 8288 	ble.w	80052c6 <_svfprintf_r+0x886>
 8004db6:	f1bb 0f10 	cmp.w	fp, #16
 8004dba:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8004dbc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8004dbe:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8004f60 <_svfprintf_r+0x520>
 8004dc2:	dd2c      	ble.n	8004e1e <_svfprintf_r+0x3de>
 8004dc4:	971b      	str	r7, [sp, #108]	; 0x6c
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	4657      	mov	r7, sl
 8004dca:	2510      	movs	r5, #16
 8004dcc:	46ca      	mov	sl, r9
 8004dce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004dd0:	46a1      	mov	r9, r4
 8004dd2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004dd4:	e006      	b.n	8004de4 <_svfprintf_r+0x3a4>
 8004dd6:	f1ab 0b10 	sub.w	fp, fp, #16
 8004dda:	f1bb 0f10 	cmp.w	fp, #16
 8004dde:	f100 0008 	add.w	r0, r0, #8
 8004de2:	dd17      	ble.n	8004e14 <_svfprintf_r+0x3d4>
 8004de4:	3201      	adds	r2, #1
 8004de6:	3110      	adds	r1, #16
 8004de8:	2a07      	cmp	r2, #7
 8004dea:	912d      	str	r1, [sp, #180]	; 0xb4
 8004dec:	922c      	str	r2, [sp, #176]	; 0xb0
 8004dee:	6007      	str	r7, [r0, #0]
 8004df0:	6045      	str	r5, [r0, #4]
 8004df2:	ddf0      	ble.n	8004dd6 <_svfprintf_r+0x396>
 8004df4:	4620      	mov	r0, r4
 8004df6:	4631      	mov	r1, r6
 8004df8:	aa2b      	add	r2, sp, #172	; 0xac
 8004dfa:	f002 feb1 	bl	8007b60 <__ssprint_r>
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	f47f af35 	bne.w	8004c6e <_svfprintf_r+0x22e>
 8004e04:	f1ab 0b10 	sub.w	fp, fp, #16
 8004e08:	f1bb 0f10 	cmp.w	fp, #16
 8004e0c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8004e0e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8004e10:	a838      	add	r0, sp, #224	; 0xe0
 8004e12:	dce7      	bgt.n	8004de4 <_svfprintf_r+0x3a4>
 8004e14:	464c      	mov	r4, r9
 8004e16:	46d1      	mov	r9, sl
 8004e18:	46ba      	mov	sl, r7
 8004e1a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8004e1c:	4606      	mov	r6, r0
 8004e1e:	3201      	adds	r2, #1
 8004e20:	eb0b 0c01 	add.w	ip, fp, r1
 8004e24:	2a07      	cmp	r2, #7
 8004e26:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8004e2a:	922c      	str	r2, [sp, #176]	; 0xb0
 8004e2c:	e886 0c00 	stmia.w	r6, {sl, fp}
 8004e30:	f300 841b 	bgt.w	800566a <_svfprintf_r+0xc2a>
 8004e34:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8004e38:	3608      	adds	r6, #8
 8004e3a:	f1ba 0f00 	cmp.w	sl, #0
 8004e3e:	d00f      	beq.n	8004e60 <_svfprintf_r+0x420>
 8004e40:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8004e42:	3301      	adds	r3, #1
 8004e44:	f10c 0c01 	add.w	ip, ip, #1
 8004e48:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	2b07      	cmp	r3, #7
 8004e50:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8004e54:	932c      	str	r3, [sp, #176]	; 0xb0
 8004e56:	e886 0006 	stmia.w	r6, {r1, r2}
 8004e5a:	f300 8399 	bgt.w	8005590 <_svfprintf_r+0xb50>
 8004e5e:	3608      	adds	r6, #8
 8004e60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e62:	b173      	cbz	r3, 8004e82 <_svfprintf_r+0x442>
 8004e64:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8004e66:	3301      	adds	r3, #1
 8004e68:	f10c 0c02 	add.w	ip, ip, #2
 8004e6c:	a924      	add	r1, sp, #144	; 0x90
 8004e6e:	2202      	movs	r2, #2
 8004e70:	2b07      	cmp	r3, #7
 8004e72:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8004e76:	932c      	str	r3, [sp, #176]	; 0xb0
 8004e78:	e886 0006 	stmia.w	r6, {r1, r2}
 8004e7c:	f300 8394 	bgt.w	80055a8 <_svfprintf_r+0xb68>
 8004e80:	3608      	adds	r6, #8
 8004e82:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8004e84:	2d80      	cmp	r5, #128	; 0x80
 8004e86:	f000 82cb 	beq.w	8005420 <_svfprintf_r+0x9e0>
 8004e8a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004e8c:	ebc4 0a05 	rsb	sl, r4, r5
 8004e90:	f1ba 0f00 	cmp.w	sl, #0
 8004e94:	dd3b      	ble.n	8004f0e <_svfprintf_r+0x4ce>
 8004e96:	f1ba 0f10 	cmp.w	sl, #16
 8004e9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8004e9c:	4d2f      	ldr	r5, [pc, #188]	; (8004f5c <_svfprintf_r+0x51c>)
 8004e9e:	dd2b      	ble.n	8004ef8 <_svfprintf_r+0x4b8>
 8004ea0:	940a      	str	r4, [sp, #40]	; 0x28
 8004ea2:	4632      	mov	r2, r6
 8004ea4:	f04f 0b10 	mov.w	fp, #16
 8004ea8:	462e      	mov	r6, r5
 8004eaa:	4661      	mov	r1, ip
 8004eac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004eae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004eb0:	e006      	b.n	8004ec0 <_svfprintf_r+0x480>
 8004eb2:	f1aa 0a10 	sub.w	sl, sl, #16
 8004eb6:	f1ba 0f10 	cmp.w	sl, #16
 8004eba:	f102 0208 	add.w	r2, r2, #8
 8004ebe:	dd17      	ble.n	8004ef0 <_svfprintf_r+0x4b0>
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	3110      	adds	r1, #16
 8004ec4:	2b07      	cmp	r3, #7
 8004ec6:	912d      	str	r1, [sp, #180]	; 0xb4
 8004ec8:	932c      	str	r3, [sp, #176]	; 0xb0
 8004eca:	e882 0840 	stmia.w	r2, {r6, fp}
 8004ece:	ddf0      	ble.n	8004eb2 <_svfprintf_r+0x472>
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	aa2b      	add	r2, sp, #172	; 0xac
 8004ed6:	f002 fe43 	bl	8007b60 <__ssprint_r>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	f47f aec7 	bne.w	8004c6e <_svfprintf_r+0x22e>
 8004ee0:	f1aa 0a10 	sub.w	sl, sl, #16
 8004ee4:	f1ba 0f10 	cmp.w	sl, #16
 8004ee8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8004eea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8004eec:	aa38      	add	r2, sp, #224	; 0xe0
 8004eee:	dce7      	bgt.n	8004ec0 <_svfprintf_r+0x480>
 8004ef0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004ef2:	4635      	mov	r5, r6
 8004ef4:	468c      	mov	ip, r1
 8004ef6:	4616      	mov	r6, r2
 8004ef8:	3301      	adds	r3, #1
 8004efa:	44d4      	add	ip, sl
 8004efc:	2b07      	cmp	r3, #7
 8004efe:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8004f02:	932c      	str	r3, [sp, #176]	; 0xb0
 8004f04:	e886 0420 	stmia.w	r6, {r5, sl}
 8004f08:	f300 8336 	bgt.w	8005578 <_svfprintf_r+0xb38>
 8004f0c:	3608      	adds	r6, #8
 8004f0e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004f10:	05ed      	lsls	r5, r5, #23
 8004f12:	f100 8225 	bmi.w	8005360 <_svfprintf_r+0x920>
 8004f16:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8004f18:	6037      	str	r7, [r6, #0]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	44a4      	add	ip, r4
 8004f1e:	2b07      	cmp	r3, #7
 8004f20:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8004f24:	6074      	str	r4, [r6, #4]
 8004f26:	932c      	str	r3, [sp, #176]	; 0xb0
 8004f28:	f300 8310 	bgt.w	800554c <_svfprintf_r+0xb0c>
 8004f2c:	3608      	adds	r6, #8
 8004f2e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004f30:	0763      	lsls	r3, r4, #29
 8004f32:	d548      	bpl.n	8004fc6 <_svfprintf_r+0x586>
 8004f34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004f36:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004f38:	1a2c      	subs	r4, r5, r0
 8004f3a:	2c00      	cmp	r4, #0
 8004f3c:	dd43      	ble.n	8004fc6 <_svfprintf_r+0x586>
 8004f3e:	2c10      	cmp	r4, #16
 8004f40:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8004f42:	f8df a01c 	ldr.w	sl, [pc, #28]	; 8004f60 <_svfprintf_r+0x520>
 8004f46:	dd2a      	ble.n	8004f9e <_svfprintf_r+0x55e>
 8004f48:	4657      	mov	r7, sl
 8004f4a:	2510      	movs	r5, #16
 8004f4c:	4662      	mov	r2, ip
 8004f4e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004f52:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8004f56:	e00a      	b.n	8004f6e <_svfprintf_r+0x52e>
 8004f58:	08009448 	.word	0x08009448
 8004f5c:	08009414 	.word	0x08009414
 8004f60:	08009468 	.word	0x08009468
 8004f64:	3c10      	subs	r4, #16
 8004f66:	2c10      	cmp	r4, #16
 8004f68:	f106 0608 	add.w	r6, r6, #8
 8004f6c:	dd15      	ble.n	8004f9a <_svfprintf_r+0x55a>
 8004f6e:	3301      	adds	r3, #1
 8004f70:	3210      	adds	r2, #16
 8004f72:	2b07      	cmp	r3, #7
 8004f74:	922d      	str	r2, [sp, #180]	; 0xb4
 8004f76:	932c      	str	r3, [sp, #176]	; 0xb0
 8004f78:	6037      	str	r7, [r6, #0]
 8004f7a:	6075      	str	r5, [r6, #4]
 8004f7c:	ddf2      	ble.n	8004f64 <_svfprintf_r+0x524>
 8004f7e:	4650      	mov	r0, sl
 8004f80:	4641      	mov	r1, r8
 8004f82:	aa2b      	add	r2, sp, #172	; 0xac
 8004f84:	f002 fdec 	bl	8007b60 <__ssprint_r>
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	f47f ae70 	bne.w	8004c6e <_svfprintf_r+0x22e>
 8004f8e:	3c10      	subs	r4, #16
 8004f90:	2c10      	cmp	r4, #16
 8004f92:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8004f94:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8004f96:	ae38      	add	r6, sp, #224	; 0xe0
 8004f98:	dce9      	bgt.n	8004f6e <_svfprintf_r+0x52e>
 8004f9a:	4694      	mov	ip, r2
 8004f9c:	46ba      	mov	sl, r7
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	44a4      	add	ip, r4
 8004fa2:	2b07      	cmp	r3, #7
 8004fa4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8004fa8:	932c      	str	r3, [sp, #176]	; 0xb0
 8004faa:	f8c6 a000 	str.w	sl, [r6]
 8004fae:	6074      	str	r4, [r6, #4]
 8004fb0:	dd09      	ble.n	8004fc6 <_svfprintf_r+0x586>
 8004fb2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004fb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004fb6:	aa2b      	add	r2, sp, #172	; 0xac
 8004fb8:	f002 fdd2 	bl	8007b60 <__ssprint_r>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	f47f ae56 	bne.w	8004c6e <_svfprintf_r+0x22e>
 8004fc2:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8004fc6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004fc8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004fca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004fcc:	42a8      	cmp	r0, r5
 8004fce:	bfac      	ite	ge
 8004fd0:	1824      	addge	r4, r4, r0
 8004fd2:	1964      	addlt	r4, r4, r5
 8004fd4:	940e      	str	r4, [sp, #56]	; 0x38
 8004fd6:	f1bc 0f00 	cmp.w	ip, #0
 8004fda:	f040 82c3 	bne.w	8005564 <_svfprintf_r+0xb24>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	932c      	str	r3, [sp, #176]	; 0xb0
 8004fe2:	ae38      	add	r6, sp, #224	; 0xe0
 8004fe4:	e551      	b.n	8004a8a <_svfprintf_r+0x4a>
 8004fe6:	f899 8000 	ldrb.w	r8, [r9]
 8004fea:	2a00      	cmp	r2, #0
 8004fec:	f47f ad83 	bne.w	8004af6 <_svfprintf_r+0xb6>
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	e580      	b.n	8004af6 <_svfprintf_r+0xb6>
 8004ff4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004ff6:	f045 0501 	orr.w	r5, r5, #1
 8004ffa:	9509      	str	r5, [sp, #36]	; 0x24
 8004ffc:	f899 8000 	ldrb.w	r8, [r9]
 8005000:	e579      	b.n	8004af6 <_svfprintf_r+0xb6>
 8005002:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005004:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005008:	9509      	str	r5, [sp, #36]	; 0x24
 800500a:	f899 8000 	ldrb.w	r8, [r9]
 800500e:	e572      	b.n	8004af6 <_svfprintf_r+0xb6>
 8005010:	2400      	movs	r4, #0
 8005012:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8005016:	940f      	str	r4, [sp, #60]	; 0x3c
 8005018:	4621      	mov	r1, r4
 800501a:	f819 8b01 	ldrb.w	r8, [r9], #1
 800501e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005022:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8005026:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800502a:	2b09      	cmp	r3, #9
 800502c:	d9f5      	bls.n	800501a <_svfprintf_r+0x5da>
 800502e:	910f      	str	r1, [sp, #60]	; 0x3c
 8005030:	e563      	b.n	8004afa <_svfprintf_r+0xba>
 8005032:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8005036:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 800503a:	f04c 0c10 	orr.w	ip, ip, #16
 800503e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8005042:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005044:	06a3      	lsls	r3, r4, #26
 8005046:	f140 80b2 	bpl.w	80051ae <_svfprintf_r+0x76e>
 800504a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800504c:	1de9      	adds	r1, r5, #7
 800504e:	f021 0107 	bic.w	r1, r1, #7
 8005052:	e9d1 2300 	ldrd	r2, r3, [r1]
 8005056:	3108      	adds	r1, #8
 8005058:	9110      	str	r1, [sp, #64]	; 0x40
 800505a:	4614      	mov	r4, r2
 800505c:	461d      	mov	r5, r3
 800505e:	2a00      	cmp	r2, #0
 8005060:	f173 0000 	sbcs.w	r0, r3, #0
 8005064:	f2c0 838b 	blt.w	800577e <_svfprintf_r+0xd3e>
 8005068:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 800506c:	2301      	movs	r3, #1
 800506e:	e65a      	b.n	8004d26 <_svfprintf_r+0x2e6>
 8005070:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005072:	4cb7      	ldr	r4, [pc, #732]	; (8005350 <_svfprintf_r+0x910>)
 8005074:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 8005078:	06af      	lsls	r7, r5, #26
 800507a:	941a      	str	r4, [sp, #104]	; 0x68
 800507c:	f53f ae30 	bmi.w	8004ce0 <_svfprintf_r+0x2a0>
 8005080:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005082:	06ed      	lsls	r5, r5, #27
 8005084:	f140 845e 	bpl.w	8005944 <_svfprintf_r+0xf04>
 8005088:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 800508c:	f8dc 4000 	ldr.w	r4, [ip]
 8005090:	f10c 0c04 	add.w	ip, ip, #4
 8005094:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8005098:	2500      	movs	r5, #0
 800509a:	e62c      	b.n	8004cf6 <_svfprintf_r+0x2b6>
 800509c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80050a0:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 80050a4:	f01c 0f20 	tst.w	ip, #32
 80050a8:	f000 843e 	beq.w	8005928 <_svfprintf_r+0xee8>
 80050ac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80050ae:	6821      	ldr	r1, [r4, #0]
 80050b0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80050b2:	17e5      	asrs	r5, r4, #31
 80050b4:	462b      	mov	r3, r5
 80050b6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80050b8:	4622      	mov	r2, r4
 80050ba:	3504      	adds	r5, #4
 80050bc:	9510      	str	r5, [sp, #64]	; 0x40
 80050be:	e9c1 2300 	strd	r2, r3, [r1]
 80050c2:	e4e2      	b.n	8004a8a <_svfprintf_r+0x4a>
 80050c4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80050c6:	6827      	ldr	r7, [r4, #0]
 80050c8:	f04f 0a00 	mov.w	sl, #0
 80050cc:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 80050d0:	1d25      	adds	r5, r4, #4
 80050d2:	2f00      	cmp	r7, #0
 80050d4:	f000 85f5 	beq.w	8005cc2 <_svfprintf_r+0x1282>
 80050d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80050da:	2c00      	cmp	r4, #0
 80050dc:	4638      	mov	r0, r7
 80050de:	f2c0 85a7 	blt.w	8005c30 <_svfprintf_r+0x11f0>
 80050e2:	4651      	mov	r1, sl
 80050e4:	4622      	mov	r2, r4
 80050e6:	f002 f97b 	bl	80073e0 <memchr>
 80050ea:	2800      	cmp	r0, #0
 80050ec:	f000 861f 	beq.w	8005d2e <_svfprintf_r+0x12ee>
 80050f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80050f2:	9510      	str	r5, [sp, #64]	; 0x40
 80050f4:	1bc0      	subs	r0, r0, r7
 80050f6:	42a0      	cmp	r0, r4
 80050f8:	bfb8      	it	lt
 80050fa:	4604      	movlt	r4, r0
 80050fc:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8005100:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005104:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 8005108:	950b      	str	r5, [sp, #44]	; 0x2c
 800510a:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 800510e:	e633      	b.n	8004d78 <_svfprintf_r+0x338>
 8005110:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8005114:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 8005118:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800511c:	f899 8000 	ldrb.w	r8, [r9]
 8005120:	e4e9      	b.n	8004af6 <_svfprintf_r+0xb6>
 8005122:	f899 8000 	ldrb.w	r8, [r9]
 8005126:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 800512a:	464b      	mov	r3, r9
 800512c:	f000 848d 	beq.w	8005a4a <_svfprintf_r+0x100a>
 8005130:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005132:	f045 0510 	orr.w	r5, r5, #16
 8005136:	9509      	str	r5, [sp, #36]	; 0x24
 8005138:	e4dd      	b.n	8004af6 <_svfprintf_r+0xb6>
 800513a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800513c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800513e:	6824      	ldr	r4, [r4, #0]
 8005140:	940f      	str	r4, [sp, #60]	; 0x3c
 8005142:	2c00      	cmp	r4, #0
 8005144:	f105 0304 	add.w	r3, r5, #4
 8005148:	f6ff ad77 	blt.w	8004c3a <_svfprintf_r+0x1fa>
 800514c:	9310      	str	r3, [sp, #64]	; 0x40
 800514e:	f899 8000 	ldrb.w	r8, [r9]
 8005152:	e4d0      	b.n	8004af6 <_svfprintf_r+0xb6>
 8005154:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005156:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800515a:	487e      	ldr	r0, [pc, #504]	; (8005354 <_svfprintf_r+0x914>)
 800515c:	6814      	ldr	r4, [r2, #0]
 800515e:	901a      	str	r0, [sp, #104]	; 0x68
 8005160:	2330      	movs	r3, #48	; 0x30
 8005162:	1d15      	adds	r5, r2, #4
 8005164:	f04f 0878 	mov.w	r8, #120	; 0x78
 8005168:	f04c 0c02 	orr.w	ip, ip, #2
 800516c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8005170:	9510      	str	r5, [sp, #64]	; 0x40
 8005172:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8005176:	2500      	movs	r5, #0
 8005178:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
 800517c:	2302      	movs	r3, #2
 800517e:	e5ce      	b.n	8004d1e <_svfprintf_r+0x2de>
 8005180:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005182:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005184:	6812      	ldr	r2, [r2, #0]
 8005186:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
 800518a:	2300      	movs	r3, #0
 800518c:	2401      	movs	r4, #1
 800518e:	3504      	adds	r5, #4
 8005190:	469a      	mov	sl, r3
 8005192:	940b      	str	r4, [sp, #44]	; 0x2c
 8005194:	9510      	str	r5, [sp, #64]	; 0x40
 8005196:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 800519a:	930a      	str	r3, [sp, #40]	; 0x28
 800519c:	9314      	str	r3, [sp, #80]	; 0x50
 800519e:	af2e      	add	r7, sp, #184	; 0xb8
 80051a0:	e5f0      	b.n	8004d84 <_svfprintf_r+0x344>
 80051a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80051a4:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 80051a8:	06a3      	lsls	r3, r4, #26
 80051aa:	f53f af4e 	bmi.w	800504a <_svfprintf_r+0x60a>
 80051ae:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80051b2:	f01c 0f10 	tst.w	ip, #16
 80051b6:	f040 82d2 	bne.w	800575e <_svfprintf_r+0xd1e>
 80051ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80051bc:	0667      	lsls	r7, r4, #25
 80051be:	f140 82ce 	bpl.w	800575e <_svfprintf_r+0xd1e>
 80051c2:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 80051c6:	f9bc 4000 	ldrsh.w	r4, [ip]
 80051ca:	f10c 0c04 	add.w	ip, ip, #4
 80051ce:	17e5      	asrs	r5, r4, #31
 80051d0:	4622      	mov	r2, r4
 80051d2:	462b      	mov	r3, r5
 80051d4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 80051d8:	e741      	b.n	800505e <_svfprintf_r+0x61e>
 80051da:	f899 8000 	ldrb.w	r8, [r9]
 80051de:	222b      	movs	r2, #43	; 0x2b
 80051e0:	e489      	b.n	8004af6 <_svfprintf_r+0xb6>
 80051e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80051e4:	f045 0508 	orr.w	r5, r5, #8
 80051e8:	9509      	str	r5, [sp, #36]	; 0x24
 80051ea:	f899 8000 	ldrb.w	r8, [r9]
 80051ee:	e482      	b.n	8004af6 <_svfprintf_r+0xb6>
 80051f0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80051f2:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 80051f6:	0725      	lsls	r5, r4, #28
 80051f8:	f140 838b 	bpl.w	8005912 <_svfprintf_r+0xed2>
 80051fc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80051fe:	1deb      	adds	r3, r5, #7
 8005200:	f023 0307 	bic.w	r3, r3, #7
 8005204:	ed93 7b00 	vldr	d7, [r3]
 8005208:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800520c:	f103 0c08 	add.w	ip, r3, #8
 8005210:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8005214:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8005218:	f002 fc38 	bl	8007a8c <__fpclassifyd>
 800521c:	2801      	cmp	r0, #1
 800521e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8005222:	f040 835f 	bne.w	80058e4 <_svfprintf_r+0xea4>
 8005226:	2200      	movs	r2, #0
 8005228:	2300      	movs	r3, #0
 800522a:	f003 fcd5 	bl	8008bd8 <__aeabi_dcmplt>
 800522e:	2800      	cmp	r0, #0
 8005230:	f040 856d 	bne.w	8005d0e <_svfprintf_r+0x12ce>
 8005234:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8005238:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800523c:	4f46      	ldr	r7, [pc, #280]	; (8005358 <_svfprintf_r+0x918>)
 800523e:	4b47      	ldr	r3, [pc, #284]	; (800535c <_svfprintf_r+0x91c>)
 8005240:	2500      	movs	r5, #0
 8005242:	2403      	movs	r4, #3
 8005244:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
 8005248:	940b      	str	r4, [sp, #44]	; 0x2c
 800524a:	950a      	str	r5, [sp, #40]	; 0x28
 800524c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8005250:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005254:	bfd8      	it	le
 8005256:	461f      	movle	r7, r3
 8005258:	9514      	str	r5, [sp, #80]	; 0x50
 800525a:	e58d      	b.n	8004d78 <_svfprintf_r+0x338>
 800525c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8005260:	f04c 0c20 	orr.w	ip, ip, #32
 8005264:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8005268:	f899 8000 	ldrb.w	r8, [r9]
 800526c:	e443      	b.n	8004af6 <_svfprintf_r+0xb6>
 800526e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005270:	1de3      	adds	r3, r4, #7
 8005272:	f023 0307 	bic.w	r3, r3, #7
 8005276:	f103 0508 	add.w	r5, r3, #8
 800527a:	9510      	str	r5, [sp, #64]	; 0x40
 800527c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005280:	2300      	movs	r3, #0
 8005282:	e54c      	b.n	8004d1e <_svfprintf_r+0x2de>
 8005284:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005286:	1deb      	adds	r3, r5, #7
 8005288:	f023 0307 	bic.w	r3, r3, #7
 800528c:	f103 0c08 	add.w	ip, r3, #8
 8005290:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005294:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8005298:	2301      	movs	r3, #1
 800529a:	e540      	b.n	8004d1e <_svfprintf_r+0x2de>
 800529c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 80052a0:	f1b8 0f00 	cmp.w	r8, #0
 80052a4:	f43f acdc 	beq.w	8004c60 <_svfprintf_r+0x220>
 80052a8:	2300      	movs	r3, #0
 80052aa:	f04f 0c01 	mov.w	ip, #1
 80052ae:	469a      	mov	sl, r3
 80052b0:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80052b4:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
 80052b8:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 80052bc:	930a      	str	r3, [sp, #40]	; 0x28
 80052be:	9314      	str	r3, [sp, #80]	; 0x50
 80052c0:	4664      	mov	r4, ip
 80052c2:	af2e      	add	r7, sp, #184	; 0xb8
 80052c4:	e55e      	b.n	8004d84 <_svfprintf_r+0x344>
 80052c6:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 80052ca:	e5b6      	b.n	8004e3a <_svfprintf_r+0x3fa>
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	f000 80ec 	beq.w	80054aa <_svfprintf_r+0xa6a>
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
 80052d8:	d118      	bne.n	800530c <_svfprintf_r+0x8cc>
 80052da:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
 80052de:	4619      	mov	r1, r3
 80052e0:	f004 000f 	and.w	r0, r4, #15
 80052e4:	0922      	lsrs	r2, r4, #4
 80052e6:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
 80052ea:	460f      	mov	r7, r1
 80052ec:	092b      	lsrs	r3, r5, #4
 80052ee:	f81c 1000 	ldrb.w	r1, [ip, r0]
 80052f2:	7039      	strb	r1, [r7, #0]
 80052f4:	ea52 0003 	orrs.w	r0, r2, r3
 80052f8:	4614      	mov	r4, r2
 80052fa:	461d      	mov	r5, r3
 80052fc:	f107 31ff 	add.w	r1, r7, #4294967295
 8005300:	d1ee      	bne.n	80052e0 <_svfprintf_r+0x8a0>
 8005302:	9d08      	ldr	r5, [sp, #32]
 8005304:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8005308:	1bec      	subs	r4, r5, r7
 800530a:	e52c      	b.n	8004d66 <_svfprintf_r+0x326>
 800530c:	08e0      	lsrs	r0, r4, #3
 800530e:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
 8005312:	f004 0207 	and.w	r2, r4, #7
 8005316:	08e9      	lsrs	r1, r5, #3
 8005318:	3230      	adds	r2, #48	; 0x30
 800531a:	ea50 0c01 	orrs.w	ip, r0, r1
 800531e:	461f      	mov	r7, r3
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	4604      	mov	r4, r0
 8005324:	460d      	mov	r5, r1
 8005326:	f103 33ff 	add.w	r3, r3, #4294967295
 800532a:	d1ef      	bne.n	800530c <_svfprintf_r+0x8cc>
 800532c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800532e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 8005332:	07e0      	lsls	r0, r4, #31
 8005334:	4639      	mov	r1, r7
 8005336:	f140 80c1 	bpl.w	80054bc <_svfprintf_r+0xa7c>
 800533a:	2a30      	cmp	r2, #48	; 0x30
 800533c:	f000 80be 	beq.w	80054bc <_svfprintf_r+0xa7c>
 8005340:	9d08      	ldr	r5, [sp, #32]
 8005342:	461f      	mov	r7, r3
 8005344:	2330      	movs	r3, #48	; 0x30
 8005346:	1bec      	subs	r4, r5, r7
 8005348:	f801 3c01 	strb.w	r3, [r1, #-1]
 800534c:	e50b      	b.n	8004d66 <_svfprintf_r+0x326>
 800534e:	bf00      	nop
 8005350:	08009434 	.word	0x08009434
 8005354:	08009448 	.word	0x08009448
 8005358:	08009428 	.word	0x08009428
 800535c:	08009424 	.word	0x08009424
 8005360:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005364:	f340 80ad 	ble.w	80054c2 <_svfprintf_r+0xa82>
 8005368:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800536c:	2200      	movs	r2, #0
 800536e:	2300      	movs	r3, #0
 8005370:	f8cd c01c 	str.w	ip, [sp, #28]
 8005374:	f003 fc26 	bl	8008bc4 <__aeabi_dcmpeq>
 8005378:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800537c:	2800      	cmp	r0, #0
 800537e:	f000 8126 	beq.w	80055ce <_svfprintf_r+0xb8e>
 8005382:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8005384:	4aaa      	ldr	r2, [pc, #680]	; (8005630 <_svfprintf_r+0xbf0>)
 8005386:	6032      	str	r2, [r6, #0]
 8005388:	3301      	adds	r3, #1
 800538a:	f10c 0c01 	add.w	ip, ip, #1
 800538e:	2201      	movs	r2, #1
 8005390:	2b07      	cmp	r3, #7
 8005392:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8005396:	932c      	str	r3, [sp, #176]	; 0xb0
 8005398:	6072      	str	r2, [r6, #4]
 800539a:	f300 82f9 	bgt.w	8005990 <_svfprintf_r+0xf50>
 800539e:	3608      	adds	r6, #8
 80053a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80053a2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80053a4:	42a3      	cmp	r3, r4
 80053a6:	db03      	blt.n	80053b0 <_svfprintf_r+0x970>
 80053a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80053aa:	07ec      	lsls	r4, r5, #31
 80053ac:	f57f adbf 	bpl.w	8004f2e <_svfprintf_r+0x4ee>
 80053b0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80053b2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80053b4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80053b6:	6034      	str	r4, [r6, #0]
 80053b8:	3301      	adds	r3, #1
 80053ba:	44ac      	add	ip, r5
 80053bc:	2b07      	cmp	r3, #7
 80053be:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 80053c2:	6075      	str	r5, [r6, #4]
 80053c4:	932c      	str	r3, [sp, #176]	; 0xb0
 80053c6:	f300 834a 	bgt.w	8005a5e <_svfprintf_r+0x101e>
 80053ca:	3608      	adds	r6, #8
 80053cc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80053ce:	1e6c      	subs	r4, r5, #1
 80053d0:	2c00      	cmp	r4, #0
 80053d2:	f77f adac 	ble.w	8004f2e <_svfprintf_r+0x4ee>
 80053d6:	2c10      	cmp	r4, #16
 80053d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80053da:	4d96      	ldr	r5, [pc, #600]	; (8005634 <_svfprintf_r+0xbf4>)
 80053dc:	f340 8197 	ble.w	800570e <_svfprintf_r+0xcce>
 80053e0:	2710      	movs	r7, #16
 80053e2:	4662      	mov	r2, ip
 80053e4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80053e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80053ec:	e004      	b.n	80053f8 <_svfprintf_r+0x9b8>
 80053ee:	3608      	adds	r6, #8
 80053f0:	3c10      	subs	r4, #16
 80053f2:	2c10      	cmp	r4, #16
 80053f4:	f340 818a 	ble.w	800570c <_svfprintf_r+0xccc>
 80053f8:	3301      	adds	r3, #1
 80053fa:	3210      	adds	r2, #16
 80053fc:	2b07      	cmp	r3, #7
 80053fe:	922d      	str	r2, [sp, #180]	; 0xb4
 8005400:	932c      	str	r3, [sp, #176]	; 0xb0
 8005402:	e886 00a0 	stmia.w	r6, {r5, r7}
 8005406:	ddf2      	ble.n	80053ee <_svfprintf_r+0x9ae>
 8005408:	4640      	mov	r0, r8
 800540a:	4651      	mov	r1, sl
 800540c:	aa2b      	add	r2, sp, #172	; 0xac
 800540e:	f002 fba7 	bl	8007b60 <__ssprint_r>
 8005412:	2800      	cmp	r0, #0
 8005414:	f47f ac2b 	bne.w	8004c6e <_svfprintf_r+0x22e>
 8005418:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800541a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800541c:	ae38      	add	r6, sp, #224	; 0xe0
 800541e:	e7e7      	b.n	80053f0 <_svfprintf_r+0x9b0>
 8005420:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005422:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005424:	ebc0 0a05 	rsb	sl, r0, r5
 8005428:	f1ba 0f00 	cmp.w	sl, #0
 800542c:	f77f ad2d 	ble.w	8004e8a <_svfprintf_r+0x44a>
 8005430:	f1ba 0f10 	cmp.w	sl, #16
 8005434:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8005436:	4d7f      	ldr	r5, [pc, #508]	; (8005634 <_svfprintf_r+0xbf4>)
 8005438:	dd2b      	ble.n	8005492 <_svfprintf_r+0xa52>
 800543a:	9412      	str	r4, [sp, #72]	; 0x48
 800543c:	4632      	mov	r2, r6
 800543e:	f04f 0b10 	mov.w	fp, #16
 8005442:	462e      	mov	r6, r5
 8005444:	4661      	mov	r1, ip
 8005446:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005448:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800544a:	e006      	b.n	800545a <_svfprintf_r+0xa1a>
 800544c:	f1aa 0a10 	sub.w	sl, sl, #16
 8005450:	f1ba 0f10 	cmp.w	sl, #16
 8005454:	f102 0208 	add.w	r2, r2, #8
 8005458:	dd17      	ble.n	800548a <_svfprintf_r+0xa4a>
 800545a:	3301      	adds	r3, #1
 800545c:	3110      	adds	r1, #16
 800545e:	2b07      	cmp	r3, #7
 8005460:	912d      	str	r1, [sp, #180]	; 0xb4
 8005462:	932c      	str	r3, [sp, #176]	; 0xb0
 8005464:	e882 0840 	stmia.w	r2, {r6, fp}
 8005468:	ddf0      	ble.n	800544c <_svfprintf_r+0xa0c>
 800546a:	4620      	mov	r0, r4
 800546c:	4629      	mov	r1, r5
 800546e:	aa2b      	add	r2, sp, #172	; 0xac
 8005470:	f002 fb76 	bl	8007b60 <__ssprint_r>
 8005474:	2800      	cmp	r0, #0
 8005476:	f47f abfa 	bne.w	8004c6e <_svfprintf_r+0x22e>
 800547a:	f1aa 0a10 	sub.w	sl, sl, #16
 800547e:	f1ba 0f10 	cmp.w	sl, #16
 8005482:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8005484:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8005486:	aa38      	add	r2, sp, #224	; 0xe0
 8005488:	dce7      	bgt.n	800545a <_svfprintf_r+0xa1a>
 800548a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800548c:	4635      	mov	r5, r6
 800548e:	468c      	mov	ip, r1
 8005490:	4616      	mov	r6, r2
 8005492:	3301      	adds	r3, #1
 8005494:	44d4      	add	ip, sl
 8005496:	2b07      	cmp	r3, #7
 8005498:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 800549c:	932c      	str	r3, [sp, #176]	; 0xb0
 800549e:	e886 0420 	stmia.w	r6, {r5, sl}
 80054a2:	f300 8212 	bgt.w	80058ca <_svfprintf_r+0xe8a>
 80054a6:	3608      	adds	r6, #8
 80054a8:	e4ef      	b.n	8004e8a <_svfprintf_r+0x44a>
 80054aa:	2d00      	cmp	r5, #0
 80054ac:	bf08      	it	eq
 80054ae:	2c0a      	cmpeq	r4, #10
 80054b0:	f080 8138 	bcs.w	8005724 <_svfprintf_r+0xce4>
 80054b4:	af48      	add	r7, sp, #288	; 0x120
 80054b6:	3430      	adds	r4, #48	; 0x30
 80054b8:	f807 4d41 	strb.w	r4, [r7, #-65]!
 80054bc:	9d08      	ldr	r5, [sp, #32]
 80054be:	1bec      	subs	r4, r5, r7
 80054c0:	e451      	b.n	8004d66 <_svfprintf_r+0x326>
 80054c2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80054c4:	2c01      	cmp	r4, #1
 80054c6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80054c8:	f340 81d5 	ble.w	8005876 <_svfprintf_r+0xe36>
 80054cc:	3401      	adds	r4, #1
 80054ce:	f10c 0301 	add.w	r3, ip, #1
 80054d2:	2201      	movs	r2, #1
 80054d4:	2c07      	cmp	r4, #7
 80054d6:	6037      	str	r7, [r6, #0]
 80054d8:	932d      	str	r3, [sp, #180]	; 0xb4
 80054da:	942c      	str	r4, [sp, #176]	; 0xb0
 80054dc:	6072      	str	r2, [r6, #4]
 80054de:	f300 81db 	bgt.w	8005898 <_svfprintf_r+0xe58>
 80054e2:	3608      	adds	r6, #8
 80054e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80054e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80054ea:	6035      	str	r5, [r6, #0]
 80054ec:	3401      	adds	r4, #1
 80054ee:	4498      	add	r8, r3
 80054f0:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80054f2:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
 80054f6:	2c07      	cmp	r4, #7
 80054f8:	942c      	str	r4, [sp, #176]	; 0xb0
 80054fa:	6075      	str	r5, [r6, #4]
 80054fc:	f300 81d8 	bgt.w	80058b0 <_svfprintf_r+0xe70>
 8005500:	3608      	adds	r6, #8
 8005502:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8005506:	2200      	movs	r2, #0
 8005508:	2300      	movs	r3, #0
 800550a:	f003 fb5b 	bl	8008bc4 <__aeabi_dcmpeq>
 800550e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8005510:	2800      	cmp	r0, #0
 8005512:	f040 80b9 	bne.w	8005688 <_svfprintf_r+0xc48>
 8005516:	1e6b      	subs	r3, r5, #1
 8005518:	3401      	adds	r4, #1
 800551a:	3701      	adds	r7, #1
 800551c:	4498      	add	r8, r3
 800551e:	2c07      	cmp	r4, #7
 8005520:	942c      	str	r4, [sp, #176]	; 0xb0
 8005522:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
 8005526:	6037      	str	r7, [r6, #0]
 8005528:	6073      	str	r3, [r6, #4]
 800552a:	f300 80e2 	bgt.w	80056f2 <_svfprintf_r+0xcb2>
 800552e:	3608      	adds	r6, #8
 8005530:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 8005534:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005536:	3401      	adds	r4, #1
 8005538:	44c4      	add	ip, r8
 800553a:	ab27      	add	r3, sp, #156	; 0x9c
 800553c:	2c07      	cmp	r4, #7
 800553e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8005542:	942c      	str	r4, [sp, #176]	; 0xb0
 8005544:	e886 0028 	stmia.w	r6, {r3, r5}
 8005548:	f77f acf0 	ble.w	8004f2c <_svfprintf_r+0x4ec>
 800554c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800554e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005550:	aa2b      	add	r2, sp, #172	; 0xac
 8005552:	f002 fb05 	bl	8007b60 <__ssprint_r>
 8005556:	2800      	cmp	r0, #0
 8005558:	f47f ab89 	bne.w	8004c6e <_svfprintf_r+0x22e>
 800555c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8005560:	ae38      	add	r6, sp, #224	; 0xe0
 8005562:	e4e4      	b.n	8004f2e <_svfprintf_r+0x4ee>
 8005564:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005566:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005568:	aa2b      	add	r2, sp, #172	; 0xac
 800556a:	f002 faf9 	bl	8007b60 <__ssprint_r>
 800556e:	2800      	cmp	r0, #0
 8005570:	f43f ad35 	beq.w	8004fde <_svfprintf_r+0x59e>
 8005574:	f7ff bb7b 	b.w	8004c6e <_svfprintf_r+0x22e>
 8005578:	980d      	ldr	r0, [sp, #52]	; 0x34
 800557a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800557c:	aa2b      	add	r2, sp, #172	; 0xac
 800557e:	f002 faef 	bl	8007b60 <__ssprint_r>
 8005582:	2800      	cmp	r0, #0
 8005584:	f47f ab73 	bne.w	8004c6e <_svfprintf_r+0x22e>
 8005588:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 800558c:	ae38      	add	r6, sp, #224	; 0xe0
 800558e:	e4be      	b.n	8004f0e <_svfprintf_r+0x4ce>
 8005590:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005592:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005594:	aa2b      	add	r2, sp, #172	; 0xac
 8005596:	f002 fae3 	bl	8007b60 <__ssprint_r>
 800559a:	2800      	cmp	r0, #0
 800559c:	f47f ab67 	bne.w	8004c6e <_svfprintf_r+0x22e>
 80055a0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 80055a4:	ae38      	add	r6, sp, #224	; 0xe0
 80055a6:	e45b      	b.n	8004e60 <_svfprintf_r+0x420>
 80055a8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80055aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80055ac:	aa2b      	add	r2, sp, #172	; 0xac
 80055ae:	f002 fad7 	bl	8007b60 <__ssprint_r>
 80055b2:	2800      	cmp	r0, #0
 80055b4:	f47f ab5b 	bne.w	8004c6e <_svfprintf_r+0x22e>
 80055b8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 80055bc:	ae38      	add	r6, sp, #224	; 0xe0
 80055be:	e460      	b.n	8004e82 <_svfprintf_r+0x442>
 80055c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055c2:	af38      	add	r7, sp, #224	; 0xe0
 80055c4:	f7ff bbcf 	b.w	8004d66 <_svfprintf_r+0x326>
 80055c8:	2302      	movs	r3, #2
 80055ca:	f7ff bba8 	b.w	8004d1e <_svfprintf_r+0x2de>
 80055ce:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f340 81e9 	ble.w	80059a8 <_svfprintf_r+0xf68>
 80055d6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80055d8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80055da:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80055de:	42ac      	cmp	r4, r5
 80055e0:	bfa8      	it	ge
 80055e2:	462c      	movge	r4, r5
 80055e4:	2c00      	cmp	r4, #0
 80055e6:	44ba      	add	sl, r7
 80055e8:	dd0b      	ble.n	8005602 <_svfprintf_r+0xbc2>
 80055ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80055ec:	6037      	str	r7, [r6, #0]
 80055ee:	3301      	adds	r3, #1
 80055f0:	44a4      	add	ip, r4
 80055f2:	2b07      	cmp	r3, #7
 80055f4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 80055f8:	6074      	str	r4, [r6, #4]
 80055fa:	932c      	str	r3, [sp, #176]	; 0xb0
 80055fc:	f300 8328 	bgt.w	8005c50 <_svfprintf_r+0x1210>
 8005600:	3608      	adds	r6, #8
 8005602:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005604:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005608:	1b2c      	subs	r4, r5, r4
 800560a:	2c00      	cmp	r4, #0
 800560c:	f340 80db 	ble.w	80057c6 <_svfprintf_r+0xd86>
 8005610:	2c10      	cmp	r4, #16
 8005612:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8005614:	4d07      	ldr	r5, [pc, #28]	; (8005634 <_svfprintf_r+0xbf4>)
 8005616:	f340 81af 	ble.w	8005978 <_svfprintf_r+0xf38>
 800561a:	970a      	str	r7, [sp, #40]	; 0x28
 800561c:	f04f 0810 	mov.w	r8, #16
 8005620:	462f      	mov	r7, r5
 8005622:	4662      	mov	r2, ip
 8005624:	4625      	mov	r5, r4
 8005626:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800562a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800562c:	e009      	b.n	8005642 <_svfprintf_r+0xc02>
 800562e:	bf00      	nop
 8005630:	08009464 	.word	0x08009464
 8005634:	08009414 	.word	0x08009414
 8005638:	3608      	adds	r6, #8
 800563a:	3d10      	subs	r5, #16
 800563c:	2d10      	cmp	r5, #16
 800563e:	f340 8197 	ble.w	8005970 <_svfprintf_r+0xf30>
 8005642:	3301      	adds	r3, #1
 8005644:	3210      	adds	r2, #16
 8005646:	2b07      	cmp	r3, #7
 8005648:	922d      	str	r2, [sp, #180]	; 0xb4
 800564a:	932c      	str	r3, [sp, #176]	; 0xb0
 800564c:	e886 0180 	stmia.w	r6, {r7, r8}
 8005650:	ddf2      	ble.n	8005638 <_svfprintf_r+0xbf8>
 8005652:	4658      	mov	r0, fp
 8005654:	4621      	mov	r1, r4
 8005656:	aa2b      	add	r2, sp, #172	; 0xac
 8005658:	f002 fa82 	bl	8007b60 <__ssprint_r>
 800565c:	2800      	cmp	r0, #0
 800565e:	f47f ab06 	bne.w	8004c6e <_svfprintf_r+0x22e>
 8005662:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8005664:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8005666:	ae38      	add	r6, sp, #224	; 0xe0
 8005668:	e7e7      	b.n	800563a <_svfprintf_r+0xbfa>
 800566a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800566c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800566e:	aa2b      	add	r2, sp, #172	; 0xac
 8005670:	f002 fa76 	bl	8007b60 <__ssprint_r>
 8005674:	2800      	cmp	r0, #0
 8005676:	f47f aafa 	bne.w	8004c6e <_svfprintf_r+0x22e>
 800567a:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 800567e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8005682:	ae38      	add	r6, sp, #224	; 0xe0
 8005684:	f7ff bbd9 	b.w	8004e3a <_svfprintf_r+0x3fa>
 8005688:	1e6f      	subs	r7, r5, #1
 800568a:	2f00      	cmp	r7, #0
 800568c:	f77f af50 	ble.w	8005530 <_svfprintf_r+0xaf0>
 8005690:	2f10      	cmp	r7, #16
 8005692:	4db4      	ldr	r5, [pc, #720]	; (8005964 <_svfprintf_r+0xf24>)
 8005694:	dd23      	ble.n	80056de <_svfprintf_r+0xc9e>
 8005696:	4643      	mov	r3, r8
 8005698:	f04f 0a10 	mov.w	sl, #16
 800569c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80056a0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80056a4:	e004      	b.n	80056b0 <_svfprintf_r+0xc70>
 80056a6:	3f10      	subs	r7, #16
 80056a8:	2f10      	cmp	r7, #16
 80056aa:	f106 0608 	add.w	r6, r6, #8
 80056ae:	dd15      	ble.n	80056dc <_svfprintf_r+0xc9c>
 80056b0:	3401      	adds	r4, #1
 80056b2:	3310      	adds	r3, #16
 80056b4:	2c07      	cmp	r4, #7
 80056b6:	932d      	str	r3, [sp, #180]	; 0xb4
 80056b8:	942c      	str	r4, [sp, #176]	; 0xb0
 80056ba:	e886 0420 	stmia.w	r6, {r5, sl}
 80056be:	ddf2      	ble.n	80056a6 <_svfprintf_r+0xc66>
 80056c0:	4640      	mov	r0, r8
 80056c2:	4659      	mov	r1, fp
 80056c4:	aa2b      	add	r2, sp, #172	; 0xac
 80056c6:	f002 fa4b 	bl	8007b60 <__ssprint_r>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	f47f aacf 	bne.w	8004c6e <_svfprintf_r+0x22e>
 80056d0:	3f10      	subs	r7, #16
 80056d2:	2f10      	cmp	r7, #16
 80056d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80056d6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80056d8:	ae38      	add	r6, sp, #224	; 0xe0
 80056da:	dce9      	bgt.n	80056b0 <_svfprintf_r+0xc70>
 80056dc:	4698      	mov	r8, r3
 80056de:	3401      	adds	r4, #1
 80056e0:	44b8      	add	r8, r7
 80056e2:	2c07      	cmp	r4, #7
 80056e4:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
 80056e8:	942c      	str	r4, [sp, #176]	; 0xb0
 80056ea:	e886 00a0 	stmia.w	r6, {r5, r7}
 80056ee:	f77f af1e 	ble.w	800552e <_svfprintf_r+0xaee>
 80056f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80056f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80056f6:	aa2b      	add	r2, sp, #172	; 0xac
 80056f8:	f002 fa32 	bl	8007b60 <__ssprint_r>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	f47f aab6 	bne.w	8004c6e <_svfprintf_r+0x22e>
 8005702:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
 8005706:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8005708:	ae38      	add	r6, sp, #224	; 0xe0
 800570a:	e711      	b.n	8005530 <_svfprintf_r+0xaf0>
 800570c:	4694      	mov	ip, r2
 800570e:	3301      	adds	r3, #1
 8005710:	44a4      	add	ip, r4
 8005712:	2b07      	cmp	r3, #7
 8005714:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8005718:	932c      	str	r3, [sp, #176]	; 0xb0
 800571a:	6035      	str	r5, [r6, #0]
 800571c:	6074      	str	r4, [r6, #4]
 800571e:	f77f ac05 	ble.w	8004f2c <_svfprintf_r+0x4ec>
 8005722:	e713      	b.n	800554c <_svfprintf_r+0xb0c>
 8005724:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
 8005728:	4620      	mov	r0, r4
 800572a:	4629      	mov	r1, r5
 800572c:	220a      	movs	r2, #10
 800572e:	2300      	movs	r3, #0
 8005730:	f003 faa2 	bl	8008c78 <__aeabi_uldivmod>
 8005734:	3230      	adds	r2, #48	; 0x30
 8005736:	f88b 2000 	strb.w	r2, [fp]
 800573a:	4620      	mov	r0, r4
 800573c:	4629      	mov	r1, r5
 800573e:	220a      	movs	r2, #10
 8005740:	2300      	movs	r3, #0
 8005742:	f003 fa99 	bl	8008c78 <__aeabi_uldivmod>
 8005746:	4604      	mov	r4, r0
 8005748:	460d      	mov	r5, r1
 800574a:	ea54 0c05 	orrs.w	ip, r4, r5
 800574e:	465f      	mov	r7, fp
 8005750:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005754:	d1e8      	bne.n	8005728 <_svfprintf_r+0xce8>
 8005756:	9d08      	ldr	r5, [sp, #32]
 8005758:	1bec      	subs	r4, r5, r7
 800575a:	f7ff bb04 	b.w	8004d66 <_svfprintf_r+0x326>
 800575e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005760:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8005764:	682c      	ldr	r4, [r5, #0]
 8005766:	17e5      	asrs	r5, r4, #31
 8005768:	4622      	mov	r2, r4
 800576a:	462b      	mov	r3, r5
 800576c:	f10c 0c04 	add.w	ip, ip, #4
 8005770:	2a00      	cmp	r2, #0
 8005772:	f173 0000 	sbcs.w	r0, r3, #0
 8005776:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 800577a:	f6bf ac75 	bge.w	8005068 <_svfprintf_r+0x628>
 800577e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8005782:	4264      	negs	r4, r4
 8005784:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8005788:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 800578c:	2301      	movs	r3, #1
 800578e:	f7ff baca 	b.w	8004d26 <_svfprintf_r+0x2e6>
 8005792:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005794:	682c      	ldr	r4, [r5, #0]
 8005796:	3504      	adds	r5, #4
 8005798:	9510      	str	r5, [sp, #64]	; 0x40
 800579a:	2500      	movs	r5, #0
 800579c:	f7ff babf 	b.w	8004d1e <_svfprintf_r+0x2de>
 80057a0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80057a2:	682c      	ldr	r4, [r5, #0]
 80057a4:	3504      	adds	r5, #4
 80057a6:	9510      	str	r5, [sp, #64]	; 0x40
 80057a8:	2301      	movs	r3, #1
 80057aa:	2500      	movs	r5, #0
 80057ac:	f7ff bab7 	b.w	8004d1e <_svfprintf_r+0x2de>
 80057b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80057b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80057b4:	aa2b      	add	r2, sp, #172	; 0xac
 80057b6:	f002 f9d3 	bl	8007b60 <__ssprint_r>
 80057ba:	2800      	cmp	r0, #0
 80057bc:	f47f aa57 	bne.w	8004c6e <_svfprintf_r+0x22e>
 80057c0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 80057c4:	ae38      	add	r6, sp, #224	; 0xe0
 80057c6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80057c8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80057ca:	442f      	add	r7, r5
 80057cc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80057ce:	42ac      	cmp	r4, r5
 80057d0:	db42      	blt.n	8005858 <_svfprintf_r+0xe18>
 80057d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80057d4:	07e9      	lsls	r1, r5, #31
 80057d6:	d43f      	bmi.n	8005858 <_svfprintf_r+0xe18>
 80057d8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80057da:	ebc7 050a 	rsb	r5, r7, sl
 80057de:	1b04      	subs	r4, r0, r4
 80057e0:	42ac      	cmp	r4, r5
 80057e2:	bfb8      	it	lt
 80057e4:	4625      	movlt	r5, r4
 80057e6:	2d00      	cmp	r5, #0
 80057e8:	dd0b      	ble.n	8005802 <_svfprintf_r+0xdc2>
 80057ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80057ec:	6037      	str	r7, [r6, #0]
 80057ee:	3301      	adds	r3, #1
 80057f0:	44ac      	add	ip, r5
 80057f2:	2b07      	cmp	r3, #7
 80057f4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 80057f8:	6075      	str	r5, [r6, #4]
 80057fa:	932c      	str	r3, [sp, #176]	; 0xb0
 80057fc:	f300 8252 	bgt.w	8005ca4 <_svfprintf_r+0x1264>
 8005800:	3608      	adds	r6, #8
 8005802:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8005806:	1b64      	subs	r4, r4, r5
 8005808:	2c00      	cmp	r4, #0
 800580a:	f77f ab90 	ble.w	8004f2e <_svfprintf_r+0x4ee>
 800580e:	2c10      	cmp	r4, #16
 8005810:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8005812:	4d54      	ldr	r5, [pc, #336]	; (8005964 <_svfprintf_r+0xf24>)
 8005814:	f77f af7b 	ble.w	800570e <_svfprintf_r+0xcce>
 8005818:	2710      	movs	r7, #16
 800581a:	4662      	mov	r2, ip
 800581c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8005820:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005824:	e004      	b.n	8005830 <_svfprintf_r+0xdf0>
 8005826:	3608      	adds	r6, #8
 8005828:	3c10      	subs	r4, #16
 800582a:	2c10      	cmp	r4, #16
 800582c:	f77f af6e 	ble.w	800570c <_svfprintf_r+0xccc>
 8005830:	3301      	adds	r3, #1
 8005832:	3210      	adds	r2, #16
 8005834:	2b07      	cmp	r3, #7
 8005836:	922d      	str	r2, [sp, #180]	; 0xb4
 8005838:	932c      	str	r3, [sp, #176]	; 0xb0
 800583a:	e886 00a0 	stmia.w	r6, {r5, r7}
 800583e:	ddf2      	ble.n	8005826 <_svfprintf_r+0xde6>
 8005840:	4640      	mov	r0, r8
 8005842:	4651      	mov	r1, sl
 8005844:	aa2b      	add	r2, sp, #172	; 0xac
 8005846:	f002 f98b 	bl	8007b60 <__ssprint_r>
 800584a:	2800      	cmp	r0, #0
 800584c:	f47f aa0f 	bne.w	8004c6e <_svfprintf_r+0x22e>
 8005850:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8005852:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8005854:	ae38      	add	r6, sp, #224	; 0xe0
 8005856:	e7e7      	b.n	8005828 <_svfprintf_r+0xde8>
 8005858:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800585a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800585c:	6035      	str	r5, [r6, #0]
 800585e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8005860:	6075      	str	r5, [r6, #4]
 8005862:	3301      	adds	r3, #1
 8005864:	44ac      	add	ip, r5
 8005866:	2b07      	cmp	r3, #7
 8005868:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 800586c:	932c      	str	r3, [sp, #176]	; 0xb0
 800586e:	f300 81fb 	bgt.w	8005c68 <_svfprintf_r+0x1228>
 8005872:	3608      	adds	r6, #8
 8005874:	e7b0      	b.n	80057d8 <_svfprintf_r+0xd98>
 8005876:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005878:	07ea      	lsls	r2, r5, #31
 800587a:	f53f ae27 	bmi.w	80054cc <_svfprintf_r+0xa8c>
 800587e:	3401      	adds	r4, #1
 8005880:	f10c 0801 	add.w	r8, ip, #1
 8005884:	2301      	movs	r3, #1
 8005886:	2c07      	cmp	r4, #7
 8005888:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
 800588c:	942c      	str	r4, [sp, #176]	; 0xb0
 800588e:	6037      	str	r7, [r6, #0]
 8005890:	6073      	str	r3, [r6, #4]
 8005892:	f77f ae4c 	ble.w	800552e <_svfprintf_r+0xaee>
 8005896:	e72c      	b.n	80056f2 <_svfprintf_r+0xcb2>
 8005898:	980d      	ldr	r0, [sp, #52]	; 0x34
 800589a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800589c:	aa2b      	add	r2, sp, #172	; 0xac
 800589e:	f002 f95f 	bl	8007b60 <__ssprint_r>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	f47f a9e3 	bne.w	8004c6e <_svfprintf_r+0x22e>
 80058a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80058aa:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80058ac:	ae38      	add	r6, sp, #224	; 0xe0
 80058ae:	e619      	b.n	80054e4 <_svfprintf_r+0xaa4>
 80058b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80058b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80058b4:	aa2b      	add	r2, sp, #172	; 0xac
 80058b6:	f002 f953 	bl	8007b60 <__ssprint_r>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	f47f a9d7 	bne.w	8004c6e <_svfprintf_r+0x22e>
 80058c0:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
 80058c4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80058c6:	ae38      	add	r6, sp, #224	; 0xe0
 80058c8:	e61b      	b.n	8005502 <_svfprintf_r+0xac2>
 80058ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 80058cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80058ce:	aa2b      	add	r2, sp, #172	; 0xac
 80058d0:	f002 f946 	bl	8007b60 <__ssprint_r>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	f47f a9ca 	bne.w	8004c6e <_svfprintf_r+0x22e>
 80058da:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 80058de:	ae38      	add	r6, sp, #224	; 0xe0
 80058e0:	f7ff bad3 	b.w	8004e8a <_svfprintf_r+0x44a>
 80058e4:	f002 f8d2 	bl	8007a8c <__fpclassifyd>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	f040 80c4 	bne.w	8005a76 <_svfprintf_r+0x1036>
 80058ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80058f0:	4f1d      	ldr	r7, [pc, #116]	; (8005968 <_svfprintf_r+0xf28>)
 80058f2:	4b1e      	ldr	r3, [pc, #120]	; (800596c <_svfprintf_r+0xf2c>)
 80058f4:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 80058f8:	900a      	str	r0, [sp, #40]	; 0x28
 80058fa:	2403      	movs	r4, #3
 80058fc:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8005900:	940b      	str	r4, [sp, #44]	; 0x2c
 8005902:	9509      	str	r5, [sp, #36]	; 0x24
 8005904:	9014      	str	r0, [sp, #80]	; 0x50
 8005906:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800590a:	bfd8      	it	le
 800590c:	461f      	movle	r7, r3
 800590e:	f7ff ba33 	b.w	8004d78 <_svfprintf_r+0x338>
 8005912:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005914:	1de3      	adds	r3, r4, #7
 8005916:	f023 0307 	bic.w	r3, r3, #7
 800591a:	ed93 7b00 	vldr	d7, [r3]
 800591e:	3308      	adds	r3, #8
 8005920:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8005924:	9310      	str	r3, [sp, #64]	; 0x40
 8005926:	e475      	b.n	8005214 <_svfprintf_r+0x7d4>
 8005928:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800592c:	f01c 0f10 	tst.w	ip, #16
 8005930:	f000 8154 	beq.w	8005bdc <_svfprintf_r+0x119c>
 8005934:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005936:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	3404      	adds	r4, #4
 800593c:	9410      	str	r4, [sp, #64]	; 0x40
 800593e:	601d      	str	r5, [r3, #0]
 8005940:	f7ff b8a3 	b.w	8004a8a <_svfprintf_r+0x4a>
 8005944:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005946:	0664      	lsls	r4, r4, #25
 8005948:	f140 8141 	bpl.w	8005bce <_svfprintf_r+0x118e>
 800594c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8005950:	f8bc 4000 	ldrh.w	r4, [ip]
 8005954:	f10c 0c04 	add.w	ip, ip, #4
 8005958:	2500      	movs	r5, #0
 800595a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 800595e:	f7ff b9ca 	b.w	8004cf6 <_svfprintf_r+0x2b6>
 8005962:	bf00      	nop
 8005964:	08009414 	.word	0x08009414
 8005968:	08009430 	.word	0x08009430
 800596c:	0800942c 	.word	0x0800942c
 8005970:	462c      	mov	r4, r5
 8005972:	463d      	mov	r5, r7
 8005974:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005976:	4694      	mov	ip, r2
 8005978:	3301      	adds	r3, #1
 800597a:	44a4      	add	ip, r4
 800597c:	2b07      	cmp	r3, #7
 800597e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8005982:	932c      	str	r3, [sp, #176]	; 0xb0
 8005984:	6035      	str	r5, [r6, #0]
 8005986:	6074      	str	r4, [r6, #4]
 8005988:	f73f af12 	bgt.w	80057b0 <_svfprintf_r+0xd70>
 800598c:	3608      	adds	r6, #8
 800598e:	e71a      	b.n	80057c6 <_svfprintf_r+0xd86>
 8005990:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005992:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005994:	aa2b      	add	r2, sp, #172	; 0xac
 8005996:	f002 f8e3 	bl	8007b60 <__ssprint_r>
 800599a:	2800      	cmp	r0, #0
 800599c:	f47f a967 	bne.w	8004c6e <_svfprintf_r+0x22e>
 80059a0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 80059a4:	ae38      	add	r6, sp, #224	; 0xe0
 80059a6:	e4fb      	b.n	80053a0 <_svfprintf_r+0x960>
 80059a8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80059aa:	49b6      	ldr	r1, [pc, #728]	; (8005c84 <_svfprintf_r+0x1244>)
 80059ac:	6031      	str	r1, [r6, #0]
 80059ae:	3201      	adds	r2, #1
 80059b0:	f10c 0c01 	add.w	ip, ip, #1
 80059b4:	2101      	movs	r1, #1
 80059b6:	2a07      	cmp	r2, #7
 80059b8:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 80059bc:	922c      	str	r2, [sp, #176]	; 0xb0
 80059be:	6071      	str	r1, [r6, #4]
 80059c0:	f300 80f5 	bgt.w	8005bae <_svfprintf_r+0x116e>
 80059c4:	3608      	adds	r6, #8
 80059c6:	461c      	mov	r4, r3
 80059c8:	b92c      	cbnz	r4, 80059d6 <_svfprintf_r+0xf96>
 80059ca:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80059cc:	b91d      	cbnz	r5, 80059d6 <_svfprintf_r+0xf96>
 80059ce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80059d0:	07e8      	lsls	r0, r5, #31
 80059d2:	f57f aaac 	bpl.w	8004f2e <_svfprintf_r+0x4ee>
 80059d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80059d8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80059da:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80059dc:	6035      	str	r5, [r6, #0]
 80059de:	3301      	adds	r3, #1
 80059e0:	4461      	add	r1, ip
 80059e2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80059e4:	912d      	str	r1, [sp, #180]	; 0xb4
 80059e6:	2b07      	cmp	r3, #7
 80059e8:	6075      	str	r5, [r6, #4]
 80059ea:	932c      	str	r3, [sp, #176]	; 0xb0
 80059ec:	f300 81dc 	bgt.w	8005da8 <_svfprintf_r+0x1368>
 80059f0:	f106 0208 	add.w	r2, r6, #8
 80059f4:	4264      	negs	r4, r4
 80059f6:	2c00      	cmp	r4, #0
 80059f8:	f340 8109 	ble.w	8005c0e <_svfprintf_r+0x11ce>
 80059fc:	2c10      	cmp	r4, #16
 80059fe:	4da2      	ldr	r5, [pc, #648]	; (8005c88 <_svfprintf_r+0x1248>)
 8005a00:	f340 8146 	ble.w	8005c90 <_svfprintf_r+0x1250>
 8005a04:	46a3      	mov	fp, r4
 8005a06:	2610      	movs	r6, #16
 8005a08:	460c      	mov	r4, r1
 8005a0a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8005a0e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a12:	e006      	b.n	8005a22 <_svfprintf_r+0xfe2>
 8005a14:	3208      	adds	r2, #8
 8005a16:	f1ab 0b10 	sub.w	fp, fp, #16
 8005a1a:	f1bb 0f10 	cmp.w	fp, #16
 8005a1e:	f340 8135 	ble.w	8005c8c <_svfprintf_r+0x124c>
 8005a22:	3301      	adds	r3, #1
 8005a24:	3410      	adds	r4, #16
 8005a26:	2b07      	cmp	r3, #7
 8005a28:	942d      	str	r4, [sp, #180]	; 0xb4
 8005a2a:	932c      	str	r3, [sp, #176]	; 0xb0
 8005a2c:	e882 0060 	stmia.w	r2, {r5, r6}
 8005a30:	ddf0      	ble.n	8005a14 <_svfprintf_r+0xfd4>
 8005a32:	4640      	mov	r0, r8
 8005a34:	4651      	mov	r1, sl
 8005a36:	aa2b      	add	r2, sp, #172	; 0xac
 8005a38:	f002 f892 	bl	8007b60 <__ssprint_r>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	f47f a916 	bne.w	8004c6e <_svfprintf_r+0x22e>
 8005a42:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8005a44:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8005a46:	aa38      	add	r2, sp, #224	; 0xe0
 8005a48:	e7e5      	b.n	8005a16 <_svfprintf_r+0xfd6>
 8005a4a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005a4c:	f893 8001 	ldrb.w	r8, [r3, #1]
 8005a50:	f044 0420 	orr.w	r4, r4, #32
 8005a54:	f109 0901 	add.w	r9, r9, #1
 8005a58:	9409      	str	r4, [sp, #36]	; 0x24
 8005a5a:	f7ff b84c 	b.w	8004af6 <_svfprintf_r+0xb6>
 8005a5e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005a60:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a62:	aa2b      	add	r2, sp, #172	; 0xac
 8005a64:	f002 f87c 	bl	8007b60 <__ssprint_r>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	f47f a900 	bne.w	8004c6e <_svfprintf_r+0x22e>
 8005a6e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8005a72:	ae38      	add	r6, sp, #224	; 0xe0
 8005a74:	e4aa      	b.n	80053cc <_svfprintf_r+0x98c>
 8005a76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a78:	3401      	adds	r4, #1
 8005a7a:	f028 0a20 	bic.w	sl, r8, #32
 8005a7e:	f000 80a3 	beq.w	8005bc8 <_svfprintf_r+0x1188>
 8005a82:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005a86:	d104      	bne.n	8005a92 <_svfprintf_r+0x1052>
 8005a88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a8a:	2c00      	cmp	r4, #0
 8005a8c:	bf08      	it	eq
 8005a8e:	2401      	moveq	r4, #1
 8005a90:	940a      	str	r4, [sp, #40]	; 0x28
 8005a92:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005a96:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8005a9e:	9512      	str	r5, [sp, #72]	; 0x48
 8005aa0:	f2c0 819c 	blt.w	8005ddc <_svfprintf_r+0x139c>
 8005aa4:	ed9d 7b16 	vldr	d7, [sp, #88]	; 0x58
 8005aa8:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8005aac:	f04f 0b00 	mov.w	fp, #0
 8005ab0:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005ab4:	f000 819b 	beq.w	8005dee <_svfprintf_r+0x13ae>
 8005ab8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005abc:	f000 81a9 	beq.w	8005e12 <_svfprintf_r+0x13d2>
 8005ac0:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
 8005ac4:	bf0a      	itet	eq
 8005ac6:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
 8005ac8:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
 8005aca:	1c65      	addeq	r5, r4, #1
 8005acc:	2002      	movs	r0, #2
 8005ace:	a925      	add	r1, sp, #148	; 0x94
 8005ad0:	aa26      	add	r2, sp, #152	; 0x98
 8005ad2:	ab29      	add	r3, sp, #164	; 0xa4
 8005ad4:	e88d 0021 	stmia.w	sp, {r0, r5}
 8005ad8:	9203      	str	r2, [sp, #12]
 8005ada:	9304      	str	r3, [sp, #16]
 8005adc:	9102      	str	r1, [sp, #8]
 8005ade:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005ae0:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8005ae4:	f000 fac4 	bl	8006070 <_dtoa_r>
 8005ae8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005aec:	4607      	mov	r7, r0
 8005aee:	d002      	beq.n	8005af6 <_svfprintf_r+0x10b6>
 8005af0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005af4:	d105      	bne.n	8005b02 <_svfprintf_r+0x10c2>
 8005af6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8005afa:	f01c 0f01 	tst.w	ip, #1
 8005afe:	f000 819c 	beq.w	8005e3a <_svfprintf_r+0x13fa>
 8005b02:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
 8005b06:	eb07 0405 	add.w	r4, r7, r5
 8005b0a:	f000 811c 	beq.w	8005d46 <_svfprintf_r+0x1306>
 8005b0e:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8005b12:	2200      	movs	r2, #0
 8005b14:	2300      	movs	r3, #0
 8005b16:	f003 f855 	bl	8008bc4 <__aeabi_dcmpeq>
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	f040 8105 	bne.w	8005d2a <_svfprintf_r+0x12ea>
 8005b20:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005b22:	429c      	cmp	r4, r3
 8005b24:	d906      	bls.n	8005b34 <_svfprintf_r+0x10f4>
 8005b26:	2130      	movs	r1, #48	; 0x30
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	9229      	str	r2, [sp, #164]	; 0xa4
 8005b2c:	7019      	strb	r1, [r3, #0]
 8005b2e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005b30:	429c      	cmp	r4, r3
 8005b32:	d8f9      	bhi.n	8005b28 <_svfprintf_r+0x10e8>
 8005b34:	1bdb      	subs	r3, r3, r7
 8005b36:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005b3a:	9311      	str	r3, [sp, #68]	; 0x44
 8005b3c:	f000 80ed 	beq.w	8005d1a <_svfprintf_r+0x12da>
 8005b40:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005b44:	f340 81f2 	ble.w	8005f2c <_svfprintf_r+0x14ec>
 8005b48:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005b4c:	f000 8168 	beq.w	8005e20 <_svfprintf_r+0x13e0>
 8005b50:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8005b52:	9414      	str	r4, [sp, #80]	; 0x50
 8005b54:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005b56:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005b58:	42ac      	cmp	r4, r5
 8005b5a:	f300 8132 	bgt.w	8005dc2 <_svfprintf_r+0x1382>
 8005b5e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8005b62:	f01c 0f01 	tst.w	ip, #1
 8005b66:	f040 81ad 	bne.w	8005ec4 <_svfprintf_r+0x1484>
 8005b6a:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8005b6e:	462c      	mov	r4, r5
 8005b70:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005b74:	f1bb 0f00 	cmp.w	fp, #0
 8005b78:	f040 80b2 	bne.w	8005ce0 <_svfprintf_r+0x12a0>
 8005b7c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b80:	9509      	str	r5, [sp, #36]	; 0x24
 8005b82:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005b86:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8005b8a:	f7ff b8f5 	b.w	8004d78 <_svfprintf_r+0x338>
 8005b8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005b90:	2140      	movs	r1, #64	; 0x40
 8005b92:	f001 f989 	bl	8006ea8 <_malloc_r>
 8005b96:	6020      	str	r0, [r4, #0]
 8005b98:	6120      	str	r0, [r4, #16]
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	f000 81bf 	beq.w	8005f1e <_svfprintf_r+0x14de>
 8005ba0:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 8005ba4:	2340      	movs	r3, #64	; 0x40
 8005ba6:	f8cc 3014 	str.w	r3, [ip, #20]
 8005baa:	f7fe bf5f 	b.w	8004a6c <_svfprintf_r+0x2c>
 8005bae:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005bb0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005bb2:	aa2b      	add	r2, sp, #172	; 0xac
 8005bb4:	f001 ffd4 	bl	8007b60 <__ssprint_r>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	f47f a858 	bne.w	8004c6e <_svfprintf_r+0x22e>
 8005bbe:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8005bc0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8005bc4:	ae38      	add	r6, sp, #224	; 0xe0
 8005bc6:	e6ff      	b.n	80059c8 <_svfprintf_r+0xf88>
 8005bc8:	2506      	movs	r5, #6
 8005bca:	950a      	str	r5, [sp, #40]	; 0x28
 8005bcc:	e761      	b.n	8005a92 <_svfprintf_r+0x1052>
 8005bce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005bd0:	682c      	ldr	r4, [r5, #0]
 8005bd2:	3504      	adds	r5, #4
 8005bd4:	9510      	str	r5, [sp, #64]	; 0x40
 8005bd6:	2500      	movs	r5, #0
 8005bd8:	f7ff b88d 	b.w	8004cf6 <_svfprintf_r+0x2b6>
 8005bdc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8005be0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8005be4:	f000 8087 	beq.w	8005cf6 <_svfprintf_r+0x12b6>
 8005be8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005bea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	3404      	adds	r4, #4
 8005bf0:	9410      	str	r4, [sp, #64]	; 0x40
 8005bf2:	801d      	strh	r5, [r3, #0]
 8005bf4:	f7fe bf49 	b.w	8004a8a <_svfprintf_r+0x4a>
 8005bf8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005bfa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005bfc:	aa2b      	add	r2, sp, #172	; 0xac
 8005bfe:	f001 ffaf 	bl	8007b60 <__ssprint_r>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	f47f a833 	bne.w	8004c6e <_svfprintf_r+0x22e>
 8005c08:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8005c0a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8005c0c:	aa38      	add	r2, sp, #224	; 0xe0
 8005c0e:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8005c12:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005c14:	6017      	str	r7, [r2, #0]
 8005c16:	3301      	adds	r3, #1
 8005c18:	448c      	add	ip, r1
 8005c1a:	2b07      	cmp	r3, #7
 8005c1c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8005c20:	932c      	str	r3, [sp, #176]	; 0xb0
 8005c22:	6054      	str	r4, [r2, #4]
 8005c24:	f73f ac92 	bgt.w	800554c <_svfprintf_r+0xb0c>
 8005c28:	f102 0608 	add.w	r6, r2, #8
 8005c2c:	f7ff b97f 	b.w	8004f2e <_svfprintf_r+0x4ee>
 8005c30:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005c34:	f001 ff64 	bl	8007b00 <strlen>
 8005c38:	9510      	str	r5, [sp, #64]	; 0x40
 8005c3a:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
 8005c3e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005c40:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8005c44:	4604      	mov	r4, r0
 8005c46:	9514      	str	r5, [sp, #80]	; 0x50
 8005c48:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8005c4c:	f7ff b894 	b.w	8004d78 <_svfprintf_r+0x338>
 8005c50:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005c52:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c54:	aa2b      	add	r2, sp, #172	; 0xac
 8005c56:	f001 ff83 	bl	8007b60 <__ssprint_r>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	f47f a807 	bne.w	8004c6e <_svfprintf_r+0x22e>
 8005c60:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8005c64:	ae38      	add	r6, sp, #224	; 0xe0
 8005c66:	e4cc      	b.n	8005602 <_svfprintf_r+0xbc2>
 8005c68:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005c6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c6c:	aa2b      	add	r2, sp, #172	; 0xac
 8005c6e:	f001 ff77 	bl	8007b60 <__ssprint_r>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	f47e affb 	bne.w	8004c6e <_svfprintf_r+0x22e>
 8005c78:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8005c7a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8005c7e:	ae38      	add	r6, sp, #224	; 0xe0
 8005c80:	e5aa      	b.n	80057d8 <_svfprintf_r+0xd98>
 8005c82:	bf00      	nop
 8005c84:	08009464 	.word	0x08009464
 8005c88:	08009414 	.word	0x08009414
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	465c      	mov	r4, fp
 8005c90:	3301      	adds	r3, #1
 8005c92:	4421      	add	r1, r4
 8005c94:	2b07      	cmp	r3, #7
 8005c96:	912d      	str	r1, [sp, #180]	; 0xb4
 8005c98:	932c      	str	r3, [sp, #176]	; 0xb0
 8005c9a:	6015      	str	r5, [r2, #0]
 8005c9c:	6054      	str	r4, [r2, #4]
 8005c9e:	dcab      	bgt.n	8005bf8 <_svfprintf_r+0x11b8>
 8005ca0:	3208      	adds	r2, #8
 8005ca2:	e7b4      	b.n	8005c0e <_svfprintf_r+0x11ce>
 8005ca4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005ca6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ca8:	aa2b      	add	r2, sp, #172	; 0xac
 8005caa:	f001 ff59 	bl	8007b60 <__ssprint_r>
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	f47e afdd 	bne.w	8004c6e <_svfprintf_r+0x22e>
 8005cb4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8005cb6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005cb8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8005cbc:	1b0c      	subs	r4, r1, r4
 8005cbe:	ae38      	add	r6, sp, #224	; 0xe0
 8005cc0:	e59f      	b.n	8005802 <_svfprintf_r+0xdc2>
 8005cc2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005cc4:	9714      	str	r7, [sp, #80]	; 0x50
 8005cc6:	2c06      	cmp	r4, #6
 8005cc8:	bf28      	it	cs
 8005cca:	2406      	movcs	r4, #6
 8005ccc:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
 8005cd0:	46ba      	mov	sl, r7
 8005cd2:	970a      	str	r7, [sp, #40]	; 0x28
 8005cd4:	9510      	str	r5, [sp, #64]	; 0x40
 8005cd6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8005cda:	4f97      	ldr	r7, [pc, #604]	; (8005f38 <_svfprintf_r+0x14f8>)
 8005cdc:	f7ff b84c 	b.w	8004d78 <_svfprintf_r+0x338>
 8005ce0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005ce2:	9509      	str	r5, [sp, #36]	; 0x24
 8005ce4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8005ce8:	2500      	movs	r5, #0
 8005cea:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cec:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 8005cf0:	950a      	str	r5, [sp, #40]	; 0x28
 8005cf2:	f7ff b844 	b.w	8004d7e <_svfprintf_r+0x33e>
 8005cf6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8005cfa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005cfc:	f8dc 3000 	ldr.w	r3, [ip]
 8005d00:	f10c 0c04 	add.w	ip, ip, #4
 8005d04:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8005d08:	601c      	str	r4, [r3, #0]
 8005d0a:	f7fe bebe 	b.w	8004a8a <_svfprintf_r+0x4a>
 8005d0e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8005d12:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 8005d16:	f7ff ba8f 	b.w	8005238 <_svfprintf_r+0x7f8>
 8005d1a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005d1c:	1cdc      	adds	r4, r3, #3
 8005d1e:	db19      	blt.n	8005d54 <_svfprintf_r+0x1314>
 8005d20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d22:	429c      	cmp	r4, r3
 8005d24:	db16      	blt.n	8005d54 <_svfprintf_r+0x1314>
 8005d26:	9314      	str	r3, [sp, #80]	; 0x50
 8005d28:	e714      	b.n	8005b54 <_svfprintf_r+0x1114>
 8005d2a:	4623      	mov	r3, r4
 8005d2c:	e702      	b.n	8005b34 <_svfprintf_r+0x10f4>
 8005d2e:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
 8005d32:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8005d36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d38:	9510      	str	r5, [sp, #64]	; 0x40
 8005d3a:	900a      	str	r0, [sp, #40]	; 0x28
 8005d3c:	9014      	str	r0, [sp, #80]	; 0x50
 8005d3e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8005d42:	f7ff b819 	b.w	8004d78 <_svfprintf_r+0x338>
 8005d46:	783b      	ldrb	r3, [r7, #0]
 8005d48:	2b30      	cmp	r3, #48	; 0x30
 8005d4a:	f000 80ad 	beq.w	8005ea8 <_svfprintf_r+0x1468>
 8005d4e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8005d50:	442c      	add	r4, r5
 8005d52:	e6dc      	b.n	8005b0e <_svfprintf_r+0x10ce>
 8005d54:	f1a8 0802 	sub.w	r8, r8, #2
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	9325      	str	r3, [sp, #148]	; 0x94
 8005d5e:	bfba      	itte	lt
 8005d60:	425b      	neglt	r3, r3
 8005d62:	222d      	movlt	r2, #45	; 0x2d
 8005d64:	222b      	movge	r2, #43	; 0x2b
 8005d66:	2b09      	cmp	r3, #9
 8005d68:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
 8005d6c:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
 8005d70:	dc65      	bgt.n	8005e3e <_svfprintf_r+0x13fe>
 8005d72:	3330      	adds	r3, #48	; 0x30
 8005d74:	2230      	movs	r2, #48	; 0x30
 8005d76:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 8005d7a:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
 8005d7e:	ab28      	add	r3, sp, #160	; 0xa0
 8005d80:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8005d82:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005d84:	aa27      	add	r2, sp, #156	; 0x9c
 8005d86:	1a9a      	subs	r2, r3, r2
 8005d88:	2d01      	cmp	r5, #1
 8005d8a:	9219      	str	r2, [sp, #100]	; 0x64
 8005d8c:	4414      	add	r4, r2
 8005d8e:	f340 80b7 	ble.w	8005f00 <_svfprintf_r+0x14c0>
 8005d92:	3401      	adds	r4, #1
 8005d94:	2500      	movs	r5, #0
 8005d96:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8005d9a:	9514      	str	r5, [sp, #80]	; 0x50
 8005d9c:	e6ea      	b.n	8005b74 <_svfprintf_r+0x1134>
 8005d9e:	2400      	movs	r4, #0
 8005da0:	4681      	mov	r9, r0
 8005da2:	940a      	str	r4, [sp, #40]	; 0x28
 8005da4:	f7fe bea9 	b.w	8004afa <_svfprintf_r+0xba>
 8005da8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005daa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005dac:	aa2b      	add	r2, sp, #172	; 0xac
 8005dae:	f001 fed7 	bl	8007b60 <__ssprint_r>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	f47e af5b 	bne.w	8004c6e <_svfprintf_r+0x22e>
 8005db8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8005dba:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8005dbc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8005dbe:	aa38      	add	r2, sp, #224	; 0xe0
 8005dc0:	e618      	b.n	80059f4 <_svfprintf_r+0xfb4>
 8005dc2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005dc4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8005dc6:	2c00      	cmp	r4, #0
 8005dc8:	bfd4      	ite	le
 8005dca:	f1c4 0402 	rsble	r4, r4, #2
 8005dce:	2401      	movgt	r4, #1
 8005dd0:	442c      	add	r4, r5
 8005dd2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8005dd6:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005dda:	e6cb      	b.n	8005b74 <_svfprintf_r+0x1134>
 8005ddc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005dde:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005de0:	9020      	str	r0, [sp, #128]	; 0x80
 8005de2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005de6:	9121      	str	r1, [sp, #132]	; 0x84
 8005de8:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
 8005dec:	e660      	b.n	8005ab0 <_svfprintf_r+0x1070>
 8005dee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005df0:	9501      	str	r5, [sp, #4]
 8005df2:	2003      	movs	r0, #3
 8005df4:	a925      	add	r1, sp, #148	; 0x94
 8005df6:	aa26      	add	r2, sp, #152	; 0x98
 8005df8:	ab29      	add	r3, sp, #164	; 0xa4
 8005dfa:	9000      	str	r0, [sp, #0]
 8005dfc:	9203      	str	r2, [sp, #12]
 8005dfe:	9304      	str	r3, [sp, #16]
 8005e00:	9102      	str	r1, [sp, #8]
 8005e02:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005e04:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8005e08:	f000 f932 	bl	8006070 <_dtoa_r>
 8005e0c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005e0e:	4607      	mov	r7, r0
 8005e10:	e677      	b.n	8005b02 <_svfprintf_r+0x10c2>
 8005e12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005e14:	9401      	str	r4, [sp, #4]
 8005e16:	2003      	movs	r0, #3
 8005e18:	a925      	add	r1, sp, #148	; 0x94
 8005e1a:	aa26      	add	r2, sp, #152	; 0x98
 8005e1c:	ab29      	add	r3, sp, #164	; 0xa4
 8005e1e:	e7ec      	b.n	8005dfa <_svfprintf_r+0x13ba>
 8005e20:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8005e22:	9514      	str	r5, [sp, #80]	; 0x50
 8005e24:	2d00      	cmp	r5, #0
 8005e26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005e28:	dd63      	ble.n	8005ef2 <_svfprintf_r+0x14b2>
 8005e2a:	bbb4      	cbnz	r4, 8005e9a <_svfprintf_r+0x145a>
 8005e2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e2e:	07e8      	lsls	r0, r5, #31
 8005e30:	d433      	bmi.n	8005e9a <_svfprintf_r+0x145a>
 8005e32:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005e34:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8005e38:	e69c      	b.n	8005b74 <_svfprintf_r+0x1134>
 8005e3a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005e3c:	e67a      	b.n	8005b34 <_svfprintf_r+0x10f4>
 8005e3e:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
 8005e42:	4d3e      	ldr	r5, [pc, #248]	; (8005f3c <_svfprintf_r+0x14fc>)
 8005e44:	17da      	asrs	r2, r3, #31
 8005e46:	fb85 5103 	smull	r5, r1, r5, r3
 8005e4a:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
 8005e4e:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8005e52:	4602      	mov	r2, r0
 8005e54:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 8005e58:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005e5c:	2909      	cmp	r1, #9
 8005e5e:	7010      	strb	r0, [r2, #0]
 8005e60:	460b      	mov	r3, r1
 8005e62:	f102 30ff 	add.w	r0, r2, #4294967295
 8005e66:	dcec      	bgt.n	8005e42 <_svfprintf_r+0x1402>
 8005e68:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8005e6c:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
 8005e70:	b2d9      	uxtb	r1, r3
 8005e72:	4284      	cmp	r4, r0
 8005e74:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005e78:	d95a      	bls.n	8005f30 <_svfprintf_r+0x14f0>
 8005e7a:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
 8005e7e:	4613      	mov	r3, r2
 8005e80:	e001      	b.n	8005e86 <_svfprintf_r+0x1446>
 8005e82:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005e86:	42a3      	cmp	r3, r4
 8005e88:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005e8c:	d1f9      	bne.n	8005e82 <_svfprintf_r+0x1442>
 8005e8e:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 8005e92:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8005e96:	3bf6      	subs	r3, #246	; 0xf6
 8005e98:	e772      	b.n	8005d80 <_svfprintf_r+0x1340>
 8005e9a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005e9c:	1c6c      	adds	r4, r5, #1
 8005e9e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005ea0:	442c      	add	r4, r5
 8005ea2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8005ea6:	e665      	b.n	8005b74 <_svfprintf_r+0x1134>
 8005ea8:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8005eac:	2200      	movs	r2, #0
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f002 fe88 	bl	8008bc4 <__aeabi_dcmpeq>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	f47f af4a 	bne.w	8005d4e <_svfprintf_r+0x130e>
 8005eba:	f1c5 0501 	rsb	r5, r5, #1
 8005ebe:	9525      	str	r5, [sp, #148]	; 0x94
 8005ec0:	442c      	add	r4, r5
 8005ec2:	e624      	b.n	8005b0e <_svfprintf_r+0x10ce>
 8005ec4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005ec6:	1c6c      	adds	r4, r5, #1
 8005ec8:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8005ecc:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005ed0:	e650      	b.n	8005b74 <_svfprintf_r+0x1134>
 8005ed2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005ed4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8005ed8:	682d      	ldr	r5, [r5, #0]
 8005eda:	f899 8001 	ldrb.w	r8, [r9, #1]
 8005ede:	950a      	str	r5, [sp, #40]	; 0x28
 8005ee0:	f10c 0304 	add.w	r3, ip, #4
 8005ee4:	2d00      	cmp	r5, #0
 8005ee6:	9310      	str	r3, [sp, #64]	; 0x40
 8005ee8:	4681      	mov	r9, r0
 8005eea:	f6be ae04 	bge.w	8004af6 <_svfprintf_r+0xb6>
 8005eee:	f7fe bdff 	b.w	8004af0 <_svfprintf_r+0xb0>
 8005ef2:	b97c      	cbnz	r4, 8005f14 <_svfprintf_r+0x14d4>
 8005ef4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005ef6:	07e9      	lsls	r1, r5, #31
 8005ef8:	d40c      	bmi.n	8005f14 <_svfprintf_r+0x14d4>
 8005efa:	2301      	movs	r3, #1
 8005efc:	461c      	mov	r4, r3
 8005efe:	e639      	b.n	8005b74 <_svfprintf_r+0x1134>
 8005f00:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8005f04:	f01c 0301 	ands.w	r3, ip, #1
 8005f08:	f47f af43 	bne.w	8005d92 <_svfprintf_r+0x1352>
 8005f0c:	9314      	str	r3, [sp, #80]	; 0x50
 8005f0e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8005f12:	e62f      	b.n	8005b74 <_svfprintf_r+0x1134>
 8005f14:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005f16:	1cac      	adds	r4, r5, #2
 8005f18:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8005f1c:	e62a      	b.n	8005b74 <_svfprintf_r+0x1134>
 8005f1e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005f20:	230c      	movs	r3, #12
 8005f22:	602b      	str	r3, [r5, #0]
 8005f24:	f04f 30ff 	mov.w	r0, #4294967295
 8005f28:	f7fe bea9 	b.w	8004c7e <_svfprintf_r+0x23e>
 8005f2c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005f2e:	e713      	b.n	8005d58 <_svfprintf_r+0x1318>
 8005f30:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
 8005f34:	e724      	b.n	8005d80 <_svfprintf_r+0x1340>
 8005f36:	bf00      	nop
 8005f38:	0800945c 	.word	0x0800945c
 8005f3c:	66666667 	.word	0x66666667

08005f40 <quorem>:
quorem():
 8005f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	6903      	ldr	r3, [r0, #16]
 8005f46:	690d      	ldr	r5, [r1, #16]
 8005f48:	429d      	cmp	r5, r3
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	4683      	mov	fp, r0
 8005f4e:	f300 808b 	bgt.w	8006068 <quorem+0x128>
 8005f52:	3d01      	subs	r5, #1
 8005f54:	f101 0414 	add.w	r4, r1, #20
 8005f58:	f100 0a14 	add.w	sl, r0, #20
 8005f5c:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 8005f60:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8005f64:	3201      	adds	r2, #1
 8005f66:	fbb3 f8f2 	udiv	r8, r3, r2
 8005f6a:	00aa      	lsls	r2, r5, #2
 8005f6c:	4691      	mov	r9, r2
 8005f6e:	9200      	str	r2, [sp, #0]
 8005f70:	4452      	add	r2, sl
 8005f72:	44a1      	add	r9, r4
 8005f74:	9201      	str	r2, [sp, #4]
 8005f76:	f1b8 0f00 	cmp.w	r8, #0
 8005f7a:	d03d      	beq.n	8005ff8 <quorem+0xb8>
 8005f7c:	f04f 0e00 	mov.w	lr, #0
 8005f80:	4670      	mov	r0, lr
 8005f82:	4622      	mov	r2, r4
 8005f84:	4653      	mov	r3, sl
 8005f86:	468c      	mov	ip, r1
 8005f88:	f852 6b04 	ldr.w	r6, [r2], #4
 8005f8c:	6819      	ldr	r1, [r3, #0]
 8005f8e:	b2b7      	uxth	r7, r6
 8005f90:	0c36      	lsrs	r6, r6, #16
 8005f92:	fb07 ee08 	mla	lr, r7, r8, lr
 8005f96:	fb06 f608 	mul.w	r6, r6, r8
 8005f9a:	eb06 461e 	add.w	r6, r6, lr, lsr #16
 8005f9e:	fa1f f78e 	uxth.w	r7, lr
 8005fa2:	1bc7      	subs	r7, r0, r7
 8005fa4:	b2b0      	uxth	r0, r6
 8005fa6:	fa17 f781 	uxtah	r7, r7, r1
 8005faa:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
 8005fae:	eb00 4027 	add.w	r0, r0, r7, asr #16
 8005fb2:	b2bf      	uxth	r7, r7
 8005fb4:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
 8005fb8:	4591      	cmp	r9, r2
 8005fba:	f843 7b04 	str.w	r7, [r3], #4
 8005fbe:	ea4f 4020 	mov.w	r0, r0, asr #16
 8005fc2:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8005fc6:	d2df      	bcs.n	8005f88 <quorem+0x48>
 8005fc8:	9a00      	ldr	r2, [sp, #0]
 8005fca:	f85a 3002 	ldr.w	r3, [sl, r2]
 8005fce:	4661      	mov	r1, ip
 8005fd0:	b993      	cbnz	r3, 8005ff8 <quorem+0xb8>
 8005fd2:	9a01      	ldr	r2, [sp, #4]
 8005fd4:	1f13      	subs	r3, r2, #4
 8005fd6:	459a      	cmp	sl, r3
 8005fd8:	d20c      	bcs.n	8005ff4 <quorem+0xb4>
 8005fda:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8005fde:	b94b      	cbnz	r3, 8005ff4 <quorem+0xb4>
 8005fe0:	f1a2 0308 	sub.w	r3, r2, #8
 8005fe4:	e002      	b.n	8005fec <quorem+0xac>
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	3b04      	subs	r3, #4
 8005fea:	b91a      	cbnz	r2, 8005ff4 <quorem+0xb4>
 8005fec:	459a      	cmp	sl, r3
 8005fee:	f105 35ff 	add.w	r5, r5, #4294967295
 8005ff2:	d3f8      	bcc.n	8005fe6 <quorem+0xa6>
 8005ff4:	f8cb 5010 	str.w	r5, [fp, #16]
 8005ff8:	4658      	mov	r0, fp
 8005ffa:	f001 fc5b 	bl	80078b4 <__mcmp>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	db2e      	blt.n	8006060 <quorem+0x120>
 8006002:	f108 0801 	add.w	r8, r8, #1
 8006006:	4653      	mov	r3, sl
 8006008:	2200      	movs	r2, #0
 800600a:	f854 6b04 	ldr.w	r6, [r4], #4
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	b2b1      	uxth	r1, r6
 8006012:	1a52      	subs	r2, r2, r1
 8006014:	0c36      	lsrs	r6, r6, #16
 8006016:	fa12 f180 	uxtah	r1, r2, r0
 800601a:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
 800601e:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8006022:	b289      	uxth	r1, r1
 8006024:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006028:	45a1      	cmp	r9, r4
 800602a:	f843 1b04 	str.w	r1, [r3], #4
 800602e:	ea4f 4222 	mov.w	r2, r2, asr #16
 8006032:	d2ea      	bcs.n	800600a <quorem+0xca>
 8006034:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
 8006038:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
 800603c:	b982      	cbnz	r2, 8006060 <quorem+0x120>
 800603e:	1f1a      	subs	r2, r3, #4
 8006040:	4592      	cmp	sl, r2
 8006042:	d20b      	bcs.n	800605c <quorem+0x11c>
 8006044:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8006048:	b942      	cbnz	r2, 800605c <quorem+0x11c>
 800604a:	3b08      	subs	r3, #8
 800604c:	e002      	b.n	8006054 <quorem+0x114>
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	3b04      	subs	r3, #4
 8006052:	b91a      	cbnz	r2, 800605c <quorem+0x11c>
 8006054:	459a      	cmp	sl, r3
 8006056:	f105 35ff 	add.w	r5, r5, #4294967295
 800605a:	d3f8      	bcc.n	800604e <quorem+0x10e>
 800605c:	f8cb 5010 	str.w	r5, [fp, #16]
 8006060:	4640      	mov	r0, r8
 8006062:	b003      	add	sp, #12
 8006064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006068:	2000      	movs	r0, #0
 800606a:	b003      	add	sp, #12
 800606c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006070 <_dtoa_r>:
_dtoa_r():
 8006070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006074:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006076:	b09b      	sub	sp, #108	; 0x6c
 8006078:	4604      	mov	r4, r0
 800607a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800607c:	4692      	mov	sl, r2
 800607e:	469b      	mov	fp, r3
 8006080:	b149      	cbz	r1, 8006096 <_dtoa_r+0x26>
 8006082:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006084:	604b      	str	r3, [r1, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	fa02 f303 	lsl.w	r3, r2, r3
 800608c:	608b      	str	r3, [r1, #8]
 800608e:	f001 fa19 	bl	80074c4 <_Bfree>
 8006092:	2300      	movs	r3, #0
 8006094:	6423      	str	r3, [r4, #64]	; 0x40
 8006096:	f1bb 0f00 	cmp.w	fp, #0
 800609a:	46d9      	mov	r9, fp
 800609c:	db33      	blt.n	8006106 <_dtoa_r+0x96>
 800609e:	2300      	movs	r3, #0
 80060a0:	602b      	str	r3, [r5, #0]
 80060a2:	4ba5      	ldr	r3, [pc, #660]	; (8006338 <_dtoa_r+0x2c8>)
 80060a4:	461a      	mov	r2, r3
 80060a6:	ea09 0303 	and.w	r3, r9, r3
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d014      	beq.n	80060d8 <_dtoa_r+0x68>
 80060ae:	2200      	movs	r2, #0
 80060b0:	2300      	movs	r3, #0
 80060b2:	4650      	mov	r0, sl
 80060b4:	4659      	mov	r1, fp
 80060b6:	f002 fd85 	bl	8008bc4 <__aeabi_dcmpeq>
 80060ba:	4680      	mov	r8, r0
 80060bc:	b348      	cbz	r0, 8006112 <_dtoa_r+0xa2>
 80060be:	9e26      	ldr	r6, [sp, #152]	; 0x98
 80060c0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80060c2:	2301      	movs	r3, #1
 80060c4:	6033      	str	r3, [r6, #0]
 80060c6:	2d00      	cmp	r5, #0
 80060c8:	f000 80c9 	beq.w	800625e <_dtoa_r+0x1ee>
 80060cc:	489b      	ldr	r0, [pc, #620]	; (800633c <_dtoa_r+0x2cc>)
 80060ce:	6028      	str	r0, [r5, #0]
 80060d0:	3801      	subs	r0, #1
 80060d2:	b01b      	add	sp, #108	; 0x6c
 80060d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d8:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80060da:	f242 730f 	movw	r3, #9999	; 0x270f
 80060de:	602b      	str	r3, [r5, #0]
 80060e0:	f1ba 0f00 	cmp.w	sl, #0
 80060e4:	f000 80a4 	beq.w	8006230 <_dtoa_r+0x1c0>
 80060e8:	4895      	ldr	r0, [pc, #596]	; (8006340 <_dtoa_r+0x2d0>)
 80060ea:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80060ec:	2e00      	cmp	r6, #0
 80060ee:	d0f0      	beq.n	80060d2 <_dtoa_r+0x62>
 80060f0:	78c3      	ldrb	r3, [r0, #3]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 80b5 	beq.w	8006262 <_dtoa_r+0x1f2>
 80060f8:	f100 0308 	add.w	r3, r0, #8
 80060fc:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80060fe:	602b      	str	r3, [r5, #0]
 8006100:	b01b      	add	sp, #108	; 0x6c
 8006102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006106:	2301      	movs	r3, #1
 8006108:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
 800610c:	602b      	str	r3, [r5, #0]
 800610e:	46cb      	mov	fp, r9
 8006110:	e7c7      	b.n	80060a2 <_dtoa_r+0x32>
 8006112:	aa19      	add	r2, sp, #100	; 0x64
 8006114:	ab18      	add	r3, sp, #96	; 0x60
 8006116:	e88d 000c 	stmia.w	sp, {r2, r3}
 800611a:	4620      	mov	r0, r4
 800611c:	4652      	mov	r2, sl
 800611e:	465b      	mov	r3, fp
 8006120:	f001 fc56 	bl	80079d0 <__d2b>
 8006124:	ea5f 5519 	movs.w	r5, r9, lsr #20
 8006128:	900a      	str	r0, [sp, #40]	; 0x28
 800612a:	f040 808a 	bne.w	8006242 <_dtoa_r+0x1d2>
 800612e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8006130:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006132:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8006136:	443d      	add	r5, r7
 8006138:	429d      	cmp	r5, r3
 800613a:	f2c0 8292 	blt.w	8006662 <_dtoa_r+0x5f2>
 800613e:	331f      	adds	r3, #31
 8006140:	f205 4212 	addw	r2, r5, #1042	; 0x412
 8006144:	1b5b      	subs	r3, r3, r5
 8006146:	fa09 f303 	lsl.w	r3, r9, r3
 800614a:	fa2a f202 	lsr.w	r2, sl, r2
 800614e:	ea43 0002 	orr.w	r0, r3, r2
 8006152:	f002 fa59 	bl	8008608 <__aeabi_ui2d>
 8006156:	2601      	movs	r6, #1
 8006158:	3d01      	subs	r5, #1
 800615a:	46b8      	mov	r8, r7
 800615c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006160:	9616      	str	r6, [sp, #88]	; 0x58
 8006162:	2200      	movs	r2, #0
 8006164:	4b77      	ldr	r3, [pc, #476]	; (8006344 <_dtoa_r+0x2d4>)
 8006166:	f002 f911 	bl	800838c <__aeabi_dsub>
 800616a:	a36d      	add	r3, pc, #436	; (adr r3, 8006320 <_dtoa_r+0x2b0>)
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	f002 fac0 	bl	80086f4 <__aeabi_dmul>
 8006174:	a36c      	add	r3, pc, #432	; (adr r3, 8006328 <_dtoa_r+0x2b8>)
 8006176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617a:	f002 f909 	bl	8008390 <__adddf3>
 800617e:	4606      	mov	r6, r0
 8006180:	4628      	mov	r0, r5
 8006182:	460f      	mov	r7, r1
 8006184:	f002 fa50 	bl	8008628 <__aeabi_i2d>
 8006188:	a369      	add	r3, pc, #420	; (adr r3, 8006330 <_dtoa_r+0x2c0>)
 800618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618e:	f002 fab1 	bl	80086f4 <__aeabi_dmul>
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	4630      	mov	r0, r6
 8006198:	4639      	mov	r1, r7
 800619a:	f002 f8f9 	bl	8008390 <__adddf3>
 800619e:	4606      	mov	r6, r0
 80061a0:	460f      	mov	r7, r1
 80061a2:	f002 fd41 	bl	8008c28 <__aeabi_d2iz>
 80061a6:	4639      	mov	r1, r7
 80061a8:	9007      	str	r0, [sp, #28]
 80061aa:	2200      	movs	r2, #0
 80061ac:	4630      	mov	r0, r6
 80061ae:	2300      	movs	r3, #0
 80061b0:	f002 fd12 	bl	8008bd8 <__aeabi_dcmplt>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	f040 8229 	bne.w	800660c <_dtoa_r+0x59c>
 80061ba:	9e07      	ldr	r6, [sp, #28]
 80061bc:	2e16      	cmp	r6, #22
 80061be:	f200 8222 	bhi.w	8006606 <_dtoa_r+0x596>
 80061c2:	4b61      	ldr	r3, [pc, #388]	; (8006348 <_dtoa_r+0x2d8>)
 80061c4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061cc:	4652      	mov	r2, sl
 80061ce:	465b      	mov	r3, fp
 80061d0:	f002 fd20 	bl	8008c14 <__aeabi_dcmpgt>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	f000 8249 	beq.w	800666c <_dtoa_r+0x5fc>
 80061da:	3e01      	subs	r6, #1
 80061dc:	9607      	str	r6, [sp, #28]
 80061de:	2600      	movs	r6, #0
 80061e0:	960e      	str	r6, [sp, #56]	; 0x38
 80061e2:	ebc5 0508 	rsb	r5, r5, r8
 80061e6:	3d01      	subs	r5, #1
 80061e8:	9506      	str	r5, [sp, #24]
 80061ea:	f100 8226 	bmi.w	800663a <_dtoa_r+0x5ca>
 80061ee:	2500      	movs	r5, #0
 80061f0:	9508      	str	r5, [sp, #32]
 80061f2:	9e07      	ldr	r6, [sp, #28]
 80061f4:	2e00      	cmp	r6, #0
 80061f6:	f2c0 8217 	blt.w	8006628 <_dtoa_r+0x5b8>
 80061fa:	9d06      	ldr	r5, [sp, #24]
 80061fc:	960d      	str	r6, [sp, #52]	; 0x34
 80061fe:	4435      	add	r5, r6
 8006200:	2600      	movs	r6, #0
 8006202:	9506      	str	r5, [sp, #24]
 8006204:	960c      	str	r6, [sp, #48]	; 0x30
 8006206:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8006208:	2d09      	cmp	r5, #9
 800620a:	d82c      	bhi.n	8006266 <_dtoa_r+0x1f6>
 800620c:	2d05      	cmp	r5, #5
 800620e:	bfc4      	itt	gt
 8006210:	3d04      	subgt	r5, #4
 8006212:	9524      	strgt	r5, [sp, #144]	; 0x90
 8006214:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006216:	f1a6 0302 	sub.w	r3, r6, #2
 800621a:	bfcc      	ite	gt
 800621c:	2500      	movgt	r5, #0
 800621e:	2501      	movle	r5, #1
 8006220:	2b03      	cmp	r3, #3
 8006222:	d822      	bhi.n	800626a <_dtoa_r+0x1fa>
 8006224:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006228:	02a003ad 	.word	0x02a003ad
 800622c:	04a503b6 	.word	0x04a503b6
 8006230:	4a46      	ldr	r2, [pc, #280]	; (800634c <_dtoa_r+0x2dc>)
 8006232:	4b43      	ldr	r3, [pc, #268]	; (8006340 <_dtoa_r+0x2d0>)
 8006234:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8006238:	2800      	cmp	r0, #0
 800623a:	bf0c      	ite	eq
 800623c:	4610      	moveq	r0, r2
 800623e:	4618      	movne	r0, r3
 8006240:	e753      	b.n	80060ea <_dtoa_r+0x7a>
 8006242:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006246:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800624a:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
 800624e:	4650      	mov	r0, sl
 8006250:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006254:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006258:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800625c:	e781      	b.n	8006162 <_dtoa_r+0xf2>
 800625e:	483c      	ldr	r0, [pc, #240]	; (8006350 <_dtoa_r+0x2e0>)
 8006260:	e737      	b.n	80060d2 <_dtoa_r+0x62>
 8006262:	1cc3      	adds	r3, r0, #3
 8006264:	e74a      	b.n	80060fc <_dtoa_r+0x8c>
 8006266:	2500      	movs	r5, #0
 8006268:	9524      	str	r5, [sp, #144]	; 0x90
 800626a:	2500      	movs	r5, #0
 800626c:	6465      	str	r5, [r4, #68]	; 0x44
 800626e:	4629      	mov	r1, r5
 8006270:	4620      	mov	r0, r4
 8006272:	f001 f901 	bl	8007478 <_Balloc>
 8006276:	f04f 39ff 	mov.w	r9, #4294967295
 800627a:	2601      	movs	r6, #1
 800627c:	9009      	str	r0, [sp, #36]	; 0x24
 800627e:	9525      	str	r5, [sp, #148]	; 0x94
 8006280:	6420      	str	r0, [r4, #64]	; 0x40
 8006282:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8006286:	960b      	str	r6, [sp, #44]	; 0x2c
 8006288:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800628a:	2b00      	cmp	r3, #0
 800628c:	f2c0 80d2 	blt.w	8006434 <_dtoa_r+0x3c4>
 8006290:	9e07      	ldr	r6, [sp, #28]
 8006292:	2e0e      	cmp	r6, #14
 8006294:	f300 80ce 	bgt.w	8006434 <_dtoa_r+0x3c4>
 8006298:	4b2b      	ldr	r3, [pc, #172]	; (8006348 <_dtoa_r+0x2d8>)
 800629a:	9925      	ldr	r1, [sp, #148]	; 0x94
 800629c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80062a0:	ed93 7b00 	vldr	d7, [r3]
 80062a4:	2900      	cmp	r1, #0
 80062a6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80062aa:	f2c0 8376 	blt.w	800699a <_dtoa_r+0x92a>
 80062ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062b2:	4659      	mov	r1, fp
 80062b4:	4650      	mov	r0, sl
 80062b6:	f002 fb47 	bl	8008948 <__aeabi_ddiv>
 80062ba:	f002 fcb5 	bl	8008c28 <__aeabi_d2iz>
 80062be:	4605      	mov	r5, r0
 80062c0:	f002 f9b2 	bl	8008628 <__aeabi_i2d>
 80062c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062c8:	f002 fa14 	bl	80086f4 <__aeabi_dmul>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	4650      	mov	r0, sl
 80062d2:	4659      	mov	r1, fp
 80062d4:	f002 f85a 	bl	800838c <__aeabi_dsub>
 80062d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062da:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80062de:	f1b9 0f01 	cmp.w	r9, #1
 80062e2:	4606      	mov	r6, r0
 80062e4:	460f      	mov	r7, r1
 80062e6:	7013      	strb	r3, [r2, #0]
 80062e8:	f102 0b01 	add.w	fp, r2, #1
 80062ec:	d064      	beq.n	80063b8 <_dtoa_r+0x348>
 80062ee:	2200      	movs	r2, #0
 80062f0:	4b18      	ldr	r3, [pc, #96]	; (8006354 <_dtoa_r+0x2e4>)
 80062f2:	f002 f9ff 	bl	80086f4 <__aeabi_dmul>
 80062f6:	2200      	movs	r2, #0
 80062f8:	2300      	movs	r3, #0
 80062fa:	4606      	mov	r6, r0
 80062fc:	460f      	mov	r7, r1
 80062fe:	f002 fc61 	bl	8008bc4 <__aeabi_dcmpeq>
 8006302:	2800      	cmp	r0, #0
 8006304:	f040 8081 	bne.w	800640a <_dtoa_r+0x39a>
 8006308:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800630c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800630e:	9403      	str	r4, [sp, #12]
 8006310:	44c8      	add	r8, r9
 8006312:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006316:	f105 0902 	add.w	r9, r5, #2
 800631a:	e028      	b.n	800636e <_dtoa_r+0x2fe>
 800631c:	f3af 8000 	nop.w
 8006320:	636f4361 	.word	0x636f4361
 8006324:	3fd287a7 	.word	0x3fd287a7
 8006328:	8b60c8b3 	.word	0x8b60c8b3
 800632c:	3fc68a28 	.word	0x3fc68a28
 8006330:	509f79fb 	.word	0x509f79fb
 8006334:	3fd34413 	.word	0x3fd34413
 8006338:	7ff00000 	.word	0x7ff00000
 800633c:	08009465 	.word	0x08009465
 8006340:	08009484 	.word	0x08009484
 8006344:	3ff80000 	.word	0x3ff80000
 8006348:	08009498 	.word	0x08009498
 800634c:	08009478 	.word	0x08009478
 8006350:	08009464 	.word	0x08009464
 8006354:	40240000 	.word	0x40240000
 8006358:	f002 f9cc 	bl	80086f4 <__aeabi_dmul>
 800635c:	2200      	movs	r2, #0
 800635e:	2300      	movs	r3, #0
 8006360:	4606      	mov	r6, r0
 8006362:	460f      	mov	r7, r1
 8006364:	f002 fc2e 	bl	8008bc4 <__aeabi_dcmpeq>
 8006368:	2800      	cmp	r0, #0
 800636a:	f040 83cc 	bne.w	8006b06 <_dtoa_r+0xa96>
 800636e:	4652      	mov	r2, sl
 8006370:	465b      	mov	r3, fp
 8006372:	4630      	mov	r0, r6
 8006374:	4639      	mov	r1, r7
 8006376:	f002 fae7 	bl	8008948 <__aeabi_ddiv>
 800637a:	f002 fc55 	bl	8008c28 <__aeabi_d2iz>
 800637e:	4605      	mov	r5, r0
 8006380:	f002 f952 	bl	8008628 <__aeabi_i2d>
 8006384:	4652      	mov	r2, sl
 8006386:	465b      	mov	r3, fp
 8006388:	f002 f9b4 	bl	80086f4 <__aeabi_dmul>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4630      	mov	r0, r6
 8006392:	4639      	mov	r1, r7
 8006394:	f001 fffa 	bl	800838c <__aeabi_dsub>
 8006398:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800639c:	45c1      	cmp	r9, r8
 800639e:	f809 ec01 	strb.w	lr, [r9, #-1]
 80063a2:	464c      	mov	r4, r9
 80063a4:	4606      	mov	r6, r0
 80063a6:	460f      	mov	r7, r1
 80063a8:	f04f 0200 	mov.w	r2, #0
 80063ac:	4ba7      	ldr	r3, [pc, #668]	; (800664c <_dtoa_r+0x5dc>)
 80063ae:	f109 0901 	add.w	r9, r9, #1
 80063b2:	d1d1      	bne.n	8006358 <_dtoa_r+0x2e8>
 80063b4:	46a3      	mov	fp, r4
 80063b6:	9c03      	ldr	r4, [sp, #12]
 80063b8:	4632      	mov	r2, r6
 80063ba:	463b      	mov	r3, r7
 80063bc:	4630      	mov	r0, r6
 80063be:	4639      	mov	r1, r7
 80063c0:	f001 ffe6 	bl	8008390 <__adddf3>
 80063c4:	4606      	mov	r6, r0
 80063c6:	460f      	mov	r7, r1
 80063c8:	4632      	mov	r2, r6
 80063ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063ce:	463b      	mov	r3, r7
 80063d0:	f002 fc02 	bl	8008bd8 <__aeabi_dcmplt>
 80063d4:	b940      	cbnz	r0, 80063e8 <_dtoa_r+0x378>
 80063d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063da:	4632      	mov	r2, r6
 80063dc:	463b      	mov	r3, r7
 80063de:	f002 fbf1 	bl	8008bc4 <__aeabi_dcmpeq>
 80063e2:	b190      	cbz	r0, 800640a <_dtoa_r+0x39a>
 80063e4:	07eb      	lsls	r3, r5, #31
 80063e6:	d510      	bpl.n	800640a <_dtoa_r+0x39a>
 80063e8:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
 80063ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063ee:	e005      	b.n	80063fc <_dtoa_r+0x38c>
 80063f0:	429a      	cmp	r2, r3
 80063f2:	f000 842a 	beq.w	8006c4a <_dtoa_r+0xbda>
 80063f6:	f813 5c01 	ldrb.w	r5, [r3, #-1]
 80063fa:	469b      	mov	fp, r3
 80063fc:	2d39      	cmp	r5, #57	; 0x39
 80063fe:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006402:	d0f5      	beq.n	80063f0 <_dtoa_r+0x380>
 8006404:	1c6a      	adds	r2, r5, #1
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]
 800640a:	4620      	mov	r0, r4
 800640c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800640e:	f001 f859 	bl	80074c4 <_Bfree>
 8006412:	9e07      	ldr	r6, [sp, #28]
 8006414:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8006416:	1c73      	adds	r3, r6, #1
 8006418:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800641a:	2200      	movs	r2, #0
 800641c:	f88b 2000 	strb.w	r2, [fp]
 8006420:	602b      	str	r3, [r5, #0]
 8006422:	2e00      	cmp	r6, #0
 8006424:	f000 831c 	beq.w	8006a60 <_dtoa_r+0x9f0>
 8006428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800642a:	f8c6 b000 	str.w	fp, [r6]
 800642e:	b01b      	add	sp, #108	; 0x6c
 8006430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006434:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006436:	2d00      	cmp	r5, #0
 8006438:	f000 8104 	beq.w	8006644 <_dtoa_r+0x5d4>
 800643c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800643e:	2e01      	cmp	r6, #1
 8006440:	f340 82d3 	ble.w	80069ea <_dtoa_r+0x97a>
 8006444:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006446:	f109 37ff 	add.w	r7, r9, #4294967295
 800644a:	42be      	cmp	r6, r7
 800644c:	f2c0 8394 	blt.w	8006b78 <_dtoa_r+0xb08>
 8006450:	1bf7      	subs	r7, r6, r7
 8006452:	f1b9 0f00 	cmp.w	r9, #0
 8006456:	f2c0 8488 	blt.w	8006d6a <_dtoa_r+0xcfa>
 800645a:	9d08      	ldr	r5, [sp, #32]
 800645c:	464b      	mov	r3, r9
 800645e:	9e08      	ldr	r6, [sp, #32]
 8006460:	441e      	add	r6, r3
 8006462:	9608      	str	r6, [sp, #32]
 8006464:	9e06      	ldr	r6, [sp, #24]
 8006466:	4620      	mov	r0, r4
 8006468:	441e      	add	r6, r3
 800646a:	2101      	movs	r1, #1
 800646c:	9606      	str	r6, [sp, #24]
 800646e:	f001 f8cd 	bl	800760c <__i2b>
 8006472:	4606      	mov	r6, r0
 8006474:	b165      	cbz	r5, 8006490 <_dtoa_r+0x420>
 8006476:	9906      	ldr	r1, [sp, #24]
 8006478:	2900      	cmp	r1, #0
 800647a:	dd09      	ble.n	8006490 <_dtoa_r+0x420>
 800647c:	460b      	mov	r3, r1
 800647e:	9a08      	ldr	r2, [sp, #32]
 8006480:	42ab      	cmp	r3, r5
 8006482:	bfa8      	it	ge
 8006484:	462b      	movge	r3, r5
 8006486:	1ad2      	subs	r2, r2, r3
 8006488:	1ac9      	subs	r1, r1, r3
 800648a:	9208      	str	r2, [sp, #32]
 800648c:	1aed      	subs	r5, r5, r3
 800648e:	9106      	str	r1, [sp, #24]
 8006490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006492:	2b00      	cmp	r3, #0
 8006494:	dd1b      	ble.n	80064ce <_dtoa_r+0x45e>
 8006496:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006498:	2900      	cmp	r1, #0
 800649a:	f000 8363 	beq.w	8006b64 <_dtoa_r+0xaf4>
 800649e:	2f00      	cmp	r7, #0
 80064a0:	dd11      	ble.n	80064c6 <_dtoa_r+0x456>
 80064a2:	4631      	mov	r1, r6
 80064a4:	463a      	mov	r2, r7
 80064a6:	4620      	mov	r0, r4
 80064a8:	f001 f958 	bl	800775c <__pow5mult>
 80064ac:	4606      	mov	r6, r0
 80064ae:	4631      	mov	r1, r6
 80064b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064b2:	4620      	mov	r0, r4
 80064b4:	f001 f8b4 	bl	8007620 <__multiply>
 80064b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064ba:	4680      	mov	r8, r0
 80064bc:	4620      	mov	r0, r4
 80064be:	f001 f801 	bl	80074c4 <_Bfree>
 80064c2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80064c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064c8:	1bda      	subs	r2, r3, r7
 80064ca:	f040 8288 	bne.w	80069de <_dtoa_r+0x96e>
 80064ce:	2101      	movs	r1, #1
 80064d0:	4620      	mov	r0, r4
 80064d2:	f001 f89b 	bl	800760c <__i2b>
 80064d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064d8:	2900      	cmp	r1, #0
 80064da:	4680      	mov	r8, r0
 80064dc:	dd05      	ble.n	80064ea <_dtoa_r+0x47a>
 80064de:	4601      	mov	r1, r0
 80064e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064e2:	4620      	mov	r0, r4
 80064e4:	f001 f93a 	bl	800775c <__pow5mult>
 80064e8:	4680      	mov	r8, r0
 80064ea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80064ec:	2a01      	cmp	r2, #1
 80064ee:	f340 82c9 	ble.w	8006a84 <_dtoa_r+0xa14>
 80064f2:	2700      	movs	r7, #0
 80064f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064f6:	2900      	cmp	r1, #0
 80064f8:	f040 82a8 	bne.w	8006a4c <_dtoa_r+0x9dc>
 80064fc:	2001      	movs	r0, #1
 80064fe:	9b06      	ldr	r3, [sp, #24]
 8006500:	4403      	add	r3, r0
 8006502:	f013 031f 	ands.w	r3, r3, #31
 8006506:	f000 80a3 	beq.w	8006650 <_dtoa_r+0x5e0>
 800650a:	f1c3 0220 	rsb	r2, r3, #32
 800650e:	2a04      	cmp	r2, #4
 8006510:	f340 84bd 	ble.w	8006e8e <_dtoa_r+0xe1e>
 8006514:	9a08      	ldr	r2, [sp, #32]
 8006516:	f8dd e018 	ldr.w	lr, [sp, #24]
 800651a:	f1c3 031c 	rsb	r3, r3, #28
 800651e:	441a      	add	r2, r3
 8006520:	449e      	add	lr, r3
 8006522:	9208      	str	r2, [sp, #32]
 8006524:	441d      	add	r5, r3
 8006526:	f8cd e018 	str.w	lr, [sp, #24]
 800652a:	9b08      	ldr	r3, [sp, #32]
 800652c:	2b00      	cmp	r3, #0
 800652e:	dd05      	ble.n	800653c <_dtoa_r+0x4cc>
 8006530:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006532:	461a      	mov	r2, r3
 8006534:	4620      	mov	r0, r4
 8006536:	f001 f95f 	bl	80077f8 <__lshift>
 800653a:	900a      	str	r0, [sp, #40]	; 0x28
 800653c:	9906      	ldr	r1, [sp, #24]
 800653e:	2900      	cmp	r1, #0
 8006540:	dd05      	ble.n	800654e <_dtoa_r+0x4de>
 8006542:	4641      	mov	r1, r8
 8006544:	9a06      	ldr	r2, [sp, #24]
 8006546:	4620      	mov	r0, r4
 8006548:	f001 f956 	bl	80077f8 <__lshift>
 800654c:	4680      	mov	r8, r0
 800654e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006550:	2a00      	cmp	r2, #0
 8006552:	f040 8260 	bne.w	8006a16 <_dtoa_r+0x9a6>
 8006556:	f1b9 0f00 	cmp.w	r9, #0
 800655a:	f340 82ae 	ble.w	8006aba <_dtoa_r+0xa4a>
 800655e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006560:	2900      	cmp	r1, #0
 8006562:	f040 8085 	bne.w	8006670 <_dtoa_r+0x600>
 8006566:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006568:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800656a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800656e:	e006      	b.n	800657e <_dtoa_r+0x50e>
 8006570:	4639      	mov	r1, r7
 8006572:	4620      	mov	r0, r4
 8006574:	220a      	movs	r2, #10
 8006576:	2300      	movs	r3, #0
 8006578:	f000 ffae 	bl	80074d8 <__multadd>
 800657c:	4607      	mov	r7, r0
 800657e:	4638      	mov	r0, r7
 8006580:	4641      	mov	r1, r8
 8006582:	f7ff fcdd 	bl	8005f40 <quorem>
 8006586:	3030      	adds	r0, #48	; 0x30
 8006588:	f80b 0005 	strb.w	r0, [fp, r5]
 800658c:	3501      	adds	r5, #1
 800658e:	45a9      	cmp	r9, r5
 8006590:	dcee      	bgt.n	8006570 <_dtoa_r+0x500>
 8006592:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8006596:	970a      	str	r7, [sp, #40]	; 0x28
 8006598:	4682      	mov	sl, r0
 800659a:	f1b9 0f01 	cmp.w	r9, #1
 800659e:	bfac      	ite	ge
 80065a0:	44cb      	addge	fp, r9
 80065a2:	f10b 0b01 	addlt.w	fp, fp, #1
 80065a6:	2500      	movs	r5, #0
 80065a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065aa:	2201      	movs	r2, #1
 80065ac:	4620      	mov	r0, r4
 80065ae:	f001 f923 	bl	80077f8 <__lshift>
 80065b2:	4641      	mov	r1, r8
 80065b4:	900a      	str	r0, [sp, #40]	; 0x28
 80065b6:	f001 f97d 	bl	80078b4 <__mcmp>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	f340 830a 	ble.w	8006bd4 <_dtoa_r+0xb64>
 80065c0:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 80065c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065c6:	e005      	b.n	80065d4 <_dtoa_r+0x564>
 80065c8:	4299      	cmp	r1, r3
 80065ca:	f000 8295 	beq.w	8006af8 <_dtoa_r+0xa88>
 80065ce:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80065d2:	469b      	mov	fp, r3
 80065d4:	2a39      	cmp	r2, #57	; 0x39
 80065d6:	f10b 33ff 	add.w	r3, fp, #4294967295
 80065da:	d0f5      	beq.n	80065c8 <_dtoa_r+0x558>
 80065dc:	3201      	adds	r2, #1
 80065de:	701a      	strb	r2, [r3, #0]
 80065e0:	4641      	mov	r1, r8
 80065e2:	4620      	mov	r0, r4
 80065e4:	f000 ff6e 	bl	80074c4 <_Bfree>
 80065e8:	2e00      	cmp	r6, #0
 80065ea:	f43f af0e 	beq.w	800640a <_dtoa_r+0x39a>
 80065ee:	b12d      	cbz	r5, 80065fc <_dtoa_r+0x58c>
 80065f0:	42b5      	cmp	r5, r6
 80065f2:	d003      	beq.n	80065fc <_dtoa_r+0x58c>
 80065f4:	4629      	mov	r1, r5
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 ff64 	bl	80074c4 <_Bfree>
 80065fc:	4631      	mov	r1, r6
 80065fe:	4620      	mov	r0, r4
 8006600:	f000 ff60 	bl	80074c4 <_Bfree>
 8006604:	e701      	b.n	800640a <_dtoa_r+0x39a>
 8006606:	2601      	movs	r6, #1
 8006608:	960e      	str	r6, [sp, #56]	; 0x38
 800660a:	e5ea      	b.n	80061e2 <_dtoa_r+0x172>
 800660c:	9807      	ldr	r0, [sp, #28]
 800660e:	f002 f80b 	bl	8008628 <__aeabi_i2d>
 8006612:	4632      	mov	r2, r6
 8006614:	463b      	mov	r3, r7
 8006616:	f002 fad5 	bl	8008bc4 <__aeabi_dcmpeq>
 800661a:	2800      	cmp	r0, #0
 800661c:	f47f adcd 	bne.w	80061ba <_dtoa_r+0x14a>
 8006620:	9e07      	ldr	r6, [sp, #28]
 8006622:	3e01      	subs	r6, #1
 8006624:	9607      	str	r6, [sp, #28]
 8006626:	e5c8      	b.n	80061ba <_dtoa_r+0x14a>
 8006628:	9e07      	ldr	r6, [sp, #28]
 800662a:	9d08      	ldr	r5, [sp, #32]
 800662c:	1bad      	subs	r5, r5, r6
 800662e:	9508      	str	r5, [sp, #32]
 8006630:	4275      	negs	r5, r6
 8006632:	2600      	movs	r6, #0
 8006634:	950c      	str	r5, [sp, #48]	; 0x30
 8006636:	960d      	str	r6, [sp, #52]	; 0x34
 8006638:	e5e5      	b.n	8006206 <_dtoa_r+0x196>
 800663a:	426d      	negs	r5, r5
 800663c:	2600      	movs	r6, #0
 800663e:	9508      	str	r5, [sp, #32]
 8006640:	9606      	str	r6, [sp, #24]
 8006642:	e5d6      	b.n	80061f2 <_dtoa_r+0x182>
 8006644:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8006646:	9d08      	ldr	r5, [sp, #32]
 8006648:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800664a:	e713      	b.n	8006474 <_dtoa_r+0x404>
 800664c:	40240000 	.word	0x40240000
 8006650:	231c      	movs	r3, #28
 8006652:	9908      	ldr	r1, [sp, #32]
 8006654:	9a06      	ldr	r2, [sp, #24]
 8006656:	4419      	add	r1, r3
 8006658:	441a      	add	r2, r3
 800665a:	9108      	str	r1, [sp, #32]
 800665c:	441d      	add	r5, r3
 800665e:	9206      	str	r2, [sp, #24]
 8006660:	e763      	b.n	800652a <_dtoa_r+0x4ba>
 8006662:	4840      	ldr	r0, [pc, #256]	; (8006764 <_dtoa_r+0x6f4>)
 8006664:	1b40      	subs	r0, r0, r5
 8006666:	fa0a f000 	lsl.w	r0, sl, r0
 800666a:	e572      	b.n	8006152 <_dtoa_r+0xe2>
 800666c:	900e      	str	r0, [sp, #56]	; 0x38
 800666e:	e5b8      	b.n	80061e2 <_dtoa_r+0x172>
 8006670:	2d00      	cmp	r5, #0
 8006672:	dd05      	ble.n	8006680 <_dtoa_r+0x610>
 8006674:	4631      	mov	r1, r6
 8006676:	462a      	mov	r2, r5
 8006678:	4620      	mov	r0, r4
 800667a:	f001 f8bd 	bl	80077f8 <__lshift>
 800667e:	4606      	mov	r6, r0
 8006680:	2f00      	cmp	r7, #0
 8006682:	f040 82ec 	bne.w	8006c5e <_dtoa_r+0xbee>
 8006686:	4637      	mov	r7, r6
 8006688:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800668a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800668c:	444d      	add	r5, r9
 800668e:	9508      	str	r5, [sp, #32]
 8006690:	f00a 0501 	and.w	r5, sl, #1
 8006694:	950b      	str	r5, [sp, #44]	; 0x2c
 8006696:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800669a:	1c4d      	adds	r5, r1, #1
 800669c:	e00a      	b.n	80066b4 <_dtoa_r+0x644>
 800669e:	f000 ff1b 	bl	80074d8 <__multadd>
 80066a2:	4639      	mov	r1, r7
 80066a4:	4606      	mov	r6, r0
 80066a6:	220a      	movs	r2, #10
 80066a8:	4620      	mov	r0, r4
 80066aa:	2300      	movs	r3, #0
 80066ac:	f000 ff14 	bl	80074d8 <__multadd>
 80066b0:	4607      	mov	r7, r0
 80066b2:	3501      	adds	r5, #1
 80066b4:	4641      	mov	r1, r8
 80066b6:	4648      	mov	r0, r9
 80066b8:	f7ff fc42 	bl	8005f40 <quorem>
 80066bc:	4631      	mov	r1, r6
 80066be:	4683      	mov	fp, r0
 80066c0:	4648      	mov	r0, r9
 80066c2:	f001 f8f7 	bl	80078b4 <__mcmp>
 80066c6:	463a      	mov	r2, r7
 80066c8:	9003      	str	r0, [sp, #12]
 80066ca:	4641      	mov	r1, r8
 80066cc:	4620      	mov	r0, r4
 80066ce:	f001 f915 	bl	80078fc <__mdiff>
 80066d2:	68c2      	ldr	r2, [r0, #12]
 80066d4:	f105 3eff 	add.w	lr, r5, #4294967295
 80066d8:	4603      	mov	r3, r0
 80066da:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
 80066de:	f8cd e018 	str.w	lr, [sp, #24]
 80066e2:	2a00      	cmp	r2, #0
 80066e4:	f040 818a 	bne.w	80069fc <_dtoa_r+0x98c>
 80066e8:	4619      	mov	r1, r3
 80066ea:	4648      	mov	r0, r9
 80066ec:	9302      	str	r3, [sp, #8]
 80066ee:	f001 f8e1 	bl	80078b4 <__mcmp>
 80066f2:	9b02      	ldr	r3, [sp, #8]
 80066f4:	4602      	mov	r2, r0
 80066f6:	4619      	mov	r1, r3
 80066f8:	4620      	mov	r0, r4
 80066fa:	9202      	str	r2, [sp, #8]
 80066fc:	f000 fee2 	bl	80074c4 <_Bfree>
 8006700:	9a02      	ldr	r2, [sp, #8]
 8006702:	b92a      	cbnz	r2, 8006710 <_dtoa_r+0x6a0>
 8006704:	9924      	ldr	r1, [sp, #144]	; 0x90
 8006706:	b919      	cbnz	r1, 8006710 <_dtoa_r+0x6a0>
 8006708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 839f 	beq.w	8006e4e <_dtoa_r+0xdde>
 8006710:	9b03      	ldr	r3, [sp, #12]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f2c0 823f 	blt.w	8006b96 <_dtoa_r+0xb26>
 8006718:	d105      	bne.n	8006726 <_dtoa_r+0x6b6>
 800671a:	9924      	ldr	r1, [sp, #144]	; 0x90
 800671c:	b919      	cbnz	r1, 8006726 <_dtoa_r+0x6b6>
 800671e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8238 	beq.w	8006b96 <_dtoa_r+0xb26>
 8006726:	2a00      	cmp	r2, #0
 8006728:	f300 82ad 	bgt.w	8006c86 <_dtoa_r+0xc16>
 800672c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8006730:	f805 ac01 	strb.w	sl, [r5, #-1]
 8006734:	4575      	cmp	r5, lr
 8006736:	46ab      	mov	fp, r5
 8006738:	f000 82b5 	beq.w	8006ca6 <_dtoa_r+0xc36>
 800673c:	4649      	mov	r1, r9
 800673e:	220a      	movs	r2, #10
 8006740:	2300      	movs	r3, #0
 8006742:	4620      	mov	r0, r4
 8006744:	f000 fec8 	bl	80074d8 <__multadd>
 8006748:	42be      	cmp	r6, r7
 800674a:	4681      	mov	r9, r0
 800674c:	4631      	mov	r1, r6
 800674e:	4620      	mov	r0, r4
 8006750:	f04f 020a 	mov.w	r2, #10
 8006754:	f04f 0300 	mov.w	r3, #0
 8006758:	d1a1      	bne.n	800669e <_dtoa_r+0x62e>
 800675a:	f000 febd 	bl	80074d8 <__multadd>
 800675e:	4606      	mov	r6, r0
 8006760:	4607      	mov	r7, r0
 8006762:	e7a6      	b.n	80066b2 <_dtoa_r+0x642>
 8006764:	fffffbee 	.word	0xfffffbee
 8006768:	2600      	movs	r6, #0
 800676a:	960b      	str	r6, [sp, #44]	; 0x2c
 800676c:	9e07      	ldr	r6, [sp, #28]
 800676e:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
 8006772:	44b6      	add	lr, r6
 8006774:	f10e 0901 	add.w	r9, lr, #1
 8006778:	f1b9 0f00 	cmp.w	r9, #0
 800677c:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8006780:	464e      	mov	r6, r9
 8006782:	f340 8145 	ble.w	8006a10 <_dtoa_r+0x9a0>
 8006786:	2100      	movs	r1, #0
 8006788:	2e17      	cmp	r6, #23
 800678a:	6461      	str	r1, [r4, #68]	; 0x44
 800678c:	d90a      	bls.n	80067a4 <_dtoa_r+0x734>
 800678e:	2201      	movs	r2, #1
 8006790:	2304      	movs	r3, #4
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	f103 0014 	add.w	r0, r3, #20
 8006798:	42b0      	cmp	r0, r6
 800679a:	4611      	mov	r1, r2
 800679c:	f102 0201 	add.w	r2, r2, #1
 80067a0:	d9f7      	bls.n	8006792 <_dtoa_r+0x722>
 80067a2:	6461      	str	r1, [r4, #68]	; 0x44
 80067a4:	4620      	mov	r0, r4
 80067a6:	f000 fe67 	bl	8007478 <_Balloc>
 80067aa:	2e0e      	cmp	r6, #14
 80067ac:	9009      	str	r0, [sp, #36]	; 0x24
 80067ae:	6420      	str	r0, [r4, #64]	; 0x40
 80067b0:	f63f ad6a 	bhi.w	8006288 <_dtoa_r+0x218>
 80067b4:	2d00      	cmp	r5, #0
 80067b6:	f43f ad67 	beq.w	8006288 <_dtoa_r+0x218>
 80067ba:	9d07      	ldr	r5, [sp, #28]
 80067bc:	2d00      	cmp	r5, #0
 80067be:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 80067c2:	f340 821b 	ble.w	8006bfc <_dtoa_r+0xb8c>
 80067c6:	4ba8      	ldr	r3, [pc, #672]	; (8006a68 <_dtoa_r+0x9f8>)
 80067c8:	f005 020f 	and.w	r2, r5, #15
 80067cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067d0:	112d      	asrs	r5, r5, #4
 80067d2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80067d6:	06eb      	lsls	r3, r5, #27
 80067d8:	f140 81d6 	bpl.w	8006b88 <_dtoa_r+0xb18>
 80067dc:	4ba3      	ldr	r3, [pc, #652]	; (8006a6c <_dtoa_r+0x9fc>)
 80067de:	4650      	mov	r0, sl
 80067e0:	4659      	mov	r1, fp
 80067e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067e6:	f002 f8af 	bl	8008948 <__aeabi_ddiv>
 80067ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067ee:	f005 050f 	and.w	r5, r5, #15
 80067f2:	f04f 0803 	mov.w	r8, #3
 80067f6:	b18d      	cbz	r5, 800681c <_dtoa_r+0x7ac>
 80067f8:	f8df a270 	ldr.w	sl, [pc, #624]	; 8006a6c <_dtoa_r+0x9fc>
 80067fc:	4630      	mov	r0, r6
 80067fe:	4639      	mov	r1, r7
 8006800:	07ee      	lsls	r6, r5, #31
 8006802:	d505      	bpl.n	8006810 <_dtoa_r+0x7a0>
 8006804:	e9da 2300 	ldrd	r2, r3, [sl]
 8006808:	f001 ff74 	bl	80086f4 <__aeabi_dmul>
 800680c:	f108 0801 	add.w	r8, r8, #1
 8006810:	106d      	asrs	r5, r5, #1
 8006812:	f10a 0a08 	add.w	sl, sl, #8
 8006816:	d1f3      	bne.n	8006800 <_dtoa_r+0x790>
 8006818:	4606      	mov	r6, r0
 800681a:	460f      	mov	r7, r1
 800681c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006820:	4632      	mov	r2, r6
 8006822:	463b      	mov	r3, r7
 8006824:	f002 f890 	bl	8008948 <__aeabi_ddiv>
 8006828:	4682      	mov	sl, r0
 800682a:	468b      	mov	fp, r1
 800682c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800682e:	b145      	cbz	r5, 8006842 <_dtoa_r+0x7d2>
 8006830:	4650      	mov	r0, sl
 8006832:	4659      	mov	r1, fp
 8006834:	2200      	movs	r2, #0
 8006836:	4b8e      	ldr	r3, [pc, #568]	; (8006a70 <_dtoa_r+0xa00>)
 8006838:	f002 f9ce 	bl	8008bd8 <__aeabi_dcmplt>
 800683c:	2800      	cmp	r0, #0
 800683e:	f040 82a9 	bne.w	8006d94 <_dtoa_r+0xd24>
 8006842:	4640      	mov	r0, r8
 8006844:	f001 fef0 	bl	8008628 <__aeabi_i2d>
 8006848:	4652      	mov	r2, sl
 800684a:	465b      	mov	r3, fp
 800684c:	f001 ff52 	bl	80086f4 <__aeabi_dmul>
 8006850:	2200      	movs	r2, #0
 8006852:	4b88      	ldr	r3, [pc, #544]	; (8006a74 <_dtoa_r+0xa04>)
 8006854:	f001 fd9c 	bl	8008390 <__adddf3>
 8006858:	4606      	mov	r6, r0
 800685a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800685e:	f1b9 0f00 	cmp.w	r9, #0
 8006862:	f000 8163 	beq.w	8006b2c <_dtoa_r+0xabc>
 8006866:	9d07      	ldr	r5, [sp, #28]
 8006868:	9517      	str	r5, [sp, #92]	; 0x5c
 800686a:	46c8      	mov	r8, r9
 800686c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800686e:	2d00      	cmp	r5, #0
 8006870:	f000 8222 	beq.w	8006cb8 <_dtoa_r+0xc48>
 8006874:	4b7c      	ldr	r3, [pc, #496]	; (8006a68 <_dtoa_r+0x9f8>)
 8006876:	4980      	ldr	r1, [pc, #512]	; (8006a78 <_dtoa_r+0xa08>)
 8006878:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800687c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006880:	2000      	movs	r0, #0
 8006882:	f002 f861 	bl	8008948 <__aeabi_ddiv>
 8006886:	4632      	mov	r2, r6
 8006888:	463b      	mov	r3, r7
 800688a:	f001 fd7f 	bl	800838c <__aeabi_dsub>
 800688e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006892:	4659      	mov	r1, fp
 8006894:	4650      	mov	r0, sl
 8006896:	f002 f9c7 	bl	8008c28 <__aeabi_d2iz>
 800689a:	4605      	mov	r5, r0
 800689c:	f001 fec4 	bl	8008628 <__aeabi_i2d>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4650      	mov	r0, sl
 80068a6:	4659      	mov	r1, fp
 80068a8:	f001 fd70 	bl	800838c <__aeabi_dsub>
 80068ac:	3530      	adds	r5, #48	; 0x30
 80068ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80068b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068b4:	b2ed      	uxtb	r5, r5
 80068b6:	7035      	strb	r5, [r6, #0]
 80068b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068c0:	f106 0b01 	add.w	fp, r6, #1
 80068c4:	f002 f9a6 	bl	8008c14 <__aeabi_dcmpgt>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	f040 82b5 	bne.w	8006e38 <_dtoa_r+0xdc8>
 80068ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068d2:	2000      	movs	r0, #0
 80068d4:	4966      	ldr	r1, [pc, #408]	; (8006a70 <_dtoa_r+0xa00>)
 80068d6:	f001 fd59 	bl	800838c <__aeabi_dsub>
 80068da:	4602      	mov	r2, r0
 80068dc:	460b      	mov	r3, r1
 80068de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068e2:	f002 f997 	bl	8008c14 <__aeabi_dcmpgt>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	f040 82ac 	bne.w	8006e44 <_dtoa_r+0xdd4>
 80068ec:	f1b8 0f01 	cmp.w	r8, #1
 80068f0:	f340 8180 	ble.w	8006bf4 <_dtoa_r+0xb84>
 80068f4:	44b0      	add	r8, r6
 80068f6:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 80068fa:	46a2      	mov	sl, r4
 80068fc:	46c1      	mov	r9, r8
 80068fe:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8006902:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8006906:	e00d      	b.n	8006924 <_dtoa_r+0x8b4>
 8006908:	2000      	movs	r0, #0
 800690a:	4959      	ldr	r1, [pc, #356]	; (8006a70 <_dtoa_r+0xa00>)
 800690c:	f001 fd3e 	bl	800838c <__aeabi_dsub>
 8006910:	4622      	mov	r2, r4
 8006912:	462b      	mov	r3, r5
 8006914:	f002 f960 	bl	8008bd8 <__aeabi_dcmplt>
 8006918:	2800      	cmp	r0, #0
 800691a:	f040 8291 	bne.w	8006e40 <_dtoa_r+0xdd0>
 800691e:	45cb      	cmp	fp, r9
 8006920:	f000 8165 	beq.w	8006bee <_dtoa_r+0xb7e>
 8006924:	4620      	mov	r0, r4
 8006926:	4629      	mov	r1, r5
 8006928:	2200      	movs	r2, #0
 800692a:	4b54      	ldr	r3, [pc, #336]	; (8006a7c <_dtoa_r+0xa0c>)
 800692c:	f001 fee2 	bl	80086f4 <__aeabi_dmul>
 8006930:	2200      	movs	r2, #0
 8006932:	4b52      	ldr	r3, [pc, #328]	; (8006a7c <_dtoa_r+0xa0c>)
 8006934:	4604      	mov	r4, r0
 8006936:	460d      	mov	r5, r1
 8006938:	4630      	mov	r0, r6
 800693a:	4639      	mov	r1, r7
 800693c:	f001 feda 	bl	80086f4 <__aeabi_dmul>
 8006940:	460f      	mov	r7, r1
 8006942:	4606      	mov	r6, r0
 8006944:	f002 f970 	bl	8008c28 <__aeabi_d2iz>
 8006948:	4680      	mov	r8, r0
 800694a:	f001 fe6d 	bl	8008628 <__aeabi_i2d>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4630      	mov	r0, r6
 8006954:	4639      	mov	r1, r7
 8006956:	f001 fd19 	bl	800838c <__aeabi_dsub>
 800695a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800695e:	fa5f f888 	uxtb.w	r8, r8
 8006962:	4622      	mov	r2, r4
 8006964:	462b      	mov	r3, r5
 8006966:	f80b 8b01 	strb.w	r8, [fp], #1
 800696a:	4606      	mov	r6, r0
 800696c:	460f      	mov	r7, r1
 800696e:	f002 f933 	bl	8008bd8 <__aeabi_dcmplt>
 8006972:	4632      	mov	r2, r6
 8006974:	463b      	mov	r3, r7
 8006976:	2800      	cmp	r0, #0
 8006978:	d0c6      	beq.n	8006908 <_dtoa_r+0x898>
 800697a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800697c:	9607      	str	r6, [sp, #28]
 800697e:	4654      	mov	r4, sl
 8006980:	e543      	b.n	800640a <_dtoa_r+0x39a>
 8006982:	2600      	movs	r6, #0
 8006984:	960b      	str	r6, [sp, #44]	; 0x2c
 8006986:	9925      	ldr	r1, [sp, #148]	; 0x94
 8006988:	2900      	cmp	r1, #0
 800698a:	dd3d      	ble.n	8006a08 <_dtoa_r+0x998>
 800698c:	460e      	mov	r6, r1
 800698e:	910f      	str	r1, [sp, #60]	; 0x3c
 8006990:	4689      	mov	r9, r1
 8006992:	e6f8      	b.n	8006786 <_dtoa_r+0x716>
 8006994:	2601      	movs	r6, #1
 8006996:	960b      	str	r6, [sp, #44]	; 0x2c
 8006998:	e7f5      	b.n	8006986 <_dtoa_r+0x916>
 800699a:	f1b9 0f00 	cmp.w	r9, #0
 800699e:	f73f ac86 	bgt.w	80062ae <_dtoa_r+0x23e>
 80069a2:	f040 80db 	bne.w	8006b5c <_dtoa_r+0xaec>
 80069a6:	2200      	movs	r2, #0
 80069a8:	4b35      	ldr	r3, [pc, #212]	; (8006a80 <_dtoa_r+0xa10>)
 80069aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069ae:	f001 fea1 	bl	80086f4 <__aeabi_dmul>
 80069b2:	4652      	mov	r2, sl
 80069b4:	465b      	mov	r3, fp
 80069b6:	f002 f923 	bl	8008c00 <__aeabi_dcmpge>
 80069ba:	46c8      	mov	r8, r9
 80069bc:	464e      	mov	r6, r9
 80069be:	2800      	cmp	r0, #0
 80069c0:	f000 8091 	beq.w	8006ae6 <_dtoa_r+0xa76>
 80069c4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80069c6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80069ca:	43ed      	mvns	r5, r5
 80069cc:	9507      	str	r5, [sp, #28]
 80069ce:	4641      	mov	r1, r8
 80069d0:	4620      	mov	r0, r4
 80069d2:	f000 fd77 	bl	80074c4 <_Bfree>
 80069d6:	2e00      	cmp	r6, #0
 80069d8:	f47f ae10 	bne.w	80065fc <_dtoa_r+0x58c>
 80069dc:	e515      	b.n	800640a <_dtoa_r+0x39a>
 80069de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80069e0:	4620      	mov	r0, r4
 80069e2:	f000 febb 	bl	800775c <__pow5mult>
 80069e6:	900a      	str	r0, [sp, #40]	; 0x28
 80069e8:	e571      	b.n	80064ce <_dtoa_r+0x45e>
 80069ea:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80069ec:	2d00      	cmp	r5, #0
 80069ee:	f000 81c2 	beq.w	8006d76 <_dtoa_r+0xd06>
 80069f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80069f8:	9d08      	ldr	r5, [sp, #32]
 80069fa:	e530      	b.n	800645e <_dtoa_r+0x3ee>
 80069fc:	4601      	mov	r1, r0
 80069fe:	4620      	mov	r0, r4
 8006a00:	f000 fd60 	bl	80074c4 <_Bfree>
 8006a04:	2201      	movs	r2, #1
 8006a06:	e683      	b.n	8006710 <_dtoa_r+0x6a0>
 8006a08:	2601      	movs	r6, #1
 8006a0a:	9625      	str	r6, [sp, #148]	; 0x94
 8006a0c:	960f      	str	r6, [sp, #60]	; 0x3c
 8006a0e:	46b1      	mov	r9, r6
 8006a10:	2100      	movs	r1, #0
 8006a12:	6461      	str	r1, [r4, #68]	; 0x44
 8006a14:	e6c6      	b.n	80067a4 <_dtoa_r+0x734>
 8006a16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006a18:	4641      	mov	r1, r8
 8006a1a:	f000 ff4b 	bl	80078b4 <__mcmp>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	f6bf ad99 	bge.w	8006556 <_dtoa_r+0x4e6>
 8006a24:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8006a28:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a2a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006a2e:	4620      	mov	r0, r4
 8006a30:	220a      	movs	r2, #10
 8006a32:	2300      	movs	r3, #0
 8006a34:	f8cd e01c 	str.w	lr, [sp, #28]
 8006a38:	f000 fd4e 	bl	80074d8 <__multadd>
 8006a3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a3e:	900a      	str	r0, [sp, #40]	; 0x28
 8006a40:	2900      	cmp	r1, #0
 8006a42:	f040 8216 	bne.w	8006e72 <_dtoa_r+0xe02>
 8006a46:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8006a4a:	e584      	b.n	8006556 <_dtoa_r+0x4e6>
 8006a4c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006a50:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8006a54:	6918      	ldr	r0, [r3, #16]
 8006a56:	f000 fd8b 	bl	8007570 <__hi0bits>
 8006a5a:	f1c0 0020 	rsb	r0, r0, #32
 8006a5e:	e54e      	b.n	80064fe <_dtoa_r+0x48e>
 8006a60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a62:	f7ff bb36 	b.w	80060d2 <_dtoa_r+0x62>
 8006a66:	bf00      	nop
 8006a68:	08009498 	.word	0x08009498
 8006a6c:	08009560 	.word	0x08009560
 8006a70:	3ff00000 	.word	0x3ff00000
 8006a74:	401c0000 	.word	0x401c0000
 8006a78:	3fe00000 	.word	0x3fe00000
 8006a7c:	40240000 	.word	0x40240000
 8006a80:	40140000 	.word	0x40140000
 8006a84:	f1ba 0f00 	cmp.w	sl, #0
 8006a88:	f47f ad33 	bne.w	80064f2 <_dtoa_r+0x482>
 8006a8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f040 8177 	bne.w	8006d84 <_dtoa_r+0xd14>
 8006a96:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8006a9a:	0d3f      	lsrs	r7, r7, #20
 8006a9c:	053f      	lsls	r7, r7, #20
 8006a9e:	2f00      	cmp	r7, #0
 8006aa0:	f43f ad28 	beq.w	80064f4 <_dtoa_r+0x484>
 8006aa4:	9b08      	ldr	r3, [sp, #32]
 8006aa6:	f8dd e018 	ldr.w	lr, [sp, #24]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	f10e 0e01 	add.w	lr, lr, #1
 8006ab0:	9308      	str	r3, [sp, #32]
 8006ab2:	f8cd e018 	str.w	lr, [sp, #24]
 8006ab6:	2701      	movs	r7, #1
 8006ab8:	e51c      	b.n	80064f4 <_dtoa_r+0x484>
 8006aba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006abc:	2a02      	cmp	r2, #2
 8006abe:	f77f ad4e 	ble.w	800655e <_dtoa_r+0x4ee>
 8006ac2:	f1b9 0f00 	cmp.w	r9, #0
 8006ac6:	f47f af7d 	bne.w	80069c4 <_dtoa_r+0x954>
 8006aca:	4641      	mov	r1, r8
 8006acc:	464b      	mov	r3, r9
 8006ace:	2205      	movs	r2, #5
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f000 fd01 	bl	80074d8 <__multadd>
 8006ad6:	4680      	mov	r8, r0
 8006ad8:	4641      	mov	r1, r8
 8006ada:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006adc:	f000 feea 	bl	80078b4 <__mcmp>
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	f77f af6f 	ble.w	80069c4 <_dtoa_r+0x954>
 8006ae6:	9d07      	ldr	r5, [sp, #28]
 8006ae8:	3501      	adds	r5, #1
 8006aea:	9507      	str	r5, [sp, #28]
 8006aec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006aee:	2331      	movs	r3, #49	; 0x31
 8006af0:	702b      	strb	r3, [r5, #0]
 8006af2:	f105 0b01 	add.w	fp, r5, #1
 8006af6:	e76a      	b.n	80069ce <_dtoa_r+0x95e>
 8006af8:	9907      	ldr	r1, [sp, #28]
 8006afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006afc:	2331      	movs	r3, #49	; 0x31
 8006afe:	3101      	adds	r1, #1
 8006b00:	9107      	str	r1, [sp, #28]
 8006b02:	7013      	strb	r3, [r2, #0]
 8006b04:	e56c      	b.n	80065e0 <_dtoa_r+0x570>
 8006b06:	46a3      	mov	fp, r4
 8006b08:	9c03      	ldr	r4, [sp, #12]
 8006b0a:	e47e      	b.n	800640a <_dtoa_r+0x39a>
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	f001 fd8b 	bl	8008628 <__aeabi_i2d>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4650      	mov	r0, sl
 8006b18:	4659      	mov	r1, fp
 8006b1a:	f001 fdeb 	bl	80086f4 <__aeabi_dmul>
 8006b1e:	2200      	movs	r2, #0
 8006b20:	4bb0      	ldr	r3, [pc, #704]	; (8006de4 <_dtoa_r+0xd74>)
 8006b22:	f001 fc35 	bl	8008390 <__adddf3>
 8006b26:	4606      	mov	r6, r0
 8006b28:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8006b2c:	4650      	mov	r0, sl
 8006b2e:	4659      	mov	r1, fp
 8006b30:	2200      	movs	r2, #0
 8006b32:	4bad      	ldr	r3, [pc, #692]	; (8006de8 <_dtoa_r+0xd78>)
 8006b34:	f001 fc2a 	bl	800838c <__aeabi_dsub>
 8006b38:	4632      	mov	r2, r6
 8006b3a:	463b      	mov	r3, r7
 8006b3c:	4682      	mov	sl, r0
 8006b3e:	468b      	mov	fp, r1
 8006b40:	f002 f868 	bl	8008c14 <__aeabi_dcmpgt>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	f040 80b3 	bne.w	8006cb0 <_dtoa_r+0xc40>
 8006b4a:	4632      	mov	r2, r6
 8006b4c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006b50:	4650      	mov	r0, sl
 8006b52:	4659      	mov	r1, fp
 8006b54:	f002 f840 	bl	8008bd8 <__aeabi_dcmplt>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	d04b      	beq.n	8006bf4 <_dtoa_r+0xb84>
 8006b5c:	f04f 0800 	mov.w	r8, #0
 8006b60:	4646      	mov	r6, r8
 8006b62:	e72f      	b.n	80069c4 <_dtoa_r+0x954>
 8006b64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f000 fdf7 	bl	800775c <__pow5mult>
 8006b6e:	900a      	str	r0, [sp, #40]	; 0x28
 8006b70:	e4ad      	b.n	80064ce <_dtoa_r+0x45e>
 8006b72:	2601      	movs	r6, #1
 8006b74:	960b      	str	r6, [sp, #44]	; 0x2c
 8006b76:	e5f9      	b.n	800676c <_dtoa_r+0x6fc>
 8006b78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b7a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8006b7c:	970c      	str	r7, [sp, #48]	; 0x30
 8006b7e:	1b7b      	subs	r3, r7, r5
 8006b80:	441e      	add	r6, r3
 8006b82:	960d      	str	r6, [sp, #52]	; 0x34
 8006b84:	2700      	movs	r7, #0
 8006b86:	e464      	b.n	8006452 <_dtoa_r+0x3e2>
 8006b88:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 8006b8c:	f04f 0802 	mov.w	r8, #2
 8006b90:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006b94:	e62f      	b.n	80067f6 <_dtoa_r+0x786>
 8006b96:	2a00      	cmp	r2, #0
 8006b98:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8006b9c:	46d9      	mov	r9, fp
 8006b9e:	dd11      	ble.n	8006bc4 <_dtoa_r+0xb54>
 8006ba0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	f000 fe27 	bl	80077f8 <__lshift>
 8006baa:	4641      	mov	r1, r8
 8006bac:	900a      	str	r0, [sp, #40]	; 0x28
 8006bae:	f000 fe81 	bl	80078b4 <__mcmp>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	f340 8156 	ble.w	8006e64 <_dtoa_r+0xdf4>
 8006bb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006bbc:	f000 811e 	beq.w	8006dfc <_dtoa_r+0xd8c>
 8006bc0:	f109 0a31 	add.w	sl, r9, #49	; 0x31
 8006bc4:	4635      	mov	r5, r6
 8006bc6:	9e06      	ldr	r6, [sp, #24]
 8006bc8:	f886 a000 	strb.w	sl, [r6]
 8006bcc:	f106 0b01 	add.w	fp, r6, #1
 8006bd0:	463e      	mov	r6, r7
 8006bd2:	e505      	b.n	80065e0 <_dtoa_r+0x570>
 8006bd4:	d103      	bne.n	8006bde <_dtoa_r+0xb6e>
 8006bd6:	f01a 0f01 	tst.w	sl, #1
 8006bda:	f47f acf1 	bne.w	80065c0 <_dtoa_r+0x550>
 8006bde:	465b      	mov	r3, fp
 8006be0:	469b      	mov	fp, r3
 8006be2:	3b01      	subs	r3, #1
 8006be4:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 8006be8:	2a30      	cmp	r2, #48	; 0x30
 8006bea:	d0f9      	beq.n	8006be0 <_dtoa_r+0xb70>
 8006bec:	e4f8      	b.n	80065e0 <_dtoa_r+0x570>
 8006bee:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 8006bf2:	4654      	mov	r4, sl
 8006bf4:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8006bf8:	f7ff bb46 	b.w	8006288 <_dtoa_r+0x218>
 8006bfc:	9e07      	ldr	r6, [sp, #28]
 8006bfe:	4275      	negs	r5, r6
 8006c00:	2d00      	cmp	r5, #0
 8006c02:	f000 80c2 	beq.w	8006d8a <_dtoa_r+0xd1a>
 8006c06:	4b79      	ldr	r3, [pc, #484]	; (8006dec <_dtoa_r+0xd7c>)
 8006c08:	f005 020f 	and.w	r2, r5, #15
 8006c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8006c18:	f001 fd6c 	bl	80086f4 <__aeabi_dmul>
 8006c1c:	112d      	asrs	r5, r5, #4
 8006c1e:	4682      	mov	sl, r0
 8006c20:	468b      	mov	fp, r1
 8006c22:	f000 8131 	beq.w	8006e88 <_dtoa_r+0xe18>
 8006c26:	4e72      	ldr	r6, [pc, #456]	; (8006df0 <_dtoa_r+0xd80>)
 8006c28:	f04f 0802 	mov.w	r8, #2
 8006c2c:	07ea      	lsls	r2, r5, #31
 8006c2e:	d505      	bpl.n	8006c3c <_dtoa_r+0xbcc>
 8006c30:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c34:	f001 fd5e 	bl	80086f4 <__aeabi_dmul>
 8006c38:	f108 0801 	add.w	r8, r8, #1
 8006c3c:	106d      	asrs	r5, r5, #1
 8006c3e:	f106 0608 	add.w	r6, r6, #8
 8006c42:	d1f3      	bne.n	8006c2c <_dtoa_r+0xbbc>
 8006c44:	4682      	mov	sl, r0
 8006c46:	468b      	mov	fp, r1
 8006c48:	e5f0      	b.n	800682c <_dtoa_r+0x7bc>
 8006c4a:	9e07      	ldr	r6, [sp, #28]
 8006c4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006c4e:	2230      	movs	r2, #48	; 0x30
 8006c50:	702a      	strb	r2, [r5, #0]
 8006c52:	3601      	adds	r6, #1
 8006c54:	2231      	movs	r2, #49	; 0x31
 8006c56:	9607      	str	r6, [sp, #28]
 8006c58:	701a      	strb	r2, [r3, #0]
 8006c5a:	f7ff bbd6 	b.w	800640a <_dtoa_r+0x39a>
 8006c5e:	6871      	ldr	r1, [r6, #4]
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 fc09 	bl	8007478 <_Balloc>
 8006c66:	6933      	ldr	r3, [r6, #16]
 8006c68:	1c9a      	adds	r2, r3, #2
 8006c6a:	4605      	mov	r5, r0
 8006c6c:	0092      	lsls	r2, r2, #2
 8006c6e:	f106 010c 	add.w	r1, r6, #12
 8006c72:	300c      	adds	r0, #12
 8006c74:	f7fd fdd8 	bl	8004828 <memcpy>
 8006c78:	4620      	mov	r0, r4
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f000 fdbb 	bl	80077f8 <__lshift>
 8006c82:	4607      	mov	r7, r0
 8006c84:	e500      	b.n	8006688 <_dtoa_r+0x618>
 8006c86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006c8a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8006c8e:	f000 80b5 	beq.w	8006dfc <_dtoa_r+0xd8c>
 8006c92:	9d06      	ldr	r5, [sp, #24]
 8006c94:	f10a 0301 	add.w	r3, sl, #1
 8006c98:	702b      	strb	r3, [r5, #0]
 8006c9a:	4635      	mov	r5, r6
 8006c9c:	9e06      	ldr	r6, [sp, #24]
 8006c9e:	f106 0b01 	add.w	fp, r6, #1
 8006ca2:	463e      	mov	r6, r7
 8006ca4:	e49c      	b.n	80065e0 <_dtoa_r+0x570>
 8006ca6:	4635      	mov	r5, r6
 8006ca8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8006cac:	463e      	mov	r6, r7
 8006cae:	e47b      	b.n	80065a8 <_dtoa_r+0x538>
 8006cb0:	f04f 0800 	mov.w	r8, #0
 8006cb4:	4646      	mov	r6, r8
 8006cb6:	e716      	b.n	8006ae6 <_dtoa_r+0xa76>
 8006cb8:	494c      	ldr	r1, [pc, #304]	; (8006dec <_dtoa_r+0xd7c>)
 8006cba:	f108 35ff 	add.w	r5, r8, #4294967295
 8006cbe:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8006cc2:	4632      	mov	r2, r6
 8006cc4:	463b      	mov	r3, r7
 8006cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cca:	9510      	str	r5, [sp, #64]	; 0x40
 8006ccc:	f001 fd12 	bl	80086f4 <__aeabi_dmul>
 8006cd0:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8006cd4:	4659      	mov	r1, fp
 8006cd6:	4650      	mov	r0, sl
 8006cd8:	f001 ffa6 	bl	8008c28 <__aeabi_d2iz>
 8006cdc:	4605      	mov	r5, r0
 8006cde:	f001 fca3 	bl	8008628 <__aeabi_i2d>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4650      	mov	r0, sl
 8006ce8:	4659      	mov	r1, fp
 8006cea:	f001 fb4f 	bl	800838c <__aeabi_dsub>
 8006cee:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8006cf2:	3530      	adds	r5, #48	; 0x30
 8006cf4:	f1b8 0f01 	cmp.w	r8, #1
 8006cf8:	4606      	mov	r6, r0
 8006cfa:	460f      	mov	r7, r1
 8006cfc:	f88e 5000 	strb.w	r5, [lr]
 8006d00:	f10e 0b01 	add.w	fp, lr, #1
 8006d04:	d01e      	beq.n	8006d44 <_dtoa_r+0xcd4>
 8006d06:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006d08:	1e6b      	subs	r3, r5, #1
 8006d0a:	eb03 0a08 	add.w	sl, r3, r8
 8006d0e:	2200      	movs	r2, #0
 8006d10:	4b38      	ldr	r3, [pc, #224]	; (8006df4 <_dtoa_r+0xd84>)
 8006d12:	f001 fcef 	bl	80086f4 <__aeabi_dmul>
 8006d16:	460f      	mov	r7, r1
 8006d18:	4606      	mov	r6, r0
 8006d1a:	f001 ff85 	bl	8008c28 <__aeabi_d2iz>
 8006d1e:	4680      	mov	r8, r0
 8006d20:	f001 fc82 	bl	8008628 <__aeabi_i2d>
 8006d24:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	4639      	mov	r1, r7
 8006d30:	f001 fb2c 	bl	800838c <__aeabi_dsub>
 8006d34:	f805 8f01 	strb.w	r8, [r5, #1]!
 8006d38:	4555      	cmp	r5, sl
 8006d3a:	d1e8      	bne.n	8006d0e <_dtoa_r+0xc9e>
 8006d3c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006d3e:	4606      	mov	r6, r0
 8006d40:	460f      	mov	r7, r1
 8006d42:	44ab      	add	fp, r5
 8006d44:	2200      	movs	r2, #0
 8006d46:	4b2c      	ldr	r3, [pc, #176]	; (8006df8 <_dtoa_r+0xd88>)
 8006d48:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006d4c:	f001 fb20 	bl	8008390 <__adddf3>
 8006d50:	4632      	mov	r2, r6
 8006d52:	463b      	mov	r3, r7
 8006d54:	f001 ff40 	bl	8008bd8 <__aeabi_dcmplt>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d059      	beq.n	8006e10 <_dtoa_r+0xda0>
 8006d5c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006d5e:	9607      	str	r6, [sp, #28]
 8006d60:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
 8006d64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d66:	f7ff bb49 	b.w	80063fc <_dtoa_r+0x38c>
 8006d6a:	9e08      	ldr	r6, [sp, #32]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	ebc9 0506 	rsb	r5, r9, r6
 8006d72:	f7ff bb74 	b.w	800645e <_dtoa_r+0x3ee>
 8006d76:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006d78:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8006d7a:	9d08      	ldr	r5, [sp, #32]
 8006d7c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d80:	f7ff bb6d 	b.w	800645e <_dtoa_r+0x3ee>
 8006d84:	4657      	mov	r7, sl
 8006d86:	f7ff bbb5 	b.w	80064f4 <_dtoa_r+0x484>
 8006d8a:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8006d8e:	f04f 0802 	mov.w	r8, #2
 8006d92:	e54b      	b.n	800682c <_dtoa_r+0x7bc>
 8006d94:	f1b9 0f00 	cmp.w	r9, #0
 8006d98:	f43f aeb8 	beq.w	8006b0c <_dtoa_r+0xa9c>
 8006d9c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8006d9e:	2e00      	cmp	r6, #0
 8006da0:	f77f af28 	ble.w	8006bf4 <_dtoa_r+0xb84>
 8006da4:	2200      	movs	r2, #0
 8006da6:	4b13      	ldr	r3, [pc, #76]	; (8006df4 <_dtoa_r+0xd84>)
 8006da8:	4650      	mov	r0, sl
 8006daa:	4659      	mov	r1, fp
 8006dac:	f001 fca2 	bl	80086f4 <__aeabi_dmul>
 8006db0:	4682      	mov	sl, r0
 8006db2:	f108 0001 	add.w	r0, r8, #1
 8006db6:	468b      	mov	fp, r1
 8006db8:	f001 fc36 	bl	8008628 <__aeabi_i2d>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4650      	mov	r0, sl
 8006dc2:	4659      	mov	r1, fp
 8006dc4:	f001 fc96 	bl	80086f4 <__aeabi_dmul>
 8006dc8:	2200      	movs	r2, #0
 8006dca:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <_dtoa_r+0xd74>)
 8006dcc:	f001 fae0 	bl	8008390 <__adddf3>
 8006dd0:	9d07      	ldr	r5, [sp, #28]
 8006dd2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8006dd6:	3d01      	subs	r5, #1
 8006dd8:	4606      	mov	r6, r0
 8006dda:	9517      	str	r5, [sp, #92]	; 0x5c
 8006ddc:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8006de0:	e544      	b.n	800686c <_dtoa_r+0x7fc>
 8006de2:	bf00      	nop
 8006de4:	401c0000 	.word	0x401c0000
 8006de8:	40140000 	.word	0x40140000
 8006dec:	08009498 	.word	0x08009498
 8006df0:	08009560 	.word	0x08009560
 8006df4:	40240000 	.word	0x40240000
 8006df8:	3fe00000 	.word	0x3fe00000
 8006dfc:	9b06      	ldr	r3, [sp, #24]
 8006dfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e00:	2239      	movs	r2, #57	; 0x39
 8006e02:	4635      	mov	r5, r6
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	463e      	mov	r6, r7
 8006e08:	f103 0b01 	add.w	fp, r3, #1
 8006e0c:	f7ff bbe2 	b.w	80065d4 <_dtoa_r+0x564>
 8006e10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006e14:	2000      	movs	r0, #0
 8006e16:	4921      	ldr	r1, [pc, #132]	; (8006e9c <_dtoa_r+0xe2c>)
 8006e18:	f001 fab8 	bl	800838c <__aeabi_dsub>
 8006e1c:	4632      	mov	r2, r6
 8006e1e:	463b      	mov	r3, r7
 8006e20:	f001 fef8 	bl	8008c14 <__aeabi_dcmpgt>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	f43f aee5 	beq.w	8006bf4 <_dtoa_r+0xb84>
 8006e2a:	465b      	mov	r3, fp
 8006e2c:	469b      	mov	fp, r3
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 8006e34:	2a30      	cmp	r2, #48	; 0x30
 8006e36:	d0f9      	beq.n	8006e2c <_dtoa_r+0xdbc>
 8006e38:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8006e3a:	9507      	str	r5, [sp, #28]
 8006e3c:	f7ff bae5 	b.w	800640a <_dtoa_r+0x39a>
 8006e40:	4645      	mov	r5, r8
 8006e42:	4654      	mov	r4, sl
 8006e44:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006e46:	9607      	str	r6, [sp, #28]
 8006e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e4a:	f7ff bad7 	b.w	80063fc <_dtoa_r+0x38c>
 8006e4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e52:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8006e56:	46d9      	mov	r9, fp
 8006e58:	d0d0      	beq.n	8006dfc <_dtoa_r+0xd8c>
 8006e5a:	9d03      	ldr	r5, [sp, #12]
 8006e5c:	2d00      	cmp	r5, #0
 8006e5e:	f73f aeaf 	bgt.w	8006bc0 <_dtoa_r+0xb50>
 8006e62:	e6af      	b.n	8006bc4 <_dtoa_r+0xb54>
 8006e64:	f47f aeae 	bne.w	8006bc4 <_dtoa_r+0xb54>
 8006e68:	f01a 0f01 	tst.w	sl, #1
 8006e6c:	f43f aeaa 	beq.w	8006bc4 <_dtoa_r+0xb54>
 8006e70:	e6a2      	b.n	8006bb8 <_dtoa_r+0xb48>
 8006e72:	4631      	mov	r1, r6
 8006e74:	4620      	mov	r0, r4
 8006e76:	220a      	movs	r2, #10
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8006e7e:	f000 fb2b 	bl	80074d8 <__multadd>
 8006e82:	4606      	mov	r6, r0
 8006e84:	f7ff bb67 	b.w	8006556 <_dtoa_r+0x4e6>
 8006e88:	f04f 0802 	mov.w	r8, #2
 8006e8c:	e4ce      	b.n	800682c <_dtoa_r+0x7bc>
 8006e8e:	f43f ab4c 	beq.w	800652a <_dtoa_r+0x4ba>
 8006e92:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8006e96:	f7ff bbdc 	b.w	8006652 <_dtoa_r+0x5e2>
 8006e9a:	bf00      	nop
 8006e9c:	3fe00000 	.word	0x3fe00000

08006ea0 <_localeconv_r>:
_localeconv_r():
 8006ea0:	4800      	ldr	r0, [pc, #0]	; (8006ea4 <_localeconv_r+0x4>)
 8006ea2:	4770      	bx	lr
 8006ea4:	2000044c 	.word	0x2000044c

08006ea8 <_malloc_r>:
_malloc_r():
 8006ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eac:	f101 050b 	add.w	r5, r1, #11
 8006eb0:	2d16      	cmp	r5, #22
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	d927      	bls.n	8006f08 <_malloc_r+0x60>
 8006eb8:	f035 0507 	bics.w	r5, r5, #7
 8006ebc:	d427      	bmi.n	8006f0e <_malloc_r+0x66>
 8006ebe:	42a9      	cmp	r1, r5
 8006ec0:	d825      	bhi.n	8006f0e <_malloc_r+0x66>
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f000 fad4 	bl	8007470 <__malloc_lock>
 8006ec8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8006ecc:	d226      	bcs.n	8006f1c <_malloc_r+0x74>
 8006ece:	4fc1      	ldr	r7, [pc, #772]	; (80071d4 <_malloc_r+0x32c>)
 8006ed0:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 8006ed4:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
 8006ed8:	68dc      	ldr	r4, [r3, #12]
 8006eda:	429c      	cmp	r4, r3
 8006edc:	f000 81d2 	beq.w	8007284 <_malloc_r+0x3dc>
 8006ee0:	6863      	ldr	r3, [r4, #4]
 8006ee2:	68e2      	ldr	r2, [r4, #12]
 8006ee4:	68a1      	ldr	r1, [r4, #8]
 8006ee6:	f023 0303 	bic.w	r3, r3, #3
 8006eea:	4423      	add	r3, r4
 8006eec:	4630      	mov	r0, r6
 8006eee:	685d      	ldr	r5, [r3, #4]
 8006ef0:	60ca      	str	r2, [r1, #12]
 8006ef2:	f045 0501 	orr.w	r5, r5, #1
 8006ef6:	6091      	str	r1, [r2, #8]
 8006ef8:	605d      	str	r5, [r3, #4]
 8006efa:	f000 fabb 	bl	8007474 <__malloc_unlock>
 8006efe:	3408      	adds	r4, #8
 8006f00:	4620      	mov	r0, r4
 8006f02:	b003      	add	sp, #12
 8006f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f08:	2510      	movs	r5, #16
 8006f0a:	42a9      	cmp	r1, r5
 8006f0c:	d9d9      	bls.n	8006ec2 <_malloc_r+0x1a>
 8006f0e:	2400      	movs	r4, #0
 8006f10:	230c      	movs	r3, #12
 8006f12:	4620      	mov	r0, r4
 8006f14:	6033      	str	r3, [r6, #0]
 8006f16:	b003      	add	sp, #12
 8006f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1c:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 8006f20:	f000 808a 	beq.w	8007038 <_malloc_r+0x190>
 8006f24:	f1bc 0f04 	cmp.w	ip, #4
 8006f28:	f200 8160 	bhi.w	80071ec <_malloc_r+0x344>
 8006f2c:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 8006f30:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8006f34:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8006f38:	4fa6      	ldr	r7, [pc, #664]	; (80071d4 <_malloc_r+0x32c>)
 8006f3a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8006f3e:	68cc      	ldr	r4, [r1, #12]
 8006f40:	42a1      	cmp	r1, r4
 8006f42:	d105      	bne.n	8006f50 <_malloc_r+0xa8>
 8006f44:	e00c      	b.n	8006f60 <_malloc_r+0xb8>
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	da7a      	bge.n	8007040 <_malloc_r+0x198>
 8006f4a:	68e4      	ldr	r4, [r4, #12]
 8006f4c:	42a1      	cmp	r1, r4
 8006f4e:	d007      	beq.n	8006f60 <_malloc_r+0xb8>
 8006f50:	6862      	ldr	r2, [r4, #4]
 8006f52:	f022 0203 	bic.w	r2, r2, #3
 8006f56:	1b53      	subs	r3, r2, r5
 8006f58:	2b0f      	cmp	r3, #15
 8006f5a:	ddf4      	ble.n	8006f46 <_malloc_r+0x9e>
 8006f5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006f60:	f10c 0c01 	add.w	ip, ip, #1
 8006f64:	4b9b      	ldr	r3, [pc, #620]	; (80071d4 <_malloc_r+0x32c>)
 8006f66:	693c      	ldr	r4, [r7, #16]
 8006f68:	f103 0e08 	add.w	lr, r3, #8
 8006f6c:	4574      	cmp	r4, lr
 8006f6e:	f000 817e 	beq.w	800726e <_malloc_r+0x3c6>
 8006f72:	6861      	ldr	r1, [r4, #4]
 8006f74:	f021 0103 	bic.w	r1, r1, #3
 8006f78:	1b4a      	subs	r2, r1, r5
 8006f7a:	2a0f      	cmp	r2, #15
 8006f7c:	f300 8164 	bgt.w	8007248 <_malloc_r+0x3a0>
 8006f80:	2a00      	cmp	r2, #0
 8006f82:	f8c3 e014 	str.w	lr, [r3, #20]
 8006f86:	f8c3 e010 	str.w	lr, [r3, #16]
 8006f8a:	da6a      	bge.n	8007062 <_malloc_r+0x1ba>
 8006f8c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006f90:	f080 813a 	bcs.w	8007208 <_malloc_r+0x360>
 8006f94:	08c9      	lsrs	r1, r1, #3
 8006f96:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
 8006f9a:	ea4f 08a1 	mov.w	r8, r1, asr #2
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	6881      	ldr	r1, [r0, #8]
 8006fa2:	60a1      	str	r1, [r4, #8]
 8006fa4:	f04f 0901 	mov.w	r9, #1
 8006fa8:	fa09 f808 	lsl.w	r8, r9, r8
 8006fac:	ea48 0202 	orr.w	r2, r8, r2
 8006fb0:	60e0      	str	r0, [r4, #12]
 8006fb2:	605a      	str	r2, [r3, #4]
 8006fb4:	6084      	str	r4, [r0, #8]
 8006fb6:	60cc      	str	r4, [r1, #12]
 8006fb8:	ea4f 03ac 	mov.w	r3, ip, asr #2
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	4098      	lsls	r0, r3
 8006fc0:	4290      	cmp	r0, r2
 8006fc2:	d85b      	bhi.n	800707c <_malloc_r+0x1d4>
 8006fc4:	4202      	tst	r2, r0
 8006fc6:	d106      	bne.n	8006fd6 <_malloc_r+0x12e>
 8006fc8:	f02c 0c03 	bic.w	ip, ip, #3
 8006fcc:	0040      	lsls	r0, r0, #1
 8006fce:	4202      	tst	r2, r0
 8006fd0:	f10c 0c04 	add.w	ip, ip, #4
 8006fd4:	d0fa      	beq.n	8006fcc <_malloc_r+0x124>
 8006fd6:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
 8006fda:	4644      	mov	r4, r8
 8006fdc:	46e1      	mov	r9, ip
 8006fde:	68e3      	ldr	r3, [r4, #12]
 8006fe0:	429c      	cmp	r4, r3
 8006fe2:	d107      	bne.n	8006ff4 <_malloc_r+0x14c>
 8006fe4:	e145      	b.n	8007272 <_malloc_r+0x3ca>
 8006fe6:	2a00      	cmp	r2, #0
 8006fe8:	f280 8156 	bge.w	8007298 <_malloc_r+0x3f0>
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	429c      	cmp	r4, r3
 8006ff0:	f000 813f 	beq.w	8007272 <_malloc_r+0x3ca>
 8006ff4:	6859      	ldr	r1, [r3, #4]
 8006ff6:	f021 0103 	bic.w	r1, r1, #3
 8006ffa:	1b4a      	subs	r2, r1, r5
 8006ffc:	2a0f      	cmp	r2, #15
 8006ffe:	ddf2      	ble.n	8006fe6 <_malloc_r+0x13e>
 8007000:	461c      	mov	r4, r3
 8007002:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8007006:	f854 8f08 	ldr.w	r8, [r4, #8]!
 800700a:	1959      	adds	r1, r3, r5
 800700c:	f045 0901 	orr.w	r9, r5, #1
 8007010:	f042 0501 	orr.w	r5, r2, #1
 8007014:	f8c3 9004 	str.w	r9, [r3, #4]
 8007018:	4630      	mov	r0, r6
 800701a:	f8c8 c00c 	str.w	ip, [r8, #12]
 800701e:	f8cc 8008 	str.w	r8, [ip, #8]
 8007022:	6179      	str	r1, [r7, #20]
 8007024:	6139      	str	r1, [r7, #16]
 8007026:	f8c1 e00c 	str.w	lr, [r1, #12]
 800702a:	f8c1 e008 	str.w	lr, [r1, #8]
 800702e:	604d      	str	r5, [r1, #4]
 8007030:	508a      	str	r2, [r1, r2]
 8007032:	f000 fa1f 	bl	8007474 <__malloc_unlock>
 8007036:	e763      	b.n	8006f00 <_malloc_r+0x58>
 8007038:	217e      	movs	r1, #126	; 0x7e
 800703a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 800703e:	e77b      	b.n	8006f38 <_malloc_r+0x90>
 8007040:	4422      	add	r2, r4
 8007042:	68e3      	ldr	r3, [r4, #12]
 8007044:	6850      	ldr	r0, [r2, #4]
 8007046:	68a1      	ldr	r1, [r4, #8]
 8007048:	f040 0501 	orr.w	r5, r0, #1
 800704c:	60cb      	str	r3, [r1, #12]
 800704e:	4630      	mov	r0, r6
 8007050:	6099      	str	r1, [r3, #8]
 8007052:	6055      	str	r5, [r2, #4]
 8007054:	f000 fa0e 	bl	8007474 <__malloc_unlock>
 8007058:	3408      	adds	r4, #8
 800705a:	4620      	mov	r0, r4
 800705c:	b003      	add	sp, #12
 800705e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007062:	4421      	add	r1, r4
 8007064:	4630      	mov	r0, r6
 8007066:	684b      	ldr	r3, [r1, #4]
 8007068:	f043 0301 	orr.w	r3, r3, #1
 800706c:	604b      	str	r3, [r1, #4]
 800706e:	f000 fa01 	bl	8007474 <__malloc_unlock>
 8007072:	3408      	adds	r4, #8
 8007074:	4620      	mov	r0, r4
 8007076:	b003      	add	sp, #12
 8007078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707c:	68bc      	ldr	r4, [r7, #8]
 800707e:	6863      	ldr	r3, [r4, #4]
 8007080:	f023 0903 	bic.w	r9, r3, #3
 8007084:	45a9      	cmp	r9, r5
 8007086:	d304      	bcc.n	8007092 <_malloc_r+0x1ea>
 8007088:	ebc5 0309 	rsb	r3, r5, r9
 800708c:	2b0f      	cmp	r3, #15
 800708e:	f300 8091 	bgt.w	80071b4 <_malloc_r+0x30c>
 8007092:	4b51      	ldr	r3, [pc, #324]	; (80071d8 <_malloc_r+0x330>)
 8007094:	4a51      	ldr	r2, [pc, #324]	; (80071dc <_malloc_r+0x334>)
 8007096:	6819      	ldr	r1, [r3, #0]
 8007098:	6813      	ldr	r3, [r2, #0]
 800709a:	3301      	adds	r3, #1
 800709c:	eb05 0a01 	add.w	sl, r5, r1
 80070a0:	eb04 0b09 	add.w	fp, r4, r9
 80070a4:	f000 8161 	beq.w	800736a <_malloc_r+0x4c2>
 80070a8:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
 80070ac:	f10a 0a0f 	add.w	sl, sl, #15
 80070b0:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
 80070b4:	f02a 0a0f 	bic.w	sl, sl, #15
 80070b8:	4630      	mov	r0, r6
 80070ba:	4651      	mov	r1, sl
 80070bc:	9201      	str	r2, [sp, #4]
 80070be:	f000 fd0d 	bl	8007adc <_sbrk_r>
 80070c2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80070c6:	4680      	mov	r8, r0
 80070c8:	9a01      	ldr	r2, [sp, #4]
 80070ca:	f000 8100 	beq.w	80072ce <_malloc_r+0x426>
 80070ce:	4583      	cmp	fp, r0
 80070d0:	f200 80fa 	bhi.w	80072c8 <_malloc_r+0x420>
 80070d4:	f8df c110 	ldr.w	ip, [pc, #272]	; 80071e8 <_malloc_r+0x340>
 80070d8:	f8dc 3000 	ldr.w	r3, [ip]
 80070dc:	45c3      	cmp	fp, r8
 80070de:	4453      	add	r3, sl
 80070e0:	f8cc 3000 	str.w	r3, [ip]
 80070e4:	f000 814a 	beq.w	800737c <_malloc_r+0x4d4>
 80070e8:	6812      	ldr	r2, [r2, #0]
 80070ea:	493c      	ldr	r1, [pc, #240]	; (80071dc <_malloc_r+0x334>)
 80070ec:	3201      	adds	r2, #1
 80070ee:	bf1b      	ittet	ne
 80070f0:	ebcb 0b08 	rsbne	fp, fp, r8
 80070f4:	445b      	addne	r3, fp
 80070f6:	f8c1 8000 	streq.w	r8, [r1]
 80070fa:	f8cc 3000 	strne.w	r3, [ip]
 80070fe:	f018 0307 	ands.w	r3, r8, #7
 8007102:	f000 8113 	beq.w	800732c <_malloc_r+0x484>
 8007106:	f1c3 0208 	rsb	r2, r3, #8
 800710a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800710e:	4490      	add	r8, r2
 8007110:	3308      	adds	r3, #8
 8007112:	44c2      	add	sl, r8
 8007114:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
 8007118:	ebca 0a03 	rsb	sl, sl, r3
 800711c:	4651      	mov	r1, sl
 800711e:	4630      	mov	r0, r6
 8007120:	f8cd c004 	str.w	ip, [sp, #4]
 8007124:	f000 fcda 	bl	8007adc <_sbrk_r>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	f8dd c004 	ldr.w	ip, [sp, #4]
 800712e:	f000 8135 	beq.w	800739c <_malloc_r+0x4f4>
 8007132:	ebc8 0200 	rsb	r2, r8, r0
 8007136:	4452      	add	r2, sl
 8007138:	f042 0201 	orr.w	r2, r2, #1
 800713c:	f8dc 3000 	ldr.w	r3, [ip]
 8007140:	f8c7 8008 	str.w	r8, [r7, #8]
 8007144:	4453      	add	r3, sl
 8007146:	42bc      	cmp	r4, r7
 8007148:	f8c8 2004 	str.w	r2, [r8, #4]
 800714c:	f8cc 3000 	str.w	r3, [ip]
 8007150:	f8df a094 	ldr.w	sl, [pc, #148]	; 80071e8 <_malloc_r+0x340>
 8007154:	d015      	beq.n	8007182 <_malloc_r+0x2da>
 8007156:	f1b9 0f0f 	cmp.w	r9, #15
 800715a:	f240 80ea 	bls.w	8007332 <_malloc_r+0x48a>
 800715e:	6861      	ldr	r1, [r4, #4]
 8007160:	f1a9 020c 	sub.w	r2, r9, #12
 8007164:	f022 0207 	bic.w	r2, r2, #7
 8007168:	f001 0e01 	and.w	lr, r1, #1
 800716c:	18a1      	adds	r1, r4, r2
 800716e:	2005      	movs	r0, #5
 8007170:	ea42 0e0e 	orr.w	lr, r2, lr
 8007174:	2a0f      	cmp	r2, #15
 8007176:	f8c4 e004 	str.w	lr, [r4, #4]
 800717a:	6048      	str	r0, [r1, #4]
 800717c:	6088      	str	r0, [r1, #8]
 800717e:	f200 8111 	bhi.w	80073a4 <_malloc_r+0x4fc>
 8007182:	4a17      	ldr	r2, [pc, #92]	; (80071e0 <_malloc_r+0x338>)
 8007184:	68bc      	ldr	r4, [r7, #8]
 8007186:	6811      	ldr	r1, [r2, #0]
 8007188:	428b      	cmp	r3, r1
 800718a:	bf88      	it	hi
 800718c:	6013      	strhi	r3, [r2, #0]
 800718e:	4a15      	ldr	r2, [pc, #84]	; (80071e4 <_malloc_r+0x33c>)
 8007190:	6811      	ldr	r1, [r2, #0]
 8007192:	428b      	cmp	r3, r1
 8007194:	bf88      	it	hi
 8007196:	6013      	strhi	r3, [r2, #0]
 8007198:	6862      	ldr	r2, [r4, #4]
 800719a:	f022 0203 	bic.w	r2, r2, #3
 800719e:	4295      	cmp	r5, r2
 80071a0:	ebc5 0302 	rsb	r3, r5, r2
 80071a4:	d801      	bhi.n	80071aa <_malloc_r+0x302>
 80071a6:	2b0f      	cmp	r3, #15
 80071a8:	dc04      	bgt.n	80071b4 <_malloc_r+0x30c>
 80071aa:	4630      	mov	r0, r6
 80071ac:	f000 f962 	bl	8007474 <__malloc_unlock>
 80071b0:	2400      	movs	r4, #0
 80071b2:	e6a5      	b.n	8006f00 <_malloc_r+0x58>
 80071b4:	1962      	adds	r2, r4, r5
 80071b6:	f043 0301 	orr.w	r3, r3, #1
 80071ba:	f045 0501 	orr.w	r5, r5, #1
 80071be:	6065      	str	r5, [r4, #4]
 80071c0:	4630      	mov	r0, r6
 80071c2:	60ba      	str	r2, [r7, #8]
 80071c4:	6053      	str	r3, [r2, #4]
 80071c6:	f000 f955 	bl	8007474 <__malloc_unlock>
 80071ca:	3408      	adds	r4, #8
 80071cc:	4620      	mov	r0, r4
 80071ce:	b003      	add	sp, #12
 80071d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d4:	20000484 	.word	0x20000484
 80071d8:	200057c4 	.word	0x200057c4
 80071dc:	20000890 	.word	0x20000890
 80071e0:	200057c0 	.word	0x200057c0
 80071e4:	200057bc 	.word	0x200057bc
 80071e8:	200057c8 	.word	0x200057c8
 80071ec:	f1bc 0f14 	cmp.w	ip, #20
 80071f0:	d961      	bls.n	80072b6 <_malloc_r+0x40e>
 80071f2:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 80071f6:	f200 808f 	bhi.w	8007318 <_malloc_r+0x470>
 80071fa:	ea4f 3c15 	mov.w	ip, r5, lsr #12
 80071fe:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 8007202:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8007206:	e697      	b.n	8006f38 <_malloc_r+0x90>
 8007208:	0a4b      	lsrs	r3, r1, #9
 800720a:	2b04      	cmp	r3, #4
 800720c:	d958      	bls.n	80072c0 <_malloc_r+0x418>
 800720e:	2b14      	cmp	r3, #20
 8007210:	f200 80ae 	bhi.w	8007370 <_malloc_r+0x4c8>
 8007214:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8007218:	0050      	lsls	r0, r2, #1
 800721a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800721e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80073dc <_malloc_r+0x534>
 8007222:	6883      	ldr	r3, [r0, #8]
 8007224:	4283      	cmp	r3, r0
 8007226:	f000 808a 	beq.w	800733e <_malloc_r+0x496>
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	f022 0203 	bic.w	r2, r2, #3
 8007230:	4291      	cmp	r1, r2
 8007232:	d202      	bcs.n	800723a <_malloc_r+0x392>
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	4298      	cmp	r0, r3
 8007238:	d1f7      	bne.n	800722a <_malloc_r+0x382>
 800723a:	68d9      	ldr	r1, [r3, #12]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	60e1      	str	r1, [r4, #12]
 8007240:	60a3      	str	r3, [r4, #8]
 8007242:	608c      	str	r4, [r1, #8]
 8007244:	60dc      	str	r4, [r3, #12]
 8007246:	e6b7      	b.n	8006fb8 <_malloc_r+0x110>
 8007248:	1961      	adds	r1, r4, r5
 800724a:	f042 0701 	orr.w	r7, r2, #1
 800724e:	f045 0501 	orr.w	r5, r5, #1
 8007252:	6065      	str	r5, [r4, #4]
 8007254:	4630      	mov	r0, r6
 8007256:	6159      	str	r1, [r3, #20]
 8007258:	6119      	str	r1, [r3, #16]
 800725a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800725e:	f8c1 e008 	str.w	lr, [r1, #8]
 8007262:	604f      	str	r7, [r1, #4]
 8007264:	508a      	str	r2, [r1, r2]
 8007266:	3408      	adds	r4, #8
 8007268:	f000 f904 	bl	8007474 <__malloc_unlock>
 800726c:	e648      	b.n	8006f00 <_malloc_r+0x58>
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	e6a2      	b.n	8006fb8 <_malloc_r+0x110>
 8007272:	f109 0901 	add.w	r9, r9, #1
 8007276:	f019 0f03 	tst.w	r9, #3
 800727a:	f104 0408 	add.w	r4, r4, #8
 800727e:	f47f aeae 	bne.w	8006fde <_malloc_r+0x136>
 8007282:	e02d      	b.n	80072e0 <_malloc_r+0x438>
 8007284:	f104 0308 	add.w	r3, r4, #8
 8007288:	6964      	ldr	r4, [r4, #20]
 800728a:	42a3      	cmp	r3, r4
 800728c:	bf08      	it	eq
 800728e:	f10c 0c02 	addeq.w	ip, ip, #2
 8007292:	f43f ae67 	beq.w	8006f64 <_malloc_r+0xbc>
 8007296:	e623      	b.n	8006ee0 <_malloc_r+0x38>
 8007298:	4419      	add	r1, r3
 800729a:	461c      	mov	r4, r3
 800729c:	6848      	ldr	r0, [r1, #4]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f854 2f08 	ldr.w	r2, [r4, #8]!
 80072a4:	f040 0501 	orr.w	r5, r0, #1
 80072a8:	604d      	str	r5, [r1, #4]
 80072aa:	4630      	mov	r0, r6
 80072ac:	60d3      	str	r3, [r2, #12]
 80072ae:	609a      	str	r2, [r3, #8]
 80072b0:	f000 f8e0 	bl	8007474 <__malloc_unlock>
 80072b4:	e624      	b.n	8006f00 <_malloc_r+0x58>
 80072b6:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
 80072ba:	ea4f 014c 	mov.w	r1, ip, lsl #1
 80072be:	e63b      	b.n	8006f38 <_malloc_r+0x90>
 80072c0:	098a      	lsrs	r2, r1, #6
 80072c2:	3238      	adds	r2, #56	; 0x38
 80072c4:	0050      	lsls	r0, r2, #1
 80072c6:	e7a8      	b.n	800721a <_malloc_r+0x372>
 80072c8:	42bc      	cmp	r4, r7
 80072ca:	f43f af03 	beq.w	80070d4 <_malloc_r+0x22c>
 80072ce:	68bc      	ldr	r4, [r7, #8]
 80072d0:	6862      	ldr	r2, [r4, #4]
 80072d2:	f022 0203 	bic.w	r2, r2, #3
 80072d6:	e762      	b.n	800719e <_malloc_r+0x2f6>
 80072d8:	f8d8 8000 	ldr.w	r8, [r8]
 80072dc:	4598      	cmp	r8, r3
 80072de:	d17b      	bne.n	80073d8 <_malloc_r+0x530>
 80072e0:	f01c 0f03 	tst.w	ip, #3
 80072e4:	f1a8 0308 	sub.w	r3, r8, #8
 80072e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80072ec:	d1f4      	bne.n	80072d8 <_malloc_r+0x430>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	ea23 0300 	bic.w	r3, r3, r0
 80072f4:	607b      	str	r3, [r7, #4]
 80072f6:	0040      	lsls	r0, r0, #1
 80072f8:	4298      	cmp	r0, r3
 80072fa:	f63f aebf 	bhi.w	800707c <_malloc_r+0x1d4>
 80072fe:	2800      	cmp	r0, #0
 8007300:	f43f aebc 	beq.w	800707c <_malloc_r+0x1d4>
 8007304:	4203      	tst	r3, r0
 8007306:	46cc      	mov	ip, r9
 8007308:	f47f ae65 	bne.w	8006fd6 <_malloc_r+0x12e>
 800730c:	0040      	lsls	r0, r0, #1
 800730e:	4203      	tst	r3, r0
 8007310:	f10c 0c04 	add.w	ip, ip, #4
 8007314:	d0fa      	beq.n	800730c <_malloc_r+0x464>
 8007316:	e65e      	b.n	8006fd6 <_malloc_r+0x12e>
 8007318:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 800731c:	d81a      	bhi.n	8007354 <_malloc_r+0x4ac>
 800731e:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
 8007322:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 8007326:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800732a:	e605      	b.n	8006f38 <_malloc_r+0x90>
 800732c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007330:	e6ef      	b.n	8007112 <_malloc_r+0x26a>
 8007332:	2301      	movs	r3, #1
 8007334:	f8c8 3004 	str.w	r3, [r8, #4]
 8007338:	4644      	mov	r4, r8
 800733a:	2200      	movs	r2, #0
 800733c:	e72f      	b.n	800719e <_malloc_r+0x2f6>
 800733e:	1091      	asrs	r1, r2, #2
 8007340:	2001      	movs	r0, #1
 8007342:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007346:	fa00 f101 	lsl.w	r1, r0, r1
 800734a:	430a      	orrs	r2, r1
 800734c:	f8c8 2004 	str.w	r2, [r8, #4]
 8007350:	4619      	mov	r1, r3
 8007352:	e774      	b.n	800723e <_malloc_r+0x396>
 8007354:	f240 5354 	movw	r3, #1364	; 0x554
 8007358:	459c      	cmp	ip, r3
 800735a:	d81b      	bhi.n	8007394 <_malloc_r+0x4ec>
 800735c:	ea4f 4c95 	mov.w	ip, r5, lsr #18
 8007360:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
 8007364:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8007368:	e5e6      	b.n	8006f38 <_malloc_r+0x90>
 800736a:	f10a 0a10 	add.w	sl, sl, #16
 800736e:	e6a3      	b.n	80070b8 <_malloc_r+0x210>
 8007370:	2b54      	cmp	r3, #84	; 0x54
 8007372:	d81f      	bhi.n	80073b4 <_malloc_r+0x50c>
 8007374:	0b0a      	lsrs	r2, r1, #12
 8007376:	326e      	adds	r2, #110	; 0x6e
 8007378:	0050      	lsls	r0, r2, #1
 800737a:	e74e      	b.n	800721a <_malloc_r+0x372>
 800737c:	f3cb 010b 	ubfx	r1, fp, #0, #12
 8007380:	2900      	cmp	r1, #0
 8007382:	f47f aeb1 	bne.w	80070e8 <_malloc_r+0x240>
 8007386:	eb0a 0109 	add.w	r1, sl, r9
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	f041 0101 	orr.w	r1, r1, #1
 8007390:	6051      	str	r1, [r2, #4]
 8007392:	e6f6      	b.n	8007182 <_malloc_r+0x2da>
 8007394:	21fc      	movs	r1, #252	; 0xfc
 8007396:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 800739a:	e5cd      	b.n	8006f38 <_malloc_r+0x90>
 800739c:	2201      	movs	r2, #1
 800739e:	f04f 0a00 	mov.w	sl, #0
 80073a2:	e6cb      	b.n	800713c <_malloc_r+0x294>
 80073a4:	f104 0108 	add.w	r1, r4, #8
 80073a8:	4630      	mov	r0, r6
 80073aa:	f000 fcd7 	bl	8007d5c <_free_r>
 80073ae:	f8da 3000 	ldr.w	r3, [sl]
 80073b2:	e6e6      	b.n	8007182 <_malloc_r+0x2da>
 80073b4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80073b8:	d803      	bhi.n	80073c2 <_malloc_r+0x51a>
 80073ba:	0bca      	lsrs	r2, r1, #15
 80073bc:	3277      	adds	r2, #119	; 0x77
 80073be:	0050      	lsls	r0, r2, #1
 80073c0:	e72b      	b.n	800721a <_malloc_r+0x372>
 80073c2:	f240 5254 	movw	r2, #1364	; 0x554
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d803      	bhi.n	80073d2 <_malloc_r+0x52a>
 80073ca:	0c8a      	lsrs	r2, r1, #18
 80073cc:	327c      	adds	r2, #124	; 0x7c
 80073ce:	0050      	lsls	r0, r2, #1
 80073d0:	e723      	b.n	800721a <_malloc_r+0x372>
 80073d2:	20fc      	movs	r0, #252	; 0xfc
 80073d4:	227e      	movs	r2, #126	; 0x7e
 80073d6:	e720      	b.n	800721a <_malloc_r+0x372>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	e78c      	b.n	80072f6 <_malloc_r+0x44e>
 80073dc:	20000484 	.word	0x20000484

080073e0 <memchr>:
memchr():
 80073e0:	0783      	lsls	r3, r0, #30
 80073e2:	b470      	push	{r4, r5, r6}
 80073e4:	b2c9      	uxtb	r1, r1
 80073e6:	d03f      	beq.n	8007468 <memchr+0x88>
 80073e8:	1e54      	subs	r4, r2, #1
 80073ea:	b32a      	cbz	r2, 8007438 <memchr+0x58>
 80073ec:	7803      	ldrb	r3, [r0, #0]
 80073ee:	428b      	cmp	r3, r1
 80073f0:	d023      	beq.n	800743a <memchr+0x5a>
 80073f2:	1c43      	adds	r3, r0, #1
 80073f4:	e004      	b.n	8007400 <memchr+0x20>
 80073f6:	b1fc      	cbz	r4, 8007438 <memchr+0x58>
 80073f8:	7804      	ldrb	r4, [r0, #0]
 80073fa:	428c      	cmp	r4, r1
 80073fc:	d01d      	beq.n	800743a <memchr+0x5a>
 80073fe:	4614      	mov	r4, r2
 8007400:	f013 0f03 	tst.w	r3, #3
 8007404:	4618      	mov	r0, r3
 8007406:	f104 32ff 	add.w	r2, r4, #4294967295
 800740a:	f103 0301 	add.w	r3, r3, #1
 800740e:	d1f2      	bne.n	80073f6 <memchr+0x16>
 8007410:	2c03      	cmp	r4, #3
 8007412:	d814      	bhi.n	800743e <memchr+0x5e>
 8007414:	1e65      	subs	r5, r4, #1
 8007416:	b34c      	cbz	r4, 800746c <memchr+0x8c>
 8007418:	7803      	ldrb	r3, [r0, #0]
 800741a:	428b      	cmp	r3, r1
 800741c:	d00d      	beq.n	800743a <memchr+0x5a>
 800741e:	1c42      	adds	r2, r0, #1
 8007420:	2300      	movs	r3, #0
 8007422:	e002      	b.n	800742a <memchr+0x4a>
 8007424:	7804      	ldrb	r4, [r0, #0]
 8007426:	428c      	cmp	r4, r1
 8007428:	d007      	beq.n	800743a <memchr+0x5a>
 800742a:	42ab      	cmp	r3, r5
 800742c:	4610      	mov	r0, r2
 800742e:	f103 0301 	add.w	r3, r3, #1
 8007432:	f102 0201 	add.w	r2, r2, #1
 8007436:	d1f5      	bne.n	8007424 <memchr+0x44>
 8007438:	2000      	movs	r0, #0
 800743a:	bc70      	pop	{r4, r5, r6}
 800743c:	4770      	bx	lr
 800743e:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8007442:	4603      	mov	r3, r0
 8007444:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8007448:	4618      	mov	r0, r3
 800744a:	3304      	adds	r3, #4
 800744c:	6802      	ldr	r2, [r0, #0]
 800744e:	4072      	eors	r2, r6
 8007450:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 8007454:	ea25 0202 	bic.w	r2, r5, r2
 8007458:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800745c:	d1da      	bne.n	8007414 <memchr+0x34>
 800745e:	3c04      	subs	r4, #4
 8007460:	2c03      	cmp	r4, #3
 8007462:	4618      	mov	r0, r3
 8007464:	d8f0      	bhi.n	8007448 <memchr+0x68>
 8007466:	e7d5      	b.n	8007414 <memchr+0x34>
 8007468:	4614      	mov	r4, r2
 800746a:	e7d1      	b.n	8007410 <memchr+0x30>
 800746c:	4620      	mov	r0, r4
 800746e:	e7e4      	b.n	800743a <memchr+0x5a>

08007470 <__malloc_lock>:
__malloc_lock():
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop

08007474 <__malloc_unlock>:
__malloc_unlock():
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop

08007478 <_Balloc>:
_Balloc():
 8007478:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800747a:	b570      	push	{r4, r5, r6, lr}
 800747c:	4605      	mov	r5, r0
 800747e:	460c      	mov	r4, r1
 8007480:	b14a      	cbz	r2, 8007496 <_Balloc+0x1e>
 8007482:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8007486:	b180      	cbz	r0, 80074aa <_Balloc+0x32>
 8007488:	6801      	ldr	r1, [r0, #0]
 800748a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800748e:	2200      	movs	r2, #0
 8007490:	6102      	str	r2, [r0, #16]
 8007492:	60c2      	str	r2, [r0, #12]
 8007494:	bd70      	pop	{r4, r5, r6, pc}
 8007496:	2221      	movs	r2, #33	; 0x21
 8007498:	2104      	movs	r1, #4
 800749a:	f000 fbe1 	bl	8007c60 <_calloc_r>
 800749e:	64e8      	str	r0, [r5, #76]	; 0x4c
 80074a0:	4602      	mov	r2, r0
 80074a2:	2800      	cmp	r0, #0
 80074a4:	d1ed      	bne.n	8007482 <_Balloc+0xa>
 80074a6:	2000      	movs	r0, #0
 80074a8:	bd70      	pop	{r4, r5, r6, pc}
 80074aa:	2101      	movs	r1, #1
 80074ac:	fa01 f604 	lsl.w	r6, r1, r4
 80074b0:	1d72      	adds	r2, r6, #5
 80074b2:	4628      	mov	r0, r5
 80074b4:	0092      	lsls	r2, r2, #2
 80074b6:	f000 fbd3 	bl	8007c60 <_calloc_r>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d0f3      	beq.n	80074a6 <_Balloc+0x2e>
 80074be:	6044      	str	r4, [r0, #4]
 80074c0:	6086      	str	r6, [r0, #8]
 80074c2:	e7e4      	b.n	800748e <_Balloc+0x16>

080074c4 <_Bfree>:
_Bfree():
 80074c4:	b131      	cbz	r1, 80074d4 <_Bfree+0x10>
 80074c6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80074c8:	684a      	ldr	r2, [r1, #4]
 80074ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80074ce:	6008      	str	r0, [r1, #0]
 80074d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop

080074d8 <__multadd>:
__multadd():
 80074d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074dc:	f8d1 8010 	ldr.w	r8, [r1, #16]
 80074e0:	b082      	sub	sp, #8
 80074e2:	4689      	mov	r9, r1
 80074e4:	4682      	mov	sl, r0
 80074e6:	f101 0514 	add.w	r5, r1, #20
 80074ea:	2400      	movs	r4, #0
 80074ec:	682f      	ldr	r7, [r5, #0]
 80074ee:	b2be      	uxth	r6, r7
 80074f0:	0c3f      	lsrs	r7, r7, #16
 80074f2:	fb02 3606 	mla	r6, r2, r6, r3
 80074f6:	fb02 f307 	mul.w	r3, r2, r7
 80074fa:	eb03 4316 	add.w	r3, r3, r6, lsr #16
 80074fe:	3401      	adds	r4, #1
 8007500:	b2b6      	uxth	r6, r6
 8007502:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 8007506:	45a0      	cmp	r8, r4
 8007508:	f845 6b04 	str.w	r6, [r5], #4
 800750c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8007510:	dcec      	bgt.n	80074ec <__multadd+0x14>
 8007512:	b153      	cbz	r3, 800752a <__multadd+0x52>
 8007514:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8007518:	4590      	cmp	r8, r2
 800751a:	da0a      	bge.n	8007532 <__multadd+0x5a>
 800751c:	eb09 0188 	add.w	r1, r9, r8, lsl #2
 8007520:	f108 0201 	add.w	r2, r8, #1
 8007524:	614b      	str	r3, [r1, #20]
 8007526:	f8c9 2010 	str.w	r2, [r9, #16]
 800752a:	4648      	mov	r0, r9
 800752c:	b002      	add	sp, #8
 800752e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007532:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007536:	9301      	str	r3, [sp, #4]
 8007538:	3101      	adds	r1, #1
 800753a:	4650      	mov	r0, sl
 800753c:	f7ff ff9c 	bl	8007478 <_Balloc>
 8007540:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8007544:	3202      	adds	r2, #2
 8007546:	f109 010c 	add.w	r1, r9, #12
 800754a:	4604      	mov	r4, r0
 800754c:	0092      	lsls	r2, r2, #2
 800754e:	300c      	adds	r0, #12
 8007550:	f7fd f96a 	bl	8004828 <memcpy>
 8007554:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
 8007558:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800755c:	9b01      	ldr	r3, [sp, #4]
 800755e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8007562:	f8c9 0000 	str.w	r0, [r9]
 8007566:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
 800756a:	46a1      	mov	r9, r4
 800756c:	e7d6      	b.n	800751c <__multadd+0x44>
 800756e:	bf00      	nop

08007570 <__hi0bits>:
__hi0bits():
 8007570:	0c03      	lsrs	r3, r0, #16
 8007572:	041b      	lsls	r3, r3, #16
 8007574:	b9b3      	cbnz	r3, 80075a4 <__hi0bits+0x34>
 8007576:	0400      	lsls	r0, r0, #16
 8007578:	2310      	movs	r3, #16
 800757a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800757e:	bf04      	itt	eq
 8007580:	0200      	lsleq	r0, r0, #8
 8007582:	3308      	addeq	r3, #8
 8007584:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007588:	bf04      	itt	eq
 800758a:	0100      	lsleq	r0, r0, #4
 800758c:	3304      	addeq	r3, #4
 800758e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007592:	bf04      	itt	eq
 8007594:	0080      	lsleq	r0, r0, #2
 8007596:	3302      	addeq	r3, #2
 8007598:	2800      	cmp	r0, #0
 800759a:	db07      	blt.n	80075ac <__hi0bits+0x3c>
 800759c:	0042      	lsls	r2, r0, #1
 800759e:	d403      	bmi.n	80075a8 <__hi0bits+0x38>
 80075a0:	2020      	movs	r0, #32
 80075a2:	4770      	bx	lr
 80075a4:	2300      	movs	r3, #0
 80075a6:	e7e8      	b.n	800757a <__hi0bits+0xa>
 80075a8:	1c58      	adds	r0, r3, #1
 80075aa:	4770      	bx	lr
 80075ac:	4618      	mov	r0, r3
 80075ae:	4770      	bx	lr

080075b0 <__lo0bits>:
__lo0bits():
 80075b0:	6803      	ldr	r3, [r0, #0]
 80075b2:	f013 0207 	ands.w	r2, r3, #7
 80075b6:	d007      	beq.n	80075c8 <__lo0bits+0x18>
 80075b8:	07d9      	lsls	r1, r3, #31
 80075ba:	d420      	bmi.n	80075fe <__lo0bits+0x4e>
 80075bc:	079a      	lsls	r2, r3, #30
 80075be:	d420      	bmi.n	8007602 <__lo0bits+0x52>
 80075c0:	089b      	lsrs	r3, r3, #2
 80075c2:	6003      	str	r3, [r0, #0]
 80075c4:	2002      	movs	r0, #2
 80075c6:	4770      	bx	lr
 80075c8:	b299      	uxth	r1, r3
 80075ca:	b909      	cbnz	r1, 80075d0 <__lo0bits+0x20>
 80075cc:	0c1b      	lsrs	r3, r3, #16
 80075ce:	2210      	movs	r2, #16
 80075d0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80075d4:	bf04      	itt	eq
 80075d6:	0a1b      	lsreq	r3, r3, #8
 80075d8:	3208      	addeq	r2, #8
 80075da:	0719      	lsls	r1, r3, #28
 80075dc:	bf04      	itt	eq
 80075de:	091b      	lsreq	r3, r3, #4
 80075e0:	3204      	addeq	r2, #4
 80075e2:	0799      	lsls	r1, r3, #30
 80075e4:	bf04      	itt	eq
 80075e6:	089b      	lsreq	r3, r3, #2
 80075e8:	3202      	addeq	r2, #2
 80075ea:	07d9      	lsls	r1, r3, #31
 80075ec:	d404      	bmi.n	80075f8 <__lo0bits+0x48>
 80075ee:	085b      	lsrs	r3, r3, #1
 80075f0:	d101      	bne.n	80075f6 <__lo0bits+0x46>
 80075f2:	2020      	movs	r0, #32
 80075f4:	4770      	bx	lr
 80075f6:	3201      	adds	r2, #1
 80075f8:	6003      	str	r3, [r0, #0]
 80075fa:	4610      	mov	r0, r2
 80075fc:	4770      	bx	lr
 80075fe:	2000      	movs	r0, #0
 8007600:	4770      	bx	lr
 8007602:	085b      	lsrs	r3, r3, #1
 8007604:	6003      	str	r3, [r0, #0]
 8007606:	2001      	movs	r0, #1
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop

0800760c <__i2b>:
__i2b():
 800760c:	b510      	push	{r4, lr}
 800760e:	460c      	mov	r4, r1
 8007610:	2101      	movs	r1, #1
 8007612:	f7ff ff31 	bl	8007478 <_Balloc>
 8007616:	2201      	movs	r2, #1
 8007618:	6144      	str	r4, [r0, #20]
 800761a:	6102      	str	r2, [r0, #16]
 800761c:	bd10      	pop	{r4, pc}
 800761e:	bf00      	nop

08007620 <__multiply>:
__multiply():
 8007620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007624:	690d      	ldr	r5, [r1, #16]
 8007626:	f8d2 9010 	ldr.w	r9, [r2, #16]
 800762a:	454d      	cmp	r5, r9
 800762c:	b085      	sub	sp, #20
 800762e:	460c      	mov	r4, r1
 8007630:	4692      	mov	sl, r2
 8007632:	da04      	bge.n	800763e <__multiply+0x1e>
 8007634:	462a      	mov	r2, r5
 8007636:	4654      	mov	r4, sl
 8007638:	464d      	mov	r5, r9
 800763a:	468a      	mov	sl, r1
 800763c:	4691      	mov	r9, r2
 800763e:	68a3      	ldr	r3, [r4, #8]
 8007640:	6861      	ldr	r1, [r4, #4]
 8007642:	eb05 0709 	add.w	r7, r5, r9
 8007646:	429f      	cmp	r7, r3
 8007648:	bfc8      	it	gt
 800764a:	3101      	addgt	r1, #1
 800764c:	f7ff ff14 	bl	8007478 <_Balloc>
 8007650:	f100 0614 	add.w	r6, r0, #20
 8007654:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007658:	4546      	cmp	r6, r8
 800765a:	9001      	str	r0, [sp, #4]
 800765c:	d205      	bcs.n	800766a <__multiply+0x4a>
 800765e:	4633      	mov	r3, r6
 8007660:	2000      	movs	r0, #0
 8007662:	f843 0b04 	str.w	r0, [r3], #4
 8007666:	4598      	cmp	r8, r3
 8007668:	d8fb      	bhi.n	8007662 <__multiply+0x42>
 800766a:	f10a 0c14 	add.w	ip, sl, #20
 800766e:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
 8007672:	3414      	adds	r4, #20
 8007674:	45cc      	cmp	ip, r9
 8007676:	9400      	str	r4, [sp, #0]
 8007678:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800767c:	d25b      	bcs.n	8007736 <__multiply+0x116>
 800767e:	f8cd 8008 	str.w	r8, [sp, #8]
 8007682:	9703      	str	r7, [sp, #12]
 8007684:	46c8      	mov	r8, r9
 8007686:	f85c 3b04 	ldr.w	r3, [ip], #4
 800768a:	b29c      	uxth	r4, r3
 800768c:	b324      	cbz	r4, 80076d8 <__multiply+0xb8>
 800768e:	9a00      	ldr	r2, [sp, #0]
 8007690:	4633      	mov	r3, r6
 8007692:	f04f 0900 	mov.w	r9, #0
 8007696:	e000      	b.n	800769a <__multiply+0x7a>
 8007698:	460b      	mov	r3, r1
 800769a:	f852 7b04 	ldr.w	r7, [r2], #4
 800769e:	6819      	ldr	r1, [r3, #0]
 80076a0:	fa1f fb87 	uxth.w	fp, r7
 80076a4:	fa1f fa81 	uxth.w	sl, r1
 80076a8:	0c38      	lsrs	r0, r7, #16
 80076aa:	0c09      	lsrs	r1, r1, #16
 80076ac:	fb04 a70b 	mla	r7, r4, fp, sl
 80076b0:	44b9      	add	r9, r7
 80076b2:	fb04 1000 	mla	r0, r4, r0, r1
 80076b6:	eb00 4019 	add.w	r0, r0, r9, lsr #16
 80076ba:	4619      	mov	r1, r3
 80076bc:	fa1f f989 	uxth.w	r9, r9
 80076c0:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
 80076c4:	4295      	cmp	r5, r2
 80076c6:	ea4f 4910 	mov.w	r9, r0, lsr #16
 80076ca:	f841 7b04 	str.w	r7, [r1], #4
 80076ce:	d8e3      	bhi.n	8007698 <__multiply+0x78>
 80076d0:	f8c3 9004 	str.w	r9, [r3, #4]
 80076d4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80076d8:	ea5f 4913 	movs.w	r9, r3, lsr #16
 80076dc:	d024      	beq.n	8007728 <__multiply+0x108>
 80076de:	f8d6 a000 	ldr.w	sl, [r6]
 80076e2:	9b00      	ldr	r3, [sp, #0]
 80076e4:	4650      	mov	r0, sl
 80076e6:	4631      	mov	r1, r6
 80076e8:	f04f 0b00 	mov.w	fp, #0
 80076ec:	e000      	b.n	80076f0 <__multiply+0xd0>
 80076ee:	4611      	mov	r1, r2
 80076f0:	881a      	ldrh	r2, [r3, #0]
 80076f2:	0c00      	lsrs	r0, r0, #16
 80076f4:	fb09 0002 	mla	r0, r9, r2, r0
 80076f8:	4483      	add	fp, r0
 80076fa:	fa1f fa8a 	uxth.w	sl, sl
 80076fe:	460a      	mov	r2, r1
 8007700:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
 8007704:	f842 0b04 	str.w	r0, [r2], #4
 8007708:	f853 7b04 	ldr.w	r7, [r3], #4
 800770c:	6848      	ldr	r0, [r1, #4]
 800770e:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8007712:	b284      	uxth	r4, r0
 8007714:	fb09 4a0a 	mla	sl, r9, sl, r4
 8007718:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
 800771c:	429d      	cmp	r5, r3
 800771e:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
 8007722:	d8e4      	bhi.n	80076ee <__multiply+0xce>
 8007724:	f8c1 a004 	str.w	sl, [r1, #4]
 8007728:	45e0      	cmp	r8, ip
 800772a:	f106 0604 	add.w	r6, r6, #4
 800772e:	d8aa      	bhi.n	8007686 <__multiply+0x66>
 8007730:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007734:	9f03      	ldr	r7, [sp, #12]
 8007736:	2f00      	cmp	r7, #0
 8007738:	dd0a      	ble.n	8007750 <__multiply+0x130>
 800773a:	f858 3c04 	ldr.w	r3, [r8, #-4]
 800773e:	f1a8 0804 	sub.w	r8, r8, #4
 8007742:	b11b      	cbz	r3, 800774c <__multiply+0x12c>
 8007744:	e004      	b.n	8007750 <__multiply+0x130>
 8007746:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800774a:	b90b      	cbnz	r3, 8007750 <__multiply+0x130>
 800774c:	3f01      	subs	r7, #1
 800774e:	d1fa      	bne.n	8007746 <__multiply+0x126>
 8007750:	9b01      	ldr	r3, [sp, #4]
 8007752:	4618      	mov	r0, r3
 8007754:	611f      	str	r7, [r3, #16]
 8007756:	b005      	add	sp, #20
 8007758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800775c <__pow5mult>:
__pow5mult():
 800775c:	f012 0303 	ands.w	r3, r2, #3
 8007760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007764:	4614      	mov	r4, r2
 8007766:	4607      	mov	r7, r0
 8007768:	460e      	mov	r6, r1
 800776a:	d12c      	bne.n	80077c6 <__pow5mult+0x6a>
 800776c:	10a4      	asrs	r4, r4, #2
 800776e:	d01c      	beq.n	80077aa <__pow5mult+0x4e>
 8007770:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8007772:	2d00      	cmp	r5, #0
 8007774:	d030      	beq.n	80077d8 <__pow5mult+0x7c>
 8007776:	f04f 0800 	mov.w	r8, #0
 800777a:	e004      	b.n	8007786 <__pow5mult+0x2a>
 800777c:	1064      	asrs	r4, r4, #1
 800777e:	d014      	beq.n	80077aa <__pow5mult+0x4e>
 8007780:	6828      	ldr	r0, [r5, #0]
 8007782:	b1a8      	cbz	r0, 80077b0 <__pow5mult+0x54>
 8007784:	4605      	mov	r5, r0
 8007786:	07e3      	lsls	r3, r4, #31
 8007788:	d5f8      	bpl.n	800777c <__pow5mult+0x20>
 800778a:	4638      	mov	r0, r7
 800778c:	4631      	mov	r1, r6
 800778e:	462a      	mov	r2, r5
 8007790:	f7ff ff46 	bl	8007620 <__multiply>
 8007794:	b1ae      	cbz	r6, 80077c2 <__pow5mult+0x66>
 8007796:	6872      	ldr	r2, [r6, #4]
 8007798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800779a:	1064      	asrs	r4, r4, #1
 800779c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077a0:	6031      	str	r1, [r6, #0]
 80077a2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80077a6:	4606      	mov	r6, r0
 80077a8:	d1ea      	bne.n	8007780 <__pow5mult+0x24>
 80077aa:	4630      	mov	r0, r6
 80077ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077b0:	4638      	mov	r0, r7
 80077b2:	4629      	mov	r1, r5
 80077b4:	462a      	mov	r2, r5
 80077b6:	f7ff ff33 	bl	8007620 <__multiply>
 80077ba:	6028      	str	r0, [r5, #0]
 80077bc:	f8c0 8000 	str.w	r8, [r0]
 80077c0:	e7e0      	b.n	8007784 <__pow5mult+0x28>
 80077c2:	4606      	mov	r6, r0
 80077c4:	e7da      	b.n	800777c <__pow5mult+0x20>
 80077c6:	1e5d      	subs	r5, r3, #1
 80077c8:	4a0a      	ldr	r2, [pc, #40]	; (80077f4 <__pow5mult+0x98>)
 80077ca:	2300      	movs	r3, #0
 80077cc:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80077d0:	f7ff fe82 	bl	80074d8 <__multadd>
 80077d4:	4606      	mov	r6, r0
 80077d6:	e7c9      	b.n	800776c <__pow5mult+0x10>
 80077d8:	2101      	movs	r1, #1
 80077da:	4638      	mov	r0, r7
 80077dc:	f7ff fe4c 	bl	8007478 <_Balloc>
 80077e0:	f240 2171 	movw	r1, #625	; 0x271
 80077e4:	2201      	movs	r2, #1
 80077e6:	2300      	movs	r3, #0
 80077e8:	6141      	str	r1, [r0, #20]
 80077ea:	6102      	str	r2, [r0, #16]
 80077ec:	4605      	mov	r5, r0
 80077ee:	64b8      	str	r0, [r7, #72]	; 0x48
 80077f0:	6003      	str	r3, [r0, #0]
 80077f2:	e7c0      	b.n	8007776 <__pow5mult+0x1a>
 80077f4:	08009588 	.word	0x08009588

080077f8 <__lshift>:
__lshift():
 80077f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	4693      	mov	fp, r2
 80077fe:	690a      	ldr	r2, [r1, #16]
 8007800:	688b      	ldr	r3, [r1, #8]
 8007802:	ea4f 1a6b 	mov.w	sl, fp, asr #5
 8007806:	eb0a 0902 	add.w	r9, sl, r2
 800780a:	f109 0601 	add.w	r6, r9, #1
 800780e:	429e      	cmp	r6, r3
 8007810:	460f      	mov	r7, r1
 8007812:	4680      	mov	r8, r0
 8007814:	6849      	ldr	r1, [r1, #4]
 8007816:	dd04      	ble.n	8007822 <__lshift+0x2a>
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	429e      	cmp	r6, r3
 800781c:	f101 0101 	add.w	r1, r1, #1
 8007820:	dcfa      	bgt.n	8007818 <__lshift+0x20>
 8007822:	4640      	mov	r0, r8
 8007824:	f7ff fe28 	bl	8007478 <_Balloc>
 8007828:	f1ba 0f00 	cmp.w	sl, #0
 800782c:	f100 0414 	add.w	r4, r0, #20
 8007830:	dd09      	ble.n	8007846 <__lshift+0x4e>
 8007832:	2300      	movs	r3, #0
 8007834:	461a      	mov	r2, r3
 8007836:	4625      	mov	r5, r4
 8007838:	3301      	adds	r3, #1
 800783a:	4553      	cmp	r3, sl
 800783c:	f845 2b04 	str.w	r2, [r5], #4
 8007840:	d1fa      	bne.n	8007838 <__lshift+0x40>
 8007842:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	f107 0314 	add.w	r3, r7, #20
 800784c:	f01b 0b1f 	ands.w	fp, fp, #31
 8007850:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 8007854:	d021      	beq.n	800789a <__lshift+0xa2>
 8007856:	f1cb 0a20 	rsb	sl, fp, #32
 800785a:	2200      	movs	r2, #0
 800785c:	e000      	b.n	8007860 <__lshift+0x68>
 800785e:	462c      	mov	r4, r5
 8007860:	6819      	ldr	r1, [r3, #0]
 8007862:	4625      	mov	r5, r4
 8007864:	fa01 f10b 	lsl.w	r1, r1, fp
 8007868:	430a      	orrs	r2, r1
 800786a:	f845 2b04 	str.w	r2, [r5], #4
 800786e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007872:	4563      	cmp	r3, ip
 8007874:	fa22 f20a 	lsr.w	r2, r2, sl
 8007878:	d3f1      	bcc.n	800785e <__lshift+0x66>
 800787a:	6062      	str	r2, [r4, #4]
 800787c:	b10a      	cbz	r2, 8007882 <__lshift+0x8a>
 800787e:	f109 0602 	add.w	r6, r9, #2
 8007882:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	3e01      	subs	r6, #1
 800788a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800788e:	6106      	str	r6, [r0, #16]
 8007890:	6039      	str	r1, [r7, #0]
 8007892:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 8007896:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800789a:	f853 2b04 	ldr.w	r2, [r3], #4
 800789e:	f844 2b04 	str.w	r2, [r4], #4
 80078a2:	459c      	cmp	ip, r3
 80078a4:	d9ed      	bls.n	8007882 <__lshift+0x8a>
 80078a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80078aa:	f844 2b04 	str.w	r2, [r4], #4
 80078ae:	459c      	cmp	ip, r3
 80078b0:	d8f3      	bhi.n	800789a <__lshift+0xa2>
 80078b2:	e7e6      	b.n	8007882 <__lshift+0x8a>

080078b4 <__mcmp>:
__mcmp():
 80078b4:	6902      	ldr	r2, [r0, #16]
 80078b6:	690b      	ldr	r3, [r1, #16]
 80078b8:	1ad2      	subs	r2, r2, r3
 80078ba:	b410      	push	{r4}
 80078bc:	d115      	bne.n	80078ea <__mcmp+0x36>
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	3014      	adds	r0, #20
 80078c2:	3114      	adds	r1, #20
 80078c4:	4419      	add	r1, r3
 80078c6:	4403      	add	r3, r0
 80078c8:	e001      	b.n	80078ce <__mcmp+0x1a>
 80078ca:	4298      	cmp	r0, r3
 80078cc:	d211      	bcs.n	80078f2 <__mcmp+0x3e>
 80078ce:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80078d2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80078d6:	42a2      	cmp	r2, r4
 80078d8:	d0f7      	beq.n	80078ca <__mcmp+0x16>
 80078da:	4294      	cmp	r4, r2
 80078dc:	bf94      	ite	ls
 80078de:	2001      	movls	r0, #1
 80078e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80078e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	4610      	mov	r0, r2
 80078ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	2000      	movs	r0, #0
 80078f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop

080078fc <__mdiff>:
__mdiff():
 80078fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007900:	460d      	mov	r5, r1
 8007902:	4604      	mov	r4, r0
 8007904:	4611      	mov	r1, r2
 8007906:	4628      	mov	r0, r5
 8007908:	4616      	mov	r6, r2
 800790a:	f7ff ffd3 	bl	80078b4 <__mcmp>
 800790e:	1e07      	subs	r7, r0, #0
 8007910:	d055      	beq.n	80079be <__mdiff+0xc2>
 8007912:	db4e      	blt.n	80079b2 <__mdiff+0xb6>
 8007914:	f04f 0800 	mov.w	r8, #0
 8007918:	6869      	ldr	r1, [r5, #4]
 800791a:	4620      	mov	r0, r4
 800791c:	f7ff fdac 	bl	8007478 <_Balloc>
 8007920:	692f      	ldr	r7, [r5, #16]
 8007922:	6932      	ldr	r2, [r6, #16]
 8007924:	f8c0 800c 	str.w	r8, [r0, #12]
 8007928:	3514      	adds	r5, #20
 800792a:	3614      	adds	r6, #20
 800792c:	f100 0314 	add.w	r3, r0, #20
 8007930:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007934:	eb06 0882 	add.w	r8, r6, r2, lsl #2
 8007938:	2100      	movs	r1, #0
 800793a:	f856 2b04 	ldr.w	r2, [r6], #4
 800793e:	f855 4b04 	ldr.w	r4, [r5], #4
 8007942:	fa1f f982 	uxth.w	r9, r2
 8007946:	fa11 fa84 	uxtah	sl, r1, r4
 800794a:	0c11      	lsrs	r1, r2, #16
 800794c:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
 8007950:	ebc9 020a 	rsb	r2, r9, sl
 8007954:	eb01 4122 	add.w	r1, r1, r2, asr #16
 8007958:	b292      	uxth	r2, r2
 800795a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800795e:	45b0      	cmp	r8, r6
 8007960:	f843 2b04 	str.w	r2, [r3], #4
 8007964:	ea4f 4121 	mov.w	r1, r1, asr #16
 8007968:	462c      	mov	r4, r5
 800796a:	d8e6      	bhi.n	800793a <__mdiff+0x3e>
 800796c:	45ac      	cmp	ip, r5
 800796e:	4698      	mov	r8, r3
 8007970:	d915      	bls.n	800799e <__mdiff+0xa2>
 8007972:	f854 6b04 	ldr.w	r6, [r4], #4
 8007976:	fa11 f186 	uxtah	r1, r1, r6
 800797a:	0c36      	lsrs	r6, r6, #16
 800797c:	eb06 4621 	add.w	r6, r6, r1, asr #16
 8007980:	b289      	uxth	r1, r1
 8007982:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
 8007986:	45a4      	cmp	ip, r4
 8007988:	f843 2b04 	str.w	r2, [r3], #4
 800798c:	ea4f 4126 	mov.w	r1, r6, asr #16
 8007990:	d8ef      	bhi.n	8007972 <__mdiff+0x76>
 8007992:	43eb      	mvns	r3, r5
 8007994:	4463      	add	r3, ip
 8007996:	f023 0303 	bic.w	r3, r3, #3
 800799a:	3304      	adds	r3, #4
 800799c:	4443      	add	r3, r8
 800799e:	3b04      	subs	r3, #4
 80079a0:	b922      	cbnz	r2, 80079ac <__mdiff+0xb0>
 80079a2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80079a6:	3f01      	subs	r7, #1
 80079a8:	2a00      	cmp	r2, #0
 80079aa:	d0fa      	beq.n	80079a2 <__mdiff+0xa6>
 80079ac:	6107      	str	r7, [r0, #16]
 80079ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b2:	462b      	mov	r3, r5
 80079b4:	f04f 0801 	mov.w	r8, #1
 80079b8:	4635      	mov	r5, r6
 80079ba:	461e      	mov	r6, r3
 80079bc:	e7ac      	b.n	8007918 <__mdiff+0x1c>
 80079be:	4620      	mov	r0, r4
 80079c0:	4639      	mov	r1, r7
 80079c2:	f7ff fd59 	bl	8007478 <_Balloc>
 80079c6:	2301      	movs	r3, #1
 80079c8:	6147      	str	r7, [r0, #20]
 80079ca:	6103      	str	r3, [r0, #16]
 80079cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080079d0 <__d2b>:
__d2b():
 80079d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079d4:	b083      	sub	sp, #12
 80079d6:	2101      	movs	r1, #1
 80079d8:	461d      	mov	r5, r3
 80079da:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80079de:	4614      	mov	r4, r2
 80079e0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80079e2:	f7ff fd49 	bl	8007478 <_Balloc>
 80079e6:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80079ea:	4680      	mov	r8, r0
 80079ec:	b10e      	cbz	r6, 80079f2 <__d2b+0x22>
 80079ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079f2:	9301      	str	r3, [sp, #4]
 80079f4:	b324      	cbz	r4, 8007a40 <__d2b+0x70>
 80079f6:	a802      	add	r0, sp, #8
 80079f8:	f840 4d08 	str.w	r4, [r0, #-8]!
 80079fc:	4668      	mov	r0, sp
 80079fe:	f7ff fdd7 	bl	80075b0 <__lo0bits>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	d135      	bne.n	8007a72 <__d2b+0xa2>
 8007a06:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8007a0a:	f8c8 2014 	str.w	r2, [r8, #20]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	bf0c      	ite	eq
 8007a12:	2401      	moveq	r4, #1
 8007a14:	2402      	movne	r4, #2
 8007a16:	f8c8 3018 	str.w	r3, [r8, #24]
 8007a1a:	f8c8 4010 	str.w	r4, [r8, #16]
 8007a1e:	b9de      	cbnz	r6, 8007a58 <__d2b+0x88>
 8007a20:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8007a24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a28:	6038      	str	r0, [r7, #0]
 8007a2a:	6918      	ldr	r0, [r3, #16]
 8007a2c:	f7ff fda0 	bl	8007570 <__hi0bits>
 8007a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a32:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8007a36:	6018      	str	r0, [r3, #0]
 8007a38:	4640      	mov	r0, r8
 8007a3a:	b003      	add	sp, #12
 8007a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a40:	a801      	add	r0, sp, #4
 8007a42:	f7ff fdb5 	bl	80075b0 <__lo0bits>
 8007a46:	2401      	movs	r4, #1
 8007a48:	9b01      	ldr	r3, [sp, #4]
 8007a4a:	f8c8 3014 	str.w	r3, [r8, #20]
 8007a4e:	3020      	adds	r0, #32
 8007a50:	f8c8 4010 	str.w	r4, [r8, #16]
 8007a54:	2e00      	cmp	r6, #0
 8007a56:	d0e3      	beq.n	8007a20 <__d2b+0x50>
 8007a58:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
 8007a5c:	eb09 0300 	add.w	r3, r9, r0
 8007a60:	603b      	str	r3, [r7, #0]
 8007a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a68:	6018      	str	r0, [r3, #0]
 8007a6a:	4640      	mov	r0, r8
 8007a6c:	b003      	add	sp, #12
 8007a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a72:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8007a76:	f1c0 0120 	rsb	r1, r0, #32
 8007a7a:	fa03 f101 	lsl.w	r1, r3, r1
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	40c3      	lsrs	r3, r0
 8007a82:	9301      	str	r3, [sp, #4]
 8007a84:	f8c8 2014 	str.w	r2, [r8, #20]
 8007a88:	e7c1      	b.n	8007a0e <__d2b+0x3e>
 8007a8a:	bf00      	nop

08007a8c <__fpclassifyd>:
__fpclassifyd():
 8007a8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8007a90:	b410      	push	{r4}
 8007a92:	d008      	beq.n	8007aa6 <__fpclassifyd+0x1a>
 8007a94:	4a0f      	ldr	r2, [pc, #60]	; (8007ad4 <__fpclassifyd+0x48>)
 8007a96:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
 8007a9a:	4294      	cmp	r4, r2
 8007a9c:	d80a      	bhi.n	8007ab4 <__fpclassifyd+0x28>
 8007a9e:	2004      	movs	r0, #4
 8007aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	bf0c      	ite	eq
 8007aaa:	2002      	moveq	r0, #2
 8007aac:	2003      	movne	r0, #3
 8007aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ab8:	d201      	bcs.n	8007abe <__fpclassifyd+0x32>
 8007aba:	2003      	movs	r0, #3
 8007abc:	e7f7      	b.n	8007aae <__fpclassifyd+0x22>
 8007abe:	4a06      	ldr	r2, [pc, #24]	; (8007ad8 <__fpclassifyd+0x4c>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d001      	beq.n	8007ac8 <__fpclassifyd+0x3c>
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	e7f2      	b.n	8007aae <__fpclassifyd+0x22>
 8007ac8:	f1d0 0001 	rsbs	r0, r0, #1
 8007acc:	bf38      	it	cc
 8007ace:	2000      	movcc	r0, #0
 8007ad0:	e7ed      	b.n	8007aae <__fpclassifyd+0x22>
 8007ad2:	bf00      	nop
 8007ad4:	7fdfffff 	.word	0x7fdfffff
 8007ad8:	7ff00000 	.word	0x7ff00000

08007adc <_sbrk_r>:
_sbrk_r():
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4c07      	ldr	r4, [pc, #28]	; (8007afc <_sbrk_r+0x20>)
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	6023      	str	r3, [r4, #0]
 8007ae8:	f7f9 fcfa 	bl	80014e0 <_sbrk>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d000      	beq.n	8007af2 <_sbrk_r+0x16>
 8007af0:	bd38      	pop	{r3, r4, r5, pc}
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d0fb      	beq.n	8007af0 <_sbrk_r+0x14>
 8007af8:	602b      	str	r3, [r5, #0]
 8007afa:	bd38      	pop	{r3, r4, r5, pc}
 8007afc:	200058b8 	.word	0x200058b8

08007b00 <strlen>:
strlen():
 8007b00:	f020 0103 	bic.w	r1, r0, #3
 8007b04:	f010 0003 	ands.w	r0, r0, #3
 8007b08:	f1c0 0000 	rsb	r0, r0, #0
 8007b0c:	f851 3b04 	ldr.w	r3, [r1], #4
 8007b10:	f100 0c04 	add.w	ip, r0, #4
 8007b14:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8007b18:	f06f 0200 	mvn.w	r2, #0
 8007b1c:	bf1c      	itt	ne
 8007b1e:	fa22 f20c 	lsrne.w	r2, r2, ip
 8007b22:	4313      	orrne	r3, r2
 8007b24:	f04f 0c01 	mov.w	ip, #1
 8007b28:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8007b2c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8007b30:	eba3 020c 	sub.w	r2, r3, ip
 8007b34:	ea22 0203 	bic.w	r2, r2, r3
 8007b38:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8007b3c:	bf04      	itt	eq
 8007b3e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007b42:	3004      	addeq	r0, #4
 8007b44:	d0f4      	beq.n	8007b30 <strlen+0x30>
 8007b46:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b4a:	bf1f      	itttt	ne
 8007b4c:	3001      	addne	r0, #1
 8007b4e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8007b52:	3001      	addne	r0, #1
 8007b54:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8007b58:	bf18      	it	ne
 8007b5a:	3001      	addne	r0, #1
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop

08007b60 <__ssprint_r>:
__ssprint_r():
 8007b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b64:	6894      	ldr	r4, [r2, #8]
 8007b66:	6816      	ldr	r6, [r2, #0]
 8007b68:	b083      	sub	sp, #12
 8007b6a:	4692      	mov	sl, r2
 8007b6c:	4680      	mov	r8, r0
 8007b6e:	460d      	mov	r5, r1
 8007b70:	2c00      	cmp	r4, #0
 8007b72:	d06f      	beq.n	8007c54 <__ssprint_r+0xf4>
 8007b74:	f04f 0b00 	mov.w	fp, #0
 8007b78:	6808      	ldr	r0, [r1, #0]
 8007b7a:	688b      	ldr	r3, [r1, #8]
 8007b7c:	465c      	mov	r4, fp
 8007b7e:	2c00      	cmp	r4, #0
 8007b80:	d043      	beq.n	8007c0a <__ssprint_r+0xaa>
 8007b82:	429c      	cmp	r4, r3
 8007b84:	461f      	mov	r7, r3
 8007b86:	d345      	bcc.n	8007c14 <__ssprint_r+0xb4>
 8007b88:	89ab      	ldrh	r3, [r5, #12]
 8007b8a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8007b8e:	d044      	beq.n	8007c1a <__ssprint_r+0xba>
 8007b90:	696f      	ldr	r7, [r5, #20]
 8007b92:	6929      	ldr	r1, [r5, #16]
 8007b94:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8007b98:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8007b9c:	ebc1 0900 	rsb	r9, r1, r0
 8007ba0:	1c62      	adds	r2, r4, #1
 8007ba2:	107f      	asrs	r7, r7, #1
 8007ba4:	444a      	add	r2, r9
 8007ba6:	4297      	cmp	r7, r2
 8007ba8:	bf34      	ite	cc
 8007baa:	4617      	movcc	r7, r2
 8007bac:	463a      	movcs	r2, r7
 8007bae:	055b      	lsls	r3, r3, #21
 8007bb0:	d535      	bpl.n	8007c1e <__ssprint_r+0xbe>
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	4640      	mov	r0, r8
 8007bb6:	f7ff f977 	bl	8006ea8 <_malloc_r>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d039      	beq.n	8007c32 <__ssprint_r+0xd2>
 8007bbe:	6929      	ldr	r1, [r5, #16]
 8007bc0:	9001      	str	r0, [sp, #4]
 8007bc2:	464a      	mov	r2, r9
 8007bc4:	f7fc fe30 	bl	8004828 <memcpy>
 8007bc8:	89aa      	ldrh	r2, [r5, #12]
 8007bca:	9b01      	ldr	r3, [sp, #4]
 8007bcc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007bd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007bd4:	81aa      	strh	r2, [r5, #12]
 8007bd6:	ebc9 0207 	rsb	r2, r9, r7
 8007bda:	eb03 0009 	add.w	r0, r3, r9
 8007bde:	616f      	str	r7, [r5, #20]
 8007be0:	612b      	str	r3, [r5, #16]
 8007be2:	6028      	str	r0, [r5, #0]
 8007be4:	60aa      	str	r2, [r5, #8]
 8007be6:	4627      	mov	r7, r4
 8007be8:	46a1      	mov	r9, r4
 8007bea:	464a      	mov	r2, r9
 8007bec:	4659      	mov	r1, fp
 8007bee:	f000 f983 	bl	8007ef8 <memmove>
 8007bf2:	f8da 2008 	ldr.w	r2, [sl, #8]
 8007bf6:	68ab      	ldr	r3, [r5, #8]
 8007bf8:	6828      	ldr	r0, [r5, #0]
 8007bfa:	1bdb      	subs	r3, r3, r7
 8007bfc:	4448      	add	r0, r9
 8007bfe:	1b14      	subs	r4, r2, r4
 8007c00:	60ab      	str	r3, [r5, #8]
 8007c02:	6028      	str	r0, [r5, #0]
 8007c04:	f8ca 4008 	str.w	r4, [sl, #8]
 8007c08:	b324      	cbz	r4, 8007c54 <__ssprint_r+0xf4>
 8007c0a:	f8d6 b000 	ldr.w	fp, [r6]
 8007c0e:	6874      	ldr	r4, [r6, #4]
 8007c10:	3608      	adds	r6, #8
 8007c12:	e7b4      	b.n	8007b7e <__ssprint_r+0x1e>
 8007c14:	4627      	mov	r7, r4
 8007c16:	46a1      	mov	r9, r4
 8007c18:	e7e7      	b.n	8007bea <__ssprint_r+0x8a>
 8007c1a:	46b9      	mov	r9, r7
 8007c1c:	e7e5      	b.n	8007bea <__ssprint_r+0x8a>
 8007c1e:	4640      	mov	r0, r8
 8007c20:	f000 f9ca 	bl	8007fb8 <_realloc_r>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2800      	cmp	r0, #0
 8007c28:	d1d5      	bne.n	8007bd6 <__ssprint_r+0x76>
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	6929      	ldr	r1, [r5, #16]
 8007c2e:	f000 f895 	bl	8007d5c <_free_r>
 8007c32:	89aa      	ldrh	r2, [r5, #12]
 8007c34:	230c      	movs	r3, #12
 8007c36:	f8c8 3000 	str.w	r3, [r8]
 8007c3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f04f 30ff 	mov.w	r0, #4294967295
 8007c44:	81aa      	strh	r2, [r5, #12]
 8007c46:	f8ca 3008 	str.w	r3, [sl, #8]
 8007c4a:	f8ca 3004 	str.w	r3, [sl, #4]
 8007c4e:	b003      	add	sp, #12
 8007c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c54:	4620      	mov	r0, r4
 8007c56:	f8ca 4004 	str.w	r4, [sl, #4]
 8007c5a:	b003      	add	sp, #12
 8007c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c60 <_calloc_r>:
_calloc_r():
 8007c60:	b510      	push	{r4, lr}
 8007c62:	fb02 f101 	mul.w	r1, r2, r1
 8007c66:	f7ff f91f 	bl	8006ea8 <_malloc_r>
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	b168      	cbz	r0, 8007c8a <_calloc_r+0x2a>
 8007c6e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007c72:	f022 0203 	bic.w	r2, r2, #3
 8007c76:	3a04      	subs	r2, #4
 8007c78:	2a24      	cmp	r2, #36	; 0x24
 8007c7a:	d818      	bhi.n	8007cae <_calloc_r+0x4e>
 8007c7c:	2a13      	cmp	r2, #19
 8007c7e:	d806      	bhi.n	8007c8e <_calloc_r+0x2e>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	605a      	str	r2, [r3, #4]
 8007c88:	609a      	str	r2, [r3, #8]
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	bd10      	pop	{r4, pc}
 8007c8e:	2300      	movs	r3, #0
 8007c90:	2a1b      	cmp	r2, #27
 8007c92:	6003      	str	r3, [r0, #0]
 8007c94:	6043      	str	r3, [r0, #4]
 8007c96:	d90f      	bls.n	8007cb8 <_calloc_r+0x58>
 8007c98:	2a24      	cmp	r2, #36	; 0x24
 8007c9a:	6083      	str	r3, [r0, #8]
 8007c9c:	60c3      	str	r3, [r0, #12]
 8007c9e:	bf05      	ittet	eq
 8007ca0:	6103      	streq	r3, [r0, #16]
 8007ca2:	6143      	streq	r3, [r0, #20]
 8007ca4:	f100 0310 	addne.w	r3, r0, #16
 8007ca8:	f100 0318 	addeq.w	r3, r0, #24
 8007cac:	e7e9      	b.n	8007c82 <_calloc_r+0x22>
 8007cae:	2100      	movs	r1, #0
 8007cb0:	f7fc fe54 	bl	800495c <memset>
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	bd10      	pop	{r4, pc}
 8007cb8:	f100 0308 	add.w	r3, r0, #8
 8007cbc:	e7e1      	b.n	8007c82 <_calloc_r+0x22>
 8007cbe:	bf00      	nop

08007cc0 <_malloc_trim_r>:
_malloc_trim_r():
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	4d23      	ldr	r5, [pc, #140]	; (8007d50 <_malloc_trim_r+0x90>)
 8007cc4:	460f      	mov	r7, r1
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	f7ff fbd2 	bl	8007470 <__malloc_lock>
 8007ccc:	68ab      	ldr	r3, [r5, #8]
 8007cce:	685e      	ldr	r6, [r3, #4]
 8007cd0:	f026 0603 	bic.w	r6, r6, #3
 8007cd4:	1bf1      	subs	r1, r6, r7
 8007cd6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8007cda:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8007cde:	f021 010f 	bic.w	r1, r1, #15
 8007ce2:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
 8007ce6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8007cea:	db07      	blt.n	8007cfc <_malloc_trim_r+0x3c>
 8007cec:	4620      	mov	r0, r4
 8007cee:	2100      	movs	r1, #0
 8007cf0:	f7ff fef4 	bl	8007adc <_sbrk_r>
 8007cf4:	68ab      	ldr	r3, [r5, #8]
 8007cf6:	4433      	add	r3, r6
 8007cf8:	4298      	cmp	r0, r3
 8007cfa:	d004      	beq.n	8007d06 <_malloc_trim_r+0x46>
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f7ff fbb9 	bl	8007474 <__malloc_unlock>
 8007d02:	2000      	movs	r0, #0
 8007d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d06:	4620      	mov	r0, r4
 8007d08:	4279      	negs	r1, r7
 8007d0a:	f7ff fee7 	bl	8007adc <_sbrk_r>
 8007d0e:	3001      	adds	r0, #1
 8007d10:	d00d      	beq.n	8007d2e <_malloc_trim_r+0x6e>
 8007d12:	4b10      	ldr	r3, [pc, #64]	; (8007d54 <_malloc_trim_r+0x94>)
 8007d14:	68aa      	ldr	r2, [r5, #8]
 8007d16:	6819      	ldr	r1, [r3, #0]
 8007d18:	1bf6      	subs	r6, r6, r7
 8007d1a:	f046 0601 	orr.w	r6, r6, #1
 8007d1e:	4620      	mov	r0, r4
 8007d20:	1bc9      	subs	r1, r1, r7
 8007d22:	6056      	str	r6, [r2, #4]
 8007d24:	6019      	str	r1, [r3, #0]
 8007d26:	f7ff fba5 	bl	8007474 <__malloc_unlock>
 8007d2a:	2001      	movs	r0, #1
 8007d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d2e:	4620      	mov	r0, r4
 8007d30:	2100      	movs	r1, #0
 8007d32:	f7ff fed3 	bl	8007adc <_sbrk_r>
 8007d36:	68ab      	ldr	r3, [r5, #8]
 8007d38:	1ac2      	subs	r2, r0, r3
 8007d3a:	2a0f      	cmp	r2, #15
 8007d3c:	ddde      	ble.n	8007cfc <_malloc_trim_r+0x3c>
 8007d3e:	4d06      	ldr	r5, [pc, #24]	; (8007d58 <_malloc_trim_r+0x98>)
 8007d40:	4904      	ldr	r1, [pc, #16]	; (8007d54 <_malloc_trim_r+0x94>)
 8007d42:	682d      	ldr	r5, [r5, #0]
 8007d44:	f042 0201 	orr.w	r2, r2, #1
 8007d48:	1b40      	subs	r0, r0, r5
 8007d4a:	605a      	str	r2, [r3, #4]
 8007d4c:	6008      	str	r0, [r1, #0]
 8007d4e:	e7d5      	b.n	8007cfc <_malloc_trim_r+0x3c>
 8007d50:	20000484 	.word	0x20000484
 8007d54:	200057c8 	.word	0x200057c8
 8007d58:	20000890 	.word	0x20000890

08007d5c <_free_r>:
_free_r():
 8007d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d60:	460d      	mov	r5, r1
 8007d62:	4606      	mov	r6, r0
 8007d64:	2900      	cmp	r1, #0
 8007d66:	d055      	beq.n	8007e14 <_free_r+0xb8>
 8007d68:	f7ff fb82 	bl	8007470 <__malloc_lock>
 8007d6c:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8007d70:	f8df c174 	ldr.w	ip, [pc, #372]	; 8007ee8 <_free_r+0x18c>
 8007d74:	f021 0301 	bic.w	r3, r1, #1
 8007d78:	f1a5 0408 	sub.w	r4, r5, #8
 8007d7c:	18e2      	adds	r2, r4, r3
 8007d7e:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8007d82:	6857      	ldr	r7, [r2, #4]
 8007d84:	4290      	cmp	r0, r2
 8007d86:	f027 0703 	bic.w	r7, r7, #3
 8007d8a:	d069      	beq.n	8007e60 <_free_r+0x104>
 8007d8c:	f011 0101 	ands.w	r1, r1, #1
 8007d90:	6057      	str	r7, [r2, #4]
 8007d92:	d032      	beq.n	8007dfa <_free_r+0x9e>
 8007d94:	2100      	movs	r1, #0
 8007d96:	19d0      	adds	r0, r2, r7
 8007d98:	6840      	ldr	r0, [r0, #4]
 8007d9a:	07c0      	lsls	r0, r0, #31
 8007d9c:	d406      	bmi.n	8007dac <_free_r+0x50>
 8007d9e:	443b      	add	r3, r7
 8007da0:	6890      	ldr	r0, [r2, #8]
 8007da2:	2900      	cmp	r1, #0
 8007da4:	d04e      	beq.n	8007e44 <_free_r+0xe8>
 8007da6:	68d2      	ldr	r2, [r2, #12]
 8007da8:	60c2      	str	r2, [r0, #12]
 8007daa:	6090      	str	r0, [r2, #8]
 8007dac:	f043 0201 	orr.w	r2, r3, #1
 8007db0:	6062      	str	r2, [r4, #4]
 8007db2:	50e3      	str	r3, [r4, r3]
 8007db4:	b9e1      	cbnz	r1, 8007df0 <_free_r+0x94>
 8007db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dba:	d32d      	bcc.n	8007e18 <_free_r+0xbc>
 8007dbc:	0a5a      	lsrs	r2, r3, #9
 8007dbe:	2a04      	cmp	r2, #4
 8007dc0:	d86a      	bhi.n	8007e98 <_free_r+0x13c>
 8007dc2:	0998      	lsrs	r0, r3, #6
 8007dc4:	3038      	adds	r0, #56	; 0x38
 8007dc6:	0041      	lsls	r1, r0, #1
 8007dc8:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
 8007dcc:	4946      	ldr	r1, [pc, #280]	; (8007ee8 <_free_r+0x18c>)
 8007dce:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8007dd2:	4562      	cmp	r2, ip
 8007dd4:	d066      	beq.n	8007ea4 <_free_r+0x148>
 8007dd6:	6851      	ldr	r1, [r2, #4]
 8007dd8:	f021 0103 	bic.w	r1, r1, #3
 8007ddc:	428b      	cmp	r3, r1
 8007dde:	d202      	bcs.n	8007de6 <_free_r+0x8a>
 8007de0:	6892      	ldr	r2, [r2, #8]
 8007de2:	4594      	cmp	ip, r2
 8007de4:	d1f7      	bne.n	8007dd6 <_free_r+0x7a>
 8007de6:	68d3      	ldr	r3, [r2, #12]
 8007de8:	60e3      	str	r3, [r4, #12]
 8007dea:	60a2      	str	r2, [r4, #8]
 8007dec:	609c      	str	r4, [r3, #8]
 8007dee:	60d4      	str	r4, [r2, #12]
 8007df0:	4630      	mov	r0, r6
 8007df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007df6:	f7ff bb3d 	b.w	8007474 <__malloc_unlock>
 8007dfa:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8007dfe:	1b64      	subs	r4, r4, r5
 8007e00:	f10c 0808 	add.w	r8, ip, #8
 8007e04:	68a0      	ldr	r0, [r4, #8]
 8007e06:	4540      	cmp	r0, r8
 8007e08:	442b      	add	r3, r5
 8007e0a:	d043      	beq.n	8007e94 <_free_r+0x138>
 8007e0c:	68e5      	ldr	r5, [r4, #12]
 8007e0e:	60c5      	str	r5, [r0, #12]
 8007e10:	60a8      	str	r0, [r5, #8]
 8007e12:	e7c0      	b.n	8007d96 <_free_r+0x3a>
 8007e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e18:	08db      	lsrs	r3, r3, #3
 8007e1a:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
 8007e1e:	2501      	movs	r5, #1
 8007e20:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8007e24:	6891      	ldr	r1, [r2, #8]
 8007e26:	60a1      	str	r1, [r4, #8]
 8007e28:	109b      	asrs	r3, r3, #2
 8007e2a:	fa05 f303 	lsl.w	r3, r5, r3
 8007e2e:	4318      	orrs	r0, r3
 8007e30:	60e2      	str	r2, [r4, #12]
 8007e32:	f8cc 0004 	str.w	r0, [ip, #4]
 8007e36:	6094      	str	r4, [r2, #8]
 8007e38:	4630      	mov	r0, r6
 8007e3a:	60cc      	str	r4, [r1, #12]
 8007e3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e40:	f7ff bb18 	b.w	8007474 <__malloc_unlock>
 8007e44:	4d29      	ldr	r5, [pc, #164]	; (8007eec <_free_r+0x190>)
 8007e46:	42a8      	cmp	r0, r5
 8007e48:	d1ad      	bne.n	8007da6 <_free_r+0x4a>
 8007e4a:	f043 0201 	orr.w	r2, r3, #1
 8007e4e:	f8cc 4014 	str.w	r4, [ip, #20]
 8007e52:	f8cc 4010 	str.w	r4, [ip, #16]
 8007e56:	60e0      	str	r0, [r4, #12]
 8007e58:	60a0      	str	r0, [r4, #8]
 8007e5a:	6062      	str	r2, [r4, #4]
 8007e5c:	50e3      	str	r3, [r4, r3]
 8007e5e:	e7c7      	b.n	8007df0 <_free_r+0x94>
 8007e60:	441f      	add	r7, r3
 8007e62:	07cb      	lsls	r3, r1, #31
 8007e64:	d407      	bmi.n	8007e76 <_free_r+0x11a>
 8007e66:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8007e6a:	1ae4      	subs	r4, r4, r3
 8007e6c:	441f      	add	r7, r3
 8007e6e:	68a2      	ldr	r2, [r4, #8]
 8007e70:	68e3      	ldr	r3, [r4, #12]
 8007e72:	60d3      	str	r3, [r2, #12]
 8007e74:	609a      	str	r2, [r3, #8]
 8007e76:	4b1e      	ldr	r3, [pc, #120]	; (8007ef0 <_free_r+0x194>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f047 0201 	orr.w	r2, r7, #1
 8007e7e:	429f      	cmp	r7, r3
 8007e80:	6062      	str	r2, [r4, #4]
 8007e82:	f8cc 4008 	str.w	r4, [ip, #8]
 8007e86:	d3b3      	bcc.n	8007df0 <_free_r+0x94>
 8007e88:	4b1a      	ldr	r3, [pc, #104]	; (8007ef4 <_free_r+0x198>)
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	6819      	ldr	r1, [r3, #0]
 8007e8e:	f7ff ff17 	bl	8007cc0 <_malloc_trim_r>
 8007e92:	e7ad      	b.n	8007df0 <_free_r+0x94>
 8007e94:	2101      	movs	r1, #1
 8007e96:	e77e      	b.n	8007d96 <_free_r+0x3a>
 8007e98:	2a14      	cmp	r2, #20
 8007e9a:	d80c      	bhi.n	8007eb6 <_free_r+0x15a>
 8007e9c:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 8007ea0:	0041      	lsls	r1, r0, #1
 8007ea2:	e791      	b.n	8007dc8 <_free_r+0x6c>
 8007ea4:	684b      	ldr	r3, [r1, #4]
 8007ea6:	1080      	asrs	r0, r0, #2
 8007ea8:	2501      	movs	r5, #1
 8007eaa:	fa05 f000 	lsl.w	r0, r5, r0
 8007eae:	4303      	orrs	r3, r0
 8007eb0:	604b      	str	r3, [r1, #4]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	e798      	b.n	8007de8 <_free_r+0x8c>
 8007eb6:	2a54      	cmp	r2, #84	; 0x54
 8007eb8:	d803      	bhi.n	8007ec2 <_free_r+0x166>
 8007eba:	0b18      	lsrs	r0, r3, #12
 8007ebc:	306e      	adds	r0, #110	; 0x6e
 8007ebe:	0041      	lsls	r1, r0, #1
 8007ec0:	e782      	b.n	8007dc8 <_free_r+0x6c>
 8007ec2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007ec6:	d803      	bhi.n	8007ed0 <_free_r+0x174>
 8007ec8:	0bd8      	lsrs	r0, r3, #15
 8007eca:	3077      	adds	r0, #119	; 0x77
 8007ecc:	0041      	lsls	r1, r0, #1
 8007ece:	e77b      	b.n	8007dc8 <_free_r+0x6c>
 8007ed0:	f240 5154 	movw	r1, #1364	; 0x554
 8007ed4:	428a      	cmp	r2, r1
 8007ed6:	d803      	bhi.n	8007ee0 <_free_r+0x184>
 8007ed8:	0c98      	lsrs	r0, r3, #18
 8007eda:	307c      	adds	r0, #124	; 0x7c
 8007edc:	0041      	lsls	r1, r0, #1
 8007ede:	e773      	b.n	8007dc8 <_free_r+0x6c>
 8007ee0:	21fc      	movs	r1, #252	; 0xfc
 8007ee2:	207e      	movs	r0, #126	; 0x7e
 8007ee4:	e770      	b.n	8007dc8 <_free_r+0x6c>
 8007ee6:	bf00      	nop
 8007ee8:	20000484 	.word	0x20000484
 8007eec:	2000048c 	.word	0x2000048c
 8007ef0:	2000088c 	.word	0x2000088c
 8007ef4:	200057c4 	.word	0x200057c4

08007ef8 <memmove>:
memmove():
 8007ef8:	4288      	cmp	r0, r1
 8007efa:	b4f0      	push	{r4, r5, r6, r7}
 8007efc:	d910      	bls.n	8007f20 <memmove+0x28>
 8007efe:	188c      	adds	r4, r1, r2
 8007f00:	42a0      	cmp	r0, r4
 8007f02:	d20d      	bcs.n	8007f20 <memmove+0x28>
 8007f04:	1885      	adds	r5, r0, r2
 8007f06:	1e53      	subs	r3, r2, #1
 8007f08:	b142      	cbz	r2, 8007f1c <memmove+0x24>
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	462a      	mov	r2, r5
 8007f0e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 8007f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f16:	3b01      	subs	r3, #1
 8007f18:	1c5c      	adds	r4, r3, #1
 8007f1a:	d1f8      	bne.n	8007f0e <memmove+0x16>
 8007f1c:	bcf0      	pop	{r4, r5, r6, r7}
 8007f1e:	4770      	bx	lr
 8007f20:	2a0f      	cmp	r2, #15
 8007f22:	d93f      	bls.n	8007fa4 <memmove+0xac>
 8007f24:	ea40 0301 	orr.w	r3, r0, r1
 8007f28:	079b      	lsls	r3, r3, #30
 8007f2a:	d13f      	bne.n	8007fac <memmove+0xb4>
 8007f2c:	f1a2 0710 	sub.w	r7, r2, #16
 8007f30:	093f      	lsrs	r7, r7, #4
 8007f32:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 8007f36:	3610      	adds	r6, #16
 8007f38:	460c      	mov	r4, r1
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	6825      	ldr	r5, [r4, #0]
 8007f3e:	601d      	str	r5, [r3, #0]
 8007f40:	6865      	ldr	r5, [r4, #4]
 8007f42:	605d      	str	r5, [r3, #4]
 8007f44:	68a5      	ldr	r5, [r4, #8]
 8007f46:	609d      	str	r5, [r3, #8]
 8007f48:	68e5      	ldr	r5, [r4, #12]
 8007f4a:	60dd      	str	r5, [r3, #12]
 8007f4c:	3310      	adds	r3, #16
 8007f4e:	42b3      	cmp	r3, r6
 8007f50:	f104 0410 	add.w	r4, r4, #16
 8007f54:	d1f2      	bne.n	8007f3c <memmove+0x44>
 8007f56:	1c7b      	adds	r3, r7, #1
 8007f58:	f002 0c0f 	and.w	ip, r2, #15
 8007f5c:	011b      	lsls	r3, r3, #4
 8007f5e:	f1bc 0f03 	cmp.w	ip, #3
 8007f62:	4419      	add	r1, r3
 8007f64:	4403      	add	r3, r0
 8007f66:	d923      	bls.n	8007fb0 <memmove+0xb8>
 8007f68:	460e      	mov	r6, r1
 8007f6a:	461d      	mov	r5, r3
 8007f6c:	4664      	mov	r4, ip
 8007f6e:	3c04      	subs	r4, #4
 8007f70:	f856 7b04 	ldr.w	r7, [r6], #4
 8007f74:	f845 7b04 	str.w	r7, [r5], #4
 8007f78:	2c03      	cmp	r4, #3
 8007f7a:	d8f8      	bhi.n	8007f6e <memmove+0x76>
 8007f7c:	f1ac 0404 	sub.w	r4, ip, #4
 8007f80:	f024 0403 	bic.w	r4, r4, #3
 8007f84:	3404      	adds	r4, #4
 8007f86:	f002 0203 	and.w	r2, r2, #3
 8007f8a:	4423      	add	r3, r4
 8007f8c:	4421      	add	r1, r4
 8007f8e:	2a00      	cmp	r2, #0
 8007f90:	d0c4      	beq.n	8007f1c <memmove+0x24>
 8007f92:	441a      	add	r2, r3
 8007f94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f98:	f803 4b01 	strb.w	r4, [r3], #1
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d1f9      	bne.n	8007f94 <memmove+0x9c>
 8007fa0:	bcf0      	pop	{r4, r5, r6, r7}
 8007fa2:	4770      	bx	lr
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2a00      	cmp	r2, #0
 8007fa8:	d1f3      	bne.n	8007f92 <memmove+0x9a>
 8007faa:	e7b7      	b.n	8007f1c <memmove+0x24>
 8007fac:	4603      	mov	r3, r0
 8007fae:	e7f0      	b.n	8007f92 <memmove+0x9a>
 8007fb0:	4662      	mov	r2, ip
 8007fb2:	2a00      	cmp	r2, #0
 8007fb4:	d1ed      	bne.n	8007f92 <memmove+0x9a>
 8007fb6:	e7b1      	b.n	8007f1c <memmove+0x24>

08007fb8 <_realloc_r>:
_realloc_r():
 8007fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	4690      	mov	r8, r2
 8007fc2:	4681      	mov	r9, r0
 8007fc4:	2900      	cmp	r1, #0
 8007fc6:	f000 80e2 	beq.w	800818e <_realloc_r+0x1d6>
 8007fca:	f7ff fa51 	bl	8007470 <__malloc_lock>
 8007fce:	f108 060b 	add.w	r6, r8, #11
 8007fd2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007fd6:	2e16      	cmp	r6, #22
 8007fd8:	f023 0503 	bic.w	r5, r3, #3
 8007fdc:	f1a4 0708 	sub.w	r7, r4, #8
 8007fe0:	d84b      	bhi.n	800807a <_realloc_r+0xc2>
 8007fe2:	2110      	movs	r1, #16
 8007fe4:	460e      	mov	r6, r1
 8007fe6:	45b0      	cmp	r8, r6
 8007fe8:	d84c      	bhi.n	8008084 <_realloc_r+0xcc>
 8007fea:	428d      	cmp	r5, r1
 8007fec:	da78      	bge.n	80080e0 <_realloc_r+0x128>
 8007fee:	f8df b390 	ldr.w	fp, [pc, #912]	; 8008380 <_realloc_r+0x3c8>
 8007ff2:	f8db e008 	ldr.w	lr, [fp, #8]
 8007ff6:	1978      	adds	r0, r7, r5
 8007ff8:	4586      	cmp	lr, r0
 8007ffa:	f000 80ce 	beq.w	800819a <_realloc_r+0x1e2>
 8007ffe:	6842      	ldr	r2, [r0, #4]
 8008000:	f022 0c01 	bic.w	ip, r2, #1
 8008004:	4484      	add	ip, r0
 8008006:	f8dc c004 	ldr.w	ip, [ip, #4]
 800800a:	f01c 0f01 	tst.w	ip, #1
 800800e:	d07a      	beq.n	8008106 <_realloc_r+0x14e>
 8008010:	2200      	movs	r2, #0
 8008012:	4610      	mov	r0, r2
 8008014:	07db      	lsls	r3, r3, #31
 8008016:	f100 8092 	bmi.w	800813e <_realloc_r+0x186>
 800801a:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800801e:	ebc3 0a07 	rsb	sl, r3, r7
 8008022:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008026:	f023 0303 	bic.w	r3, r3, #3
 800802a:	442b      	add	r3, r5
 800802c:	b388      	cbz	r0, 8008092 <_realloc_r+0xda>
 800802e:	4570      	cmp	r0, lr
 8008030:	f000 80ed 	beq.w	800820e <_realloc_r+0x256>
 8008034:	eb02 0e03 	add.w	lr, r2, r3
 8008038:	458e      	cmp	lr, r1
 800803a:	db2a      	blt.n	8008092 <_realloc_r+0xda>
 800803c:	68c3      	ldr	r3, [r0, #12]
 800803e:	6882      	ldr	r2, [r0, #8]
 8008040:	4657      	mov	r7, sl
 8008042:	60d3      	str	r3, [r2, #12]
 8008044:	609a      	str	r2, [r3, #8]
 8008046:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800804a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800804e:	60cb      	str	r3, [r1, #12]
 8008050:	1f2a      	subs	r2, r5, #4
 8008052:	2a24      	cmp	r2, #36	; 0x24
 8008054:	6099      	str	r1, [r3, #8]
 8008056:	f200 8126 	bhi.w	80082a6 <_realloc_r+0x2ee>
 800805a:	2a13      	cmp	r2, #19
 800805c:	f240 80b3 	bls.w	80081c6 <_realloc_r+0x20e>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	f8ca 3008 	str.w	r3, [sl, #8]
 8008066:	6863      	ldr	r3, [r4, #4]
 8008068:	f8ca 300c 	str.w	r3, [sl, #12]
 800806c:	2a1b      	cmp	r2, #27
 800806e:	f200 8130 	bhi.w	80082d2 <_realloc_r+0x31a>
 8008072:	3408      	adds	r4, #8
 8008074:	f10a 0310 	add.w	r3, sl, #16
 8008078:	e0a6      	b.n	80081c8 <_realloc_r+0x210>
 800807a:	f026 0607 	bic.w	r6, r6, #7
 800807e:	2e00      	cmp	r6, #0
 8008080:	4631      	mov	r1, r6
 8008082:	dab0      	bge.n	8007fe6 <_realloc_r+0x2e>
 8008084:	230c      	movs	r3, #12
 8008086:	2000      	movs	r0, #0
 8008088:	f8c9 3000 	str.w	r3, [r9]
 800808c:	b003      	add	sp, #12
 800808e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008092:	428b      	cmp	r3, r1
 8008094:	db53      	blt.n	800813e <_realloc_r+0x186>
 8008096:	4657      	mov	r7, sl
 8008098:	f8da 100c 	ldr.w	r1, [sl, #12]
 800809c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80080a0:	1f2a      	subs	r2, r5, #4
 80080a2:	2a24      	cmp	r2, #36	; 0x24
 80080a4:	60c1      	str	r1, [r0, #12]
 80080a6:	6088      	str	r0, [r1, #8]
 80080a8:	f200 8109 	bhi.w	80082be <_realloc_r+0x306>
 80080ac:	2a13      	cmp	r2, #19
 80080ae:	f240 8104 	bls.w	80082ba <_realloc_r+0x302>
 80080b2:	6821      	ldr	r1, [r4, #0]
 80080b4:	f8ca 1008 	str.w	r1, [sl, #8]
 80080b8:	6861      	ldr	r1, [r4, #4]
 80080ba:	f8ca 100c 	str.w	r1, [sl, #12]
 80080be:	2a1b      	cmp	r2, #27
 80080c0:	f200 811c 	bhi.w	80082fc <_realloc_r+0x344>
 80080c4:	3408      	adds	r4, #8
 80080c6:	f10a 0210 	add.w	r2, sl, #16
 80080ca:	6821      	ldr	r1, [r4, #0]
 80080cc:	6011      	str	r1, [r2, #0]
 80080ce:	6861      	ldr	r1, [r4, #4]
 80080d0:	6051      	str	r1, [r2, #4]
 80080d2:	68a1      	ldr	r1, [r4, #8]
 80080d4:	6091      	str	r1, [r2, #8]
 80080d6:	461d      	mov	r5, r3
 80080d8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80080dc:	463c      	mov	r4, r7
 80080de:	4657      	mov	r7, sl
 80080e0:	1baa      	subs	r2, r5, r6
 80080e2:	2a0f      	cmp	r2, #15
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	d819      	bhi.n	800811e <_realloc_r+0x166>
 80080ea:	432b      	orrs	r3, r5
 80080ec:	443d      	add	r5, r7
 80080ee:	607b      	str	r3, [r7, #4]
 80080f0:	686b      	ldr	r3, [r5, #4]
 80080f2:	f043 0301 	orr.w	r3, r3, #1
 80080f6:	606b      	str	r3, [r5, #4]
 80080f8:	4648      	mov	r0, r9
 80080fa:	f7ff f9bb 	bl	8007474 <__malloc_unlock>
 80080fe:	4620      	mov	r0, r4
 8008100:	b003      	add	sp, #12
 8008102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008106:	f022 0203 	bic.w	r2, r2, #3
 800810a:	eb02 0c05 	add.w	ip, r2, r5
 800810e:	458c      	cmp	ip, r1
 8008110:	db80      	blt.n	8008014 <_realloc_r+0x5c>
 8008112:	68c2      	ldr	r2, [r0, #12]
 8008114:	6881      	ldr	r1, [r0, #8]
 8008116:	4665      	mov	r5, ip
 8008118:	60ca      	str	r2, [r1, #12]
 800811a:	6091      	str	r1, [r2, #8]
 800811c:	e7e0      	b.n	80080e0 <_realloc_r+0x128>
 800811e:	19b9      	adds	r1, r7, r6
 8008120:	f042 0001 	orr.w	r0, r2, #1
 8008124:	431e      	orrs	r6, r3
 8008126:	440a      	add	r2, r1
 8008128:	607e      	str	r6, [r7, #4]
 800812a:	6048      	str	r0, [r1, #4]
 800812c:	6853      	ldr	r3, [r2, #4]
 800812e:	f043 0301 	orr.w	r3, r3, #1
 8008132:	3108      	adds	r1, #8
 8008134:	6053      	str	r3, [r2, #4]
 8008136:	4648      	mov	r0, r9
 8008138:	f7ff fe10 	bl	8007d5c <_free_r>
 800813c:	e7dc      	b.n	80080f8 <_realloc_r+0x140>
 800813e:	4641      	mov	r1, r8
 8008140:	4648      	mov	r0, r9
 8008142:	f7fe feb1 	bl	8006ea8 <_malloc_r>
 8008146:	4680      	mov	r8, r0
 8008148:	b1d0      	cbz	r0, 8008180 <_realloc_r+0x1c8>
 800814a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800814e:	f023 0201 	bic.w	r2, r3, #1
 8008152:	443a      	add	r2, r7
 8008154:	f1a0 0108 	sub.w	r1, r0, #8
 8008158:	4291      	cmp	r1, r2
 800815a:	f000 809e 	beq.w	800829a <_realloc_r+0x2e2>
 800815e:	1f2a      	subs	r2, r5, #4
 8008160:	2a24      	cmp	r2, #36	; 0x24
 8008162:	d850      	bhi.n	8008206 <_realloc_r+0x24e>
 8008164:	2a13      	cmp	r2, #19
 8008166:	d823      	bhi.n	80081b0 <_realloc_r+0x1f8>
 8008168:	4603      	mov	r3, r0
 800816a:	4622      	mov	r2, r4
 800816c:	6811      	ldr	r1, [r2, #0]
 800816e:	6019      	str	r1, [r3, #0]
 8008170:	6851      	ldr	r1, [r2, #4]
 8008172:	6059      	str	r1, [r3, #4]
 8008174:	6892      	ldr	r2, [r2, #8]
 8008176:	609a      	str	r2, [r3, #8]
 8008178:	4621      	mov	r1, r4
 800817a:	4648      	mov	r0, r9
 800817c:	f7ff fdee 	bl	8007d5c <_free_r>
 8008180:	4648      	mov	r0, r9
 8008182:	f7ff f977 	bl	8007474 <__malloc_unlock>
 8008186:	4640      	mov	r0, r8
 8008188:	b003      	add	sp, #12
 800818a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818e:	4611      	mov	r1, r2
 8008190:	b003      	add	sp, #12
 8008192:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008196:	f7fe be87 	b.w	8006ea8 <_malloc_r>
 800819a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800819e:	f022 0203 	bic.w	r2, r2, #3
 80081a2:	1950      	adds	r0, r2, r5
 80081a4:	f106 0c10 	add.w	ip, r6, #16
 80081a8:	4560      	cmp	r0, ip
 80081aa:	da19      	bge.n	80081e0 <_realloc_r+0x228>
 80081ac:	4670      	mov	r0, lr
 80081ae:	e731      	b.n	8008014 <_realloc_r+0x5c>
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	6003      	str	r3, [r0, #0]
 80081b4:	6863      	ldr	r3, [r4, #4]
 80081b6:	6043      	str	r3, [r0, #4]
 80081b8:	2a1b      	cmp	r2, #27
 80081ba:	d863      	bhi.n	8008284 <_realloc_r+0x2cc>
 80081bc:	f100 0308 	add.w	r3, r0, #8
 80081c0:	f104 0208 	add.w	r2, r4, #8
 80081c4:	e7d2      	b.n	800816c <_realloc_r+0x1b4>
 80081c6:	463b      	mov	r3, r7
 80081c8:	6822      	ldr	r2, [r4, #0]
 80081ca:	601a      	str	r2, [r3, #0]
 80081cc:	6862      	ldr	r2, [r4, #4]
 80081ce:	605a      	str	r2, [r3, #4]
 80081d0:	68a2      	ldr	r2, [r4, #8]
 80081d2:	609a      	str	r2, [r3, #8]
 80081d4:	463c      	mov	r4, r7
 80081d6:	4675      	mov	r5, lr
 80081d8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80081dc:	4657      	mov	r7, sl
 80081de:	e77f      	b.n	80080e0 <_realloc_r+0x128>
 80081e0:	4437      	add	r7, r6
 80081e2:	1b83      	subs	r3, r0, r6
 80081e4:	f043 0301 	orr.w	r3, r3, #1
 80081e8:	f8cb 7008 	str.w	r7, [fp, #8]
 80081ec:	607b      	str	r3, [r7, #4]
 80081ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80081f2:	f003 0301 	and.w	r3, r3, #1
 80081f6:	431e      	orrs	r6, r3
 80081f8:	4648      	mov	r0, r9
 80081fa:	f844 6c04 	str.w	r6, [r4, #-4]
 80081fe:	f7ff f939 	bl	8007474 <__malloc_unlock>
 8008202:	4620      	mov	r0, r4
 8008204:	e77c      	b.n	8008100 <_realloc_r+0x148>
 8008206:	4621      	mov	r1, r4
 8008208:	f7ff fe76 	bl	8007ef8 <memmove>
 800820c:	e7b4      	b.n	8008178 <_realloc_r+0x1c0>
 800820e:	eb02 0c03 	add.w	ip, r2, r3
 8008212:	f106 0210 	add.w	r2, r6, #16
 8008216:	4594      	cmp	ip, r2
 8008218:	f6ff af3b 	blt.w	8008092 <_realloc_r+0xda>
 800821c:	4657      	mov	r7, sl
 800821e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008222:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8008226:	1f2a      	subs	r2, r5, #4
 8008228:	2a24      	cmp	r2, #36	; 0x24
 800822a:	60cb      	str	r3, [r1, #12]
 800822c:	6099      	str	r1, [r3, #8]
 800822e:	f200 8087 	bhi.w	8008340 <_realloc_r+0x388>
 8008232:	2a13      	cmp	r2, #19
 8008234:	d978      	bls.n	8008328 <_realloc_r+0x370>
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	f8ca 3008 	str.w	r3, [sl, #8]
 800823c:	6863      	ldr	r3, [r4, #4]
 800823e:	f8ca 300c 	str.w	r3, [sl, #12]
 8008242:	2a1b      	cmp	r2, #27
 8008244:	f200 8085 	bhi.w	8008352 <_realloc_r+0x39a>
 8008248:	3408      	adds	r4, #8
 800824a:	f10a 0310 	add.w	r3, sl, #16
 800824e:	6822      	ldr	r2, [r4, #0]
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	6862      	ldr	r2, [r4, #4]
 8008254:	605a      	str	r2, [r3, #4]
 8008256:	68a2      	ldr	r2, [r4, #8]
 8008258:	609a      	str	r2, [r3, #8]
 800825a:	eb0a 0306 	add.w	r3, sl, r6
 800825e:	ebc6 020c 	rsb	r2, r6, ip
 8008262:	f042 0201 	orr.w	r2, r2, #1
 8008266:	f8cb 3008 	str.w	r3, [fp, #8]
 800826a:	605a      	str	r2, [r3, #4]
 800826c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008270:	f003 0301 	and.w	r3, r3, #1
 8008274:	431e      	orrs	r6, r3
 8008276:	4648      	mov	r0, r9
 8008278:	f8ca 6004 	str.w	r6, [sl, #4]
 800827c:	f7ff f8fa 	bl	8007474 <__malloc_unlock>
 8008280:	4638      	mov	r0, r7
 8008282:	e73d      	b.n	8008100 <_realloc_r+0x148>
 8008284:	68a3      	ldr	r3, [r4, #8]
 8008286:	6083      	str	r3, [r0, #8]
 8008288:	68e3      	ldr	r3, [r4, #12]
 800828a:	60c3      	str	r3, [r0, #12]
 800828c:	2a24      	cmp	r2, #36	; 0x24
 800828e:	d02c      	beq.n	80082ea <_realloc_r+0x332>
 8008290:	f100 0310 	add.w	r3, r0, #16
 8008294:	f104 0210 	add.w	r2, r4, #16
 8008298:	e768      	b.n	800816c <_realloc_r+0x1b4>
 800829a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800829e:	f022 0203 	bic.w	r2, r2, #3
 80082a2:	4415      	add	r5, r2
 80082a4:	e71c      	b.n	80080e0 <_realloc_r+0x128>
 80082a6:	4621      	mov	r1, r4
 80082a8:	4638      	mov	r0, r7
 80082aa:	4675      	mov	r5, lr
 80082ac:	463c      	mov	r4, r7
 80082ae:	f7ff fe23 	bl	8007ef8 <memmove>
 80082b2:	4657      	mov	r7, sl
 80082b4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80082b8:	e712      	b.n	80080e0 <_realloc_r+0x128>
 80082ba:	463a      	mov	r2, r7
 80082bc:	e705      	b.n	80080ca <_realloc_r+0x112>
 80082be:	4621      	mov	r1, r4
 80082c0:	4638      	mov	r0, r7
 80082c2:	461d      	mov	r5, r3
 80082c4:	463c      	mov	r4, r7
 80082c6:	f7ff fe17 	bl	8007ef8 <memmove>
 80082ca:	4657      	mov	r7, sl
 80082cc:	f8da 3004 	ldr.w	r3, [sl, #4]
 80082d0:	e706      	b.n	80080e0 <_realloc_r+0x128>
 80082d2:	68a3      	ldr	r3, [r4, #8]
 80082d4:	f8ca 3010 	str.w	r3, [sl, #16]
 80082d8:	68e3      	ldr	r3, [r4, #12]
 80082da:	f8ca 3014 	str.w	r3, [sl, #20]
 80082de:	2a24      	cmp	r2, #36	; 0x24
 80082e0:	d018      	beq.n	8008314 <_realloc_r+0x35c>
 80082e2:	3410      	adds	r4, #16
 80082e4:	f10a 0318 	add.w	r3, sl, #24
 80082e8:	e76e      	b.n	80081c8 <_realloc_r+0x210>
 80082ea:	6923      	ldr	r3, [r4, #16]
 80082ec:	6103      	str	r3, [r0, #16]
 80082ee:	6963      	ldr	r3, [r4, #20]
 80082f0:	6143      	str	r3, [r0, #20]
 80082f2:	f104 0218 	add.w	r2, r4, #24
 80082f6:	f100 0318 	add.w	r3, r0, #24
 80082fa:	e737      	b.n	800816c <_realloc_r+0x1b4>
 80082fc:	68a1      	ldr	r1, [r4, #8]
 80082fe:	f8ca 1010 	str.w	r1, [sl, #16]
 8008302:	68e1      	ldr	r1, [r4, #12]
 8008304:	f8ca 1014 	str.w	r1, [sl, #20]
 8008308:	2a24      	cmp	r2, #36	; 0x24
 800830a:	d00f      	beq.n	800832c <_realloc_r+0x374>
 800830c:	3410      	adds	r4, #16
 800830e:	f10a 0218 	add.w	r2, sl, #24
 8008312:	e6da      	b.n	80080ca <_realloc_r+0x112>
 8008314:	6923      	ldr	r3, [r4, #16]
 8008316:	f8ca 3018 	str.w	r3, [sl, #24]
 800831a:	6963      	ldr	r3, [r4, #20]
 800831c:	f8ca 301c 	str.w	r3, [sl, #28]
 8008320:	3418      	adds	r4, #24
 8008322:	f10a 0320 	add.w	r3, sl, #32
 8008326:	e74f      	b.n	80081c8 <_realloc_r+0x210>
 8008328:	463b      	mov	r3, r7
 800832a:	e790      	b.n	800824e <_realloc_r+0x296>
 800832c:	6922      	ldr	r2, [r4, #16]
 800832e:	f8ca 2018 	str.w	r2, [sl, #24]
 8008332:	6962      	ldr	r2, [r4, #20]
 8008334:	f8ca 201c 	str.w	r2, [sl, #28]
 8008338:	3418      	adds	r4, #24
 800833a:	f10a 0220 	add.w	r2, sl, #32
 800833e:	e6c4      	b.n	80080ca <_realloc_r+0x112>
 8008340:	4621      	mov	r1, r4
 8008342:	4638      	mov	r0, r7
 8008344:	f8cd c004 	str.w	ip, [sp, #4]
 8008348:	f7ff fdd6 	bl	8007ef8 <memmove>
 800834c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008350:	e783      	b.n	800825a <_realloc_r+0x2a2>
 8008352:	68a3      	ldr	r3, [r4, #8]
 8008354:	f8ca 3010 	str.w	r3, [sl, #16]
 8008358:	68e3      	ldr	r3, [r4, #12]
 800835a:	f8ca 3014 	str.w	r3, [sl, #20]
 800835e:	2a24      	cmp	r2, #36	; 0x24
 8008360:	d003      	beq.n	800836a <_realloc_r+0x3b2>
 8008362:	3410      	adds	r4, #16
 8008364:	f10a 0318 	add.w	r3, sl, #24
 8008368:	e771      	b.n	800824e <_realloc_r+0x296>
 800836a:	6923      	ldr	r3, [r4, #16]
 800836c:	f8ca 3018 	str.w	r3, [sl, #24]
 8008370:	6963      	ldr	r3, [r4, #20]
 8008372:	f8ca 301c 	str.w	r3, [sl, #28]
 8008376:	3418      	adds	r4, #24
 8008378:	f10a 0320 	add.w	r3, sl, #32
 800837c:	e767      	b.n	800824e <_realloc_r+0x296>
 800837e:	bf00      	nop
 8008380:	20000484 	.word	0x20000484

08008384 <__aeabi_drsub>:
$t():
 8008384:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008388:	e002      	b.n	8008390 <__adddf3>
 800838a:	bf00      	nop

0800838c <__aeabi_dsub>:
__aeabi_dsub():
 800838c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08008390 <__adddf3>:
 8008390:	b530      	push	{r4, r5, lr}
 8008392:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008396:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800839a:	ea94 0f05 	teq	r4, r5
 800839e:	bf08      	it	eq
 80083a0:	ea90 0f02 	teqeq	r0, r2
 80083a4:	bf1f      	itttt	ne
 80083a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80083aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80083ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80083b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80083b6:	f000 80e2 	beq.w	800857e <__adddf3+0x1ee>
 80083ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80083be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80083c2:	bfb8      	it	lt
 80083c4:	426d      	neglt	r5, r5
 80083c6:	dd0c      	ble.n	80083e2 <__adddf3+0x52>
 80083c8:	442c      	add	r4, r5
 80083ca:	ea80 0202 	eor.w	r2, r0, r2
 80083ce:	ea81 0303 	eor.w	r3, r1, r3
 80083d2:	ea82 0000 	eor.w	r0, r2, r0
 80083d6:	ea83 0101 	eor.w	r1, r3, r1
 80083da:	ea80 0202 	eor.w	r2, r0, r2
 80083de:	ea81 0303 	eor.w	r3, r1, r3
 80083e2:	2d36      	cmp	r5, #54	; 0x36
 80083e4:	bf88      	it	hi
 80083e6:	bd30      	pophi	{r4, r5, pc}
 80083e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80083ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80083f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80083f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80083f8:	d002      	beq.n	8008400 <__adddf3+0x70>
 80083fa:	4240      	negs	r0, r0
 80083fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008400:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008404:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008408:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800840c:	d002      	beq.n	8008414 <__adddf3+0x84>
 800840e:	4252      	negs	r2, r2
 8008410:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008414:	ea94 0f05 	teq	r4, r5
 8008418:	f000 80a7 	beq.w	800856a <__adddf3+0x1da>
 800841c:	f1a4 0401 	sub.w	r4, r4, #1
 8008420:	f1d5 0e20 	rsbs	lr, r5, #32
 8008424:	db0d      	blt.n	8008442 <__adddf3+0xb2>
 8008426:	fa02 fc0e 	lsl.w	ip, r2, lr
 800842a:	fa22 f205 	lsr.w	r2, r2, r5
 800842e:	1880      	adds	r0, r0, r2
 8008430:	f141 0100 	adc.w	r1, r1, #0
 8008434:	fa03 f20e 	lsl.w	r2, r3, lr
 8008438:	1880      	adds	r0, r0, r2
 800843a:	fa43 f305 	asr.w	r3, r3, r5
 800843e:	4159      	adcs	r1, r3
 8008440:	e00e      	b.n	8008460 <__adddf3+0xd0>
 8008442:	f1a5 0520 	sub.w	r5, r5, #32
 8008446:	f10e 0e20 	add.w	lr, lr, #32
 800844a:	2a01      	cmp	r2, #1
 800844c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008450:	bf28      	it	cs
 8008452:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008456:	fa43 f305 	asr.w	r3, r3, r5
 800845a:	18c0      	adds	r0, r0, r3
 800845c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008464:	d507      	bpl.n	8008476 <__adddf3+0xe6>
 8008466:	f04f 0e00 	mov.w	lr, #0
 800846a:	f1dc 0c00 	rsbs	ip, ip, #0
 800846e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008472:	eb6e 0101 	sbc.w	r1, lr, r1
 8008476:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800847a:	d31b      	bcc.n	80084b4 <__adddf3+0x124>
 800847c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008480:	d30c      	bcc.n	800849c <__adddf3+0x10c>
 8008482:	0849      	lsrs	r1, r1, #1
 8008484:	ea5f 0030 	movs.w	r0, r0, rrx
 8008488:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800848c:	f104 0401 	add.w	r4, r4, #1
 8008490:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008494:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008498:	f080 809a 	bcs.w	80085d0 <__adddf3+0x240>
 800849c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80084a0:	bf08      	it	eq
 80084a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80084a6:	f150 0000 	adcs.w	r0, r0, #0
 80084aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80084ae:	ea41 0105 	orr.w	r1, r1, r5
 80084b2:	bd30      	pop	{r4, r5, pc}
 80084b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80084b8:	4140      	adcs	r0, r0
 80084ba:	eb41 0101 	adc.w	r1, r1, r1
 80084be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80084c2:	f1a4 0401 	sub.w	r4, r4, #1
 80084c6:	d1e9      	bne.n	800849c <__adddf3+0x10c>
 80084c8:	f091 0f00 	teq	r1, #0
 80084cc:	bf04      	itt	eq
 80084ce:	4601      	moveq	r1, r0
 80084d0:	2000      	moveq	r0, #0
 80084d2:	fab1 f381 	clz	r3, r1
 80084d6:	bf08      	it	eq
 80084d8:	3320      	addeq	r3, #32
 80084da:	f1a3 030b 	sub.w	r3, r3, #11
 80084de:	f1b3 0220 	subs.w	r2, r3, #32
 80084e2:	da0c      	bge.n	80084fe <__adddf3+0x16e>
 80084e4:	320c      	adds	r2, #12
 80084e6:	dd08      	ble.n	80084fa <__adddf3+0x16a>
 80084e8:	f102 0c14 	add.w	ip, r2, #20
 80084ec:	f1c2 020c 	rsb	r2, r2, #12
 80084f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80084f4:	fa21 f102 	lsr.w	r1, r1, r2
 80084f8:	e00c      	b.n	8008514 <__adddf3+0x184>
 80084fa:	f102 0214 	add.w	r2, r2, #20
 80084fe:	bfd8      	it	le
 8008500:	f1c2 0c20 	rsble	ip, r2, #32
 8008504:	fa01 f102 	lsl.w	r1, r1, r2
 8008508:	fa20 fc0c 	lsr.w	ip, r0, ip
 800850c:	bfdc      	itt	le
 800850e:	ea41 010c 	orrle.w	r1, r1, ip
 8008512:	4090      	lslle	r0, r2
 8008514:	1ae4      	subs	r4, r4, r3
 8008516:	bfa2      	ittt	ge
 8008518:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800851c:	4329      	orrge	r1, r5
 800851e:	bd30      	popge	{r4, r5, pc}
 8008520:	ea6f 0404 	mvn.w	r4, r4
 8008524:	3c1f      	subs	r4, #31
 8008526:	da1c      	bge.n	8008562 <__adddf3+0x1d2>
 8008528:	340c      	adds	r4, #12
 800852a:	dc0e      	bgt.n	800854a <__adddf3+0x1ba>
 800852c:	f104 0414 	add.w	r4, r4, #20
 8008530:	f1c4 0220 	rsb	r2, r4, #32
 8008534:	fa20 f004 	lsr.w	r0, r0, r4
 8008538:	fa01 f302 	lsl.w	r3, r1, r2
 800853c:	ea40 0003 	orr.w	r0, r0, r3
 8008540:	fa21 f304 	lsr.w	r3, r1, r4
 8008544:	ea45 0103 	orr.w	r1, r5, r3
 8008548:	bd30      	pop	{r4, r5, pc}
 800854a:	f1c4 040c 	rsb	r4, r4, #12
 800854e:	f1c4 0220 	rsb	r2, r4, #32
 8008552:	fa20 f002 	lsr.w	r0, r0, r2
 8008556:	fa01 f304 	lsl.w	r3, r1, r4
 800855a:	ea40 0003 	orr.w	r0, r0, r3
 800855e:	4629      	mov	r1, r5
 8008560:	bd30      	pop	{r4, r5, pc}
 8008562:	fa21 f004 	lsr.w	r0, r1, r4
 8008566:	4629      	mov	r1, r5
 8008568:	bd30      	pop	{r4, r5, pc}
 800856a:	f094 0f00 	teq	r4, #0
 800856e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008572:	bf06      	itte	eq
 8008574:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008578:	3401      	addeq	r4, #1
 800857a:	3d01      	subne	r5, #1
 800857c:	e74e      	b.n	800841c <__adddf3+0x8c>
 800857e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008582:	bf18      	it	ne
 8008584:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008588:	d029      	beq.n	80085de <__adddf3+0x24e>
 800858a:	ea94 0f05 	teq	r4, r5
 800858e:	bf08      	it	eq
 8008590:	ea90 0f02 	teqeq	r0, r2
 8008594:	d005      	beq.n	80085a2 <__adddf3+0x212>
 8008596:	ea54 0c00 	orrs.w	ip, r4, r0
 800859a:	bf04      	itt	eq
 800859c:	4619      	moveq	r1, r3
 800859e:	4610      	moveq	r0, r2
 80085a0:	bd30      	pop	{r4, r5, pc}
 80085a2:	ea91 0f03 	teq	r1, r3
 80085a6:	bf1e      	ittt	ne
 80085a8:	2100      	movne	r1, #0
 80085aa:	2000      	movne	r0, #0
 80085ac:	bd30      	popne	{r4, r5, pc}
 80085ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80085b2:	d105      	bne.n	80085c0 <__adddf3+0x230>
 80085b4:	0040      	lsls	r0, r0, #1
 80085b6:	4149      	adcs	r1, r1
 80085b8:	bf28      	it	cs
 80085ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80085be:	bd30      	pop	{r4, r5, pc}
 80085c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80085c4:	bf3c      	itt	cc
 80085c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80085ca:	bd30      	popcc	{r4, r5, pc}
 80085cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80085d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80085d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80085d8:	f04f 0000 	mov.w	r0, #0
 80085dc:	bd30      	pop	{r4, r5, pc}
 80085de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80085e2:	bf1a      	itte	ne
 80085e4:	4619      	movne	r1, r3
 80085e6:	4610      	movne	r0, r2
 80085e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80085ec:	bf1c      	itt	ne
 80085ee:	460b      	movne	r3, r1
 80085f0:	4602      	movne	r2, r0
 80085f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80085f6:	bf06      	itte	eq
 80085f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80085fc:	ea91 0f03 	teqeq	r1, r3
 8008600:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008604:	bd30      	pop	{r4, r5, pc}
__adddf3():
 8008606:	bf00      	nop

08008608 <__aeabi_ui2d>:
__aeabi_ui2d():
 8008608:	f090 0f00 	teq	r0, #0
 800860c:	bf04      	itt	eq
 800860e:	2100      	moveq	r1, #0
 8008610:	4770      	bxeq	lr
 8008612:	b530      	push	{r4, r5, lr}
 8008614:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008618:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800861c:	f04f 0500 	mov.w	r5, #0
 8008620:	f04f 0100 	mov.w	r1, #0
 8008624:	e750      	b.n	80084c8 <__adddf3+0x138>
 8008626:	bf00      	nop

08008628 <__aeabi_i2d>:
__floatsidf():
 8008628:	f090 0f00 	teq	r0, #0
 800862c:	bf04      	itt	eq
 800862e:	2100      	moveq	r1, #0
 8008630:	4770      	bxeq	lr
 8008632:	b530      	push	{r4, r5, lr}
 8008634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800863c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008640:	bf48      	it	mi
 8008642:	4240      	negmi	r0, r0
 8008644:	f04f 0100 	mov.w	r1, #0
 8008648:	e73e      	b.n	80084c8 <__adddf3+0x138>
 800864a:	bf00      	nop

0800864c <__aeabi_f2d>:
__extendsfdf2():
 800864c:	0042      	lsls	r2, r0, #1
 800864e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008652:	ea4f 0131 	mov.w	r1, r1, rrx
 8008656:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800865a:	bf1f      	itttt	ne
 800865c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008660:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008664:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008668:	4770      	bxne	lr
 800866a:	f092 0f00 	teq	r2, #0
 800866e:	bf14      	ite	ne
 8008670:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008674:	4770      	bxeq	lr
 8008676:	b530      	push	{r4, r5, lr}
 8008678:	f44f 7460 	mov.w	r4, #896	; 0x380
 800867c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008684:	e720      	b.n	80084c8 <__adddf3+0x138>
 8008686:	bf00      	nop

08008688 <__aeabi_ul2d>:
__aeabi_ul2d():
 8008688:	ea50 0201 	orrs.w	r2, r0, r1
 800868c:	bf08      	it	eq
 800868e:	4770      	bxeq	lr
 8008690:	b530      	push	{r4, r5, lr}
 8008692:	f04f 0500 	mov.w	r5, #0
 8008696:	e00a      	b.n	80086ae <__aeabi_l2d+0x16>

08008698 <__aeabi_l2d>:
 8008698:	ea50 0201 	orrs.w	r2, r0, r1
 800869c:	bf08      	it	eq
 800869e:	4770      	bxeq	lr
 80086a0:	b530      	push	{r4, r5, lr}
 80086a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80086a6:	d502      	bpl.n	80086ae <__aeabi_l2d+0x16>
 80086a8:	4240      	negs	r0, r0
 80086aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80086ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80086b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80086b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80086ba:	f43f aedc 	beq.w	8008476 <__adddf3+0xe6>
 80086be:	f04f 0203 	mov.w	r2, #3
 80086c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80086c6:	bf18      	it	ne
 80086c8:	3203      	addne	r2, #3
 80086ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80086ce:	bf18      	it	ne
 80086d0:	3203      	addne	r2, #3
 80086d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80086d6:	f1c2 0320 	rsb	r3, r2, #32
 80086da:	fa00 fc03 	lsl.w	ip, r0, r3
 80086de:	fa20 f002 	lsr.w	r0, r0, r2
 80086e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80086e6:	ea40 000e 	orr.w	r0, r0, lr
 80086ea:	fa21 f102 	lsr.w	r1, r1, r2
 80086ee:	4414      	add	r4, r2
 80086f0:	e6c1      	b.n	8008476 <__adddf3+0xe6>
__floatdidf():
 80086f2:	bf00      	nop

080086f4 <__aeabi_dmul>:
__aeabi_dmul():
 80086f4:	b570      	push	{r4, r5, r6, lr}
 80086f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008702:	bf1d      	ittte	ne
 8008704:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008708:	ea94 0f0c 	teqne	r4, ip
 800870c:	ea95 0f0c 	teqne	r5, ip
 8008710:	f000 f8de 	bleq	80088d0 <__aeabi_dmul+0x1dc>
 8008714:	442c      	add	r4, r5
 8008716:	ea81 0603 	eor.w	r6, r1, r3
 800871a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800871e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008722:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008726:	bf18      	it	ne
 8008728:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800872c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008734:	d038      	beq.n	80087a8 <__aeabi_dmul+0xb4>
 8008736:	fba0 ce02 	umull	ip, lr, r0, r2
 800873a:	f04f 0500 	mov.w	r5, #0
 800873e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008742:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008746:	fbe0 e503 	umlal	lr, r5, r0, r3
 800874a:	f04f 0600 	mov.w	r6, #0
 800874e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008752:	f09c 0f00 	teq	ip, #0
 8008756:	bf18      	it	ne
 8008758:	f04e 0e01 	orrne.w	lr, lr, #1
 800875c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008760:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008764:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008768:	d204      	bcs.n	8008774 <__aeabi_dmul+0x80>
 800876a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800876e:	416d      	adcs	r5, r5
 8008770:	eb46 0606 	adc.w	r6, r6, r6
 8008774:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008778:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800877c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008780:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008784:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008788:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800878c:	bf88      	it	hi
 800878e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008792:	d81e      	bhi.n	80087d2 <__aeabi_dmul+0xde>
 8008794:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008798:	bf08      	it	eq
 800879a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800879e:	f150 0000 	adcs.w	r0, r0, #0
 80087a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80087ac:	ea46 0101 	orr.w	r1, r6, r1
 80087b0:	ea40 0002 	orr.w	r0, r0, r2
 80087b4:	ea81 0103 	eor.w	r1, r1, r3
 80087b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80087bc:	bfc2      	ittt	gt
 80087be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80087c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80087c6:	bd70      	popgt	{r4, r5, r6, pc}
 80087c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80087cc:	f04f 0e00 	mov.w	lr, #0
 80087d0:	3c01      	subs	r4, #1
 80087d2:	f300 80ab 	bgt.w	800892c <__aeabi_dmul+0x238>
 80087d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80087da:	bfde      	ittt	le
 80087dc:	2000      	movle	r0, #0
 80087de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80087e2:	bd70      	pople	{r4, r5, r6, pc}
 80087e4:	f1c4 0400 	rsb	r4, r4, #0
 80087e8:	3c20      	subs	r4, #32
 80087ea:	da35      	bge.n	8008858 <__aeabi_dmul+0x164>
 80087ec:	340c      	adds	r4, #12
 80087ee:	dc1b      	bgt.n	8008828 <__aeabi_dmul+0x134>
 80087f0:	f104 0414 	add.w	r4, r4, #20
 80087f4:	f1c4 0520 	rsb	r5, r4, #32
 80087f8:	fa00 f305 	lsl.w	r3, r0, r5
 80087fc:	fa20 f004 	lsr.w	r0, r0, r4
 8008800:	fa01 f205 	lsl.w	r2, r1, r5
 8008804:	ea40 0002 	orr.w	r0, r0, r2
 8008808:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800880c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008810:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008814:	fa21 f604 	lsr.w	r6, r1, r4
 8008818:	eb42 0106 	adc.w	r1, r2, r6
 800881c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008820:	bf08      	it	eq
 8008822:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008826:	bd70      	pop	{r4, r5, r6, pc}
 8008828:	f1c4 040c 	rsb	r4, r4, #12
 800882c:	f1c4 0520 	rsb	r5, r4, #32
 8008830:	fa00 f304 	lsl.w	r3, r0, r4
 8008834:	fa20 f005 	lsr.w	r0, r0, r5
 8008838:	fa01 f204 	lsl.w	r2, r1, r4
 800883c:	ea40 0002 	orr.w	r0, r0, r2
 8008840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008848:	f141 0100 	adc.w	r1, r1, #0
 800884c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008850:	bf08      	it	eq
 8008852:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008856:	bd70      	pop	{r4, r5, r6, pc}
 8008858:	f1c4 0520 	rsb	r5, r4, #32
 800885c:	fa00 f205 	lsl.w	r2, r0, r5
 8008860:	ea4e 0e02 	orr.w	lr, lr, r2
 8008864:	fa20 f304 	lsr.w	r3, r0, r4
 8008868:	fa01 f205 	lsl.w	r2, r1, r5
 800886c:	ea43 0302 	orr.w	r3, r3, r2
 8008870:	fa21 f004 	lsr.w	r0, r1, r4
 8008874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008878:	fa21 f204 	lsr.w	r2, r1, r4
 800887c:	ea20 0002 	bic.w	r0, r0, r2
 8008880:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008884:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008888:	bf08      	it	eq
 800888a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800888e:	bd70      	pop	{r4, r5, r6, pc}
 8008890:	f094 0f00 	teq	r4, #0
 8008894:	d10f      	bne.n	80088b6 <__aeabi_dmul+0x1c2>
 8008896:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800889a:	0040      	lsls	r0, r0, #1
 800889c:	eb41 0101 	adc.w	r1, r1, r1
 80088a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80088a4:	bf08      	it	eq
 80088a6:	3c01      	subeq	r4, #1
 80088a8:	d0f7      	beq.n	800889a <__aeabi_dmul+0x1a6>
 80088aa:	ea41 0106 	orr.w	r1, r1, r6
 80088ae:	f095 0f00 	teq	r5, #0
 80088b2:	bf18      	it	ne
 80088b4:	4770      	bxne	lr
 80088b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80088ba:	0052      	lsls	r2, r2, #1
 80088bc:	eb43 0303 	adc.w	r3, r3, r3
 80088c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80088c4:	bf08      	it	eq
 80088c6:	3d01      	subeq	r5, #1
 80088c8:	d0f7      	beq.n	80088ba <__aeabi_dmul+0x1c6>
 80088ca:	ea43 0306 	orr.w	r3, r3, r6
 80088ce:	4770      	bx	lr
 80088d0:	ea94 0f0c 	teq	r4, ip
 80088d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80088d8:	bf18      	it	ne
 80088da:	ea95 0f0c 	teqne	r5, ip
 80088de:	d00c      	beq.n	80088fa <__aeabi_dmul+0x206>
 80088e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80088e4:	bf18      	it	ne
 80088e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80088ea:	d1d1      	bne.n	8008890 <__aeabi_dmul+0x19c>
 80088ec:	ea81 0103 	eor.w	r1, r1, r3
 80088f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80088f4:	f04f 0000 	mov.w	r0, #0
 80088f8:	bd70      	pop	{r4, r5, r6, pc}
 80088fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80088fe:	bf06      	itte	eq
 8008900:	4610      	moveq	r0, r2
 8008902:	4619      	moveq	r1, r3
 8008904:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008908:	d019      	beq.n	800893e <__aeabi_dmul+0x24a>
 800890a:	ea94 0f0c 	teq	r4, ip
 800890e:	d102      	bne.n	8008916 <__aeabi_dmul+0x222>
 8008910:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008914:	d113      	bne.n	800893e <__aeabi_dmul+0x24a>
 8008916:	ea95 0f0c 	teq	r5, ip
 800891a:	d105      	bne.n	8008928 <__aeabi_dmul+0x234>
 800891c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008920:	bf1c      	itt	ne
 8008922:	4610      	movne	r0, r2
 8008924:	4619      	movne	r1, r3
 8008926:	d10a      	bne.n	800893e <__aeabi_dmul+0x24a>
 8008928:	ea81 0103 	eor.w	r1, r1, r3
 800892c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008930:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008934:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008938:	f04f 0000 	mov.w	r0, #0
 800893c:	bd70      	pop	{r4, r5, r6, pc}
 800893e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008942:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008946:	bd70      	pop	{r4, r5, r6, pc}

08008948 <__aeabi_ddiv>:
__aeabi_ddiv():
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800894e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008952:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008956:	bf1d      	ittte	ne
 8008958:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800895c:	ea94 0f0c 	teqne	r4, ip
 8008960:	ea95 0f0c 	teqne	r5, ip
 8008964:	f000 f8a7 	bleq	8008ab6 <__aeabi_ddiv+0x16e>
 8008968:	eba4 0405 	sub.w	r4, r4, r5
 800896c:	ea81 0e03 	eor.w	lr, r1, r3
 8008970:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008974:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008978:	f000 8088 	beq.w	8008a8c <__aeabi_ddiv+0x144>
 800897c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008980:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008984:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008988:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800898c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008990:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008994:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008998:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800899c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80089a0:	429d      	cmp	r5, r3
 80089a2:	bf08      	it	eq
 80089a4:	4296      	cmpeq	r6, r2
 80089a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80089aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80089ae:	d202      	bcs.n	80089b6 <__aeabi_ddiv+0x6e>
 80089b0:	085b      	lsrs	r3, r3, #1
 80089b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80089b6:	1ab6      	subs	r6, r6, r2
 80089b8:	eb65 0503 	sbc.w	r5, r5, r3
 80089bc:	085b      	lsrs	r3, r3, #1
 80089be:	ea4f 0232 	mov.w	r2, r2, rrx
 80089c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80089c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80089ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80089ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80089d2:	bf22      	ittt	cs
 80089d4:	1ab6      	subcs	r6, r6, r2
 80089d6:	4675      	movcs	r5, lr
 80089d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80089dc:	085b      	lsrs	r3, r3, #1
 80089de:	ea4f 0232 	mov.w	r2, r2, rrx
 80089e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80089e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80089ea:	bf22      	ittt	cs
 80089ec:	1ab6      	subcs	r6, r6, r2
 80089ee:	4675      	movcs	r5, lr
 80089f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80089f4:	085b      	lsrs	r3, r3, #1
 80089f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80089fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80089fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008a02:	bf22      	ittt	cs
 8008a04:	1ab6      	subcs	r6, r6, r2
 8008a06:	4675      	movcs	r5, lr
 8008a08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008a0c:	085b      	lsrs	r3, r3, #1
 8008a0e:	ea4f 0232 	mov.w	r2, r2, rrx
 8008a12:	ebb6 0e02 	subs.w	lr, r6, r2
 8008a16:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008a1a:	bf22      	ittt	cs
 8008a1c:	1ab6      	subcs	r6, r6, r2
 8008a1e:	4675      	movcs	r5, lr
 8008a20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008a24:	ea55 0e06 	orrs.w	lr, r5, r6
 8008a28:	d018      	beq.n	8008a5c <__aeabi_ddiv+0x114>
 8008a2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008a2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008a32:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008a36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008a3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008a3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008a42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008a46:	d1c0      	bne.n	80089ca <__aeabi_ddiv+0x82>
 8008a48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008a4c:	d10b      	bne.n	8008a66 <__aeabi_ddiv+0x11e>
 8008a4e:	ea41 0100 	orr.w	r1, r1, r0
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008a5a:	e7b6      	b.n	80089ca <__aeabi_ddiv+0x82>
 8008a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008a60:	bf04      	itt	eq
 8008a62:	4301      	orreq	r1, r0
 8008a64:	2000      	moveq	r0, #0
 8008a66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008a6a:	bf88      	it	hi
 8008a6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008a70:	f63f aeaf 	bhi.w	80087d2 <__aeabi_dmul+0xde>
 8008a74:	ebb5 0c03 	subs.w	ip, r5, r3
 8008a78:	bf04      	itt	eq
 8008a7a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008a7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008a82:	f150 0000 	adcs.w	r0, r0, #0
 8008a86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008a8a:	bd70      	pop	{r4, r5, r6, pc}
 8008a8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008a90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008a94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008a98:	bfc2      	ittt	gt
 8008a9a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008a9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008aa2:	bd70      	popgt	{r4, r5, r6, pc}
 8008aa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008aa8:	f04f 0e00 	mov.w	lr, #0
 8008aac:	3c01      	subs	r4, #1
 8008aae:	e690      	b.n	80087d2 <__aeabi_dmul+0xde>
 8008ab0:	ea45 0e06 	orr.w	lr, r5, r6
 8008ab4:	e68d      	b.n	80087d2 <__aeabi_dmul+0xde>
 8008ab6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008aba:	ea94 0f0c 	teq	r4, ip
 8008abe:	bf08      	it	eq
 8008ac0:	ea95 0f0c 	teqeq	r5, ip
 8008ac4:	f43f af3b 	beq.w	800893e <__aeabi_dmul+0x24a>
 8008ac8:	ea94 0f0c 	teq	r4, ip
 8008acc:	d10a      	bne.n	8008ae4 <__aeabi_ddiv+0x19c>
 8008ace:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008ad2:	f47f af34 	bne.w	800893e <__aeabi_dmul+0x24a>
 8008ad6:	ea95 0f0c 	teq	r5, ip
 8008ada:	f47f af25 	bne.w	8008928 <__aeabi_dmul+0x234>
 8008ade:	4610      	mov	r0, r2
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	e72c      	b.n	800893e <__aeabi_dmul+0x24a>
 8008ae4:	ea95 0f0c 	teq	r5, ip
 8008ae8:	d106      	bne.n	8008af8 <__aeabi_ddiv+0x1b0>
 8008aea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008aee:	f43f aefd 	beq.w	80088ec <__aeabi_dmul+0x1f8>
 8008af2:	4610      	mov	r0, r2
 8008af4:	4619      	mov	r1, r3
 8008af6:	e722      	b.n	800893e <__aeabi_dmul+0x24a>
 8008af8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008afc:	bf18      	it	ne
 8008afe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008b02:	f47f aec5 	bne.w	8008890 <__aeabi_dmul+0x19c>
 8008b06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008b0a:	f47f af0d 	bne.w	8008928 <__aeabi_dmul+0x234>
 8008b0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008b12:	f47f aeeb 	bne.w	80088ec <__aeabi_dmul+0x1f8>
 8008b16:	e712      	b.n	800893e <__aeabi_dmul+0x24a>

08008b18 <__gedf2>:
__gtdf2():
 8008b18:	f04f 3cff 	mov.w	ip, #4294967295
 8008b1c:	e006      	b.n	8008b2c <__cmpdf2+0x4>
 8008b1e:	bf00      	nop

08008b20 <__ledf2>:
 8008b20:	f04f 0c01 	mov.w	ip, #1
 8008b24:	e002      	b.n	8008b2c <__cmpdf2+0x4>
 8008b26:	bf00      	nop

08008b28 <__cmpdf2>:
 8008b28:	f04f 0c01 	mov.w	ip, #1
 8008b2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008b3c:	bf18      	it	ne
 8008b3e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008b42:	d01b      	beq.n	8008b7c <__cmpdf2+0x54>
 8008b44:	b001      	add	sp, #4
 8008b46:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008b4a:	bf0c      	ite	eq
 8008b4c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008b50:	ea91 0f03 	teqne	r1, r3
 8008b54:	bf02      	ittt	eq
 8008b56:	ea90 0f02 	teqeq	r0, r2
 8008b5a:	2000      	moveq	r0, #0
 8008b5c:	4770      	bxeq	lr
 8008b5e:	f110 0f00 	cmn.w	r0, #0
 8008b62:	ea91 0f03 	teq	r1, r3
 8008b66:	bf58      	it	pl
 8008b68:	4299      	cmppl	r1, r3
 8008b6a:	bf08      	it	eq
 8008b6c:	4290      	cmpeq	r0, r2
 8008b6e:	bf2c      	ite	cs
 8008b70:	17d8      	asrcs	r0, r3, #31
 8008b72:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008b76:	f040 0001 	orr.w	r0, r0, #1
 8008b7a:	4770      	bx	lr
 8008b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b84:	d102      	bne.n	8008b8c <__cmpdf2+0x64>
 8008b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008b8a:	d107      	bne.n	8008b9c <__cmpdf2+0x74>
 8008b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b94:	d1d6      	bne.n	8008b44 <__cmpdf2+0x1c>
 8008b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008b9a:	d0d3      	beq.n	8008b44 <__cmpdf2+0x1c>
 8008b9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008ba0:	4770      	bx	lr
__cmpdf2():
 8008ba2:	bf00      	nop

08008ba4 <__aeabi_cdrcmple>:
__aeabi_cdrcmple():
 8008ba4:	4684      	mov	ip, r0
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	4662      	mov	r2, ip
 8008baa:	468c      	mov	ip, r1
 8008bac:	4619      	mov	r1, r3
 8008bae:	4663      	mov	r3, ip
 8008bb0:	e000      	b.n	8008bb4 <__aeabi_cdcmpeq>
 8008bb2:	bf00      	nop

08008bb4 <__aeabi_cdcmpeq>:
 8008bb4:	b501      	push	{r0, lr}
 8008bb6:	f7ff ffb7 	bl	8008b28 <__cmpdf2>
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	bf48      	it	mi
 8008bbe:	f110 0f00 	cmnmi.w	r0, #0
 8008bc2:	bd01      	pop	{r0, pc}

08008bc4 <__aeabi_dcmpeq>:
__aeabi_dcmpeq():
 8008bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008bc8:	f7ff fff4 	bl	8008bb4 <__aeabi_cdcmpeq>
 8008bcc:	bf0c      	ite	eq
 8008bce:	2001      	moveq	r0, #1
 8008bd0:	2000      	movne	r0, #0
 8008bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8008bd6:	bf00      	nop

08008bd8 <__aeabi_dcmplt>:
__aeabi_dcmplt():
 8008bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008bdc:	f7ff ffea 	bl	8008bb4 <__aeabi_cdcmpeq>
 8008be0:	bf34      	ite	cc
 8008be2:	2001      	movcc	r0, #1
 8008be4:	2000      	movcs	r0, #0
 8008be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8008bea:	bf00      	nop

08008bec <__aeabi_dcmple>:
__aeabi_dcmple():
 8008bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008bf0:	f7ff ffe0 	bl	8008bb4 <__aeabi_cdcmpeq>
 8008bf4:	bf94      	ite	ls
 8008bf6:	2001      	movls	r0, #1
 8008bf8:	2000      	movhi	r0, #0
 8008bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8008bfe:	bf00      	nop

08008c00 <__aeabi_dcmpge>:
__aeabi_dcmpge():
 8008c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008c04:	f7ff ffce 	bl	8008ba4 <__aeabi_cdrcmple>
 8008c08:	bf94      	ite	ls
 8008c0a:	2001      	movls	r0, #1
 8008c0c:	2000      	movhi	r0, #0
 8008c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008c12:	bf00      	nop

08008c14 <__aeabi_dcmpgt>:
__aeabi_dcmpgt():
 8008c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008c18:	f7ff ffc4 	bl	8008ba4 <__aeabi_cdrcmple>
 8008c1c:	bf34      	ite	cc
 8008c1e:	2001      	movcc	r0, #1
 8008c20:	2000      	movcs	r0, #0
 8008c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8008c26:	bf00      	nop

08008c28 <__aeabi_d2iz>:
__fixdfsi():
 8008c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008c2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008c30:	d215      	bcs.n	8008c5e <__aeabi_d2iz+0x36>
 8008c32:	d511      	bpl.n	8008c58 <__aeabi_d2iz+0x30>
 8008c34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008c38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008c3c:	d912      	bls.n	8008c64 <__aeabi_d2iz+0x3c>
 8008c3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008c4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008c4e:	fa23 f002 	lsr.w	r0, r3, r2
 8008c52:	bf18      	it	ne
 8008c54:	4240      	negne	r0, r0
 8008c56:	4770      	bx	lr
 8008c58:	f04f 0000 	mov.w	r0, #0
 8008c5c:	4770      	bx	lr
 8008c5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008c62:	d105      	bne.n	8008c70 <__aeabi_d2iz+0x48>
 8008c64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008c68:	bf08      	it	eq
 8008c6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008c6e:	4770      	bx	lr
 8008c70:	f04f 0000 	mov.w	r0, #0
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop

08008c78 <__aeabi_uldivmod>:
$t():
 8008c78:	b94b      	cbnz	r3, 8008c8e <__aeabi_uldivmod+0x16>
 8008c7a:	b942      	cbnz	r2, 8008c8e <__aeabi_uldivmod+0x16>
 8008c7c:	2900      	cmp	r1, #0
 8008c7e:	bf08      	it	eq
 8008c80:	2800      	cmpeq	r0, #0
 8008c82:	d002      	beq.n	8008c8a <__aeabi_uldivmod+0x12>
 8008c84:	f04f 31ff 	mov.w	r1, #4294967295
 8008c88:	4608      	mov	r0, r1
 8008c8a:	f000 b83b 	b.w	8008d04 <__aeabi_idiv0>
 8008c8e:	b082      	sub	sp, #8
 8008c90:	46ec      	mov	ip, sp
 8008c92:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008c96:	f000 f81d 	bl	8008cd4 <__gnu_uldivmod_helper>
 8008c9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008c9e:	b002      	add	sp, #8
 8008ca0:	bc0c      	pop	{r2, r3}
 8008ca2:	4770      	bx	lr

08008ca4 <__gnu_ldivmod_helper>:
__gnu_ldivmod_helper():
 8008ca4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8008ca8:	9e06      	ldr	r6, [sp, #24]
 8008caa:	4614      	mov	r4, r2
 8008cac:	461d      	mov	r5, r3
 8008cae:	4680      	mov	r8, r0
 8008cb0:	4689      	mov	r9, r1
 8008cb2:	f000 f829 	bl	8008d08 <__divdi3>
 8008cb6:	fb04 f301 	mul.w	r3, r4, r1
 8008cba:	fb00 3305 	mla	r3, r0, r5, r3
 8008cbe:	fba4 4500 	umull	r4, r5, r4, r0
 8008cc2:	441d      	add	r5, r3
 8008cc4:	ebb8 0404 	subs.w	r4, r8, r4
 8008cc8:	eb69 0505 	sbc.w	r5, r9, r5
 8008ccc:	e9c6 4500 	strd	r4, r5, [r6]
 8008cd0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08008cd4 <__gnu_uldivmod_helper>:
__gnu_uldivmod_helper():
 8008cd4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8008cd8:	9e06      	ldr	r6, [sp, #24]
 8008cda:	4614      	mov	r4, r2
 8008cdc:	4680      	mov	r8, r0
 8008cde:	4689      	mov	r9, r1
 8008ce0:	461d      	mov	r5, r3
 8008ce2:	f000 f95d 	bl	8008fa0 <__udivdi3>
 8008ce6:	fb00 f505 	mul.w	r5, r0, r5
 8008cea:	fb04 5301 	mla	r3, r4, r1, r5
 8008cee:	fba0 4504 	umull	r4, r5, r0, r4
 8008cf2:	441d      	add	r5, r3
 8008cf4:	ebb8 0404 	subs.w	r4, r8, r4
 8008cf8:	eb69 0505 	sbc.w	r5, r9, r5
 8008cfc:	e9c6 4500 	strd	r4, r5, [r6]
 8008d00:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08008d04 <__aeabi_idiv0>:
__aeabi_ldiv0():
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop

08008d08 <__divdi3>:
__divdi3():
 8008d08:	2900      	cmp	r1, #0
 8008d0a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008d0e:	f2c0 809f 	blt.w	8008e50 <__divdi3+0x148>
 8008d12:	2400      	movs	r4, #0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f2c0 8096 	blt.w	8008e46 <__divdi3+0x13e>
 8008d1a:	4615      	mov	r5, r2
 8008d1c:	4606      	mov	r6, r0
 8008d1e:	460f      	mov	r7, r1
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d13e      	bne.n	8008da2 <__divdi3+0x9a>
 8008d24:	428a      	cmp	r2, r1
 8008d26:	d957      	bls.n	8008dd8 <__divdi3+0xd0>
 8008d28:	fab2 f382 	clz	r3, r2
 8008d2c:	b14b      	cbz	r3, 8008d42 <__divdi3+0x3a>
 8008d2e:	f1c3 0220 	rsb	r2, r3, #32
 8008d32:	fa01 f703 	lsl.w	r7, r1, r3
 8008d36:	fa20 f202 	lsr.w	r2, r0, r2
 8008d3a:	409d      	lsls	r5, r3
 8008d3c:	4317      	orrs	r7, r2
 8008d3e:	fa00 f603 	lsl.w	r6, r0, r3
 8008d42:	0c29      	lsrs	r1, r5, #16
 8008d44:	fbb7 f2f1 	udiv	r2, r7, r1
 8008d48:	0c33      	lsrs	r3, r6, #16
 8008d4a:	fb01 7c12 	mls	ip, r1, r2, r7
 8008d4e:	b2a8      	uxth	r0, r5
 8008d50:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
 8008d54:	fb00 f302 	mul.w	r3, r0, r2
 8008d58:	42bb      	cmp	r3, r7
 8008d5a:	d909      	bls.n	8008d70 <__divdi3+0x68>
 8008d5c:	197f      	adds	r7, r7, r5
 8008d5e:	f102 3cff 	add.w	ip, r2, #4294967295
 8008d62:	f080 8101 	bcs.w	8008f68 <__divdi3+0x260>
 8008d66:	42bb      	cmp	r3, r7
 8008d68:	f240 80fe 	bls.w	8008f68 <__divdi3+0x260>
 8008d6c:	3a02      	subs	r2, #2
 8008d6e:	442f      	add	r7, r5
 8008d70:	1aff      	subs	r7, r7, r3
 8008d72:	fbb7 f3f1 	udiv	r3, r7, r1
 8008d76:	b2b6      	uxth	r6, r6
 8008d78:	fb01 7113 	mls	r1, r1, r3, r7
 8008d7c:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8008d80:	fb00 f003 	mul.w	r0, r0, r3
 8008d84:	4288      	cmp	r0, r1
 8008d86:	d908      	bls.n	8008d9a <__divdi3+0x92>
 8008d88:	1949      	adds	r1, r1, r5
 8008d8a:	f103 37ff 	add.w	r7, r3, #4294967295
 8008d8e:	f080 80ed 	bcs.w	8008f6c <__divdi3+0x264>
 8008d92:	4288      	cmp	r0, r1
 8008d94:	f240 80ea 	bls.w	8008f6c <__divdi3+0x264>
 8008d98:	3b02      	subs	r3, #2
 8008d9a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8008d9e:	2300      	movs	r3, #0
 8008da0:	e003      	b.n	8008daa <__divdi3+0xa2>
 8008da2:	428b      	cmp	r3, r1
 8008da4:	d90a      	bls.n	8008dbc <__divdi3+0xb4>
 8008da6:	2300      	movs	r3, #0
 8008da8:	461a      	mov	r2, r3
 8008daa:	4610      	mov	r0, r2
 8008dac:	4619      	mov	r1, r3
 8008dae:	b114      	cbz	r4, 8008db6 <__divdi3+0xae>
 8008db0:	4240      	negs	r0, r0
 8008db2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008db6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008dba:	4770      	bx	lr
 8008dbc:	fab3 f883 	clz	r8, r3
 8008dc0:	f1b8 0f00 	cmp.w	r8, #0
 8008dc4:	f040 8084 	bne.w	8008ed0 <__divdi3+0x1c8>
 8008dc8:	428b      	cmp	r3, r1
 8008dca:	d302      	bcc.n	8008dd2 <__divdi3+0xca>
 8008dcc:	4282      	cmp	r2, r0
 8008dce:	f200 80de 	bhi.w	8008f8e <__divdi3+0x286>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	e7e8      	b.n	8008daa <__divdi3+0xa2>
 8008dd8:	b912      	cbnz	r2, 8008de0 <__divdi3+0xd8>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	fbb3 f5f2 	udiv	r5, r3, r2
 8008de0:	fab5 f285 	clz	r2, r5
 8008de4:	2a00      	cmp	r2, #0
 8008de6:	d139      	bne.n	8008e5c <__divdi3+0x154>
 8008de8:	1b7f      	subs	r7, r7, r5
 8008dea:	0c28      	lsrs	r0, r5, #16
 8008dec:	fa1f fc85 	uxth.w	ip, r5
 8008df0:	2301      	movs	r3, #1
 8008df2:	fbb7 f1f0 	udiv	r1, r7, r0
 8008df6:	0c32      	lsrs	r2, r6, #16
 8008df8:	fb00 7711 	mls	r7, r0, r1, r7
 8008dfc:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8008e00:	fb0c f201 	mul.w	r2, ip, r1
 8008e04:	42ba      	cmp	r2, r7
 8008e06:	d907      	bls.n	8008e18 <__divdi3+0x110>
 8008e08:	197f      	adds	r7, r7, r5
 8008e0a:	f101 38ff 	add.w	r8, r1, #4294967295
 8008e0e:	d202      	bcs.n	8008e16 <__divdi3+0x10e>
 8008e10:	42ba      	cmp	r2, r7
 8008e12:	f200 80c1 	bhi.w	8008f98 <__divdi3+0x290>
 8008e16:	4641      	mov	r1, r8
 8008e18:	1abf      	subs	r7, r7, r2
 8008e1a:	fbb7 f2f0 	udiv	r2, r7, r0
 8008e1e:	b2b6      	uxth	r6, r6
 8008e20:	fb00 7012 	mls	r0, r0, r2, r7
 8008e24:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
 8008e28:	fb0c fc02 	mul.w	ip, ip, r2
 8008e2c:	4584      	cmp	ip, r0
 8008e2e:	d907      	bls.n	8008e40 <__divdi3+0x138>
 8008e30:	1940      	adds	r0, r0, r5
 8008e32:	f102 37ff 	add.w	r7, r2, #4294967295
 8008e36:	d202      	bcs.n	8008e3e <__divdi3+0x136>
 8008e38:	4584      	cmp	ip, r0
 8008e3a:	f200 80ab 	bhi.w	8008f94 <__divdi3+0x28c>
 8008e3e:	463a      	mov	r2, r7
 8008e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008e44:	e7b1      	b.n	8008daa <__divdi3+0xa2>
 8008e46:	43e4      	mvns	r4, r4
 8008e48:	4252      	negs	r2, r2
 8008e4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008e4e:	e764      	b.n	8008d1a <__divdi3+0x12>
 8008e50:	4240      	negs	r0, r0
 8008e52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008e56:	f04f 34ff 	mov.w	r4, #4294967295
 8008e5a:	e75b      	b.n	8008d14 <__divdi3+0xc>
 8008e5c:	4095      	lsls	r5, r2
 8008e5e:	f1c2 0320 	rsb	r3, r2, #32
 8008e62:	fa27 f103 	lsr.w	r1, r7, r3
 8008e66:	0c28      	lsrs	r0, r5, #16
 8008e68:	fa26 f303 	lsr.w	r3, r6, r3
 8008e6c:	4097      	lsls	r7, r2
 8008e6e:	fbb1 f8f0 	udiv	r8, r1, r0
 8008e72:	431f      	orrs	r7, r3
 8008e74:	0c3b      	lsrs	r3, r7, #16
 8008e76:	fb00 1118 	mls	r1, r0, r8, r1
 8008e7a:	fa1f fc85 	uxth.w	ip, r5
 8008e7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8008e82:	fb0c f308 	mul.w	r3, ip, r8
 8008e86:	428b      	cmp	r3, r1
 8008e88:	fa06 f602 	lsl.w	r6, r6, r2
 8008e8c:	d908      	bls.n	8008ea0 <__divdi3+0x198>
 8008e8e:	1949      	adds	r1, r1, r5
 8008e90:	f108 32ff 	add.w	r2, r8, #4294967295
 8008e94:	d279      	bcs.n	8008f8a <__divdi3+0x282>
 8008e96:	428b      	cmp	r3, r1
 8008e98:	d977      	bls.n	8008f8a <__divdi3+0x282>
 8008e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8008e9e:	4429      	add	r1, r5
 8008ea0:	1ac9      	subs	r1, r1, r3
 8008ea2:	fbb1 f3f0 	udiv	r3, r1, r0
 8008ea6:	b2bf      	uxth	r7, r7
 8008ea8:	fb00 1113 	mls	r1, r0, r3, r1
 8008eac:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8008eb0:	fb0c f203 	mul.w	r2, ip, r3
 8008eb4:	42ba      	cmp	r2, r7
 8008eb6:	d907      	bls.n	8008ec8 <__divdi3+0x1c0>
 8008eb8:	197f      	adds	r7, r7, r5
 8008eba:	f103 31ff 	add.w	r1, r3, #4294967295
 8008ebe:	d260      	bcs.n	8008f82 <__divdi3+0x27a>
 8008ec0:	42ba      	cmp	r2, r7
 8008ec2:	d95e      	bls.n	8008f82 <__divdi3+0x27a>
 8008ec4:	3b02      	subs	r3, #2
 8008ec6:	442f      	add	r7, r5
 8008ec8:	1abf      	subs	r7, r7, r2
 8008eca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008ece:	e790      	b.n	8008df2 <__divdi3+0xea>
 8008ed0:	f1c8 0220 	rsb	r2, r8, #32
 8008ed4:	fa03 fc08 	lsl.w	ip, r3, r8
 8008ed8:	fa25 f302 	lsr.w	r3, r5, r2
 8008edc:	ea43 0c0c 	orr.w	ip, r3, ip
 8008ee0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008ee4:	fa21 f302 	lsr.w	r3, r1, r2
 8008ee8:	fa01 f708 	lsl.w	r7, r1, r8
 8008eec:	fa20 f202 	lsr.w	r2, r0, r2
 8008ef0:	fbb3 f1f9 	udiv	r1, r3, r9
 8008ef4:	4317      	orrs	r7, r2
 8008ef6:	fb09 3311 	mls	r3, r9, r1, r3
 8008efa:	0c3a      	lsrs	r2, r7, #16
 8008efc:	fa1f fb8c 	uxth.w	fp, ip
 8008f00:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8008f04:	fb0b fa01 	mul.w	sl, fp, r1
 8008f08:	459a      	cmp	sl, r3
 8008f0a:	fa05 f008 	lsl.w	r0, r5, r8
 8008f0e:	d908      	bls.n	8008f22 <__divdi3+0x21a>
 8008f10:	eb13 030c 	adds.w	r3, r3, ip
 8008f14:	f101 32ff 	add.w	r2, r1, #4294967295
 8008f18:	d235      	bcs.n	8008f86 <__divdi3+0x27e>
 8008f1a:	459a      	cmp	sl, r3
 8008f1c:	d933      	bls.n	8008f86 <__divdi3+0x27e>
 8008f1e:	3902      	subs	r1, #2
 8008f20:	4463      	add	r3, ip
 8008f22:	ebca 0303 	rsb	r3, sl, r3
 8008f26:	fbb3 f2f9 	udiv	r2, r3, r9
 8008f2a:	fb09 3312 	mls	r3, r9, r2, r3
 8008f2e:	b2bf      	uxth	r7, r7
 8008f30:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8008f34:	fb0b f902 	mul.w	r9, fp, r2
 8008f38:	45b9      	cmp	r9, r7
 8008f3a:	d908      	bls.n	8008f4e <__divdi3+0x246>
 8008f3c:	eb17 070c 	adds.w	r7, r7, ip
 8008f40:	f102 33ff 	add.w	r3, r2, #4294967295
 8008f44:	d21b      	bcs.n	8008f7e <__divdi3+0x276>
 8008f46:	45b9      	cmp	r9, r7
 8008f48:	d919      	bls.n	8008f7e <__divdi3+0x276>
 8008f4a:	3a02      	subs	r2, #2
 8008f4c:	4467      	add	r7, ip
 8008f4e:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
 8008f52:	fba5 0100 	umull	r0, r1, r5, r0
 8008f56:	ebc9 0707 	rsb	r7, r9, r7
 8008f5a:	428f      	cmp	r7, r1
 8008f5c:	f04f 0300 	mov.w	r3, #0
 8008f60:	d30a      	bcc.n	8008f78 <__divdi3+0x270>
 8008f62:	d005      	beq.n	8008f70 <__divdi3+0x268>
 8008f64:	462a      	mov	r2, r5
 8008f66:	e720      	b.n	8008daa <__divdi3+0xa2>
 8008f68:	4662      	mov	r2, ip
 8008f6a:	e701      	b.n	8008d70 <__divdi3+0x68>
 8008f6c:	463b      	mov	r3, r7
 8008f6e:	e714      	b.n	8008d9a <__divdi3+0x92>
 8008f70:	fa06 f608 	lsl.w	r6, r6, r8
 8008f74:	4286      	cmp	r6, r0
 8008f76:	d2f5      	bcs.n	8008f64 <__divdi3+0x25c>
 8008f78:	1e6a      	subs	r2, r5, #1
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e715      	b.n	8008daa <__divdi3+0xa2>
 8008f7e:	461a      	mov	r2, r3
 8008f80:	e7e5      	b.n	8008f4e <__divdi3+0x246>
 8008f82:	460b      	mov	r3, r1
 8008f84:	e7a0      	b.n	8008ec8 <__divdi3+0x1c0>
 8008f86:	4611      	mov	r1, r2
 8008f88:	e7cb      	b.n	8008f22 <__divdi3+0x21a>
 8008f8a:	4690      	mov	r8, r2
 8008f8c:	e788      	b.n	8008ea0 <__divdi3+0x198>
 8008f8e:	4643      	mov	r3, r8
 8008f90:	4642      	mov	r2, r8
 8008f92:	e70a      	b.n	8008daa <__divdi3+0xa2>
 8008f94:	3a02      	subs	r2, #2
 8008f96:	e753      	b.n	8008e40 <__divdi3+0x138>
 8008f98:	3902      	subs	r1, #2
 8008f9a:	442f      	add	r7, r5
 8008f9c:	e73c      	b.n	8008e18 <__divdi3+0x110>
 8008f9e:	bf00      	nop

08008fa0 <__udivdi3>:
__udivdi3():
 8008fa0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008fa4:	4614      	mov	r4, r2
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	460e      	mov	r6, r1
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d143      	bne.n	8009036 <__udivdi3+0x96>
 8008fae:	428a      	cmp	r2, r1
 8008fb0:	d953      	bls.n	800905a <__udivdi3+0xba>
 8008fb2:	fab2 f782 	clz	r7, r2
 8008fb6:	b157      	cbz	r7, 8008fce <__udivdi3+0x2e>
 8008fb8:	f1c7 0620 	rsb	r6, r7, #32
 8008fbc:	fa20 f606 	lsr.w	r6, r0, r6
 8008fc0:	fa01 f307 	lsl.w	r3, r1, r7
 8008fc4:	fa02 f407 	lsl.w	r4, r2, r7
 8008fc8:	431e      	orrs	r6, r3
 8008fca:	fa00 f507 	lsl.w	r5, r0, r7
 8008fce:	0c21      	lsrs	r1, r4, #16
 8008fd0:	fbb6 f2f1 	udiv	r2, r6, r1
 8008fd4:	0c2b      	lsrs	r3, r5, #16
 8008fd6:	fb01 6712 	mls	r7, r1, r2, r6
 8008fda:	b2a0      	uxth	r0, r4
 8008fdc:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
 8008fe0:	fb00 f302 	mul.w	r3, r0, r2
 8008fe4:	42b3      	cmp	r3, r6
 8008fe6:	d909      	bls.n	8008ffc <__udivdi3+0x5c>
 8008fe8:	1936      	adds	r6, r6, r4
 8008fea:	f102 37ff 	add.w	r7, r2, #4294967295
 8008fee:	f080 80f6 	bcs.w	80091de <__udivdi3+0x23e>
 8008ff2:	42b3      	cmp	r3, r6
 8008ff4:	f240 80f3 	bls.w	80091de <__udivdi3+0x23e>
 8008ff8:	3a02      	subs	r2, #2
 8008ffa:	4426      	add	r6, r4
 8008ffc:	1af6      	subs	r6, r6, r3
 8008ffe:	fbb6 f3f1 	udiv	r3, r6, r1
 8009002:	b2ad      	uxth	r5, r5
 8009004:	fb01 6113 	mls	r1, r1, r3, r6
 8009008:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 800900c:	fb00 f003 	mul.w	r0, r0, r3
 8009010:	4288      	cmp	r0, r1
 8009012:	d908      	bls.n	8009026 <__udivdi3+0x86>
 8009014:	1909      	adds	r1, r1, r4
 8009016:	f103 36ff 	add.w	r6, r3, #4294967295
 800901a:	f080 80e2 	bcs.w	80091e2 <__udivdi3+0x242>
 800901e:	4288      	cmp	r0, r1
 8009020:	f240 80df 	bls.w	80091e2 <__udivdi3+0x242>
 8009024:	3b02      	subs	r3, #2
 8009026:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800902a:	2300      	movs	r3, #0
 800902c:	4610      	mov	r0, r2
 800902e:	4619      	mov	r1, r3
 8009030:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009034:	4770      	bx	lr
 8009036:	428b      	cmp	r3, r1
 8009038:	d84a      	bhi.n	80090d0 <__udivdi3+0x130>
 800903a:	fab3 f683 	clz	r6, r3
 800903e:	2e00      	cmp	r6, #0
 8009040:	d14d      	bne.n	80090de <__udivdi3+0x13e>
 8009042:	428b      	cmp	r3, r1
 8009044:	d302      	bcc.n	800904c <__udivdi3+0xac>
 8009046:	4282      	cmp	r2, r0
 8009048:	f200 80d6 	bhi.w	80091f8 <__udivdi3+0x258>
 800904c:	2300      	movs	r3, #0
 800904e:	2201      	movs	r2, #1
 8009050:	4610      	mov	r0, r2
 8009052:	4619      	mov	r1, r3
 8009054:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009058:	4770      	bx	lr
 800905a:	b912      	cbnz	r2, 8009062 <__udivdi3+0xc2>
 800905c:	2401      	movs	r4, #1
 800905e:	fbb4 f4f2 	udiv	r4, r4, r2
 8009062:	fab4 f284 	clz	r2, r4
 8009066:	2a00      	cmp	r2, #0
 8009068:	d17c      	bne.n	8009164 <__udivdi3+0x1c4>
 800906a:	1b09      	subs	r1, r1, r4
 800906c:	0c26      	lsrs	r6, r4, #16
 800906e:	b2a7      	uxth	r7, r4
 8009070:	2301      	movs	r3, #1
 8009072:	fbb1 f0f6 	udiv	r0, r1, r6
 8009076:	0c2a      	lsrs	r2, r5, #16
 8009078:	fb06 1110 	mls	r1, r6, r0, r1
 800907c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8009080:	fb07 f200 	mul.w	r2, r7, r0
 8009084:	428a      	cmp	r2, r1
 8009086:	d907      	bls.n	8009098 <__udivdi3+0xf8>
 8009088:	1909      	adds	r1, r1, r4
 800908a:	f100 3cff 	add.w	ip, r0, #4294967295
 800908e:	d202      	bcs.n	8009096 <__udivdi3+0xf6>
 8009090:	428a      	cmp	r2, r1
 8009092:	f200 80c3 	bhi.w	800921c <__udivdi3+0x27c>
 8009096:	4660      	mov	r0, ip
 8009098:	1a89      	subs	r1, r1, r2
 800909a:	fbb1 f2f6 	udiv	r2, r1, r6
 800909e:	b2ad      	uxth	r5, r5
 80090a0:	fb06 1112 	mls	r1, r6, r2, r1
 80090a4:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80090a8:	fb07 f702 	mul.w	r7, r7, r2
 80090ac:	42af      	cmp	r7, r5
 80090ae:	d908      	bls.n	80090c2 <__udivdi3+0x122>
 80090b0:	192c      	adds	r4, r5, r4
 80090b2:	f102 31ff 	add.w	r1, r2, #4294967295
 80090b6:	f080 8096 	bcs.w	80091e6 <__udivdi3+0x246>
 80090ba:	42a7      	cmp	r7, r4
 80090bc:	f240 8093 	bls.w	80091e6 <__udivdi3+0x246>
 80090c0:	3a02      	subs	r2, #2
 80090c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80090c6:	4610      	mov	r0, r2
 80090c8:	4619      	mov	r1, r3
 80090ca:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090ce:	4770      	bx	lr
 80090d0:	2300      	movs	r3, #0
 80090d2:	461a      	mov	r2, r3
 80090d4:	4610      	mov	r0, r2
 80090d6:	4619      	mov	r1, r3
 80090d8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090dc:	4770      	bx	lr
 80090de:	f1c6 0520 	rsb	r5, r6, #32
 80090e2:	fa22 f405 	lsr.w	r4, r2, r5
 80090e6:	40b3      	lsls	r3, r6
 80090e8:	431c      	orrs	r4, r3
 80090ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80090ee:	fa21 f305 	lsr.w	r3, r1, r5
 80090f2:	fa01 f706 	lsl.w	r7, r1, r6
 80090f6:	fa20 f505 	lsr.w	r5, r0, r5
 80090fa:	fbb3 fcf8 	udiv	ip, r3, r8
 80090fe:	432f      	orrs	r7, r5
 8009100:	fb08 331c 	mls	r3, r8, ip, r3
 8009104:	0c3d      	lsrs	r5, r7, #16
 8009106:	fa1f fa84 	uxth.w	sl, r4
 800910a:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800910e:	fb0a f90c 	mul.w	r9, sl, ip
 8009112:	4599      	cmp	r9, r3
 8009114:	fa02 fb06 	lsl.w	fp, r2, r6
 8009118:	d904      	bls.n	8009124 <__udivdi3+0x184>
 800911a:	191b      	adds	r3, r3, r4
 800911c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8009120:	d36d      	bcc.n	80091fe <__udivdi3+0x25e>
 8009122:	4694      	mov	ip, r2
 8009124:	ebc9 0303 	rsb	r3, r9, r3
 8009128:	fbb3 f5f8 	udiv	r5, r3, r8
 800912c:	fb08 3315 	mls	r3, r8, r5, r3
 8009130:	b2bf      	uxth	r7, r7
 8009132:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8009136:	fb0a f805 	mul.w	r8, sl, r5
 800913a:	45b8      	cmp	r8, r7
 800913c:	d904      	bls.n	8009148 <__udivdi3+0x1a8>
 800913e:	193f      	adds	r7, r7, r4
 8009140:	f105 33ff 	add.w	r3, r5, #4294967295
 8009144:	d361      	bcc.n	800920a <__udivdi3+0x26a>
 8009146:	461d      	mov	r5, r3
 8009148:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800914c:	fbac 230b 	umull	r2, r3, ip, fp
 8009150:	ebc8 0707 	rsb	r7, r8, r7
 8009154:	429f      	cmp	r7, r3
 8009156:	f04f 0500 	mov.w	r5, #0
 800915a:	d349      	bcc.n	80091f0 <__udivdi3+0x250>
 800915c:	d045      	beq.n	80091ea <__udivdi3+0x24a>
 800915e:	4662      	mov	r2, ip
 8009160:	462b      	mov	r3, r5
 8009162:	e763      	b.n	800902c <__udivdi3+0x8c>
 8009164:	4094      	lsls	r4, r2
 8009166:	f1c2 0320 	rsb	r3, r2, #32
 800916a:	fa21 fc03 	lsr.w	ip, r1, r3
 800916e:	0c26      	lsrs	r6, r4, #16
 8009170:	fa20 f303 	lsr.w	r3, r0, r3
 8009174:	fa01 f502 	lsl.w	r5, r1, r2
 8009178:	fbbc f8f6 	udiv	r8, ip, r6
 800917c:	ea43 0105 	orr.w	r1, r3, r5
 8009180:	0c0b      	lsrs	r3, r1, #16
 8009182:	fb06 cc18 	mls	ip, r6, r8, ip
 8009186:	b2a7      	uxth	r7, r4
 8009188:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 800918c:	fb07 f308 	mul.w	r3, r7, r8
 8009190:	4563      	cmp	r3, ip
 8009192:	fa00 f502 	lsl.w	r5, r0, r2
 8009196:	d909      	bls.n	80091ac <__udivdi3+0x20c>
 8009198:	eb1c 0c04 	adds.w	ip, ip, r4
 800919c:	f108 32ff 	add.w	r2, r8, #4294967295
 80091a0:	d23a      	bcs.n	8009218 <__udivdi3+0x278>
 80091a2:	4563      	cmp	r3, ip
 80091a4:	d938      	bls.n	8009218 <__udivdi3+0x278>
 80091a6:	f1a8 0802 	sub.w	r8, r8, #2
 80091aa:	44a4      	add	ip, r4
 80091ac:	ebc3 0c0c 	rsb	ip, r3, ip
 80091b0:	fbbc f3f6 	udiv	r3, ip, r6
 80091b4:	b289      	uxth	r1, r1
 80091b6:	fb06 cc13 	mls	ip, r6, r3, ip
 80091ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80091be:	fb07 f203 	mul.w	r2, r7, r3
 80091c2:	428a      	cmp	r2, r1
 80091c4:	d907      	bls.n	80091d6 <__udivdi3+0x236>
 80091c6:	1909      	adds	r1, r1, r4
 80091c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80091cc:	d222      	bcs.n	8009214 <__udivdi3+0x274>
 80091ce:	428a      	cmp	r2, r1
 80091d0:	d920      	bls.n	8009214 <__udivdi3+0x274>
 80091d2:	3b02      	subs	r3, #2
 80091d4:	4421      	add	r1, r4
 80091d6:	1a89      	subs	r1, r1, r2
 80091d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80091dc:	e749      	b.n	8009072 <__udivdi3+0xd2>
 80091de:	463a      	mov	r2, r7
 80091e0:	e70c      	b.n	8008ffc <__udivdi3+0x5c>
 80091e2:	4633      	mov	r3, r6
 80091e4:	e71f      	b.n	8009026 <__udivdi3+0x86>
 80091e6:	460a      	mov	r2, r1
 80091e8:	e76b      	b.n	80090c2 <__udivdi3+0x122>
 80091ea:	40b0      	lsls	r0, r6
 80091ec:	4290      	cmp	r0, r2
 80091ee:	d2b6      	bcs.n	800915e <__udivdi3+0x1be>
 80091f0:	f10c 32ff 	add.w	r2, ip, #4294967295
 80091f4:	2300      	movs	r3, #0
 80091f6:	e719      	b.n	800902c <__udivdi3+0x8c>
 80091f8:	4633      	mov	r3, r6
 80091fa:	4632      	mov	r2, r6
 80091fc:	e716      	b.n	800902c <__udivdi3+0x8c>
 80091fe:	4599      	cmp	r9, r3
 8009200:	d98f      	bls.n	8009122 <__udivdi3+0x182>
 8009202:	f1ac 0c02 	sub.w	ip, ip, #2
 8009206:	4423      	add	r3, r4
 8009208:	e78c      	b.n	8009124 <__udivdi3+0x184>
 800920a:	45b8      	cmp	r8, r7
 800920c:	d99b      	bls.n	8009146 <__udivdi3+0x1a6>
 800920e:	3d02      	subs	r5, #2
 8009210:	4427      	add	r7, r4
 8009212:	e799      	b.n	8009148 <__udivdi3+0x1a8>
 8009214:	4603      	mov	r3, r0
 8009216:	e7de      	b.n	80091d6 <__udivdi3+0x236>
 8009218:	4690      	mov	r8, r2
 800921a:	e7c7      	b.n	80091ac <__udivdi3+0x20c>
 800921c:	3802      	subs	r0, #2
 800921e:	4421      	add	r1, r4
 8009220:	e73a      	b.n	8009098 <__udivdi3+0xf8>
 8009222:	bf00      	nop
$d():
 8009224:	00000001 	.word	0x00000001
 8009228:	00000000 	.word	0x00000000
 800922c:	00000002 	.word	0x00000002
 8009230:	00000000 	.word	0x00000000
 8009234:	00000003 	.word	0x00000003
 8009238:	00000000 	.word	0x00000000
 800923c:	00000004 	.word	0x00000004
 8009240:	00000000 	.word	0x00000000
 8009244:	00000005 	.word	0x00000005
 8009248:	00000000 	.word	0x00000000
 800924c:	00000001 	.word	0x00000001
 8009250:	00000000 	.word	0x00000000
 8009254:	00000002 	.word	0x00000002
 8009258:	00000000 	.word	0x00000000
 800925c:	00000003 	.word	0x00000003
 8009260:	00000000 	.word	0x00000000
 8009264:	00000004 	.word	0x00000004
 8009268:	00000000 	.word	0x00000000
 800926c:	72746c55 	.word	0x72746c55
 8009270:	6e6f7361 	.word	0x6e6f7361
 8009274:	44206369 	.word	0x44206369
 8009278:	20617461 	.word	0x20617461
 800927c:	20726f66 	.word	0x20726f66
 8009280:	65532031 	.word	0x65532031
 8009284:	646e6f63 	.word	0x646e6f63
 8009288:	00000a0d 	.word	0x00000a0d
 800928c:	75252069 	.word	0x75252069
 8009290:	2073202c 	.word	0x2073202c
 8009294:	202c7525 	.word	0x202c7525
 8009298:	75252064 	.word	0x75252064
 800929c:	00000a0d 	.word	0x00000a0d
 80092a0:	20434441 	.word	0x20434441
 80092a4:	61746144 	.word	0x61746144
 80092a8:	726f6620 	.word	0x726f6620
 80092ac:	53203120 	.word	0x53203120
 80092b0:	6e6f6365 	.word	0x6e6f6365
 80092b4:	000a0d64 	.word	0x000a0d64
 80092b8:	75252069 	.word	0x75252069
 80092bc:	2076202c 	.word	0x2076202c
 80092c0:	202c7525 	.word	0x202c7525
 80092c4:	75252069 	.word	0x75252069
 80092c8:	2076202c 	.word	0x2076202c
 80092cc:	202c7525 	.word	0x202c7525
 80092d0:	75252069 	.word	0x75252069
 80092d4:	2076202c 	.word	0x2076202c
 80092d8:	202c7525 	.word	0x202c7525
 80092dc:	75252069 	.word	0x75252069
 80092e0:	2076202c 	.word	0x2076202c
 80092e4:	202c7525 	.word	0x202c7525
 80092e8:	75252069 	.word	0x75252069
 80092ec:	2076202c 	.word	0x2076202c
 80092f0:	0a0d7525 	.word	0x0a0d7525
 80092f4:	00000000 	.word	0x00000000
 80092f8:	6c666552 	.word	0x6c666552
 80092fc:	69746365 	.word	0x69746365
 8009300:	4f206576 	.word	0x4f206576
 8009304:	63697470 	.word	0x63697470
 8009308:	44206c61 	.word	0x44206c61
 800930c:	20617461 	.word	0x20617461
 8009310:	20726f66 	.word	0x20726f66
 8009314:	65532031 	.word	0x65532031
 8009318:	646e6f63 	.word	0x646e6f63
 800931c:	00000a0d 	.word	0x00000a0d
 8009320:	75252069 	.word	0x75252069
 8009324:	2073202c 	.word	0x2073202c
 8009328:	0a0d7525 	.word	0x0a0d7525
 800932c:	00000000 	.word	0x00000000
 8009330:	6a6f7250 	.word	0x6a6f7250
 8009334:	20746365 	.word	0x20746365
 8009338:	302e3276 	.word	0x302e3276
 800933c:	61745320 	.word	0x61745320
 8009340:	64657472 	.word	0x64657472
 8009344:	000a0d2e 	.word	0x000a0d2e
 8009348:	72616548 	.word	0x72616548
 800934c:	61656274 	.word	0x61656274
 8009350:	00000074 	.word	0x00000074
 8009354:	72746c55 	.word	0x72746c55
 8009358:	6e6f7361 	.word	0x6e6f7361
 800935c:	31236369 	.word	0x31236369
 8009360:	00000000 	.word	0x00000000
 8009364:	72746c55 	.word	0x72746c55
 8009368:	6e6f7361 	.word	0x6e6f7361
 800936c:	32236369 	.word	0x32236369
 8009370:	00000000 	.word	0x00000000
 8009374:	72746c55 	.word	0x72746c55
 8009378:	6e6f7361 	.word	0x6e6f7361
 800937c:	72206369 	.word	0x72206369
 8009380:	726f6365 	.word	0x726f6365
 8009384:	00726564 	.word	0x00726564
 8009388:	00434441 	.word	0x00434441
 800938c:	20434441 	.word	0x20434441
 8009390:	6f636572 	.word	0x6f636572
 8009394:	72656472 	.word	0x72656472
 8009398:	00000000 	.word	0x00000000
 800939c:	6c666552 	.word	0x6c666552
 80093a0:	69746365 	.word	0x69746365
 80093a4:	6f206576 	.word	0x6f206576
 80093a8:	63697470 	.word	0x63697470
 80093ac:	73206c61 	.word	0x73206c61
 80093b0:	6f736e65 	.word	0x6f736e65
 80093b4:	00000072 	.word	0x00000072
 80093b8:	6c666552 	.word	0x6c666552
 80093bc:	69746365 	.word	0x69746365
 80093c0:	6f206576 	.word	0x6f206576
 80093c4:	63697470 	.word	0x63697470
 80093c8:	72206c61 	.word	0x72206c61
 80093cc:	726f6365 	.word	0x726f6365
 80093d0:	00726564 	.word	0x00726564
 80093d4:	646e6553 	.word	0x646e6553
 80093d8:	6c6c6120 	.word	0x6c6c6120
 80093dc:	74616420 	.word	0x74616420
 80093e0:	00000061 	.word	0x00000061
 80093e4:	454c4449 	.word	0x454c4449
 80093e8:	00000000 	.word	0x00000000

080093ec <ucExpectedStackBytes.5294>:
 80093ec:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 80093fc:	a5a5a5a5 20726d54 00637653 51726d54     ....Tmr Svc.TmrQ
 800940c:	00000000 00000043                       ....C...

08009414 <zeroes.6763>:
 8009414:	30303030 30303030 30303030 30303030     0000000000000000
 8009424:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 8009434:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8009444:	00000000 33323130 37363534 62613938     ....0123456789ab
 8009454:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 8009464:	00000030                                0...

08009468 <blanks.6762>:
 8009468:	20202020 20202020 20202020 20202020                     
 8009478:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 8009488:	49534f50 00000058 0000002e 00000000     POSIX...........

08009498 <__mprec_tens>:
 8009498:	00000000 3ff00000 00000000 40240000     .......?......$@
 80094a8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 80094b8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 80094c8:	00000000 412e8480 00000000 416312d0     .......A......cA
 80094d8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 80094e8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 80094f8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8009508:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8009518:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8009528:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8009538:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8009548:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8009558:	79d99db4 44ea7843                       ...yCx.D

08009560 <__mprec_bigtens>:
 8009560:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8009570:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8009580:	7f73bf3c 75154fdd                       <.s..O.u

08009588 <p05.5269>:
 8009588:	00000005 00000019 0000007d              ........}...
